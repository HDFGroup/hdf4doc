
<!DOCTYPE HTML>
<html>
<head>
 <meta http-equiv="X-UA-Compatible" content="IE=edge" />
 <meta name="OriginalFile" content="C:\hdf\H4\releases\4.2.12\Doc\hdf4doc\UsrGuide\src\Examples_SD.fm" />
 <meta name="Originator" content="ImportMif" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=100%, initial-scale=1" />
<meta name="generator" content="Adobe FrameMaker 12" />
<title>HDF User’s Guide - 4.2.12</title>
<link href="../../template/Theme1_Standard/main.css" type="text/css" rel="stylesheet" />
<link href="../../template/Theme1_Standard/jqueryui-custom.css" type="text/css" rel="stylesheet" />
 <link rel="stylesheet" href="Examples_SD.css" type="text/css" />
 <link rel="StyleSheet" href="../../Responsive_HTML5_stylesheet.css" type="text/css" /><script type="text/javascript" language="JavaScript">//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]></script><style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadcsh.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/showhidecontrols.js"></script>
<script type="text/javascript" src="../../template/scripts/pageloader.js"></script>
<script type="text/javascript" src="../../template/scripts/toctree.js"></script>
<script type="text/javascript" src="../../template/scripts/toctreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/indextree.js"></script>
<script type="text/javascript" src="../../template/scripts/indextreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylist.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylistloader.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
<script type="text/javascript" src="../../template/scripts/searchfield.js"></script>
<script type="text/javascript" src="../../template/scripts/tabpanels.js"></script>
<script type="text/javascript" >
gTocPageHtml = "{%ICON%}<span  class=\"wTOCTreePageText\">{%LINK_NAME%}</span>";
gTocBookClosedHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocBookOpenHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocUrlHtml = "{%ICON%}<span  class=\"wTOCTreeLinkText\">{%LINK_NAME%}</span>";
gTocPageIconSrc = "../../template/Theme1_Standard/TOCTreePage.png";
gTocPageIconHoverSrc = "../../template/Theme1_Standard/TOCTreePageHover.png";
gTocPageIconSelSrc = "../../template/Theme1_Standard/TOCTreePageSelected.png";
gTocPageIconClass = "wTOCTreePageIcon";
gTocPageIconStyle = "";
gTocBookClosedIconSrc = "../../template/Theme1_Standard/TOCTreeCloseBook.png";
gTocBookClosedIconHoverSrc = "../../template/Theme1_Standard/TOCTreeCloseBookHover.png";
gTocBookClosedIconSelSrc = "../../template/Theme1_Standard/TOCTreeCloseBookSelected.png";
gTocBookClosedIconClass = "wTOCTreeCloseBookIcon";
gTocBookClosedIconStyle = "";
gTocBookOpenIconSrc = "../../template/Theme1_Standard/TOCTreeOpenBook.png";
gTocBookOpenIconHoverSrc = "../../template/Theme1_Standard/TOCTreeOpenBookHover.png";
gTocBookOpenIconSelSrc = "../../template/Theme1_Standard/TOCTreeOpenBookHoverSelected.png";
gTocBookOpenIconClass = "wTOCTreeOpenBookIcon";
gTocBookOpenIconStyle = "";
gTocUrlIconSrc = "../../template/Theme1_Standard/TOCTreeLink.png";
gTocUrlIconHoverSrc = "../../template/Theme1_Standard/TOCTreeLinkHover.png";
gTocUrlIconSelSrc = "../../template/Theme1_Standard/TOCTreeLinkSelected.png";
gTocUrlIconClass = "wTOCTreeLinkIcon";
gTocUrlIconStyle = "";
</script>
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
</script>
<script type="text/javascript" >
gIdxKWHtml = "<span  class=\"wIdxKeywordText\">{%LINK_NAME%}</span>";
	gIdxLinkHtml = "<span  class=\"wIdxLinkText\">{%LINK_NAME%}</span>";
	gIdxCategoryHtml = "<span  class=\"wIdxAlphabetText\">{%LINK_NAME%}</span>";
</script>
<script type="text/javascript" >
gTopicId = "28.0_1";
</script>
<script type="text/javascript" >
gGloTermHtml = "<span  class=\"wGloTermText\">{%LINK_NAME%}</span>";
	gGloDefHtml = "<span  class=\"wGloDefinitionText\">{%LINK_NAME%}</span>";
	gGloCategoryHtml = "<span  class=\"wGloAlphabetText\">{%LINK_NAME%}</span>";
</script>
 <link rel="SHORTCUT ICON" href="../../Responsive HTML5_favicon.png" />
</head>

<body>
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

<div class="floatholder">
	<div class="phone_scrollarea overthrow">
		<div class="header">
			<div class="logo">
				<a href="../UG_Intro/UG_Intro.htm" class="homelink"><img src="../../template/Theme1_Standard/logo.png" alt="Logo" id="wLogoImage" style=" border:none; width:100%; max-width:90px;" border="0" /></a> 
				 
			</div>
			<div class="title">
				<a href="../UG_Intro/UG_Intro.htm" class="homelink"><span>HDF User’s Guide - 4.2.12</span></a> 
				 
			</div>
		</div>
		<div class="sidebar">
			<div data-showin="Always" class="wTabbedPanel" id="tabbedpanel">
				<ul class="wTabGroup" id="tab" data-tabid="tocTabButton" style="margin: 0px;">
					<li class="wTab" id="tocTabButton" data-contentid="tocTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/toc.png" class="normal" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButton" style=" border:none; width:100%; max-width:42px;" border="0" /><img src="../../template/Theme1_Standard/toc_hover.png" class="hover" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButtonHover" style=" border:none; width:100%; max-width:48px;" border="0" /></li>
					<li class="wTab" id="idxTabButton" data-contentid="idxTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/index.png" class="normal" alt="Index" title="Index" id="xmlEditorIDXSidebarButton" style=" border:none; width:100%; max-width:48px;" border="0" /><img src="../../template/Theme1_Standard/index_hover.png" class="hover" alt="Index" title="Index" id="xmlEditorIDXSidebarButtonHover" style=" border:none; width:100%; max-width:48px;" border="0" /></li>
					<li class="wTab" id="gloTabButton" data-contentid="gloTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/glo.png" class="normal" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButton" style=" border:none; width:100%; max-width:48px;" border="0" /><img src="../../template/Theme1_Standard/glo_hover.png" class="hover" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButtonHover" style=" border:none; width:100%; max-width:48px;" border="0" /></li>
				</ul>
				<div class="wTabContentGroup">
					<div id="tocTabPane" class="wTabContent">
						<div id="toc" class="wTOCTree" tabindex="710">
							
							
							
							
						</div>
					</div>
					<div id="idxTabPane" class="wTabContent">
						<div id="idx" class="wIndex">
							<input class="wIdxFilter" id="idxFilterBox" type="text" data-placeholder="Filter Keyword" onkeyup="filterIdx()"></input>
							
							
							
						</div>
					</div>
					<div id="gloTabPane" class="wTabContent">
						<div id="glo" class="wGlossary">
							<input class="wGloFilter" id="gloFilterBox" type="text" data-placeholder="Filter Term" onkeyup="filterGlo()"></input>
							
							
							
						</div>
					</div>
				</div>
			</div>
			<div class="closebutton buttonOpened">
				&#160; 
			</div>
		</div>
		<div class="content">
			<div class="desktop_functionholder">
				<div class="searchholder">
					<div class="wSearchField">
						<input id="searchBox" class="wSearchField" type="search" data-placeholder="-Search-" onkeydown="searchHelp(event, 'searchBox')" data-search="true" /><a class="wSearchLink" onclick="searchHelp(null, 'searchBox')" href="#"><img src="../../template/Theme1_Standard/Search.png" alt="" id="xmlEditwSearchLink" class="wSearchLink" border="0" style="width:100%; max-width:28px" /></a> 
						 
					</div>
				</div>
				<div class="brsNext">
					<a id="browseSeqNext" class="wBSNextButton" href="../UG_Appndx/UG_Appndx.htm"><img alt="" src="../../template/Theme1_Standard/BSNext.png" class="wBSNextButton normal" id="xmlEditorBSNextButton" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSNext_hover.png" class="wBSNextButton hover" id="xmlEditorBSNextButtonHover" border="0" style="width:100%; max-width:48px" /></a> 
					 
				</div>
				<div class="print">
					<a href="javascript:window.print()" class="wPrintButton"><img src="../../template/Theme1_Standard/Print.png" alt="" class="wPrintButton normal" id="xmlEditorPrintButton" border="0" style="width:100%; max-width:48px" /><img src="../../template/Theme1_Standard/Print_hover.png" alt="" class="wPrintButton hover" id="xmlEditorPrintButtonHover" border="0" style="width:100%; max-width:48px" /></a> 
				</div>
				<div class="brsBack">
					<a id="browseSeqBack" class="wBSBackButton" href="../Example_R8/Example_R8.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton normal" id="xmlEditorBSBackButton" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSBack_hover.png" class="wBSBackButton hover" id="xmlEditorBSBackButtonHover" border="0" style="width:100%; max-width:56px" /></a> 
					 
				</div>
			</div>
			<div class="contentholder">
				<div class="mobile_browseholder">
					<div class="brsBack">
						<a id="browseSeqBack0" class="wBSBackButton" href="../Example_R8/Example_R8.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton" border="0" style="width:100%; max-width:48px" /></a> 
					</div>
					<div class="brsNext">
						<a id="browseSeqNext0" class="wBSNextButton" href="../UG_Appndx/UG_Appndx.htm"><img alt="" src="../../template/Theme1_Standard/BSNext.png" class="wBSNextButton" border="0" style="width:100%; max-width:48px" /></a> 
					</div>
				</div>
				<a name="content_top_placeholder"></a> 
				<div class="wTopic" id="rh_default_topic_placeholder_id">

 <p class="FM_ExamplePage"><a name="XREF_20548_create_annotation_c"></a>create_sds.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot; </p>
 <p class="FM_ExampleCode">#define SDS_NAME &#160;&#160;&#160;&#160;&#160;&quot;SDStemplate&quot; </p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;16</p>
 <p class="FM_ExampleCode">#define RANK &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2 &#160;/* Number of dimensions of the SDS */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id; &#160;&#160;&#160;&#160;/* SD interface and data set identifiers */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 dim_sizes[2]; &#160;&#160;&#160;&#160;&#160;/* sizes of the SDS dimensions */</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status returned by some routines; has value</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SUCCEED or FAIL */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_CREATE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the dimensions of the array to be created.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Create the data set with the name defined in SDS_NAME. Note that </p>
 <p class="FM_ExampleCode"> &#160;&#160;* DFNT_INT32 indicates that the SDS data is of type int32. Refer to</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Table 2E for definitions of other types. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_33922_create_annotation_f"></a>create_sds.f</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;program &#160;create_SDS </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH, RANK</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME = ’SDStemplate’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 16,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK &#160;&#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_CREATE, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfcreate, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, dim_sizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_CREATE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define dimensions of the array to be created.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the array with the name defined in SDS_NAME.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Note that DFNT_INT32 indicates that the SDS data is of type</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;integer. Refer to Tables 2E and 2I for the definition of other types. &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_11770_write_to_sds_c"></a>write_to_sds.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;16</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 start[2], edges[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 data[Y_LENGTH][X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Data set data initialization.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (j = 0; j &lt; Y_LENGTH; j++) {</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;for (i = 0; i &lt; X_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data[j][i] = (i + j) + 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_WRITE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Attach to the first data set.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the location and size of the data to be written to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write the stored data to the data set. The third argument is set to NULL</p>
 <p class="FM_ExampleCode"> &#160;&#160;* to specify contiguous data elements. The last argument must</p>
 <p class="FM_ExampleCode"> &#160;&#160;* be explicitly cast to a generic pointer since SDwritedata is designed</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* to write generic data. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_42067_write_to_sds_f"></a>write_to_sds.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;write_data</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH, RANK</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME = ’SDStemplate’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 16,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK &#160;&#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_WRITE, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_WRITE = 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfselect, sfwdata, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), edges(2), stride(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i, j</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer data(X_LENGTH, Y_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Data set data initialization. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 20 j = 1, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 i = 1, X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data(i, j) = i + j - 1</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_WRITE)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Attach to the first data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the location and size of the data to be written</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;to the data set. Note that setting values of the array stride to 1</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;specifies the contiguous writing of data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the stored data to the data set named in SDS_NAME.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Note that the routine sfwdata is used instead of sfwcdata </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;to write the numeric data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_34945_write_slab_c"></a>write_slab.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SLABS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define SDS_NAME &#160;&#160;&#160;&#160;&#160;&quot;FilledBySlabs&quot;</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;4</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define Z_LENGTH &#160;&#160;&#160;&#160;&#160;6</p>
 <p class="FM_ExampleCode">#define RANK &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 &#160;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 dim_sizes[3], start[3], edges[3];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 data[Z_LENGTH][Y_LENGTH][X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 zx_data[Z_LENGTH][X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i, j, k;</p>
 <p class="FM_ExampleCode">&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Data initialization. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (k = 0; k &lt; Z_LENGTH; k++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; Y_LENGTH; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i = 0; i &lt; X_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data[k][j][i] = (i + 1) + (j + 1) + (k + 1);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_CREATE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define dimensions of the array to be created.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[0] = Z_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[1] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[2] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the array with the name defined in SDS_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Set the parameters start and edges to write &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;* a 6x4 element slab of data to the data set; note</p>
 <p class="FM_ExampleCode"> &#160;&#160;* that edges[1] is set to 1 to define a 2-dimensional slab</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* parallel to the ZX plane. &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;* start[1] (slab position in the array) is initialized inside</p>
 <p class="FM_ExampleCode"> &#160;&#160;* the for loop.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = Z_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[2] = X_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = start[2] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (j = 0; j &lt; Y_LENGTH; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;start[1] = j;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* Initialize zx_data buffer (data slab).</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;for ( k = 0; k &lt; Z_LENGTH; k++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for ( i = 0; i &lt; X_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zx_data[k][i] = data[k][j][i];</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Write the data slab into the SDS array defined in SDS_NAME. </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Note that the 3rd parameter is NULL which indicates that consecutive</p>
 <p class="FM_ExampleCode"> &#160;&#160;* slabs in the Y direction are written.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)zx_data); </p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_23700_write_slab_f"></a>write_slab.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;write_slab</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*9 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*13 SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH, Z_LENGTH, RANK</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SLABS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME = ’FilledBySlabs’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Z_LENGTH = 6,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK &#160;&#160;&#160;&#160;= 3)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_CREATE, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfcreate, sfwdata, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer dim_sizes(3), start(3), edges(3), stride(3)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i, j, k, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer data(X_LENGTH, Y_LENGTH, Z_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer xz_data(X_LENGTH, Z_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Data initialization.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 30 k = 1, Z_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 20 j = 1, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 i = 1, X_LENGTH</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data(i, j, k) = i + j + k </p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">30 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_CREATE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define dimensions of the array to be created. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes(1) = X_LENGTH &#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes(2) = Y_LENGTH &#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes(3) = Z_LENGTH &#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the data set with the name defined in SDS_NAME. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set the parameters start and edges to write </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;a 4x6 element slab of data to the data set;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;note that edges(2) is set to 1 to define a 2 dimensional slab</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;parallel to the XZ plane;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;start(2) (slab position in the array) is initialized inside the</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;for loop.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(3) = Z_LENGTH</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 0 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(3) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(3) = 1</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 60 j = 1, Y_LENGTH</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;start(2) = j - 1 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the buffer xz_data (data slab).</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;do 50 k = 1, Z_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;do 40 i = 1, X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xz_data(i, k) = data(i, j, k)</p>
 <p class="FM_ExampleCode">40 &#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">50 &#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the data slab into SDS array defined in SDS_NAME. </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Note that the elements of array stride are set to 1 to</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;specify that the consecutive slabs in the Y direction are written.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, xz_data)</p>
 <p class="FM_ExampleCode">60 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_32731_alter_sds_values_c"></a>alter_sds_values.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 start[2], edges[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 new_data[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize the SD interface with write access.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_WRITE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set up the start and edge parameters to write new element values</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* into 10th row, 2nd column place, and 11th row, 2nd column place. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 9; &#160;&#160;&#160;&#160;/* starting at 10th row &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 1; &#160;&#160;&#160;&#160;/* starting at 2nd column */</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = 2; &#160;&#160;&#160;&#160;/* rows 10th and 11th &#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = 1; &#160;&#160;&#160;&#160;/* column 2nd only &#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize buffer with the new values to be written.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;new_data[0] = new_data[1] = 1000; </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Write the new values. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)new_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_22515_alter_sds_values_f"></a>alter_sds_values.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;alter_data</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_WRITE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFACC_WRITE = 2)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfselect, sfwdata, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), edges(2), stride(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer new_data(2) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_WRITE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first data set.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the start, edge, and stride parameters to write </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;two elements into 2nd row, 10th column and 11th column places.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Specify 2nd row.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 1 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Specify 10th column.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 9 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = 1 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Two elements are written along 2nd row.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(2) = 2 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the new values to be written.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;new_data(1) = 1000</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;new_data(2) = 1000</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the new values. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, new_data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_14647_unlimited_sds_c"></a>unlimited_sds.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDSUNLIMITED.hdf&quot;</p>
 <p class="FM_ExampleCode">#define SDS_NAME &#160;&#160;&#160;&#160;&#160;&quot;AppendableData&quot;</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;10</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;10</p>
 <p class="FM_ExampleCode">#define RANK &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 dim_sizes[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 data[Y_LENGTH][X_LENGTH], append_data[X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 start[2], edges[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Data initialization.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;for (j = 0; j &lt; Y_LENGTH; j++) </p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;for (i = 0; i &lt; X_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data[j][i] = (i + 1) + (j + 1);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_CREATE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Define dimensions of the array. Make the first dimension </p>
 <p class="FM_ExampleCode"> &#160;&#160;* appendable by defining its length to be unlimited.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[0] = SD_UNLIMITED;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the array data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Define the location and the size of the data to be written </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* to the data set. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Write the data. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Terminate access to the array data set, terminate access </p>
 <p class="FM_ExampleCode"> &#160;&#160;* to the SD interface, and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Store the array values to be appended to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; X_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;append_data[i] = 1000 + i;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Reopen the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_WRITE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Select the first data set. </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;sds_index = 0; </p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Check if selected SDS is unlimited. If it is not, then terminate access</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* to the SD interface and close the file. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;if ( SDisrecord (sds_id) ) </p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Define the location of the append to start at the first column </p>
 <p class="FM_ExampleCode"> &#160;&#160;* of the 11th row of the data set and to stop at the end of the</p>
 <p class="FM_ExampleCode"> &#160;&#160;* eleventh row.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Append data to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)append_data);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_25578_unlimited_sds_f"></a>unlimited_sds.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program append_sds</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*16 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*14 &#160;SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH, RANK</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;&#160;(FILE_NAME = ’SDSUNLIMITED.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME = ’AppendableData’,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 10, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 10,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK &#160;&#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;DFACC_CREATE, DFACC_WRITE, SD_UNLIMITED,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;&#160;(DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFACC_WRITE &#160;= 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SD_UNLIMITED = 0,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = &#160;&#160;24)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer sfstart, sfcreate, sfwdata, sfselect </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer dim_sizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), edges(2), stride(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i, j</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer data (X_LENGTH, Y_LENGTH), append_data(X_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Data initialization.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 20 j = 1, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 i = 1, X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data(i, j) = i + j</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the file and initialize the SD interface. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_CREATE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define dimensions of the array. Make the</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;last dimension appendable by defining its length as unlimited.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(2) = SD_UNLIMITED</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the array data set. </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the location and the size of the data to be written</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;to the data set. Note that the elements of array stride are</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;set to 1 for contiguous writing. &#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set, terminate access</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;to the SD interface, and close the file. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Store the array values to be appended to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 30 i = 1, X_LENGTH</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append_data(i) = 1000 + i - 1 </p>
 <p class="FM_ExampleCode">30 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Reopen the file and initialize the SD. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_WRITE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;sds_index = 0 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the location of the append to start at the 11th </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;column of the 1st row and to stop at the end of the 10th row.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Append the data to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, append_data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_42240_compress_sds_c"></a>compress_sds.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&#160;&quot;SDScompressed.hdf&quot;</p>
 <p class="FM_ExampleCode">#define SDS_NAME &#160;&#160;&#160;&#160;&#160;&#160;&quot;SDSgzip&quot;</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;16</p>
 <p class="FM_ExampleCode">#define RANK &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;&#160;&#160;&#160;&#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;comp_type; &#160;&#160;&#160;/* Compression flag */</p>
 <p class="FM_ExampleCode"> &#160;&#160;comp_info c_info; &#160;&#160;/* Compression structure */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;start[2], edges[2], dim_sizes[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;data[Y_LENGTH][X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;&#160;&#160;&#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Buffer array data and define array dimensions.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;for (j = 0; j &lt; Y_LENGTH; j++) </p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for (i = 0; i &lt; X_LENGTH; i++)</p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>data[j][i] = (i + j) + 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_CREATE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Create the data set with the name defined in SDS_NAME. </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Ininitialize compression structure element and compression</p>
 <p class="FM_ExampleCode"> &#160;&#160;* flag for GZIP compression and call SDsetcompress.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;To use the Skipping Huffman compression method, initialize</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_type = COMP_CODE_SKPHUFF</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_info.skphuff.skp_size = value</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;To use the RLE compression method, initialize</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_type = COMP_CODE_RLE</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;No structure element needs to be initialized.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;comp_type = COMP_CODE_DEFLATE;</p>
 <p class="FM_ExampleCode"> &#160;&#160;c_info.deflate.level = 6;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = SDsetcompress (sds_id, comp_type, &amp;c_info); </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the location and size of the data set</p>
 <p class="FM_ExampleCode"> &#160;&#160;* to be written to the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Write the stored data to the data set. The last argument </p>
 <p class="FM_ExampleCode"> &#160;&#160;* must be explicitly cast to a generic pointer since SDwritedata</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* is designed to write generic data. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_38244_compress_sds_f"></a>compress_sds.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;write_compressed_data</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*17 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;&#160;SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH, RANK</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;&#160;(FILE_NAME = ’SDScompressed.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME = ’SDSgzip’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 16,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK &#160;&#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;DFACC_CREATE, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;&#160;(DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;COMP_CODE_DEFLATE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;&#160;(COMP_CODE_DEFLATE = 4)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;DEFLATE_LEVEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;&#160;(DEFLATE_LEVEL = 6)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use Skipping Huffman compression method, declare </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;integer &#160;&#160;COMP_CODE_SKPHUFF</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;parameter(COMP_CODE_SKPHUFF = 3) </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use RLE compression method, declare</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;integer &#160;&#160;COMP_CODE_RLE</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;parameter(COMP_CODE_RLE = 1)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfcreate, sfwdata, sfendacc, sfend,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;sfscompress</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;sd_id, sds_id, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;start(2), edges(2), stride(2), dim_sizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;comp_type</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;comp_prm(1)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;data(X_LENGTH, Y_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;i, j</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Buffer array data and define array dimensions. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 20 j = 1, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 i = 1, X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data(i, j) = i + j - 1</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_CREATE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the data set with the name SDS_NAME. &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize compression parameter (deflate level)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and call sfscompress function</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;For Skipping Huffman compression, comp_prm(1) should be set</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;to skipping sizes value (skp_size).</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;comp_type &#160;&#160;= COMP_CODE_DEFLATE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;comp_prm(1) = deflate_level</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status &#160;&#160;&#160;&#160;&#160;= sfscompress(sds_id, comp_type, comp_prm(1))</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the location and size of the data that will be written to</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the stored data to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the &#160;data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_36215_mv_sds_to_external"></a>mv_sds_to_external.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define EXT_FILE_NAME &quot;ExternalSDS&quot;</p>
 <p class="FM_ExampleCode">#define OFFSET &#160;&#160;&#160;&#160;&#160;&#160;&#160;24</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index, offset;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_WRITE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;sds_index = 0; &#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create a file with the name EXT_FILE_NAME and move the data set</p>
 <p class="FM_ExampleCode"> &#160;&#160;* values into it, starting at byte location OFFSET.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDsetexternalfile (sds_id, EXT_FILE_NAME, OFFSET);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set, SD interface, and file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_30142_mv_sds_to_external"></a>mv_sds_to_external.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;write_extfile</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;implicit none </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 EXT_FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;OFFSET</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_WRITE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME &#160;&#160;&#160;&#160;&#160;= ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EXT_FILE_NAME &#160;= ’ExternalSDS’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;OFFSET &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= 24,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFACC_WRITE &#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfselect, sfsextf, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, offset</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the HDF file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_WRITE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create a file with the name EXT_FILE_NAME and move the data set</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;into it, starting at byte location OFFSET.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfsextf(sds_id, EXT_FILE_NAME, OFFSET)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_23399_read_from_sds_c"></a>read_from_sds.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;16</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 start[2], edges[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 data[Y_LENGTH][X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file for reading and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_READ);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first data set.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Set elements of array start to 0, elements of array edges </p>
 <p class="FM_ExampleCode"> &#160;&#160;* to SDS dimensions,and use NULL for the argument stride in SDreaddata</p>
 <p class="FM_ExampleCode"> &#160;&#160;* to read the entire data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read entire data into data array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Print 10th row; the following numbers should be displayed.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10 1000 12 13 14</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (j = 0; j &lt; X_LENGTH; j++) printf (&quot;%d &quot;, data[9][j]);</p>
 <p class="FM_ExampleCode">   printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_39773_read_from_sds_f"></a>read_from_sds.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;read_data</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME &#160;= ’SDS.hdf’,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 5, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 16)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_READ, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_READ = 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfselect, sfrdata, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), edges(2), stride(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer data(X_LENGTH, Y_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer j</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_READ)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set elements of the array start to 0, elements of the array edges to </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;SDS dimensions, and elements of the array stride to 1 to read the</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;entire data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read entire data into data array. Note that sfrdata is used</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;to read the numeric data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrdata(sds_id, start, stride, edges, data)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print 10th column; the following numbers are displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10 1000 12 13 14</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) (data(j,10), j = 1, X_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_19077_read_subsets_c"></a>read_subsets.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define SUB1_LENGTH &#160;&#160;5</p>
 <p class="FM_ExampleCode">#define SUB2_LENGTH &#160;&#160;4</p>
 <p class="FM_ExampleCode">#define SUB3_LENGTH1 &#160;2 </p>
 <p class="FM_ExampleCode">#define SUB3_LENGTH2 &#160;3 </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 start[2], edges[2], stride[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sub1_data[SUB1_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sub2_data[SUB2_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sub3_data[SUB3_LENGTH2][SUB3_LENGTH1];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file for reading and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_READ);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first data set.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reading the first subset.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set elements of start, edges, and stride arrays to read</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* every 3rd element in the 2nd column starting at 4th row. &#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 3; &#160;&#160;/* 4th row */</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 1; &#160;&#160;/* 2nd column */</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = SUB1_LENGTH; /* SUB1_LENGTH elements are read along 2nd column*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;stride[0] = 3; &#160;/* every 3rd element is read along 2nd column */</p>
 <p class="FM_ExampleCode"> &#160;&#160;stride[1] = 1;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read the data from the file into sub1_data array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreaddata (sds_id, start, stride, edges, (VOIDP)sub1_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Print what we have just read; the following numbers should be displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5 8 1000 14 17 &#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (j = 0; j &lt; SUB1_LENGTH; j++) printf (&quot;%d &quot;, sub1_data[j]);</p>
 <p class="FM_ExampleCode">   printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reading the second subset.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set elements of start and edges arrays to read</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* first 4 elements of the 10th row. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 9; &#160;/* 10th row &#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 0; &#160;/* 1st column */</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;edges[0] = 1; </p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = SUB2_LENGTH; /* SUB2_LENGTH elements are read along 10th row */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read data from the file into sub2_data array. Note that the third</p>
 <p class="FM_ExampleCode"> &#160;&#160;* parameter is set to NULL for contiguous reading.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)sub2_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Print what we have just read; the following numbers should be displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10 1000 12 13 </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (j = 0; j &lt; SUB2_LENGTH; j++) printf (&quot;%d &quot;, sub2_data[j]);</p>
 <p class="FM_ExampleCode">   printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reading the third subset.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set elements of the arrays start, edges, and stride to read</p>
 <p class="FM_ExampleCode"> &#160;&#160;* every 6th element in the column and 4th element in the row</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* starting at 1st column, 3d row. &#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 2; &#160;/* 3d row */</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 0; &#160;/* 1st column */</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = SUB3_LENGTH2; /* SUB3_LENGTH2 elements are read along</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;each column */</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;edges[1] = SUB3_LENGTH1; /* SUB3_LENGTH1 elements are read along &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;each row */</p>
 <p class="FM_ExampleCode"> &#160;&#160;stride[0] = 6; /* read every 6th element along each column */</p>
 <p class="FM_ExampleCode"> &#160;&#160;stride[1] = 4; /* read every 4th element along each row */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read the data from the file into sub3_data array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreaddata (sds_id, start, stride, edges, (VOIDP)sub3_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Print what we have just read; the following numbers should be displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 7 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;9 13 &#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15 19 </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for ( j = 0; j &lt; SUB3_LENGTH2; j++ ) {</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;for (i = 0; i &lt; SUB3_LENGTH1; i++) printf (&quot;%d &quot;, sub3_data[j][i]);</p>
 <p class="FM_ExampleCode">       printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_34795_read_subsets_f"></a>read_subsets.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;read_subsets</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME &#160;= ’SDS.hdf’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_READ, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_READ = 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;SUB1_LENGTH, SUB2_LENGTH, SUB3_LENGTH1,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SUB3_LENGTH2 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(SUB1_LENGTH &#160;= 5,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SUB2_LENGTH &#160;= 4, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SUB3_LENGTH1 = 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SUB3_LENGTH2 = 3)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfselect, sfrdata, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), edges(2), stride(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sub1_data(SUB1_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sub2_data(SUB2_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sub3_data(SUB3_LENGTH1,SUB3_LENGTH2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i, j</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_READ)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id =sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reading the first subset.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set elements of start, stride, and edges arrays to read </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;every 3d element in in the 2nd row starting in the 4th column. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 1 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 3 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = 1 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = SUB1_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;stride(2) = 3 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the data from sub1_data array. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrdata(sds_id, start, stride, edges, sub1_data)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print what we have just read, the following numbers should be displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5 8 1000 14 17 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) (sub1_data(j), j = 1, SUB1_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reading the second subset.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set elements of start, stride, and edges arrays to read </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;first 4 elements of 10th column. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 0 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 9 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = SUB2_LENGTH </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(2) = 1 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;stride(2) = 1 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the data into sub2_data array. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrdata(sds_id, start, stride, edges, sub2_data)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print what we have just read; the following numbers should be displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10 1000 12 13 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) (sub2_data(j), j = 1, SUB2_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reading the third subset.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set elements of start, stride and edges arrays to read </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;every 6th element in the row and every 4th element in the column</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;starting at 1st row, 3rd column. &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 0 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = SUB3_LENGTH1 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(2) = SUB3_LENGTH2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;stride(1) = 4 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;stride(2) = 6 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the data from the file into sub3_data array. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrdata(sds_id, start, stride, edges, sub3_data)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print what we have just read; the following numbers should be displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 9 15</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7 13 19 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 50 i = 1, SUB3_LENGTH1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) (sub3_data(i,j), j = 1, SUB3_LENGTH2)</p>
 <p class="FM_ExampleCode">50 &#160;&#160;&#160;continue &#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_16273_get_info_c"></a>get_info.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 n_datasets, n_file_attrs, index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 dim_sizes[MAX_VAR_DIMS];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 rank, data_type, n_attrs;</p>
 <p class="FM_ExampleCode"> &#160;&#160;char &#160;name[MAX_NC_NAME];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_READ);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Determine the number of data sets in the file and the number</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* of file attributes. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDfileinfo (sd_id, &amp;n_datasets, &amp;n_file_attrs);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Access every data set and print its name, rank, dimension sizes,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* data type, and number of attributes. </p>
 <p class="FM_ExampleCode"> &#160;&#160;* The following information should be displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name = SDStemplate</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rank = 2</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension sizes are : 16 &#160;5 &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data type is &#160;24</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of attributes is &#160;0</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (index = 0; index &lt; n_datasets; index++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;sds_id = SDselect (sd_id, index);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = SDgetinfo (sds_id, name, &amp;rank, dim_sizes, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;data_type, &amp;n_attrs);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">       printf (&quot;name = %s\n&quot;, name);</p>
 <p class="FM_ExampleCode">       printf (&quot;rank = %d\n&quot;, rank);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;printf (&quot;dimension sizes are : &quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;for (i=0; i&lt; rank; i++) printf (&quot;%d &#160;&quot;, dim_sizes[i]);</p>
 <p class="FM_ExampleCode">       printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">       printf (&quot;data type is  %d\n&quot;, data_type);</p>
 <p class="FM_ExampleCode">       printf (&quot;number of attributes is  %d\n&quot;, n_attrs);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_32051_get_info_f"></a>get_info.f</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;program get_data_set_info </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDS.hdf’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_READ, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_READ = 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;MAX_NC_NAME, MAX_VAR_DIMS</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(MAX_NC_NAME &#160;= 256,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MAX_VAR_DIMS = 32)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sffinfo, sfselect, sfginfo</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer n_datasets, n_file_attrs, index</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status, n_attrs</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer rank, data_type</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer dim_sizes(MAX_VAR_DIMS)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character name *(MAX_NC_NAME)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_READ)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Determine the number of data sets in the file and the number of </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;file attributes. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sffinfo(sd_id, n_datasets, n_file_attrs)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Access every data set in the file and print its name, rank,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;dimension sizes, data type, and number of attributes.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;The following information should be displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name = SDStemplate &#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rank = &#160;&#160;2</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension sizes are : &#160;&#160;5 &#160;16</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data type is &#160;&#160;24</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of attributes is &#160;&#160;0</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 10 index = 0, n_datasets - 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, index)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfginfo(sds_id, name, rank, dim_sizes, data_type, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_attrs)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &#160;&quot;name = &quot;, name(1:15)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &#160;&quot;rank = &quot;, rank</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &#160;&quot;dimension sizes are : &quot;, (dim_sizes(i), i=1, rank)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &#160;&quot;data type is &quot;, data_type</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &#160;&quot;number of attributes is &quot;, n_attrs &#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the current data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_30430_find_sds_by_name_c"></a>find_sds_by_name.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define SDS_NAME &#160;&#160;&#160;&#160;&#160;&quot;SDStemplate&quot;</p>
 <p class="FM_ExampleCode">#define WRONG_NAME &#160;&#160;&#160;&quot;WrongName&quot;</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;16</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 start[2], edges[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 data[Y_LENGTH][X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file for reading and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_READ);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Find index of the data set with the name specified in WRONG_NAME.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Error condition occurs, since the data set with that name does not exist </p>
 <p class="FM_ExampleCode"> &#160;&#160;* in the file.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = SDnametoindex (sd_id, WRONG_NAME);</p>
 <p class="FM_ExampleCode"> &#160;&#160;if (sds_index == FAIL)</p>
 <p class="FM_ExampleCode">   printf (&quot;Data set with the name \&quot;WrongName\&quot; does not exist\n&quot;); </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Find index of the data set with the name specified in SDS_NAME and use </p>
 <p class="FM_ExampleCode"> &#160;&#160;* the index to select the data set.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = SDnametoindex (sd_id, SDS_NAME);</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Set elements of the array start to 0, elements of the array edges to </p>
 <p class="FM_ExampleCode"> &#160;&#160;* SDS dimensions, and use NULL for stride argument in SDreaddata to read</p>
 <p class="FM_ExampleCode"> &#160;&#160;* the entire data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read the entire data into the buffer named data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Print 10th row; the following numbers should be displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10 1000 12 13 14</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (j = 0; j &lt; X_LENGTH; j++) printf (&quot;%d &quot;, data[9][j]);</p>
 <p class="FM_ExampleCode">   printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_22873_find_sds_by_name_f"></a>find_sds_by_name.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;locate_by_name</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*9 &#160;WRONG_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME &#160;= ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME &#160;&#160;= ’SDStemplate’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;WRONG_NAME = ’WrongName’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 16)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_READ, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_READ = 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfn2index, sfselect, sfrdata, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), edges(2), stride(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer data(X_LENGTH, Y_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer j</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_READ)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Find index of the data set with the name specified in WRONG_NAME. </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Error condition occurs, since a data set with this name </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;does not exist in the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = sfn2index(sd_id, WRONG_NAME)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if (sds_index .eq. -1) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;Data set with the name &quot;, WRONG_NAME,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; does not exist&quot; &#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Find index of the data set with the name specified in SDS_NAME &#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and use the index to attach to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = sfn2index(sd_id, SDS_NAME)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id &#160;&#160;&#160;= sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set elements of start array to 0, elements of edges array </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;to SDS dimensions, and elements of stride array to 1 to read entire data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read entire data into array named data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrdata(sds_id, start, stride, edges, data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print 10th column; the following numbers should be displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10 1000 12 13 14</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) (data(j,10), j = 1, X_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_26351_set_get_dim_info_c"></a>set_get_dim_info.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define SDS_NAME &#160;&#160;&#160;&#160;&#160;&quot;SDStemplate&quot;</p>
 <p class="FM_ExampleCode">#define DIM_NAME_X &#160;&#160;&#160;&#160;&quot;X_Axis&quot;</p>
 <p class="FM_ExampleCode">#define DIM_NAME_Y &#160;&#160;&#160;&#160;&quot;Y_Axis&quot;</p>
 <p class="FM_ExampleCode">#define NAME_LENGTH &#160;&#160;6</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;16</p>
 <p class="FM_ExampleCode">#define RANK &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;&#160;&#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;dim_index, dim_id;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;n_values, data_type, n_attrs;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 &#160;&#160;data_X[X_LENGTH]; &#160;&#160;&#160;/* X dimension dimension scale */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 &#160;&#160;data_X_out[X_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;float64 data_Y[Y_LENGTH]; &#160;/* Y dimension dimension scale */</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;float64 data_Y_out[Y_LENGTH]; </p>
 <p class="FM_ExampleCode"> &#160;&#160;char &#160;&#160;&#160;dim_name[NAME_LENGTH];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;&#160;&#160;i, j, nrow;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize dimension scales.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i=0; i &lt; X_LENGTH; i++) data_X[i] = i;</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i=0; i &lt; Y_LENGTH; i++) data_Y[i] = 0.1 * i;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_WRITE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get the index of the data set specified in SDS_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = SDnametoindex (sd_id, SDS_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the data set corresponding to the returned index.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/* For each dimension of the data set specified in SDS_NAME,</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;get its dimension identifier and set dimension name</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;and dimension scale. Note that data type of dimension scale </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;can be different between dimensions and can be different from </p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;SDS data type.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;for (dim_index = 0; dim_index &lt; RANK; dim_index++) </p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* Select the dimension at position dim_index.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;dim_id = SDgetdimid (sds_id, dim_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* Assign name and dimension scale to selected dimension.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;switch (dim_index)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>case 0:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = SDsetdimname (dim_id, DIM_NAME_Y);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_values = Y_LENGTH;</p>
 <p class="FM_ExampleCode">                status = SDsetdimscale (dim_id,n_values,DFNT_FLOAT64, \</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)data_Y); &#160;</p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>break;</p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>case 1:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = SDsetdimname (dim_id, DIM_NAME_X);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_values = X_LENGTH; </p>
 <p class="FM_ExampleCode">                status = SDsetdimscale (dim_id,n_values,DFNT_INT16, \</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)data_X); &#160;</p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>break;</p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>default: break;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* Get and display info about the dimension and its scale values.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* The following information is displayed:</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Information about 1 dimension:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension name is Y_Axis</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of scale values is 16</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension scale data type is float64</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of dimension attributes is 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scale values are :</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0.000 &#160;&#160;&#160;0.100 &#160;&#160;&#160;0.200 &#160;&#160;&#160;0.300 &#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0.400 &#160;&#160;&#160;0.500 &#160;&#160;&#160;0.600 &#160;&#160;&#160;0.700 &#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0.800 &#160;&#160;&#160;0.900 &#160;&#160;&#160;1.000 &#160;&#160;&#160;1.100 &#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1.200 &#160;&#160;&#160;1.300 &#160;&#160;&#160;1.400 &#160;&#160;&#160;1.500 &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Information about 2 dimension:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension name is X_Axis</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of scale values is 5</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension scale data type is int16</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of dimension attributes is 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scale values are :</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 &#160;1 &#160;2 &#160;3 &#160;4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;status = SDdiminfo (dim_id, dim_name, &amp;n_values, &amp;data_type, &amp;n_attrs);</p>
 <p class="FM_ExampleCode">       printf (&quot;Information about %d dimension:\n&quot;, dim_index+1);</p>
 <p class="FM_ExampleCode">       printf (&quot;dimension name is %s\n&quot;, dim_name);</p>
 <p class="FM_ExampleCode">       printf (&quot;number of scale values is %d\n&quot;, n_values);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;if( data_type == DFNT_FLOAT64)</p>
 <p class="FM_ExampleCode">       printf (&quot;dimension scale data type is float64\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;if( data_type == DFNT_INT16)</p>
 <p class="FM_ExampleCode">       printf (&quot;dimension scale data type is int16\n&quot;);</p>
 <p class="FM_ExampleCode">       printf (&quot;number of dimension attributes is %d\n&quot;, n_attrs);</p>
 <p class="FM_ExampleCode">       printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">       printf (&quot;Scale values are :\n&quot;);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch (dim_index) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case 0: &#160;status = SDgetdimscale (dim_id, (VOIDP)data_Y_out);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nrow = 4;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i=0; i&lt;n_values/nrow; i++ )</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (j=0; j&lt;nrow; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf (&quot; &#160;%-6.3f&quot;, data_Y_out[i*nrow + j]);</p>
 <p class="FM_ExampleCode">                          printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break; </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case 1: &#160;status = SDgetdimscale (dim_id, (VOIDP)data_X_out);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i=0; i&lt;n_values; i++) printf (&quot; &#160;%d&quot;, data_X_out[i]);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break; </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;default: break;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">        printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;} /*for dim_index */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_22801_set_get_dim_info_f"></a>set_get_dim_info.f</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;program &#160;dimension_info </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*6 &#160;DIM_NAME_X</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*6 &#160;DIM_NAME_Y</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH, Y_LENGTH, RANK</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME &#160;= ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME &#160;&#160;= ’SDStemplate’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DIM_NAME_X &#160;= ’X_Axis’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DIM_NAME_Y &#160;= ’Y_Axis’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH = 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH = 16,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK &#160;&#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_WRITE, DFNT_INT16, DFNT_FLOAT64</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_WRITE &#160;&#160;= 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT16 &#160;&#160;= 22,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_FLOAT64 = 6)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfn2index, sfdimid, sfgdinfo</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfsdscale, sfgdscale, sfsdmname, sfendacc</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfend, sfselect</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer dim_index, dim_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer n_values, n_attrs, data_type</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 data_X(X_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 data_X_out(X_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;real*8 &#160;&#160;&#160;data_Y(Y_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;real*8 &#160;&#160;&#160;data_Y_out(Y_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*6 dim_name</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;i</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize dimension scales.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;do 10 i = 1, X_LENGTH &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_X(i) = i - 1</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;do 20 i = 1, Y_LENGTH &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_Y(i) = 0.1 * (i - 1)</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize SD interface.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_WRITE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get the index of the data set with the name specified in SDS_NAME. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = sfn2index(sd_id, SDS_NAME)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the data set corresponding to the returned index.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;For each dimension of the data set,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;get its dimension identifier and set dimension name</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and dimension scales. Note that data type of dimension scale can</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;be different between dimensions and can be different from SDS data type.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;do 30 dim_index = 0, RANK - 1 </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;Select the dimension at position dim_index.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_id = sfdimid(sds_id, dim_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;Assign name and dimension scale to the dimension. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (dim_index .eq. 0) then</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfsdmname(dim_id, DIM_NAME_X) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_values = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfsdscale(dim_id, n_values, DFNT_INT16, data_X)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end if</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (dim_index .eq. 1) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfsdmname(dim_id, DIM_NAME_Y)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_values = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfsdscale(dim_id, n_values, DFNT_FLOAT64, data_Y)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end if</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;Get and display information about dimension and its scale values.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;The following information is displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Information about 1 dimension :</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension name is X_Axis</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of scale values is &#160;5</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension scale data type is int16</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of dimension attributes is &#160;&#160;0</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scale values are:</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 &#160;1 &#160;2 &#160;3 &#160;4</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Information about 2 dimension :</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension name is Y_Axis</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of scale values is &#160;16</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension scale data type is float64</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;number of dimension attributes is &#160;&#160;0</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scale values are:</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0.000 &#160;&#160;&#160;&#160;&#160;0.100 &#160;&#160;&#160;&#160;&#160;0.200 &#160;&#160;&#160;&#160;&#160;0.300</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0.400 &#160;&#160;&#160;&#160;&#160;0.500 &#160;&#160;&#160;&#160;&#160;0.600 &#160;&#160;&#160;&#160;&#160;0.700</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0.800 &#160;&#160;&#160;&#160;&#160;0.900 &#160;&#160;&#160;&#160;&#160;1.000 &#160;&#160;&#160;&#160;&#160;1.100</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1.200 &#160;&#160;&#160;&#160;&#160;1.300 &#160;&#160;&#160;&#160;&#160;1.400 &#160;&#160;&#160;&#160;&#160;1.500</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;status = sfgdinfo(dim_id, dim_name, n_values, data_type, n_attrs)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;Information about &quot;, dim_index+1,&quot; dimension :&quot;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;dimension name is &quot;, dim_name</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;number of scale values is&quot;, n_values</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;if (data_type. eq. 22) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;dimension scale data type is int16&quot;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;endif </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;if (data_type. eq. 6) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;dimension scale data type is float64&quot;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;endif </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;number of dimension attributes is &quot;, n_attrs</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;Scale values are:&quot;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;if (dim_index .eq. 0) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfgdscale(dim_id, data_X_out)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) (data_X_out(i), i= 1, X_LENGTH)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;endif </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;if (dim_index .eq. 1) &#160;then</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfgdscale(dim_id, data_Y_out) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,100) (data_Y_out(i), i= 1, Y_LENGTH)</p>
 <p class="FM_ExampleCode">100 &#160;&#160;&#160;&#160;&#160;&#160;format(4(1x,f10.3)/)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;endif </p>
 <p class="FM_ExampleCode">30 &#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_16404_dimscale_vs_sds_c"></a>dimscale_vs_sds.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 rank, data_type, dim_sizes[MAX_VAR_DIMS];</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;int32 n_datasets, n_file_attr, n_attrs; </p>
 <p class="FM_ExampleCode"> &#160;&#160;char &#160;sds_name[MAX_NC_NAME];</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart(FILE_NAME, DFACC_READ);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Obtain information about the file.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;*/ </p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDfileinfo(sd_id, &amp;n_datasets, &amp;n_file_attr);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/* Get information about each SDS in the file.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* &#160;Check whether it is a coordinate variable, then display retrieved </p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;information.</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;Output displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS array with the name SDStemplate</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Coordinate variable with the name Y_Axis</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Coordinate variable with the name X_Axis</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;for (sds_index=0; sds_index&lt; n_datasets; sds_index++) </p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;status = SDgetinfo(sds_id, sds_name, &amp;rank, dim_sizes, &amp;data_type, &amp;n_attrs);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (SDiscoordvar(sds_id)) </p>
 <p class="FM_ExampleCode">          printf(&quot; Coordinate variable with the name %s\n&quot;, sds_name);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;else</p>
 <p class="FM_ExampleCode">          printf(&quot; SDS array with the name %s\n&quot;, sds_name);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the selected data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess(sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend(sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_25723_dimscale_vs_sds_f"></a>dimscale_vs_sds.f</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;program &#160;sds_vrs_coordvar </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDS.hdf’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_READ, DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_READ = 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT32 = 24)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;MAX_VAR_DIMS</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(MAX_VAR_DIMS = 32)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfselect, sfiscvar, sffinfo, sfginfo</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;rank, data_type</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;n_datasets, n_file_attrs, n_attrs</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;&#160;dim_sizes(MAX_VAR_DIMS)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*256 sds_name</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_READ)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Obtain information about the file.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sffinfo(sd_id, n_datasets, n_file_attrs) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get information about each SDS in the file.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Check whether it is a coordinate variable, then display retrieved </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;information. </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Output displayed:</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS array with the name SDStemplate</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Coordinate variable with the name X_Axis</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Coordinate variable with the name Y_Axis</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 10 sds_index = 0, n_datasets-1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfginfo(sds_id, sds_name, rank, dim_sizes,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_type, n_attrs)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfiscvar(sds_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (status .eq. 1) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;Coordinate variable with the name &quot;,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;sds_name(1:6) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;SDS array with the name &quot;, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;sds_name(1:11) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_13612_set_attr_c"></a>set_attr.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define FILE_ATTR_NAME &quot;File_contents&quot;</p>
 <p class="FM_ExampleCode">#define SDS_ATTR_NAME &#160;&quot;Valid_range&quot;</p>
 <p class="FM_ExampleCode">#define DIM_ATTR_NAME &#160;&quot;Dim_metric&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;&#160;&#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;dim_id, dim_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;n_values; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* number of values of the file, SDS or</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dimension attribute &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;char8 &#160;&#160;file_values[] = &quot;Storm_track_data&quot;; </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* values of the file attribute */</p>
 <p class="FM_ExampleCode"> &#160;&#160;float32 sds_values[2] = {2., 10.};</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* values of the SDS attribute &#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;char8 &#160;&#160;dim_values[] &#160;= &quot;Seconds&quot;; </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* values of the dimension attribute */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize the SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_WRITE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set an attribute that describes the file contents.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;n_values = 16;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = SDsetattr (sd_id, FILE_ATTR_NAME, DFNT_CHAR8, n_values, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)file_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_index = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Assign attribute to the first SDS. Note that attribute values</p>
 <p class="FM_ExampleCode"> &#160;&#160;* may have different data type than SDS data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;n_values &#160;= 2;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = SDsetattr (sds_id, SDS_ATTR_NAME, DFNT_FLOAT32, n_values, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)sds_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get the the second dimension identifier of the SDS.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_index = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_id = SDgetdimid (sds_id, dim_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set an attribute of the dimension that specifies the dimension metric.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;n_values = 7;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = SDsetattr (dim_id, DIM_ATTR_NAME, DFNT_CHAR8, n_values, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)dim_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_41175_set_attr_f"></a>set_attr.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;set_attribs</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*13 FILE_ATTR_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 SDS_ATTR_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*10 DIM_ATTR_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FILE_ATTR_NAME = ’File_contents’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_ATTR_NAME &#160;= ’Valid_range’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DIM_ATTR_NAME &#160;= ’Dim_metric’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_WRITE, DFNT_CHAR8, DFNT_FLOAT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_WRITE = 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_CHAR8 &#160;= 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_FLOAT32 = 5)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfscatt, sfsnatt, sfselect, sfdimid</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sd_id, sds_id, sds_index, status</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer dim_id, dim_index </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer n_values</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*16 file_values</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;real &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sds_values(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;dim_values</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_values &#160;&#160;= ’Storm_track_data’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_values(1) = 2.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_values(2) = 10.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_values &#160;&#160;&#160;= ’Seconds’</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize the SD interface. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_WRITE)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set an attribute that describes the file contents. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;n_values = 16</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfscatt(sd_id, FILE_ATTR_NAME, DFNT_CHAR8, n_values, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;file_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Assign attribute to the first SDS. Note that attribute values</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;may have different data type than SDS data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;n_values = 2</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfsnatt(sds_id, SDS_ATTR_NAME, DFNT_FLOAT32, n_values, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sds_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get the identifier for the first dimension. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_index = 0 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_id = sfdimid(sds_id, dim_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set an attribute to the dimension that specifies the</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;dimension metric. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;n_values = 7</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfscatt(dim_id, DIM_ATTR_NAME, DFNT_CHAR8, n_values, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_16175_get_attr_c"></a>get_attr.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&#160;&quot;SDS.hdf&quot;</p>
 <p class="FM_ExampleCode">#define FILE_ATTR_NAME &quot;File_contents&quot;</p>
 <p class="FM_ExampleCode">#define SDS_ATTR_NAME &#160;&quot;Valid_range&quot;</p>
 <p class="FM_ExampleCode">#define DIM_ATTR_NAME &#160;&quot;Dim_metric&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;sd_id, sds_id, dim_id;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;&#160;&#160;status;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;int32 &#160;&#160;attr_index, data_type, n_values; </p>
 <p class="FM_ExampleCode"> &#160;&#160;char &#160;&#160;&#160;attr_name[MAX_NC_NAME];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int8 &#160;&#160;&#160;*file_data;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int8 &#160;&#160;&#160;*dim_data;</p>
 <p class="FM_ExampleCode"> &#160;&#160;float32 *sds_data;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;&#160;&#160;i;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file and initialize SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_READ);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Find the file attribute defined by FILE_ATTR_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;attr_index = SDfindattr (sd_id, FILE_ATTR_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get information about the file attribute. Note that the first</p>
 <p class="FM_ExampleCode"> &#160;&#160;* parameter is an SD interface identifier.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDattrinfo (sd_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Allocate a buffer to hold the attribute data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_data = (int8 *)malloc (n_values * sizeof (data_type));</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read the file attribute data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreadattr (sd_id, attr_index, file_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Print out file attribute value. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">   printf (&quot;File attribute value is : %s\n&quot;, file_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_id = SDselect (sd_id, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Find the data set attribute defined by SDS_ATTR_NAME. Note that the</p>
 <p class="FM_ExampleCode"> &#160;&#160;* first parameter is a data set identifier.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;attr_index = SDfindattr (sds_id, SDS_ATTR_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get information about the data set attribute.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDattrinfo (sds_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Allocate a buffer to hold the data set attribute data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;sds_data = (float32 *)malloc (n_values * sizeof (data_type));</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read the SDS attribute data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreadattr (sds_id, attr_index, sds_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Print out SDS attribute data type and values. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;if (data_type == DFNT_FLOAT32) </p>
 <p class="FM_ExampleCode">                 printf (&quot;SDS attribute data type is : float32\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;printf (&quot;SDS attribute values are : &#160;&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i=0; i&lt;n_values; i++) printf (&quot; %f&quot;, sds_data[i]);</p>
 <p class="FM_ExampleCode">   printf (&quot;\n&quot;); </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* &#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get the identifier for the second dimension of the SDS.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_id = SDgetdimid (sds_id, 1);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Find dimension attribute defined by DIM_ATTR_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;attr_index = SDfindattr (dim_id, DIM_ATTR_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get information about the dimension attribute.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDattrinfo (dim_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Allocate a buffer to hold the dimension attribute data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_data = (int8 *)malloc (n_values * sizeof (data_type));</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read the dimension attribute data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDreadattr (dim_id, attr_index, dim_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Print out dimension attribute value. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">   printf (&quot;Dimensional attribute values is : %s\n&quot;, dim_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Terminate access to the data set and to the SD interface and </p>
 <p class="FM_ExampleCode"> &#160;&#160;* close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Free all buffers.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;free (dim_data);</p>
 <p class="FM_ExampleCode"> &#160;&#160;free (sds_data);</p>
 <p class="FM_ExampleCode"> &#160;&#160;free (file_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/* &#160;&#160;Output of this program is :</p>
 <p class="FM_ExampleCode"> &#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;File attribute value is : Storm_track_data</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;SDS attribute data type is : float32</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;SDS attribute values are : &#160;&#160;2.000000 10.000000</p>
 <p class="FM_ExampleCode"> &#160;&#160;* &#160;&#160;&#160;Dimensional attribute values is : Seconds</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_12944_get_attr_f"></a>get_attr.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;attr_info</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*13 FILE_ATTR_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 SDS_ATTR_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*10 DIM_ATTR_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDS.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FILE_ATTR_NAME = ’File_contents’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_ATTR_NAME &#160;= ’Valid_range’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DIM_ATTR_NAME &#160;= ’Dim_metric’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_READ, DFNT_FLOAT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_READ &#160;&#160;= 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_FLOAT32 = 5)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sffattr, sfgainfo, sfrattr, sfselect</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfdimid, sfendacc, sfend</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;sd_id, sds_id, dim_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;attr_index, data_type, n_values, status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;real &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sds_data(2)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;character*20 attr_name </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*16 file_data</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*7 &#160;dim_data</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;i</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file and initialize SD interface. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_READ)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Find the file attribute defined by FILE_ATTR_NAME.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Note that the first parameter is an SD interface identifier.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;attr_index = sffattr(sd_id, FILE_ATTR_NAME)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get information about the file attribute. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfgainfo(sd_id, attr_index, attr_name, data_type, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>n_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the file attribute data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrattr(sd_id, attr_index, file_data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print file attribute value.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;File attribute value is : &quot;, file_data </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Find the data set attribute defined by SDS_ATTR_NAME.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Note that the first parameter is a data set identifier. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;attr_index = sffattr(sds_id, SDS_ATTR_NAME)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get information about the data set attribute. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfgainfo(sds_id, attr_index, attr_name, data_type, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>n_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the SDS attribute data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrattr(sds_id, attr_index, sds_data)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print SDS attribute data type and values. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if (data_type .eq. DFNT_FLOAT32) &#160;then</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;SDS attribute data type is : float32 &quot; &#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;SDS attribute values are &#160;: &quot; </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &#160;(sds_data(i), i=1, n_values) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get the identifier for the first dimension of the SDS. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_id = sfdimid(sds_id, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Find the dimensional attribute defined by DIM_ATTR_NAME.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Note that the first parameter is a dimension identifier.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;attr_index = sffattr(dim_id, DIM_ATTR_NAME)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get information about dimension attribute. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfgainfo(dim_id, attr_index, attr_name, data_type, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>n_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the dimension attribute data. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrattr(dim_id, attr_index, dim_data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Print dimension attribute value.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) &quot;Dimensional attribute value is : &quot;, dim_data </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Output of this program is :</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;File attribute value is : Storm_track_data</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;SDS attribute data type is : float32 </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;SDS attribute values are &#160;: </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2.00000 &#160;&#160;10.00000</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;Dimensional attribute value is : Seconds</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_35450_chunking_example_c"></a>chunking_example.c</p>
 <p class="FM_ExampleCode">#include &quot;mfhdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;&quot;SDSchunked.hdf&quot;</p>
 <p class="FM_ExampleCode">#define SDS_NAME &#160;&#160;&#160;&#160;&#160;&quot;ChunkedData&quot;</p>
 <p class="FM_ExampleCode">#define RANK &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main()</p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sd_id, sds_id, sds_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flag, maxcache, new_maxcache;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes[2], origin[2];</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;HDF_CHUNK_DEF c_def, c_def_out; /* Chunking definitions */ </p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_flag, c_flags;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;all_data[9][4];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start[2], edges[2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk_out[3][2];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;row[2] = { 5, 5 };</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;column[3] = { 4, 4, 4 };</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fill_value = 0; &#160;&#160;/* Fill value */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i,j;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Declare chunks data type and initialize some of them. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int16 chunk1[3][2] = { 1, 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1, 1,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1, 1 }; </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int16 chunk2[3][2] = { 2, 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2, 2,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2, 2 }; </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int16 chunk3[3][2] = { 3, 3,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3, 3,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3, 3 }; </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int16 chunk6[3][2] = { 6, 6,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6, 6,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6, 6 };</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/********************* End of variable declaration ***********************/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Define chunk’s dimensions.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;In this example we do not use compression. </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;To use chunking with RLE, Skipping Huffman, and GZIP</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;compression, initialize</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.comp.chunk_lengths[0] = 3;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.comp.chunk_lengths[1] = 2; </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;To use chunking with NBIT, initialize</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.nbit.chunk_lengths[0] = 3;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.nbit.chunk_lengths[1] = 2; </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;c_def.chunk_lengths[0] = 3;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;c_def.chunk_lengths[1] = 2;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Create the file and initialize SD interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_CREATE);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Create 9x4 SDS.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;dim_sizes[0] = 9;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;dim_sizes[1] = 4;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;sds_id = SDcreate (sd_id, SDS_NAME,DFNT_INT16, RANK, dim_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Fill the SDS array with the fill value.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDsetfillvalue (sds_id, (VOIDP)&amp;fill_value);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Create chunked SDS.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* In this example we do not use compression ( third</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* parameter of SDsetchunk is set to HDF_CHUNK).</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* To use RLE compresssion, set compression type and flag</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.comp.comp_type = COMP_CODE_RLE;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_flag = HDF_CHUNK | HDF_COMP;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* To use Skipping Huffman compression, set compression type, flag</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* and skipping size skp_size</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.comp.comp_type = COMP_CODE_SKPHUFF;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.comp.cinfo.skphuff.skp_size = value; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_flag = HDF_CHUNK | HDF_COMP;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* To use GZIP compression, set compression type, flag and</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* deflate level</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.comp.comp_type = COMP_CODE_DEFLATE;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.comp.cinfo.deflate.level = value; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_flag = HDF_CHUNK | HDF_COMP;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* To use NBIT compression, set compression flag and</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* compression parameters</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_flag = HDF_CHUNK | HDF_NBIT;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.nbit.start_bit = value1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.nbit.bit_len &#160;&#160;= value2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.nbit.sign_ext &#160;= value3; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def.nbit.fill_one &#160;= value4; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;comp_flag = HDF_CHUNK;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDsetchunk (sds_id, c_def, comp_flag);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Set chunk cache to hold maximum of 3 chunks.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;maxcache = 3;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;flag = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;new_maxcache = SDsetchunkcache (sds_id, maxcache, flag);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Write chunks using SDwritechunk function.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Chunks can be written in any order.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Write the chunk with the coordinates (0,0).</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDwritechunk (sds_id, origin, (VOIDP) chunk1);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* &#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Write the chunk with the coordinates (1,0).</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[0] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDwritechunk (sds_id, origin, (VOIDP) chunk3);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* &#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* Write the chunk with the coordinates (0,1). </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[1] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDwritechunk (sds_id, origin, (VOIDP) chunk2);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Write chunk with the coordinates (1,2) using</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* SDwritedata function.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[0] = 6;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[1] = 2;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[0] = 3;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[1] = 2;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) chunk6); </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Fill second column in the chunk with the coordinates (1,1)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* using SDwritedata function.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[0] = 3;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[1] = 3;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[0] = 3;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[1] = 1;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) column); </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Fill second row in the chunk with the coordinates (0,2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* using SDwritedata function.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[0] = 7;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[0] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[1] = 2;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) row); </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Reopen the file and access the first data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;sd_id = SDstart (FILE_NAME, DFACC_READ);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;sds_index = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;sds_id = SDselect (sd_id, sds_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Get information about the SDS. Only chunk lengths and compression</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* flag can be returned. Compression information is not available if</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* NBIT, Skipping Huffman, or GZIP compression is used.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDgetchunkinfo (sds_id, &amp;c_def_out, &amp;c_flags);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;if (c_flags == HDF_CHUNK )</p>
 <p class="FM_ExampleCode">       printf(&quot; SDS is chunked\nChunk’s dimensions %dx%d\n&quot;,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def_out.chunk_lengths[0],</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def_out.chunk_lengths[1]);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;else if (c_flags == (HDF_CHUNK | HDF_COMP))</p>
 <p class="FM_ExampleCode">         printf(&quot;SDS is chunked and compressed\nChunk’s dimensions %dx%d\n&quot;,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def_out.comp.chunk_lengths[0],</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def_out.comp.chunk_lengths[1]);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;else if (c_flags == (HDF_CHUNK | HDF_NBIT))</p>
 <p class="FM_ExampleCode">         printf (&quot;SDS is chunked (NBIT)\nChunk’s dimensions %dx%d\n&quot;,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def_out.nbit.chunk_lengths[0],</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_def_out.nbit.chunk_lengths[1]);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Read the entire data set using SDreaddata function.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[0] = 9;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;edges[1] = 4;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)all_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Print out what we have read.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* The following information should be displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* SDS is chunked </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Chunk’s dimensions 3x2</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1 1 2 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1 1 2 2</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1 1 2 2</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 3 0 4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 3 0 4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3 3 0 4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 0 6 6</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5 5 6 6</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 0 6 6</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;for (j=0; j&lt;9; j++) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i=0; i&lt;4; i++) printf (&quot; %d&quot;, all_data[j][i]);</p>
 <p class="FM_ExampleCode">         printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Read chunk with the coordinates (2,0) and display it.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[0] = 2;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;origin[1] = 0; &#160;&#160;&#160;<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDreadchunk (sds_id, origin, chunk_out);</p>
 <p class="FM_ExampleCode">    printf (&quot; Chunk (2,0) \n&quot;);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;for (j=0; j&lt;3; j++) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i=0; i&lt;2; i++) printf (&quot; %d&quot;, chunk_out[j][i]);</p>
 <p class="FM_ExampleCode">         printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Read chunk with the coordinates (1,1) and display it.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;origin[0] = 1;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;origin[1] = 1; &#160;&#160;&#160;<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDreadchunk (sds_id, origin, chunk_out);</p>
 <p class="FM_ExampleCode">    printf (&quot; Chunk (1,1) \n&quot;);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;for (j=0; j&lt;3; j++) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i=0; i&lt;2; i++) printf (&quot; %d&quot;, chunk_out[j][i]);</p>
 <p class="FM_ExampleCode">         printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/* &#160;The following information is displayed:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;Chunk (2,0) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;0 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;5 5</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;0 0</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;* &#160;&#160;Chunk (1,1) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;0 4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;0 4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* &#160;&#160;0 4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Terminate access to the data set.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDendaccess (sds_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;* Terminate access to the SD interface and close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;status = SDend (sd_id);</p>
 <p class="FM_ExampleCode">} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExamplePage"><a name="XREF_32424_chunking_example_f"></a>chunking_example.f</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;chunk_examples</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*14 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*11 SDS_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;RANK</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(FILE_NAME = ’SDSchunked.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS_NAME &#160;= ’ChunkedData’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK &#160;&#160;&#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;DFACC_CREATE, DFACC_READ, DFNT_INT16</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFACC_READ &#160;&#160;= 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT16 &#160;&#160;= 22)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;COMP_CODE_NONE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter &#160;&#160;(COMP_CODE_NONE = 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;This example does not use compression.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use RLE compression, declare:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;COMP_CODE_RLE</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;parameter &#160;&#160;(COMP_CODE_RLE = 1)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use NBIT compression, declare:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;COMP_CODE_NBIT</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;parameter &#160;&#160;(COMP_CODE_NBIT = 2)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use Skipping Huffman compression, declare:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;COMP_CODE_SKPHUFF</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;parameter &#160;&#160;(COMP_CODE_SKPHUFF = 3)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use GZIP compression, declare:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;COMP_CODE_DEFLATE</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;parameter &#160;&#160;(COMP_CODE_DEFLATE = 4)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer sfstart, sfcreate, sfendacc, sfend,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;sfselect, sfsfill, sfschnk, sfwchnk,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;sfrchnk, sfgichnk, sfwdata, sfrdata,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;sfscchnk</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer &#160;&#160;sd_id, sds_id, sds_index, status &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;dim_sizes(2), origin(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;fill_value, maxcache, new_maxcache, flag</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;start(2), edges(2), stride(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 all_data(4,9)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 row(3), column(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 chunk_out(2,3)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 chunk1(2,3),</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk2(2,3),</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk3(2,3),</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk6(2,3)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;i, j</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Compression flag and parameters.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer comp_type, comp_flag, comp_prm(4)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Chunk’s dimensions.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer dim_length(2), dim_length_out(2)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize four chunks</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data chunk1 /6*1/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data chunk2 /6*2/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data chunk3 /6*3/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data chunk6 /6*6/</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize row and column arrays.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data row /3*4/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data column /2*5/</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define chunk’s dimensions.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_length(1) = 2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_length(2) = 3 </p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the file and initialize SD interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_CREATE)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create 4x9 SDS</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes(1) = 4 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes(2) = 9 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT16,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RANK, dim_sizes)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Fill SDS array with the fill value.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;fill_value = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfsfill( sds_id, fill_value)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create chunked SDS.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;In this example we do not use compression.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use RLE compression, initialize comp_type parameter</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;before the call to sfschnk function.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_type = COMP_CODE_RLE</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;To use NBIT, Skipping Huffman, or GZIP compression,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;initialize comp_prm array and comp type parameter</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;before call to sfschnk function</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;NBIT:</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_prm(1) = value_of(sign_ext)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_prm(2) = value_of(fill_one)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_prm(3) = value_of(start_bit)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_prm(4) = value_of(bit_len)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_type &#160;&#160;= COMP_CODE_NBIT</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Skipping Huffman:</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_prm(1) = value_of(skp_size)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_type &#160;&#160;= COMP_CODE_SKPHUFF</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;GZIP:</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_prm(1) = value_of(deflate_level) </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;comp_type &#160;&#160;= COMP_CODE_DEFLATE</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;comp_type = COMP_CODE_NONE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfschnk(sds_id, dim_length, comp_type, comp_prm)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set chunk cache to hold maximum 2 chunks.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;flag = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;maxcache = 2</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;new_maxcache = sfscchnk(sds_id, maxcache, flag) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write chunks using SDwritechunk function.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Chunks can be written in any order.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write chunk with the coordinates (1,1).</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;origin(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;origin(2) = 1</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfwchnk(sds_id, origin, chunk1) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write chunk with the coordinates (1,2).</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(1) = 1 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(2) = 2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfwchnk(sds_id, origin, chunk3) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write chunk with the coordinates (2,1).</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(1) = 2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(2) = 1 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfwchnk(sds_id, origin, chunk2) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write chunk with the coordinates (2,3).</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(1) = 2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(2) = 3 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = sfwchnk(sds_id, origin, chunk6) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Fill second row in the chunk with the coordinates (2,2).</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 3</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 3</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = 1 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(2) = 3 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, row)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Fill second column in the chunk with the coordinates (1,3).</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 0 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 7 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = 2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(2) = 1 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfwdata(sds_id, start, stride, edges, column)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file. &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Reopen the file and access the first data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sd_id = sfstart(FILE_NAME, DFACC_READ)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;sds_id = sfselect(sd_id, sds_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get information about the SDS.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfgichnk(sds_id, dim_length_out, comp_flag)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if (comp_flag .eq. 0) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) ’SDS is chunked’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if (comp_flag .eq. 1) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) ’SDS is chunked and compressed’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if (comp_flag .eq. 2) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) ’SDS is chunked and NBIT compressed’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Chunks dimensions are ’, dim_length_out(1),</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ ’ &#160;x’ ,dim_length_out(2)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the whole SDS using sfrdata function and display</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;what we have read. The following information will be displayed:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SDS is chunked</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Chunks dimensions are &#160;&#160;2 &#160;x &#160;3</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1 &#160;1 &#160;1 &#160;3 &#160;3 &#160;3 &#160;0 &#160;5 &#160;0</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1 &#160;1 &#160;1 &#160;3 &#160;3 &#160;3 &#160;0 &#160;5 &#160;0</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2 &#160;2 &#160;2 &#160;0 &#160;0 &#160;0 &#160;6 &#160;6 &#160;6</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2 &#160;2 &#160;2 &#160;4 &#160;4 &#160;4 &#160;6 &#160;6 &#160;6</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = 4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = 9</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrdata(sds_id, start, stride, edges, all_data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Display the SDS.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 10 i = 1,4</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) (all_data(i,j), j=1,9)</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;continue &#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read chunks with the coordinates (2,2) and (1,3) and display.</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;The following information will be shown:</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Chunk (2,2)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 &#160;0 &#160;0</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;4 &#160;4 &#160;4</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Chunk (1,3)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 &#160;5 &#160;0</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0 &#160;5 &#160;0</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;origin(1) = 2</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;origin(2) = 2</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrchnk(sds_id, origin, chunk_out)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Chunk (2,2)’</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 20 i = 1,2</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) (chunk_out(i,j), j=1,3)</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(1) = 1 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;origin(2) = 3 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfrchnk(sds_id, origin, chunk_out)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Chunk (1,3)’</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 30 i = 1,2</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) (chunk_out(i,j), j=1,3)</p>
 <p class="FM_ExampleCode">30 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the data set.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfendacc(sds_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the SD interface and close the file. &#160;&#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = sfend(sd_id)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;end </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
</div>
				
				<div class="content_top_link">
					<a>&#160;</a> 
				</div>
				<div class="mobile_browseholder">
					<div class="brsBack">
						<a id="browseSeqBack1" class="wBSBackButton" href="../Example_R8/Example_R8.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton normal" id="xmlEditorBSBackButtonMobile" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSBack_hover.png" class="wBSBackButton hover" id="xmlEditorBSBackButtonMobileHover" border="0" style="width:100%; max-width:56px" /></a> 
						 
					</div>
					<div class="brsNext">
						<a id="browseSeqNext1" class="wBSNextButton" href="../UG_Appndx/UG_Appndx.htm"><img alt="" src="../../template/Theme1_Standard/BSNext.png" class="wBSNextButton normal" id="xmlEditorBSNextButtonMobile" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSNext_hover.png" class="wBSNextButton hover" id="xmlEditorBSNextButtonMobileHover" border="0" style="width:100%; max-width:48px" /></a> 
						 
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="buttonbar">
		<div class="buttonbarholder topic_page_holder">
			<div class="bar_toc topic_page" id="xmlEditorButtonBarTOC" 
				 title="Table of Contents">
				<a href="../../table_of_contents.htm">&#160;</a> 
			</div>
			<div class="bar_index topic_page" id="xmlEditorButtonBarIDX" 
				 title="Index">
				<a href="../../index1.htm">&#160;</a> 
			</div>
			<div class="bar_glossary topic_page" id="xmlEditorButtonBarGLO" 
				 title="Glossary">
				<a href="../../glossary.htm">&#160;</a> 
			</div>
			<div class="bar_search topic_page">
				<a href="../../searchresults.htm" title="Search">&#160;</a> 
			</div>
		</div>
	</div>
</div>
<div id="localisation">
	<p id="localisation_toc"><span>Table of Contents</span></p>
	<p id="localisation_idx"><span>Index</span></p>
	<p id="localisation_glo"><span>Glossary</span></p>
	<p id="localisation_fts"><span>-Search-</span></p>
	<p id="localisation_back"><span>Back</span></p>
</div>
<script type="text/javascript" src="../../template/Theme1_Standard/jquery.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/jqueryui-custom.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.sidescroller.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/layout.js"></script>
<script type="text/javascript">//<![CDATA[
$(function(){
	addRhLoadCompleteEvent(setTopic);
});
//]]></script>
</body>
</html>
