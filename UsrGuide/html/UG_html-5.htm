<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 11.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="UG_html.css" CHARSET="UTF-8" TYPE="text/css">
<table id="Topofpage" border="0" width="850" cellspacing="0" cellpadding="0"><tr><td align="left"><a href="http://www.hdfgroup.org"><img id="THG_logo" border="0" src="images/hdf_logo.jpg" width="90" height="70" alt="The HDF Group" valign="top" /></a></td><td valign="middle" align="center"><H1>HDF User’s Guide</H1><span style="font-size: 14px; font-weight: bold"><b>4.2.12</b></td><td valign="middle" align="center"><a HREF=UG_html.htm> [Top]</a> <a HREF=UG_html-4.htm> [Prev]</a><a HREF=UG_html-6.htm> [Next]</a></td></tr></table><HR></HEAD>
<BODY>
<DIV>
<span style="font-size: 14px; font-weight: bold"><a href="UG_html-17.htm">Index</a>] [<a href="UG_html-20.htm">List of Examples</a>] [<a href="UG_html-19.htm">List of Tables</a>] [<a href="UG_html-18.htm">List of Figures</a>]</DIV>
<H1 CLASS="ChapterTitle">
<A NAME="50593875_pgfId-112313"></A>Chapter 5 --	<A NAME="50593875_34180"></A>Vgroups (V API)</H1>
<DIV>
<H4 CLASS="Heading1">
<A NAME="50593875_pgfId-2821"></A>	5.1	Chapter Overview<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H4>
<P CLASS="Body">
<A NAME="50593875_pgfId-8771"></A>This chapter describes the vgroup data model and the Vgroup interface (also called the V interface or the V API). The first section describes the vgroup data model. The second section introduces the Vgroup interface, followed by a presentation of a programming model for vgroups. The next three sections describe the use of the Vgroup interface in accessing and creating vgroups. The final two sections cover vgroup attributes and obsolete Vgroup interface routines.</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-8772"></A>	5.2	The Vgroup Data Model<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-93903"></A><A NAME="50593875_marker-93902"></A>A <EM CLASS="Definition">
vgroup</EM>
 is a structure designed to associate related data objects. The general structure of a vgroup is similar to that of the UNIX file system in that the vgroup may contain references to other vgroups or HDF data objects just as the UNIX directory may contain subdirectories or files (see <A HREF="UG_html-5.htm#50593875_58218" CLASS="XRef">Figure 5a</A>). In previous versions of HDF, the data objects in a vgroup were limited to vdatas and vgroups. The data objects that belong to a vgroup are often referred to as the vgroup’s <EM CLASS="Definition">
members</EM>
.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593875_pgfId-2618"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
FIGURE 5a	<A NAME="50593875_58218"></A>Si<A NAME="50593875_marker-11508"></A>milarity of the HDF Vgroup Structure and the UNIX File System</H6>
<DIV>
<MAP NAME="UG_html-32">
</MAP>
<IMG SRC="UG_html-32.gif" USEMAP="#UG_html-32" ALT="">
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-2619"></A>	5.2.1	Vgroup Names and Classes</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-4149"></A>A vgroup can have a <EM CLASS="Definition">
name</EM>
 and/or a<EM CLASS="Definition">
 class</EM>
 associated with it. The vgroup name and class are useful in describing and classifying the data objects belonging to the vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-29111"></A>A vgroup name is a character string and is used to semantically distinguish between vgroups in an HDF file. Multiple vgroups in a file can have the same name; however, unique names make it easier to distinguish among vgroups and are recommended.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-4151"></A><A NAME="50593875_marker-11510"></A>A <EM CLASS="Definition">
vgroup class</EM>
 is a character string and can be used to classify data objects by their intended use. For example, a vdata object named &quot;Storm Tracking Data - 5/11/94&quot; and another vdata object named &quot;Storm Tracking Data - 6/23/94&quot; can be grouped together under a vgroup named &quot;Storm Tracking Data - 1994&quot;. If the data was collected in Anchorage, Alaska the class name might be &quot;Anchorage Data&quot;, particularly if other vgroups contain storm track data collected in different locations.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-46021"></A>The specific use of the vgroup name and class name is solely determined by HDF users.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-2850"></A>	5.2.2	V<A NAME="50593875_marker-11511"></A>group Organization</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-2852"></A>There are many ways to organize vgroups through the use of the Vgroup interface. Vgroups may contain any number of vgroups and data objects, including data objects and vgroups that are members of other vgroups. Therefore, a data object may have more than one parent vgroup. For example, Data object A and Vgroup B, shown in <EM CLASS="Body">
<A HREF="UG_html-5.htm#50593875_89021" CLASS="XRef">Figure 5b</A></EM>
, are members of multiple vgroups with different organizational structures. </P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593875_pgfId-2857"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
FIGURE 5b	<A NAME="50593875_89021"></A>Sh<A NAME="50593875_marker-11512"></A>aring Data Objects among Vgroups</H6>
<DIV>
<MAP NAME="UG_html-33">
</MAP>
<IMG SRC="UG_html-33.gif" USEMAP="#UG_html-33" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593875_pgfId-57318"></A>A vgroup can contain any combination of data objects. <EM CLASS="Body">
<A HREF="UG_html-5.htm#50593875_28326" CLASS="XRef">Figure 5c</A></EM>
 illustrates a vgroup that contains two raster images and a vdata.</P>
</DIV>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593875_pgfId-46256"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
FIGURE 5c	<A NAME="50593875_28326"></A>A Vgro<A NAME="50593875_marker-46198"></A>up Containing Two 8-Bit Raster Images, or RIS8 Objects, and a Vdata</H6>
<DIV>
<MAP NAME="UG_html-34">
</MAP>
<IMG SRC="UG_html-34.gif" USEMAP="#UG_html-34" ALT="">
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-46193"></A>	5.2.3	<A NAME="50593875_marker-46192"></A>An Example Using Vgroups</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-46028"></A>Although vgroups can contain any combination of HDF data objects, it is often useful to establish conventions on the content and structure of vgroups. This section, with the illustration in <A HREF="UG_html-5.htm#50593875_28045" CLASS="XRef">Figure 5d</A>, describes an example of a vgroup convention that is used by scientific and graphics programmers to describe the surfaces of a mathematical or material object as well as its properties.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-46029"></A>This vgroup consists of one list of coordinate data, one list of connectivity data, and one list of node property data. These three lists are stored in separate vdata objects within the vgroup. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-46030"></A>Each 2-dimensional coordinate in the list of coordinate data defines the relative location of a verte<A NAME="50593875_marker-46031"></A>x, or <EM CLASS="Definition">
node</EM>
. Each entry in the list of connectivity data is an ordered list of node numbers which describes a polygon. This ordered list is referred to as the <EM CLASS="Definition">
connectivity list</EM>
. For example, the number &quot;2&quot; as an item in a connectivity list would represent the second entry in the node table. <EM CLASS="Definition">
Node properties</EM>
 are user-defined values attached to each node within the polygon and can be numbers or characters. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-46032"></A>For example, consider a heated mesh of 400 triangles formed by connecting 1000 nodes. A vgroup describing this mesh might contain the coordinates of the vertices, the temperature value of the vertices, and a connectivity list describing the edges of the triangles. </P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593875_pgfId-4083"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
FIGURE 5d	Vgroup S<A NAME="50593875_marker-11520"></A>tructure Describing a Heated Mesh<A NAME="50593875_28045"></A></H6>
<DIV>
<MAP NAME="UG_html-35">
</MAP>
<IMG SRC="UG_html-35.gif" USEMAP="#UG_html-35" ALT="">
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-5575"></A>	5.3	Th<A NAME="50593875_marker-11522"></A>e Vgroup Interface<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-9267"></A>The Vgroup interface consists of routines for creating and accessing vgroups, and getting information about vgroups and their members.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-9268"></A>	5.3.1	Vg<A NAME="50593875_marker-11523"></A>roup Interface Routines</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-9269"></A>Vgroup interface routine names are prefaced by &quot;V&quot; in C and by &quot;vf&quot; in FORTRAN-77. These routines are categorized as follows:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-2883"></A><EM CLASS="Definition">
Access/Create routines</EM>
 control access to the Vgroup interface and to individual vgroups.</LI>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-2885"></A><EM CLASS="Definition">
Manipulation routines</EM>
 modify vgroups’ characteristics, and add and delete vgroups’ members.</LI>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-29438"></A><EM CLASS="Definition">
Vgroup inquiry routines</EM>
 obtain information about vgroups. Some of these routines are useful for locating vgroups in a file.</LI>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-29442"></A><EM CLASS="Definition">
Member inquiry routines</EM>
 obtain information about members of vgroups.</LI>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-2889"></A><EM CLASS="Definition">
Attributes routines</EM>
 provide information about vgroups’ attributes.</LI>
</UL>
<P CLASS="Body">
<A NAME="50593875_pgfId-92522"></A>The Vgroup interface routines are listed in <A HREF="UG_html-5.htm#50593875_38910" CLASS="XRef">Table 5A</A> below and described in the following sections.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-92920"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_38910"></A>Vg<A NAME="50593875_marker-92524"></A>roup Interface Routines</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-92527"></A>Category</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-92529"></A>Routine Name</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-92533"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-92537"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-92539"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593875_pgfId-92543"></A>Access/Create</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92545"></A>Vstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92547"></A>vfstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92551"></A>Initializes the Vdata and Vgroup interfaces (<A HREF="UG_html-5.htm#50593875_20590" CLASS="XRef">Accessing Files and Vgroups: Vstart and Vattach</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92556"></A>Vattach</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92558"></A>vfatch</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92563"></A>Establishes access to a vgroup (<EM CLASS="CellBody">
<A HREF="UG_html-5.htm#50593875_20590" CLASS="XRef">Accessing Files and Vgroups: Vstart and Vattach</A></EM>
)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92567"></A>Vdetach</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92569"></A>vfdtch</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92574"></A>Terminates access to a vgroup (<A HREF="UG_html-5.htm#50593875_12127" CLASS="XRef">Terminating Access to Vgroups and Files: Vdetach and Vend</A>) </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92578"></A>Vend</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92580"></A>vfend</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92582"></A>Terminates access to the Vdata and Vgroup interfaces (<A HREF="UG_html-5.htm#50593875_12127" CLASS="XRef">Terminating Access to Vgroups and Files: Vdetach and Vend</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="7" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593875_pgfId-92587"></A>Manipulation</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-93814"></A>VHmakegroup</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-93816"></A>vhfmkgp</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93818"></A>Builds a vgroup containing elements specified by their tags/refs (<A HREF="UG_html-5.htm#50593875_72594" CLASS="XRef">Building a Vgroup with or without Elements: VHmakegroup</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92589"></A>Vaddtagref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92591"></A>vfadtr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92596"></A>Adds an HDF data object to a vgroup (<A HREF="UG_html-5.htm#50593875_36232" CLASS="XRef">Inserting Any HDF Data Object into a Vgroup: Vaddtagref</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92601"></A>Vdelete</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92603"></A>vdelete</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92608"></A>Removes a vgroup from a file (<A HREF="UG_html-5.htm#50593875_11227" CLASS="XRef">Deleting a Vgroup from a File: Vdelete</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92612"></A>Vdeletetagref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92614"></A>vfdtr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92619"></A>Detaches a member from a vgroup (<A HREF="UG_html-5.htm#50593875_33315" CLASS="XRef">Deleting a Data Object from a Vgroup: Vdeletetagref</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92623"></A>Vinsert</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92625"></A>vfinsrt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92629"></A>Adds a vgroup or vdata to an existing vgroup (<A HREF="UG_html-5.htm#50593875_20564" CLASS="XRef">Inserting a Vdata or Vgroup Into a Vgroup: Vinsert</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92634"></A>Vsetclass</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92636"></A>vfscls</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92641"></A>Assigns a class name to a vgroup (<A HREF="UG_html-5.htm#50593875_41259" CLASS="XRef">Assigning a Vgroup Name and Class: Vsetname and Vsetclass</A>)</P>
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92642"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-93911"></A>Vsetname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92648"></A>vfsnam</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92653"></A>Assigns a name to a vgroup (<A HREF="UG_html-5.htm#50593875_41259" CLASS="XRef">Assigning a Vgroup Name and Class: Vsetname and Vsetclass</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="13" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593875_pgfId-92655"></A>Vgroup Inquiry</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92657"></A>Vfind</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92659"></A>vfind</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92661"></A>Returns the reference number of a vgroup given its name (<A HREF="UG_html-5.htm#50593875_18312" CLASS="XRef">Locating a Vgroup Given Its Name: Vfind</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92668"></A>Vfindclass</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92670"></A>vfndcls</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92672"></A>Returns the reference number of a vgroup specified by class name (<A HREF="UG_html-5.htm#50593875_27890" CLASS="XRef">Locating a Vgroup Given Its Class Name: Vfindclass</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92679"></A>Vgetclass</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92681"></A>vfgcls</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92686"></A>Retrieves the class of a vgroup (<A HREF="UG_html-5.htm#50593875_33271" CLASS="XRef">Obtaining the Class Name of a Vgroup: Vgetclass</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92957"></A>Vgetclassnamelen</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92959"></A>[unavailable]</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92963"></A>Retrieves the length of a vgroup’s class name (<A HREF="UG_html-5.htm#50593875_11290" CLASS="XRef">Obtaining the Length of a Vgroup’s Class Name: Vgetclassnamelen</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92690"></A>Vgetid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92692"></A>vfgid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92694"></A>Returns the reference number for the next vgroup in the HDF file (<A HREF="UG_html-5.htm#50593875_40421" CLASS="XRef">Sequentially Searching for a Vgroup: Vgetid</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92701"></A>Vgetname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92703"></A>vfgnam</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92708"></A>Retrieves the name of a vgroup (<A HREF="UG_html-5.htm#50593875_31002" CLASS="XRef">Obtaining the Name of a Vgroup: Vgetname</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92942"></A>Vgetnamelen</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92944"></A>[unavailable]</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92946"></A>Retrieves the length of a vgroup’s name (<A HREF="UG_html-5.htm#50593875_46845" CLASS="XRef">Obtaining the Length of a Vgroup’s Name: Vgetnamelen</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92712"></A>Vgetversion</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92714"></A>vfgver</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92719"></A>Returns the vgroup version of a vgroup (<A HREF="UG_html-5.htm#50593875_22172" CLASS="XRef">Obtaining the Vgroup Version Number of a Given Vgroup: Vgetversion</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92723"></A>Vinquire</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92725"></A>vfinq</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92729"></A>Retrieves general information about a vgroup (<A HREF="UG_html-5.htm#50593875_15563" CLASS="XRef">Determining the Number of Members and Vgroup Name: Vinquire</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92734"></A>Vlone</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92736"></A>vflone</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92738"></A>Retrieves the reference numbers of vgroups that are not members of other vgroups (<A HREF="UG_html-5.htm#50593875_38252" CLASS="XRef">Locating Lone Vgroups: Vlone</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92745"></A>Vntagrefs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92747"></A>vfntr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92749"></A>Returns the number of tag/reference number pairs contained in the specified vgroup (<A HREF="UG_html-5.htm#50593875_24547" CLASS="XRef">Obtaining the Number of Objects in a Vgroup: Vntagrefs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92756"></A>VQueryref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92758"></A>vqref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92762"></A>Returns the reference number of a vgroup (<A HREF="UG_html-5.htm#50593875_35227" CLASS="XRef">Retrieving the Reference Number of a Vgroup: VQueryref</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92767"></A>VQuerytag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92769"></A>vqtag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92774"></A>Returns the tag of a vgroup (<A HREF="UG_html-5.htm#50593875_34419" CLASS="XRef">Retrieving the Tag of a Vgroup: VQuerytag</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="8" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-92776"></A>Member Inquiry</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92778"></A>Vflocate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92780"></A>vffloc</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92782"></A>Locates a vdata in a vgroup given a list of field names (<A HREF="UG_html-5.htm#50593875_42303" CLASS="XRef">Locating a Vdata in a Vgroup Given Vdata Fields: Vflocate</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92789"></A>Vgetnext</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92791"></A>vfgnxt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92793"></A>Returns the identifier of the next vgroup or vdata in a vgroup (Obsolete) (<A HREF="UG_html-5.htm#50593875_30894" CLASS="XRef">Determining the Next Vgroup or Vdata Identifier: Vgetnext</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92800"></A>Vgettagref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92802"></A>vfgttr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92804"></A>Retrieves a tag/reference number pair for a data object in the vgroup (<A HREF="UG_html-5.htm#50593875_23154" CLASS="XRef">Obtaining the Tag/Reference Number Pair of a Data Object within a Vgroup : Vgettagref</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92811"></A>Vgettagrefs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92813"></A>vfgttrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92815"></A>Retrieves the tag/reference number pairs of all of the data objects belonging to a vgroup (<A HREF="UG_html-5.htm#50593875_40839" CLASS="XRef">Obtaining the Tag/Reference Number Pairs of Data Objects in a Vgroup: Vgettagrefs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92822"></A>Vinqtagref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92824"></A>vfinqtr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92826"></A>Determines whether a data object belongs to a vgroup (<A HREF="UG_html-5.htm#50593875_26561" CLASS="XRef">Testing Whether a Data Object Belongs to a Vgroup: Vinqtagref</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92833"></A>Visvg</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92835"></A>vfisvg</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92837"></A>Determines whether a data object is a vgroup within another vgroup (<A HREF="UG_html-5.htm#50593875_17564" CLASS="XRef">Testing Whether a Data Object within a Vgroup is a Vgroup: Visvg</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92844"></A>Visvs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92846"></A>vfisvs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92848"></A>Determines whether a data object is a vdata within a vgroup (<A HREF="UG_html-5.htm#50593875_25247" CLASS="XRef">Testing Whether an HDF Object within a Vgroup is a Vdata: Visvs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92855"></A>Vnrefs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92857"></A>vnrefs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92859"></A>Retrieves the number of tags of a given tag type in a vgroup (<A HREF="UG_html-5.htm#50593875_12226" CLASS="XRef">Retrieving the Number of Tags of a Given Type in a Vgroup: Vnrefs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-92864"></A>Attributes</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92866"></A>Vattrinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92868"></A>vfainfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92872"></A>Retrieves information of a vgroup attribute (<A HREF="UG_html-5.htm#50593875_18372" CLASS="XRef">Obtaining Information on a Given Vgroup Attribute: Vattrinfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92877"></A>Vfindattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92879"></A>vffdatt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92881"></A>Returns the index of a vgroup attribute given the attribute name (<A HREF="UG_html-5.htm#50593875_24084" CLASS="XRef">Retrieving the Index of a Vgroup Attribute Given the Attribute Name: Vfindattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92888"></A>Vgetattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92890"></A>vfgnatt/</P>
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92891"></A>vfgcatt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92895"></A>Retrieves the values of a vgroup attribute (<A HREF="UG_html-5.htm#50593875_12362" CLASS="XRef">Retrieving the Values of a Given Vgroup Attribute: Vgetattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92900"></A>Vnattrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92902"></A>vfnatts</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92906"></A>Returns the total number of vgroup attributes (<A HREF="UG_html-5.htm#50593875_32857" CLASS="XRef">Obtaining the Total Number of Vgroup Attributes: Vnattrs and Vnattrs2</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92911"></A>Vsetattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92913"></A>vfsnatt/</P>
<P CLASS="CellFunction">
<A NAME="50593875_pgfId-92914"></A>vfscatt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-92919"></A>Sets the attribute of a vgroup (<A HREF="UG_html-5.htm#50593875_11483" CLASS="XRef">Setting the Attribute of a Vgroup: Vsetattr</A>)</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-92922"></A>	5.3.2	Identifying Vg<A NAME="50593875_marker-92921"></A>roups in the Vgroup Interface</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-29400"></A>The Vgroup interface identifies vgroups in several ways. In some cases, a vgroup can be accessed directly through the use of its unique <EM CLASS="Definition">
reference number</EM>
. In other cases, the reference number and the routine <EM CLASS="FunctionName">
Vattach</EM>
 are used to obtain a vgroup identifier. The reference number of a vgroup can be obtained from the name or the class of the vgroup, or by sequentially traversing the file. The concept of reference number is discussed in <EM CLASS="Body">
<A HREF="UG_html-2.htm#50593872_30011" CLASS="XRef">Data Descriptor</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-29416"></A>When a vgroup is attached or created, it is assigned an identifier, <A NAME="50593875_marker-29407"></A>called <EM CLASS="Definition">
vgroup id</EM>
. After a vgroup has been attached or created, its identifier is used by the Vgroup interface routines in accessing the vgroup.</P>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-29411"></A>	5.4	P<A NAME="50593875_marker-29410"></A>rogramming Model for the Vgroup Interface<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-2920"></A>The programming model for accessing vgroups is as follows:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593875_pgfId-2922"></A>Open an HDF file.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593875_pgfId-2924"></A>2.	Initialize the Vgroup interface.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-2926"></A>3.	Create a new vgroup or open an existing one.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-2928"></A>4.	Perform the desired operations on the vgroup.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-2930"></A>5.	Terminate access to the vgroup.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-2932"></A>6.	Terminate access to the Vgroup interface.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-2934"></A>7.	Close the file.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593875_pgfId-2936"></A>These steps correspond to the following sequence of function calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-2938"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, file_access_mode, num_dds_block);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2940"></A>		status = Vstart(file_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2942"></A>		vgroup_id = Vattach(file_id, vgroup_ref, vg_access_mode);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2944"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2946"></A>		status = Vdetach(vgroup_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2948"></A>		status = Vend(file_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-5146"></A>		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-5167"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, file_access_mode, num_dds_block)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-5148"></A>		status = vfstart(file_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2956"></A>		vgroup_id = vfatch(file_id, vgroup_ref, vg_access_mode)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2958"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2960"></A>		status = vfdtch(vgroup_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-2962"></A>		status = vfend(file_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-9311"></A>		status = hclose(file_id)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-9312"></A><A NAME="50593875_marker-58051"></A>The calling program must obtain a separate vgroup identifier for each vgroup to be accessed.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-8664"></A>	5.4.1	<A NAME="50593875_20590"></A>Access<A NAME="50593875_marker-11533"></A>ing Files and Vgroups: Vstart and Vattach</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-3024"></A>An HDF file must be opened by <EM CLASS="FunctionName">
Hopen</EM>
 before it can be accessed using the Vgroup interface. <EM CLASS="FunctionName">
Hopen</EM>
 is described in <A HREF="UG_html-2.htm#50593872_13138" CLASS="XRef">HDF Fundamentals</A>.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-3040"></A>The Vgroup interface routines are used in a similar manner to the Vdata interface routines. Before performing operations on a vgroup, a calling program must call <EM CLASS="FunctionName">
Vstart</EM>
 for every file to be accessed. <EM CLASS="FunctionName">
Vstart</EM>
 initializes the internal vgroup structures in a file. <EM CLASS="FunctionName">
Vstart</EM>
 takes one argument, the file identifier returned by <EM CLASS="FunctionName">
Hopen</EM>
<A NAME="50593875_marker-3039"></A>, and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).  Note that the <EM CLASS="FunctionName">
Vstart</EM>
 routine is used by both the Vdata and Vgroup interfaces.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-40552"></A>The calling program must also call one <EM CLASS="FunctionName">
Vattach</EM>
 for every vgroup to be accessed. <EM CLASS="FunctionName">
Vattach</EM>
<A NAME="50593875_marker-40551"></A> provides access to an individual vgroup for all read and write operations. <EM CLASS="FunctionName">
Vattach</EM>
 takes three arguments: <EM CLASS="VarName">
file_id</EM>
, <EM CLASS="VarName">
vgroup_ref</EM>
, and <EM CLASS="VarName">
vg_access_mode</EM>
, and returns either a vgroup identifier or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-40553"></A>The argument <EM CLASS="VarName">
file_id</EM>
 is the file identifier returned by <EM CLASS="FunctionName">
Hopen</EM>
. The parameter <EM CLASS="VarName">
vgroup_ref</EM>
 is the reference number that identifies the vgroup to be accessed. Specifying <EM CLASS="VarName">
vgroup_ref</EM>
 with a value of <EM CLASS="DefName">
-1</EM>
 will create a new vgroup; specifying <EM CLASS="VarName">
vgroup_ref</EM>
 with a nonexistent reference number will return an error code of <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
); and specifying <EM CLASS="VarName">
vgroup_ref</EM>
 with a valid reference number will initiate access to the corresponding vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-3044"></A>When a new vgroup is created, it does not have any members. Additional operations must be performed to add other HDF data objects to the vgroup. Refer to <A HREF="UG_html-5.htm#50593875_24856" CLASS="XRef">Creating and Writing to a Vgroup</A> for information.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-29318"></A>To access an existing vgroup, its reference number must be obtained. The Vgroup interface includes two routines for this purpose, <EM CLASS="FunctionName">
Vfind</EM>
 and <EM CLASS="FunctionName">
Vgetid</EM>
. <EM CLASS="FunctionName">
Vfind</EM>
 can be used to obtain the reference number of a vgroup when the vgroup’s name is known. <EM CLASS="FunctionName">
Vgetid</EM>
 can be used to obtain the reference number by sequentially traversing the file. These routines are discussed in <A HREF="UG_html-5.htm#50593875_18312" CLASS="XRef">Locating a Vgroup Given Its Name: Vfind</A> and <A HREF="UG_html-5.htm#50593875_40421" CLASS="XRef">Sequentially Searching for a Vgroup: Vgetid</A>.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-26299"></A>The parameter <EM CLASS="VarName">
vg_access_mode</EM>
 in <EM CLASS="FunctionName">
Vattach</EM>
 specifies the type of access (&quot;<EM CLASS="VarName">
r</EM>
&quot; or &quot;<EM CLASS="VarName">
w</EM>
&quot;) required for operations on the selected vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50249"></A>Multiple attaches may be made to a vgroup, which will result in several vgroup identifiers being assigned to the same vgroup. Termination must be properly handled as described in the next section.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50253"></A>The parameters of <EM CLASS="FunctionName">
Vstart</EM>
 and <EM CLASS="FunctionName">
Vattach</EM>
 are defined in <EM CLASS="Body">
<A HREF="UG_html-5.htm#50593875_29893" CLASS="XRef">Vstart, Vattach, Vdetach, and Vend Parameter Lists</A></EM>
.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-50256"></A>	5.4.2	<A NAME="50593875_12127"></A>Term<A NAME="50593875_marker-50255"></A>inating Access to Vgroups and Files: Vdetach and Vend</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-29169"></A>Successfully terminating access to a vgroup requires one<EM CLASS="FunctionName">
 Vdetach</EM>
 call for every <EM CLASS="FunctionName">
Vattach</EM>
 call made. Similarly, successfully terminating access to the Vgroup interface requires one <EM CLASS="FunctionName">
Vend</EM>
 call for every <EM CLASS="FunctionName">
Vstart</EM>
 call made.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-57300"></A><EM CLASS="FunctionName">
Vdeta</EM>
<A NAME="50593875_marker-57299"></A><EM CLASS="FunctionName">
ch</EM>
 terminates access to a vgroup by updating internal library structures and freeing all memory associated with the vgroup and allocated by <EM CLASS="FunctionName">
Vattach</EM>
. Once a vgroup is detached, its identifier is invalid and any attempts to access this vgroup identifier will result in an error condition. <EM CLASS="FunctionName">
Vdetach</EM>
 takes one argument, <EM CLASS="VarName">
vgroup_id</EM>
, the vgroup identifier returned by <EM CLASS="FunctionName">
Vattach</EM>
, and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).  </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-57302"></A><EM CLASS="FunctionName">
Vend</EM>
<A NAME="50593875_marker-57301"></A> releases all internal data structures allocated by <EM CLASS="FunctionName">
Vstart</EM>
. Attempts to use the Vgroup interface identifier after calling <EM CLASS="FunctionName">
Vend</EM>
 will produce errors. <EM CLASS="FunctionName">
Vend</EM>
 takes one argument, <EM CLASS="VarName">
file_id</EM>
, the file identifier returned by <EM CLASS="FunctionName">
Hopen</EM>
<A NAME="50593875_marker-57303"></A>, and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Note that the first <EM CLASS="FunctionName">
Vend</EM>
 call to a file must occur after all <EM CLASS="FunctionName">
Vdetach</EM>
 calls for the vgroups in the same file have been made.  Note also that the <EM CLASS="FunctionName">
Vend</EM>
 routine is used by both the Vdata and Vgroup interfaces.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-3057"></A><EM CLASS="FunctionName">
Hclose</EM>
 must be used to terminate access to the HDF file and only after all proper <EM CLASS="FunctionName">
Vend</EM>
 calls are made. <EM CLASS="FunctionName">
Hclose</EM>
 is described in <A HREF="UG_html-2.htm#50593872_13138" CLASS="XRef">HDF Fundamentals</A>.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-5232"></A>The parameters of <EM CLASS="FunctionName">
Vdetach</EM>
 and <EM CLASS="FunctionName">
Vend</EM>
 are also defined in <EM CLASS="Body">
<A HREF="UG_html-5.htm#50593875_29893" CLASS="XRef">Table 5B</A></EM>
.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-3060"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_29893"></A>Vst<A NAME="50593875_marker-11539"></A>art, Vat<A NAME="50593875_marker-11540"></A>tach, V<A NAME="50593875_marker-11541"></A>detach, and<A NAME="50593875_marker-11542"></A> Vend Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-9382"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19309"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-9383"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-9385"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-9389"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-9391"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-9397"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-9399"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9403"></A>Vstart</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19313"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9404"></A>(vfstart)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9406"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9408"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9410"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-9412"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9414"></A>Vattach</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19310"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9415"></A>(vfatch)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9417"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9419"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9421"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-9423"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9427"></A>vgroup_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9429"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9431"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-9433"></A>Reference number for an existing vgroup or -1 to create a new one</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9437"></A>vg_access_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9439"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9441"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-9443"></A>Access mode of the vgroup operation</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9447"></A>Vdetach</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19311"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9448"></A>(vfdtch)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9450"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9452"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9454"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-9456"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9458"></A>Vend</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19312"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-9459"></A>(vfend)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9461"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9463"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-9465"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-9467"></A>File identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593875_pgfId-112428"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
Creating HDF Files and Vgroups</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-112429"></A>This example illustrates the use of <EM CLASS="FunctionName">
Hopen/hopen</EM>
, <EM CLASS="FunctionName">
Vstart/vfstart</EM>
, <EM CLASS="FunctionName">
Vattach/vfatch</EM>
, <EM CLASS="FunctionName">
Vdetach/vfdtch</EM>
, <EM CLASS="FunctionName">
Vend/vfend</EM>
, and <EM CLASS="FunctionName">
Hclose/hclose</EM>
 to create and to access two vgroups in an HDF file.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-112430"></A>The program creates the HDF file, named &quot;Two_Vgroups.hdf&quot;, and two vgroups stored in the file.  Note that, in this example, the program only create two empty vgroups.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593875_pgfId-112435"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112438"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112439"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112440"></A>#define  FILE_NAME    &quot;Two_Vgroups.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112441"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112442"></A>main()</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112443"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112444"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112445"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112446"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112447"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112448"></A>         vgroup_ref = -1,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112449"></A>         vgroup1_id, vgroup2_id, file_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112450"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112451"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112452"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112453"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112454"></A>   * Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112455"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112456"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112457"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112458"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112459"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112460"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112461"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112462"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112463"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112464"></A>   * Create the first vgroup.  Note that the vgroup reference number is set</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112465"></A>   * to -1 for creating and the access mode is &quot;w&quot; for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112466"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112467"></A>   vgroup1_id = Vattach (file_id, vgroup_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112468"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112469"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112470"></A>   * Create the second vgroup. </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112471"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112472"></A>   vgroup2_id = Vattach (file_id, vgroup_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112473"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112474"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112475"></A>   * Any operations on the vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112476"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112477"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112478"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112479"></A>   * Terminate access to the first vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112480"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112481"></A>   status_32 = Vdetach (vgroup1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112482"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112483"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112484"></A>   * Terminate access to the second vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112485"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112486"></A>   status_32 = Vdetach (vgroup2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112487"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112488"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112489"></A>   * Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112490"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112491"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112492"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112493"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112495"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593875_pgfId-112500"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112503"></A>      program  create_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112504"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112505"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112506"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112507"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112508"></A>      character*15 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112509"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112510"></A>      parameter (FILE_NAME = ’Two_Vgroups.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112511"></A>      integer DFACC_CREATE</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112512"></A>      parameter (DFACC_CREATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112513"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112514"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112515"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112516"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112517"></A>      integer vfstart, vfatch, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112518"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112519"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112520"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112521"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112522"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112523"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112524"></A>      integer vgroup1_id, vgroup2_id, vgroup_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112525"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112526"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112527"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112528"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112529"></A>C     Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112530"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112531"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112532"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112533"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112534"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112535"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112536"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112537"></A>C     Create the first vgroup. Note that the vgroup reference number is set</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112538"></A>C     to -1 for creating and the access mode is ’w’ for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112539"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112540"></A>      vgroup_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112541"></A>      vgroup1_id = vfatch(file_id, vgroup_ref, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112542"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112543"></A>C     Create the second vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112544"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112545"></A>      vgroup2_id = vfatch(file_id, vgroup_ref, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112546"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112547"></A>C     Any operations on the vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112548"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112549"></A>C     ..............................</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112550"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112551"></A>C     Terminate access to the first vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112552"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112553"></A>      status = vfdtch(vgroup1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112554"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112555"></A>C     Terminate access to the second vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112556"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112557"></A>      status = vfdtch(vgroup2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112558"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112559"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112560"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112561"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112562"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112563"></A>      end</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-27961"></A>	5.5	<A NAME="50593875_24856"></A>Cre<A NAME="50593875_marker-27960"></A>ating and Writing to a Vgroup<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-27962"></A>There are two steps involved in the creation of a vgroup: creating the vgroup and inserting data objects into it. Any HDF data object can be inserted into a vgroup. Creation and insertion operations are usually performed at the same time, but that is not required.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-27979"></A>HDF provides two routines that insert an HDF data object into a vgroup, <EM CLASS="FunctionName">
Vaddtagref</EM>
 and <EM CLASS="FunctionName">
Vinsert</EM>
. <EM CLASS="FunctionName">
Vaddtagref</EM>
 can insert any HDF data object into a vgroup, but requires that the tag and reference number of the object be available. Refer to <A HREF="UG_html-2.htm#50593872_30011" CLASS="XRef">Data Descriptor</A> for the description of tags and reference numbers for HDF data objects. <EM CLASS="FunctionName">
Vinsert</EM>
 only inserts a vdata or a vgroup to a vgroup, but only requires the identifier of the vdata or the vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-28004"></A>Creating a vgroup with a member involves the following steps:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593875_pgfId-3068"></A>Open the HDF file.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593875_pgfId-3070"></A>2.	Initialize the Vgroup interface.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-27955"></A>3.	Create the new vgroup.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-27956"></A>4.	Optionally assign a vgroup name.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-27957"></A>5.	Optionally assign a vgroup class.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-3078"></A>6.	Insert a data object.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-3080"></A>7.	Terminate access to the vgroup.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-3082"></A>8.	Terminate access to the Vgroup interface.</LI>
<LI CLASS="Step">
<A NAME="50593875_pgfId-3084"></A>9.	Close the HDF file.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593875_pgfId-29333"></A>These steps correspond to the following sequence of function calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-29334"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, file_access_mode, num_dds_block);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-29335"></A>		status = Vstart(file_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3092"></A>		vgroup_id = Vattach(file_id, vgroup_ref, vg_access_mode);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3094"></A>		status = Vsetname(vgroup_id, vgroup_name);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-27116"></A>		status = Vsetclass(vgroup_id, vgroup_class);</P>
<P CLASS="syntax-or-top">
<A NAME="50593875_pgfId-27118"></A>		/* Use either Vinsert to add a vdata or a vgroup, or </P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-56474"></A>		   Vaddtagref to add any data object */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-36737"></A>		num_of_tag_refs = Vaddtagref(vgroup_id, obj_tag, obj_ref); </P>
<P CLASS="syntax-or-bot">
<A NAME="50593875_pgfId-27071"></A>	<EM CLASS="syntaxLang">
OR</EM>
	obj_pos = Vinsert(vgroup_id, v_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3098"></A>		status = Vdetach(vgroup_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3100"></A>		status = Vend(file_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3102"></A>		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-3104"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, file_access_mode, num_dds_block)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3106"></A>		status = vfstart(file_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3108"></A>		vgroup_id = vfatch(file_id, vgroup_ref, vg_access_mode)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3110"></A>		status = vfsnam(vgroup_id, vdata_name)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3112"></A>		status = vfscls(vgroup_id, vdata_class)</P>
<P CLASS="syntax-or-top">
<A NAME="50593875_pgfId-8217"></A>C		Use either Vinsert to add a vdata or a vgroup, or Vaddtagref to </P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-36749"></A>C		add any data object </P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-36744"></A>		num_of_tag_refs = vfadtr(vgroup_id, obj_tag, obj_ref) </P>
<P CLASS="syntax-or-bot">
<A NAME="50593875_pgfId-13511"></A>	<EM CLASS="syntaxLang">
OR</EM>
	obj_pos = vfinsrt(vgroup_id, v_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3114"></A>		status = vfdtch(vgroup_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3116"></A>		status = vfend(file_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-3118"></A>		status = hclose(file_id)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-8093"></A>The parameter <EM CLASS="VarName">
v_id</EM>
 in the calling sequence is either a vdata or vgroup identifier. The parameter <EM CLASS="VarName">
vgroup_id</EM>
 is the vgroup identifier returned by <EM CLASS="FunctionName">
Vattach</EM>
.<EM CLASS="FunctionName">
 </EM>
</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-5302"></A>When a new vgroup is created, the value of <EM CLASS="VarName">
vgroup_ref</EM>
 must be set to <EM CLASS="DefName">
-1</EM>
 and the value of<EM CLASS="VarName">
 vg_access_mode </EM>
must be &quot;<EM CLASS="VarName">
w</EM>
&quot;.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-5303"></A>	5.5.1	<A NAME="50593875_41259"></A>Assi<A NAME="50593875_marker-11544"></A>gning a Vgroup <A NAME="50593875_marker-11545"></A>Name and Class: Vsetname and Vsetclass</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-5329"></A><EM CLASS="FunctionName">
Vsetname</EM>
<A NAME="50593875_marker-11546"></A> assigns a name to a vgroup. The parameter <EM CLASS="VarName">
vgroup_name</EM>
 is a character string with the name to be assigned to the vgroup. If <EM CLASS="FunctionName">
Vsetname</EM>
 is not called, the vgroup name is set to a zero-length character string. A name may be assigned and reset any time after the vgroup is created. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23879"></A><EM CLASS="FunctionName">
Vsetclass</EM>
<A NAME="50593875_marker-23878"></A> assigns a class to a vgroup. The parameter <EM CLASS="VarName">
vgroup_class</EM>
 is a character string with the class name to be assigned to the vgroup. If <EM CLASS="FunctionName">
Vsetclass</EM>
 is not called, the vgroup class is set to a zero-length string. As with the vgroup names, the class may be set and reset at any time after the vgroup is created.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93917"></A>Starting from release 4.2.4, the maximum length of vgroup’s name is no longer limited to VGNAMELENMAX (or 64) and release 4.2.5 for vgroup’s class name.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50286"></A><EM CLASS="FunctionName">
Vsetname</EM>
 and <EM CLASS="FunctionName">
Vsetclass</EM>
 return either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of these routines are further described in <A HREF="UG_html-5.htm#50593875_31521" CLASS="XRef">Vsetname, Vsetclass, Vaddtagref, Vinsert, and VHmakegroup Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-50292"></A>	5.5.2	<A NAME="50593875_36232"></A>Inser<A NAME="50593875_marker-50291"></A>ting Any HDF Data Object into a Vgroup: Vaddtagref</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-8232"></A><EM CLASS="FunctionName">
Vaddtagref</EM>
<A NAME="50593875_marker-26135"></A> inserts HDF data objects into the vgroup identified by <EM CLASS="VarName">
vgroup_id</EM>
. HDF data objects may be added to a vgroup when the vgroup is created or at any point thereafter.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-27186"></A>The parameters <EM CLASS="VarName">
obj_tag</EM>
 and <EM CLASS="VarName">
obj_ref </EM>
in <EM CLASS="FunctionName">
Vaddtagref</EM>
 are the tag and reference number, respectively, of the data object to be inserted into the vgroup. Note that duplicated tag and reference number pairs are allowed.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-36348"></A><EM CLASS="FunctionName">
Vaddtagref</EM>
 returns the total number of tag and reference number pairs, i.e., the total number of data objects, in the vgroup if the operation is successful, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters of <EM CLASS="FunctionName">
Vaddtagref</EM>
 are further described in <A HREF="UG_html-5.htm#50593875_31521" CLASS="XRef">Table 5C</A>.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93415"></A>Note that <EM CLASS="FunctionName">
Vaddtagref</EM>
 does <EM CLASS="TextItalic">
not</EM>
 verify that the tag and reference number exist.</P>
<DIV>
<H6 CLASS="Example">
<A NAME="50593875_pgfId-112620"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
Adding an SDS to a New Vgroup</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-112621"></A>This example illustrates the use of <EM CLASS="FunctionName">
Vaddtagref/vfadtr</EM>
 to add an HDF data object, an SDS specifically, to a vgroup. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-112622"></A>In this example, the program first creates the HDF file &quot;General_Vgroups.hdf&quot;, then an SDS in the SD interface, and a vgroup in the Vgroup interface.  The SDS is named &quot;Test SD&quot; and is a one-dimensional array of type int32 of 10 elements.  The vgroup is named &quot;SD Vgroup&quot; and is of class &quot;Common Vgroups&quot;.  The program then adds the SDS to the vgroup using <EM CLASS="FunctionName">
Vaddtagref/vfadtr</EM>
.  Notice that, when the operations are complete, the program explicitly terminates access to the SDS, the vgroup, the SD interface, and the Vgroup interface before closing the HDF file.  Refer to <A HREF="UG_html-3.htm#50593873_13938" CLASS="XRef">Scientific Data Sets (SD API)</A> for the discussion of the SD routines used in this example.  </P>
<DIV>
<MAP NAME="UG_html-37">
</MAP>
<IMG SRC="UG_html-37.gif" USEMAP="#UG_html-37" ALT="">
</DIV>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593875_pgfId-112650"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
C:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112653"></A>#include   &quot;hdf.h&quot;      /* Note: in this example, hdf.h can be omitted...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112654"></A>#include   &quot;mfhdf.h&quot;    /* ...since mfhdf.h already includes hdf.h */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112655"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112656"></A>#define  FILE_NAME    &quot;General_Vgroups.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112657"></A>#define  SDS_NAME     &quot;Test SD&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112658"></A>#define  VG_NAME      &quot;SD Vgroup&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112659"></A>#define  VG_CLASS     &quot;Common Vgroups&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112660"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112661"></A>main()</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112662"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112663"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112664"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112665"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112666"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112667"></A>          sd_id,        /* SD interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112668"></A>          sds_id,       /* data set identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112669"></A>          sds_ref,      /* reference number of the data set */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112670"></A>          dim_sizes[1], /* dimension of the data set - only one */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112671"></A>          rank = 1,     /* rank of the data set array */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112672"></A>          vgroup_id,    /* vgroup identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112673"></A>          file_id;      /* HDF file identifier, same for V interface */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112674"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112675"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112676"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112677"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112678"></A>   * Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112679"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112680"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112681"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112682"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112683"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112684"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112685"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112686"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112687"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112688"></A>   * Initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112689"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112690"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112691"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112692"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112693"></A>   * Set the size of the SDS’s dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112694"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112695"></A>   dim_sizes[0] = 10;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112696"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112697"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112698"></A>   * Create the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112699"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112700"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, rank, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112701"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112702"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112703"></A>   * Create a vgroup and set its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112704"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112705"></A>   vgroup_id = Vattach (file_id, -1, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112706"></A>   status_32 = Vsetname (vgroup_id, VG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112707"></A>   status_32 = Vsetclass (vgroup_id, VG_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112708"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112709"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112710"></A>   * Obtain the reference number of the SDS using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112711"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112712"></A>   sds_ref = SDidtoref (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112713"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112714"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112715"></A>   * Add the SDS to the vgroup.  Note: the tag DFTAG_NDG is used</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112716"></A>   * when adding an SDS.  Refer to Appendix A for the entire list of tags.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112717"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112718"></A>   status_32 = Vaddtagref (vgroup_id, DFTAG_NDG, sds_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112719"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112720"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112721"></A>   * Terminate access to the SDS and to the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112722"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112723"></A>   status_n = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112724"></A>   status_n = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112725"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112726"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112727"></A>   * Terminate access to the vgroup and to the V interface, and </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112728"></A>   * close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112729"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112730"></A>   status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112731"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112732"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112733"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112735"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593875_pgfId-112740"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112743"></A>      program  add_SDS_to_a_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112744"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112745"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112746"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112747"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112748"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112749"></A>      character*7  SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112750"></A>      character*9  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112751"></A>      character*13 VG_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112752"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112753"></A>      parameter (FILE_NAME = ’General_Vgroups.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112754"></A>     +           SDS_NAME  = ’Test SD’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112755"></A>     +           VG_NAME   = ’SD Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112756"></A>     +           VG_CLASS  = ’Common Vgroups’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112757"></A>      integer DFACC_CREATE, DFACC_WRITE </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112758"></A>      parameter (DFACC_CREATE = 4, DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112759"></A>      integer DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112760"></A>      parameter (DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112761"></A>      integer DFTAG_NDG</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112762"></A>      parameter (DFTAG_NDG = 720)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112763"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112764"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112765"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112766"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112767"></A>      integer vfstart, vfatch, vfsnam, vfscls, vfadtr, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112768"></A>      integer sfstart, sfcreate, sfid2ref, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112769"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112770"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112771"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112772"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112773"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112774"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112775"></A>      integer vgroup_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112776"></A>      integer sd_id, sds_id, sds_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112777"></A>      integer dim_sizes(1), rank</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112778"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112779"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112780"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112781"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112782"></A>C     Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112783"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112784"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112785"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112786"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112787"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112788"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112789"></A>       </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112790"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112791"></A>C     Initialize SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112792"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112793"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE) </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112794"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112795"></A>C     Set the rank and the size of SDS’s dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112796"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112797"></A>      rank = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112798"></A>      dim_sizes(1) = 10</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112799"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112800"></A>C     Create the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112801"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112802"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, rank, dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112803"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112804"></A>C     Create a vgroup and set its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112805"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112806"></A>      vgroup_id = vfatch(file_id, -1 , ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112807"></A>      status    = vfsnam(vgroup_id, VG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112808"></A>      status    = vfscls(vgroup_id, VG_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112809"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112810"></A>C     Obtain the reference number of the SDS using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112811"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112812"></A>      sds_ref = sfid2ref(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112813"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112814"></A>C     Add the SDS to the vgroup. Note: the tag DFTAG_NDG is used</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112815"></A>C     when adding an SDS.  Refer to HDF Reference Manual, Section III, Table 3K,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112816"></A>C     for the entire list of tags.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112817"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112818"></A>      status = vfadtr(vgroup_id, DFTAG_NDG, sds_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112819"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112820"></A>C     Terminate access to the SDS and to the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112821"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112822"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112823"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112824"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112825"></A>C     Terminate access to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112826"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112827"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112828"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112829"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112830"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112831"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112832"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-112873"></A>      end</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-112875"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-112878"></A>	5.5.3	<A NAME="50593875_20564"></A>Inserti<A NAME="50593875_marker-112877"></A>ng a Vdata or Vgroup Into a Vgroup: Vinsert</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-93420"></A><EM CLASS="FunctionName">
Vinsert</EM>
<A NAME="50593875_marker-93419"></A> is a routine designed specifically for inserting vdatas or vgroups into a parent vgroup. To use <EM CLASS="FunctionName">
Vinsert</EM>
, you must provide the identifier of the parent vgroup, <EM CLASS="VarName">
vgroup_id</EM>
, as well as the identifier of the vdata or vgroup to be inserted, <EM CLASS="VarName">
v_id</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-8308"></A>The parameter <EM CLASS="VarName">
v_id</EM>
 of <EM CLASS="FunctionName">
Vinsert </EM>
is either a vdata identifier or a vgroup identifier, depending on whether a vdata or vgroup is to be inserted.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-36345"></A><EM CLASS="FunctionName">
Vinsert</EM>
 returns the index of the inserted vdata or vgroup if the operation is successful, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters of <EM CLASS="FunctionName">
Vinsert</EM>
 are further defined in <A HREF="UG_html-5.htm#50593875_31521" CLASS="XRef">Table 5C</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-93423"></A>	5.5.4	<A NAME="50593875_72594"></A>Building a Vgroup with or without Elements: VHmakegroup</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-93444"></A><EM CLASS="FunctionName">
VHmakegroup</EM>
 is a high-level routine, designed to facilite the process of creating and inserting elements into a vgroup.  The vgroup will have a name and/or class name if these information are provided to <EM CLASS="FunctionName">
VHmakegroup</EM>
.  By using <EM CLASS="FunctionName">
VHmakegroup</EM>
, an application can by pass a number of function calls such as <EM CLASS="FunctionName">
Vattach</EM>
, <EM CLASS="FunctionName">
Vsetname</EM>
, <EM CLASS="FunctionName">
Vsetclass</EM>
, <EM CLASS="FunctionName">
Vinsert</EM>
/<EM CLASS="FunctionName">
Vaddtagref</EM>
, and <EM CLASS="FunctionName">
Vdetach</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93447"></A><EM CLASS="FunctionName">
VHmakegroup</EM>
 creates a vgroup with the name specified by the parameter <EM CLASS="VarName">
vgroup_name</EM>
 and the class name specified by the parameter <EM CLASS="VarName">
vgroup_class</EM>
 in the file identified by the parameter <EM CLASS="VarName">
file_id</EM>
.  The routine inserts <EM CLASS="VarName">
n_objects</EM>
 objects into the vgroup. The tag and reference numbers of the objects to be inserted are specified in the arrays <EM CLASS="VarName">
tag_array</EM>
 and <EM CLASS="VarName">
ref_array</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93490"></A>Creating empty vgroups with <EM CLASS="FunctionName">
VHmakegroup</EM>
 is allowed. <EM CLASS="FunctionName">
VHmakegroup</EM>
 does not check if the tag/reference number pair is valid, or if the corresponding data object exists. However, all of the tag/reference number pairs must be unique.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93491"></A><EM CLASS="FunctionName">
Vstart</EM>
 must precede any calls to <EM CLASS="FunctionName">
VHmakegroup</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93512"></A>The elements in the arrays <EM CLASS="VarName">
tag_array</EM>
 and <EM CLASS="VarName">
ref_array</EM>
 are the matching tag/reference number pairs of the objects to be inserted, that means <EM CLASS="VarName">
tag_array[0]</EM>
 and <EM CLASS="VarName">
ref_array[0]</EM>
 refer to one data object, and <EM CLASS="VarName">
tag_array[1]</EM>
 and <EM CLASS="VarName">
ref_array[1]</EM>
 to another, etc.  If name and/or class name are not desired, the parameters <EM CLASS="VarName">
vgroup_name</EM>
 and/or <EM CLASS="VarName">
vgroup_class</EM>
 can be <EM CLASS="DefName">
NULL</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93629"></A>The syntax of <EM CLASS="FunctionName">
VHmakegroup</EM>
<A NAME="50593875_marker-93628"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-93630"></A><EM CLASS="syntaxLang">
C:</EM>
		vgroup_ref = VHmakegroup(file_id, tag_array, ref_array, n_objects, vgroup_name, vgroup_class);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-93631"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	vgroup_ref = vhfmkgp(file_id, tag_array, ref_array, n_objects, vgroup_name, vgroup_class)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93613"></A><EM CLASS="FunctionName">
VHmakegroup</EM>
 returns the reference number of the newly-created vgroup if successful, <EM CLASS="DefName">
FAIL</EM>
 (or -1) otherwise.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93682"></A>The parameters of <EM CLASS="FunctionName">
VHmakegroup</EM>
 are further defined in <A HREF="UG_html-5.htm#50593875_13786" CLASS="XRef">Table 5F</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-93397"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_31521"></A>Vs<A NAME="50593875_marker-93272"></A>etname, Vsetc<A NAME="50593875_marker-93273"></A>lass, Vaddt<A NAME="50593875_marker-93274"></A>agref, <A NAME="50593875_marker-93275"></A>Vinsert, and VHma<A NAME="50593875_marker-93689"></A>kegroup Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93278"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93279"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93280"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93282"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93284"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93288"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93294"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93296"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93300"></A>Vsetname</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93301"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93302"></A>(vfsnam)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93304"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93306"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93308"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93310"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93314"></A>vgroup_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93316"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93318"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93320"></A>Vgroup name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93322"></A>Vsetclass</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93323"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93324"></A>(vfscls)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93326"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93328"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93330"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93332"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93336"></A>vgroup_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93338"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93340"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93342"></A>Vgroup class</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93344"></A>Vaddtagref</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93345"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93346"></A>(vfadtr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93348"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93350"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93352"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93354"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93358"></A>obj_tag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93360"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93362"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93364"></A>Tag of the data object to be inserted</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93368"></A>obj_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93370"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93372"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93374"></A>Reference number of the data object to be inserted</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93376"></A>Vinsert</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93377"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93378"></A>(vfinsrt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93380"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93382"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93384"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93386"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93390"></A>v_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93392"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93394"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93396"></A>Identifier of the vgroup or vdata to be inserted</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93701"></A>VHmakegroup</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93702"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93703"></A>(vhfmkgp)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93705"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93707"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93709"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93711"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93693"></A>tag_array</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93695"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93697"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93699"></A>Array of tags</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93735"></A>ref_array</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93737"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93739"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93741"></A>Array of reference numbers</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93725"></A>n_objects</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93727"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93729"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93731"></A>Number of items in tag_array or ref_array (must be the same)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93715"></A>vgroup_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93717"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93793"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93721"></A>Name of the vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93757"></A>vgroup_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93759"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93797"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93763"></A>Class of the vgroup</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593875_pgfId-59046"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
Adding Three Vdatas into a Vgroup</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-56180"></A>This example illustrates the use of <EM CLASS="FunctionName">
Vinsert/vfinsrt</EM>
 to add a vdata to a vgroup.  Note that <EM CLASS="FunctionName">
Vaddtagref/vfadtrf</EM>
, used in the previous example, performs the same task and only differs in the argument list. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-90087"></A>In this example, the program creates three vdatas and a vgroup in the existing HDF file &quot;General_Vgroups.hdf&quot; then adds the three vdatas to the vgroup.  Notice that the vdatas and the vgroup are created in the same interface that is initialized by the call <EM CLASS="FunctionName">
Vstart/vfstart</EM>
.  The first vdata is named &quot;X,Y Coordinates&quot; and has two order-1 fields of type float32. The second vdata is named &quot;Temperature&quot; and has one order-1 field of type float32. The third vdata is named &quot;Node List&quot; and has one order-3 field of type int16.  The vgroup is named &quot;Vertices&quot; and is of class &quot;Vertex Set&quot;.  The program uses <EM CLASS="FunctionName">
Vinsert/vfinsrt</EM>
 to add the vdatas to the vgroup using the vdata identifiers.  Refer to <A HREF="UG_html-4.htm#50593874_41304" CLASS="XRef">Vdatas (VS API)</A>, for the discussion of the VS routines used in this example.  </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-5553"></A>&nbsp;</P>
<DIV>
<MAP NAME="UG_html-38">
</MAP>
<IMG SRC="UG_html-38.gif" USEMAP="#UG_html-38" ALT="">
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593875_pgfId-53822"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-53997"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54978"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54979"></A>#define  FILE_NAME         &quot;General_Vgroups.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54980"></A>#define  N_RECORDS         30       /* number of records in the vdatas */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54981"></A>#define  ORDER             3        /* order of field FIELD_VD2 */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54982"></A>#define  VG_NAME           &quot;Vertices&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54983"></A>#define  VG_CLASS          &quot;Vertex Set&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54984"></A>#define  VD1_NAME          &quot;X,Y Coordinates&quot;   /* first vdata to hold X,Y...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54985"></A>#define  VD1_CLASS         &quot;Position&quot;          /*...values of the vertices */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54986"></A>#define  VD2_NAME          &quot;Temperature&quot;       /* second vdata to hold the...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54987"></A>#define  VD2_CLASS         &quot;Property List&quot;     /*...temperature field */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54988"></A>#define  VD3_NAME          &quot;Node List&quot;         /* third vdata to hold...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54989"></A>#define  VD3_CLASS         &quot;Mesh&quot;              /*...the list of nodes */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54990"></A>#define  FIELD1_VD1        &quot;PX&quot;    /* first field of first vdata - X values */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54991"></A>#define  FIELD2_VD1        &quot;PY&quot;/* second field of first vdata - Y values */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54992"></A>#define  FIELD_VD2         &quot;TMP&quot;/* field of third vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54993"></A>#define  FIELD_VD3         &quot;PLIST&quot;/* field of second vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54994"></A>#define  FIELDNAME_LIST    &quot;PX,PY&quot; /* field name list for first vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54995"></A>/* Note that the second and third vdatas can use the field names as </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54996"></A>   the field name lists unless more fields are added to a vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54997"></A>   Then a field name list is needed for that vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54998"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-54999"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55000"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55001"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55002"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55003"></A>   intn     status_n;   /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55004"></A>   int32    status_32,  /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55005"></A>            file_id, vgroup_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55006"></A>            vdata1_id, vdata2_id, vdata3_id; </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55007"></A>   int32    num_of_records,           /* number of records actually written */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55008"></A>            vd_index;                 /* position of a vdata in the vgroup  */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55009"></A>   int8     i, j, k = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55010"></A>   float32  pxy[N_RECORDS][2] =       /* buffer for data of the first vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55011"></A>		  	{-1.5, 2.3, -1.5, 1.98, -2.4, .67,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55012"></A>   			-3.4, 1.46, -.65, 3.1, -.62, 1.23,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55013"></A>   			-.4, 3.8, -3.55, 2.3, -1.43, 2.44,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55014"></A>   			.23, 1.13, -1.4, 5.43, -1.4, 5.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55015"></A>   			-3.4, 3.85, -.55, .3, -.21, 1.22,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55016"></A>   			-1.44, 1.9, -1.4, 2.8, .94, 1.78,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55017"></A>   			-.4, 2.32, -.87, 1.99, -.54, 4.11,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55018"></A>   			-1.5, 1.35, -1.4, 2.21, -.22, 1.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55019"></A>   			-1.1, 4.55, -.44, .54, -1.11, 3.93,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55020"></A>   			-.76, 1.9, -2.34, 1.7, -2.2, 1.21};</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55021"></A>   float32  tmp[N_RECORDS];          /* buffer for data of the second vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55022"></A>   int16    plist[N_RECORDS][3];     /* buffer for data of the third vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55023"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55024"></A>   /********************** End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55025"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55026"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55027"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55028"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55029"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55030"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55031"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55032"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55033"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55034"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55035"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55036"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55037"></A>   * Buffer the data for the second and third vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55038"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55039"></A>   for (i = 0; i &lt; N_RECORDS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55040"></A>      for (j = 0; j &lt; ORDER; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55041"></A>         plist[i][j] = ++k;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55042"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55043"></A>   for (i = 0; i &lt; N_RECORDS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55044"></A>      tmp[i] = i * 10.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55045"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55046"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55047"></A>   * Create the vgroup then set its name and class.  Note that the vgroup’s</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55048"></A>   * reference number is set to -1 for creating and the access mode is &quot;w&quot; for</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55049"></A>   * writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55050"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55051"></A>   vgroup_id = Vattach (file_id, -1, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55052"></A>   status_32 = Vsetname (vgroup_id, VG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55053"></A>   status_32 = Vsetclass (vgroup_id, VG_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55054"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55055"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55056"></A>   * Create the first vdata then set its name and class. Note that the vdata’s</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55057"></A>   * reference number is set to -1 for creating and the access mode is &quot;w&quot; for</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55058"></A>   * writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55059"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55060"></A>   vdata1_id = VSattach (file_id, -1, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55061"></A>   status_32 = VSsetname (vdata1_id, VD1_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55062"></A>   status_32 = VSsetclass (vdata1_id, VD1_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55063"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55064"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55065"></A>   * Introduce and define the fields of the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55066"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55067"></A>   status_n = VSfdefine (vdata1_id, FIELD1_VD1, DFNT_FLOAT32, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55068"></A>   status_n = VSfdefine (vdata1_id, FIELD2_VD1, DFNT_FLOAT32, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55069"></A>   status_n = VSsetfields (vdata1_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55070"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55071"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55072"></A>   * Write the buffered data into the first vdata with full interlace mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55073"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55074"></A>   num_of_records = VSwrite (vdata1_id, (uint8 *)pxy, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55075"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55076"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55077"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55078"></A>   * Insert the vdata into the vgroup using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55079"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55080"></A>   vd_index = Vinsert (vgroup_id, vdata1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55081"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55082"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55083"></A>   * Detach from the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55084"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55085"></A>   status_32 = VSdetach (vdata1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55086"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55087"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55088"></A>   * Create, write, and insert the second vdata to the vgroup using</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55089"></A>   * steps similar to those used for the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55090"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55091"></A>   vdata2_id = VSattach (file_id, -1, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55092"></A>   status_32 = VSsetname (vdata2_id, VD2_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55093"></A>   status_32 = VSsetclass (vdata2_id, VD2_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55094"></A>   status_n = VSfdefine (vdata2_id, FIELD_VD2, DFNT_FLOAT32, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55095"></A>   status_n = VSsetfields (vdata2_id, FIELD_VD2);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55096"></A>   num_of_records = VSwrite (vdata2_id, (uint8 *)tmp, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55097"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55098"></A>   vd_index = Vinsert (vgroup_id, vdata2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55099"></A>   status_32 = VSdetach (vdata2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55100"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55101"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55102"></A>   * Create, write, and insert the third vdata to the vgroup using </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55103"></A>   * steps similar to those used for the first and second vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55104"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55105"></A>   vdata3_id = VSattach (file_id, -1, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55106"></A>   status_32 = VSsetname (vdata3_id, VD3_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55107"></A>   status_32 = VSsetclass (vdata3_id, VD3_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55108"></A>   status_n = VSfdefine (vdata3_id, FIELD_VD3, DFNT_INT16, 3);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55109"></A>   status_n = VSsetfields (vdata3_id, FIELD_VD3);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55110"></A>   num_of_records = VSwrite (vdata3_id, (uint8 *)plist, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55111"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55112"></A>   vd_index = Vinsert (vgroup_id, vdata3_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55113"></A>   status_32 = VSdetach (vdata3_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55114"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55115"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55116"></A>   * Terminate access to the vgroup &quot;Vertices&quot;.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55117"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55118"></A>   status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55119"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55120"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55121"></A>   * Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55122"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55123"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55124"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55125"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55126"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593875_pgfId-53908"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55303"></A>      program  add_vdatas_to_a_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57819"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57820"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57821"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57822"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57823"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57824"></A>      character*8  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57825"></A>      character*10 VG_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57826"></A>      character*15 VD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57827"></A>      character*8  VD1_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57828"></A>      character*11 VD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57829"></A>      character*13 VD2_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57830"></A>      character*9  VD3_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57831"></A>      character*4  VD3_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57832"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57833"></A>      parameter (FILE_NAME = ’General_Vgroups.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57834"></A>     +           VG_NAME   = ’Vertices’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57835"></A>     +           VG_CLASS  = ’Vertex Set’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57836"></A>      parameter (VD1_NAME  = ’X,Y Coordinates’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57837"></A>     +           VD2_NAME  = ’Temperature’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57838"></A>     +           VD3_NAME  = ’Node List’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57839"></A>      parameter (VD1_CLASS = ’Position’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57840"></A>     +           VD2_CLASS = ’Property List’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57841"></A>     +           VD3_CLASS = ’Mesh’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57842"></A>      character*2 FIELD1_VD1</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57843"></A>      character*2 FIELD2_VD1</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57844"></A>      character*3 FIELD_VD2</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57845"></A>      character*4 FIELD_VD3</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57846"></A>      character*5 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57847"></A>      parameter (FIELD1_VD1 = ’PX’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57848"></A>     +           FIELD2_VD1 = ’PY’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57849"></A>     +           FIELD_VD2  = ’TMP’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57850"></A>     +           FIELD_VD3  = ’PLIST’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57851"></A>     +           FIELDNAME_LIST = ’PX,PY’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57852"></A>      integer N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57853"></A>      parameter (N_RECORDS = 30)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57854"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57855"></A>      integer  DFACC_WRITE </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57856"></A>      parameter (DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57857"></A>      integer DFNT_FLOAT32, DFNT_INT16</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57858"></A>      parameter (DFNT_FLOAT32 = 5, DFNT_INT16 = 22)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57859"></A>      integer FULL_INTERLACE </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57860"></A>      parameter (FULL_INTERLACE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57861"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57862"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57863"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57864"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57865"></A>      integer vfstart, vfatch, vfsnam, vfscls, vfinsrt, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57866"></A>      integer vsfatch, vsfsnam, vsfscls, vsffdef, vsfsfld, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57867"></A>     +        vsfwrt, vsfwrtc, vsfdtch</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57868"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57869"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57870"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57871"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57872"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57873"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57874"></A>      integer vgroup_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57875"></A>      integer vdata1_id, vdata2_id, vdata3_id, vd_index </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57876"></A>      integer num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57877"></A>      integer i, j, k</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57878"></A>      real    pxy(2,N_RECORDS), tmp(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57879"></A>      integer plist(3,N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57880"></A>      data pxy /-1.5, 2.3, -1.5, 1.98, -2.4, .67,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57881"></A>     +          -3.4, 1.46, -.65, 3.1, -.62, 1.23,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57882"></A>     +          -.4, 3.8, -3.55, 2.3, -1.43, 2.44,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57883"></A>     +          .23, 1.13, -1.4, 5.43, -1.4, 5.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57884"></A>     +          -3.4, 3.85, -.55, .3, -.21, 1.22,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57885"></A>     +          -1.44, 1.9, -1.4, 2.8, .94, 1.78,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57886"></A>     +          -.4, 2.32, -.87, 1.99, -.54, 4.11,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57887"></A>     +          -1.5, 1.35, -1.4, 2.21, -.22, 1.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57888"></A>     +          -1.1, 4.55, -.44, .54, -1.11, 3.93,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57889"></A>     +          -.76, 1.9, -2.34, 1.7, -2.2, 1.21/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57890"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57891"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57892"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57893"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57894"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57895"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57896"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57897"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57898"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57899"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57900"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57901"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57902"></A>C     Buffer the data for the third and second vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57903"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57904"></A>      do 20 i = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57905"></A>         do 10 j = 1, 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57906"></A>            plist(j,i) = k </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57907"></A>            k = k+1</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57908"></A>10       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57909"></A>20    continue    </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57910"></A>      do 30 i = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57911"></A>         tmp(i) = (i-1) * 10.0</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57912"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57913"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57914"></A>C     Create a vgroup and set its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57915"></A>C     Note that the vgroup’s reference number is set to -1 for creating</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57916"></A>C     and the access mode is ’w’ for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57917"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57918"></A>      vgroup_id = vfatch(file_id, -1 , ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57919"></A>      status    = vfsnam(vgroup_id, VG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57920"></A>      status    = vfscls(vgroup_id, VG_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57921"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57922"></A>C     Create the first vdata then set its name and class. Note that the vdata’s</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57923"></A>C     reference number is set to -1 for creating and the access mode is ’w’ for</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57924"></A>C     writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57925"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57926"></A>      vdata1_id = vsfatch(file_id, -1, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57927"></A>      status = vsfsnam(vdata1_id, VD1_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57928"></A>      status = vsfscls(vdata1_id, VD1_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57929"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57930"></A>C     Introduce and define the fields of the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57931"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57932"></A>      status = vsffdef(vdata1_id, FIELD1_VD1, DFNT_FLOAT32, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57933"></A>      status = vsffdef(vdata1_id, FIELD2_VD1, DFNT_FLOAT32, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57934"></A>      status = vsfsfld(vdata1_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57935"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57936"></A>C     Write the buffered data into the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57937"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57938"></A>      num_of_records = vsfwrt(vdata1_id, pxy, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57939"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57940"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57941"></A>C     Insert the vdata into the vgroup using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57942"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57943"></A>      vd_index = vfinsrt(vgroup_id, vdata1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57944"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57945"></A>C     Detach from the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57946"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57947"></A>      status = vsfdtch(vdata1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57948"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57949"></A>C     Create, write, and insert the second vdata to the vgroup using</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57950"></A>C     steps similar to those used for the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57951"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57952"></A>      vdata2_id = vsfatch(file_id, -1, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57953"></A>      status = vsfsnam(vdata2_id, VD2_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57954"></A>      status = vsfscls(vdata2_id, VD2_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57955"></A>      status = vsffdef(vdata2_id, FIELD_VD2, DFNT_FLOAT32, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57956"></A>      status = vsfsfld(vdata2_id, FIELD_VD2)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57957"></A>      num_of_records = vsfwrt(vdata2_id, tmp, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57958"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57959"></A>      vd_index = vfinsrt(vgroup_id, vdata2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57960"></A>      status = vsfdtch(vdata2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57961"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57962"></A>C     Create, write, and insert the third vdata to the vgroup using </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57963"></A>C     steps similar to those used for the first and second vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57964"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57965"></A>      vdata3_id = vsfatch(file_id, -1, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57966"></A>      status = vsfsnam(vdata3_id, VD3_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57967"></A>      status = vsfscls(vdata3_id, VD3_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57968"></A>      status = vsffdef(vdata3_id, FIELD_VD3, DFNT_INT16, 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57969"></A>      status = vsfsfld(vdata3_id, FIELD_VD3)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57970"></A>      num_of_records = vsfwrtc(vdata3_id, plist, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57971"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57972"></A>      vd_index = vfinsrt(vgroup_id, vdata3_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57973"></A>      status = vsfdtch(vdata3_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57974"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57975"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57976"></A>C     Terminate access to the vgroup ’Vertices’.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57977"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57978"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57979"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57980"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57981"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57982"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57983"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57984"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57985"></A><A NAME="50593875_marker-58044"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-13065"></A>	5.6	Rea<A NAME="50593875_marker-11558"></A>ding from Vgroups<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-7742"></A>Reading from vgroups is more complicated than writing to vgroups. The process of reading from vgroups involves two steps: locating the appropriate vgroup and obtaining information about the member or members of a vgroup.  This section describes routines that provide these functionalities.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-3722"></A>	5.6.1	Locati<A NAME="50593875_marker-11560"></A>ng Vgroups and Obtaining Vgroup Information</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-56706"></A>There are several routines provided for the purpose of locating a particular vgroup, each corresponding to an identifying aspect of a vgroup. These aspects include whether the vgroup has vgroups included in it, the identification of the vgroup in the file based on its reference number, and the name and class name of the vgroup. The routines are described in the following subsections.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-6307"></A>	5.6.1.1	<A NAME="50593875_38252"></A>Locating <A NAME="50593875_marker-11565"></A>Lone Vgroups: Vlone</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-6308"></A><A NAME="50593875_marker-26414"></A>A <EM CLASS="Definition">
lone vgroup</EM>
 is one that is not a member of any other vgroups, i.e., not linked with any other vgroups. <EM CLASS="FunctionName">
Vlone</EM>
 searches the file specified by the parameter <EM CLASS="VarName">
file_id</EM>
 and retrieves the reference numbers of lone vgroups in the file. This routine is useful for locating unattached vgroups in a file or the vgroups at the top of a grouping hierarchy. The syntax of <EM CLASS="FunctionName">
Vlone</EM>
<A NAME="50593875_marker-20110"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19413"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_lones = Vlone(file_id, ref_array, maxsize);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19418"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_lones = vflone(file_id, ref_array, maxsize)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-20091"></A>The parameter <EM CLASS="VarName">
ref_array</EM>
 is an array allocated to hold the reference numbers of the found vgroups. The argument <EM CLASS="VarName">
maxsize</EM>
 specifies the maximum size of <EM CLASS="VarName">
ref_array</EM>
. At most <EM CLASS="VarName">
maxsize</EM>
 reference numbers will be retrieved in <EM CLASS="VarName">
ref_array</EM>
.  The value of <EM CLASS="VarName">
max_size</EM>
, the space allocated for <EM CLASS="VarName">
ref_array</EM>
, depends on how many lone vgroups are expected to be found. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-57463"></A>To use dynamic memory instead of allocating an unnecessarily large array (i.e., one that will hold the maximum possible number of reference numbers), call <EM CLASS="FunctionName">
Vlone</EM>
 twice. In the first call to <EM CLASS="FunctionName">
Vlone</EM>
, set <EM CLASS="VarName">
maxsize</EM>
 to a small value, for example, 0 or 1, then use the returned value (the total number of lone vgroups in the file) to allocate memory for <EM CLASS="VarName">
ref_array</EM>
. This array is then passed into the second call to <EM CLASS="FunctionName">
Vlone</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23903"></A><EM CLASS="FunctionName">
Vlone</EM>
 returns the total number of lone vgroups or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_35281" CLASS="XRef">Vlone, Vgetid, Vgetvgroups, and Vgisinternal Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-6370"></A>	5.6.1.2	<A NAME="50593875_40421"></A>Sequentially Searching for a Vgroup: Vgetid</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-6371"></A><EM CLASS="FunctionName">
Vgetid</EM>
<A NAME="50593875_marker-26498"></A> sequentially searches through an HDF file to obtain the reference number of the vgroup immediately following the vgroup specified by the reference number, <EM CLASS="VarName">
vgroup_ref</EM>
. The syntax of <EM CLASS="FunctionName">
Vgetid</EM>
<A NAME="50593875_marker-45922"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19427"></A><EM CLASS="syntaxLang">
C:</EM>
		ref_num = Vgetid(file_id, vgroup_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19432"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	ref_num = vfgid(file_id, vgroup_ref)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-20037"></A>To initiate a search, <EM CLASS="FunctionName">
Vgetid</EM>
 may be called with <EM CLASS="VarName">
vgroup_ref</EM>
 set to <EM CLASS="DefName">
-1</EM>
. Doing so returns the reference number of the first vgroup in the file. Any attempt to search past the last vgroup in a file will cause <EM CLASS="FunctionName">
Vgetid</EM>
 to return a value of <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23927"></A><EM CLASS="FunctionName">
Vgetid</EM>
 returns a vgroup reference number or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
Vgetid</EM>
 are further defined in <A HREF="UG_html-5.htm#50593875_35281" CLASS="XRef">Vlone, Vgetid, Vgetvgroups, and Vgisinternal Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-95543"></A>	5.6.1.3	Retrieving vgroups in a file or in a vgroup: Vgetvgroups</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-95544"></A><EM CLASS="FunctionName">
Vgetvgroups</EM>
 retrieves a list containing reference numbers of vgroups in a file or in a vgroup, which is identified by the parameter <EM CLASS="VarName">
id</EM>
.  The syntax of <EM CLASS="FunctionName">
Vgetvgroups</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-95545"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgetvgroups(id, start_vgroup, vgroup_count, refarray);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-111857"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfgvgroups(id, start_vg, vg_count, refarray)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-111861"></A>The library commonly use vgroups or vdatas to store HDF objects.  For example, a vgroup is used to represent an SDS and a vdata for an attribute.  <EM CLASS="FunctionName">
Vgetvgroups</EM>
 retrieves only the vgroups that were previously created by user applications, not those that were created by the library internally.  They are referred to as user-created vgroups, for brevity.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-95763"></A>When <EM CLASS="VarName">
id</EM>
 is a vgroup identifier, only the immediate sub-vgroups will be retrieved; that is, the sub-vgroups will not be traversed.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-95930"></A>The parameter <EM CLASS="VarName">
vgroup_count</EM>
 specifies the number of values that the refarray list can hold and can be any positive number smaller than <EM CLASS="DefName">
MAX_REF</EM>
 (<EM CLASS="DefName">
65535</EM>
).  If <EM CLASS="VarName">
vgroup_count</EM>
 is larger than the actual number of user-created vgroups, then only the actual number of user-created vgroups will be retrieved.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-95724"></A>The retrieval starts at the vgroup number <EM CLASS="VarName">
start_vgroup</EM>
 going forward in the order which the vgroups were created.  For example, if there are 100 vgroups that can be retrieved, specifying <EM CLASS="VarName">
start_vgroup</EM>
 as 90 and <EM CLASS="VarName">
vgroup_count</EM>
 as 10 will retrieve the last ten vgroups.  The value for <EM CLASS="VarName">
start_vgroup</EM>
 must be non-negative and smaller than or equal to the number of user-created vgroups, which can be obtained by invoking <EM CLASS="FunctionName">
Vgetvgroups</EM>
 passing in <EM CLASS="DefName">
NULL</EM>
 for the array <EM CLASS="VarName">
refarray</EM>
.  This number of user-created vgroups will also allow applications to sufficiently allocate space for <EM CLASS="VarName">
refarray</EM>
.</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-95550"></A>When <EM CLASS="VarName">
start_vgroup</EM>
 is 0, the retrieval will start at the beginning of the file or the first sub-vgroup of the specified vgroup.</LI>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-95551"></A>When <EM CLASS="VarName">
start_vgroup</EM>
 is smaller than the number of user-created vgroups in the file or the specified vgroup, <EM CLASS="FunctionName">
Vgetvgroups</EM>
 will start retrieving vgroups from the vgroup number <EM CLASS="VarName">
start_vgroup</EM>
.</LI>
<LI CLASS="Bullet">
<A NAME="50593875_pgfId-95552"></A>When <EM CLASS="VarName">
start_vgroup</EM>
 is greater than the number of user-created vgroups in the file or the vgroup, <EM CLASS="FunctionName">
Vgetvgroups</EM>
 will return <EM CLASS="DefName">
FAIL </EM>
(or <EM CLASS="DefName">
-1</EM>
).</LI>
</UL>
<P CLASS="Body">
<A NAME="50593875_pgfId-111893"></A>Following are some examples of using <EM CLASS="FunctionName">
Vgetvgroups</EM>
 to get the reference numbers of vgroups in a file, assuming that the file has been opened for reading successfully:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-111894"></A><EM CLASS="syntaxLang">
C:</EM>
		/* Call Vgetvgroups the first time to get the number of vgroups in </P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111895"></A>		   the file to allocate refarray */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111896"></A>		n_vgs = Vgetvgroups(file_id, 0, 0, NULL);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111897"></A>		</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111898"></A>		/* Allocate space to retrieve reference numbers of n_vgs vgroups */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111899"></A>		refarray = (uint16 *)HDmalloc(sizeof(uint16)*n_vgs);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111900"></A>		</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111901"></A>		/* To get all the vgroups in the file: */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111902"></A>		n_vgs = Vgetvgroups(file_id, 0, n_vgs, refarray);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111903"></A>		</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111904"></A>		/* Assuming n_vgs=100, to get the first 10 vgroups in the file: */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111905"></A>		n_vgs = Vgetvgroups(file_id, 0, 10, refarray);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111906"></A>		</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111907"></A>		/* Assuming n_vgs=100, to get the last 10 vgroups in the file: */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111908"></A>		n_vgs = Vgetvgroups(file_id, 90, 10, refarray);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111909"></A>		</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-111910"></A>Following are some examples of using <EM CLASS="FunctionName">
Vgetvgroups</EM>
 to get the reference numbers of vgroups in a parent vgroup:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-111911"></A><EM CLASS="syntaxLang">
C:</EM>
		vgroup_id = Vattach(file_id, vgroup_ref, &quot;r&quot;);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111912"></A>		/* Call Vgetvgroups the first time to get the number of vgroups in</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111913"></A>		   the parent vgroup to allocate refarray */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111914"></A>		n_vgs = Vgetvgroups(vgroup_id, 0, 0, NULL);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111915"></A>		</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111916"></A>		/* Allocate space to retrieve reference numbers of n_vgs vgroups */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111917"></A>		refarray = (uint16 *)HDmalloc(sizeof(uint16)*n_vgs);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111918"></A>		</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111919"></A>		/* Get all the vgroups in the parent vgroup */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111920"></A>		n_vgs = Vgetvgroups(vgroup_id, 0, n_vgs, refarray);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111921"></A>		</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111922"></A>		/* Close the vgroup */</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-111923"></A>		status = Vdetach(vgroup_id);</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-111866"></A>Note that, in the FORTRAN-77 version, if <EM CLASS="VarName">
vg_count</EM>
 is <EM CLASS="DefName">
-1</EM>
 then the function will return the number of user-created vgroups and disregard <EM CLASS="VarName">
refarray</EM>
; equivalent to passing <EM CLASS="DefName">
NULL</EM>
 for <EM CLASS="VarName">
refarray</EM>
 in the C version.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-109580"></A><EM CLASS="FunctionName">
Vgetvgroups</EM>
 returns the number of user-created vgroups retrieved, if successful, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
), otherwise.  The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_35281" CLASS="XRef">Vlone, Vgetid, Vgetvgroups, and Vgisinternal Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-111841"></A>	5.6.1.4	Determining Internal Vgroup: Vgisinternal</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-109785"></A>The HDF library commonly uses vgroups and vdatas to store metadata or data for the library's own use.  For examples, vgroups are used to represent SDS or raster images, and vdatas are used to store attributes or dimensions.  Typically, a user is only interested in vgroups/vdatas that were created by user applications, not by the library internally.  <EM CLASS="FunctionName">
Vgisinternal</EM>
 allows an application to find out if a vgroup is internally created.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-109861"></A>The syntax of <EM CLASS="FunctionName">
Vgisinternal</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-109862"></A><EM CLASS="syntaxLang">
C:</EM>
		is_internal = Vgisinternal(vgroup_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-109863"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Currently unavailable</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-109900"></A><EM CLASS="FunctionName">
Vgisinternal</EM>
 checks the class name of the given vgroup against the list <EM CLASS="DefName">
HDF_INTERNAL_VGS</EM>
 to determine whether the vgroup was previously created by the library instead of by a user application.  The names in <EM CLASS="DefName">
HDF_INTERNAL_VGS</EM>
 are included:</P>
<P CLASS="List10pt">
<A NAME="50593875_pgfId-109901"></A><EM CLASS="DefName">
_HDF_VARIABLE (&quot;Var0.0&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593875_pgfId-109902"></A><EM CLASS="DefName">
_HDF_DIMENSION (&quot;Dim0.0&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593875_pgfId-109881"></A><EM CLASS="DefName">
_HDF_UDIMENSION (&quot;UDim0.0&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593875_pgfId-109882"></A><EM CLASS="DefName">
_HDF_CDF (&quot;CDF0.0&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593875_pgfId-109883"></A><EM CLASS="DefName">
GR_NAME (&quot;RIG0.0&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593875_pgfId-109884"></A><EM CLASS="DefName">
RI_NAME (&quot;RI0.0&quot;)</EM>
</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-109915"></A>There is one special case where an internal vgroup having a null class name and a name as <EM CLASS="DefName">
GR_NAME</EM>
.  This should be extremely rare, yet it is a possibility.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-109939"></A><EM CLASS="FunctionName">
Vgisinternal</EM>
 returns <EM CLASS="DefName">
TRUE</EM>
 (<EM CLASS="DefName">
1</EM>
) if the inquired vgroup is one that was internally created by the library, <EM CLASS="DefName">
FALSE</EM>
 (<EM CLASS="DefName">
0</EM>
) otherwise, and <EM CLASS="DefName">
FAIL</EM>
 (<EM CLASS="DefName">
-1</EM>
) if failure occurs.  The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_35281" CLASS="XRef">Vlone, Vgetid, Vgetvgroups, and Vgisinternal Parameter Lists</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-109706"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_35281"></A>Vlone, Vg<A NAME="50593875_marker-109586"></A>etid, Vgetvgroups, and Vgisinternal Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-111517"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-111518"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-111519"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-111521"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-111523"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-111527"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-111533"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-111535"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111539"></A>Vlone</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-111540"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111541"></A>(vflone)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111543"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111545"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111547"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111549"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111553"></A>ref_array</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111555"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111557"></A>integer (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111559"></A>Buffer for the reference numbers of lone vgroups</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111563"></A>maxsize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111565"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111567"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111569"></A>Maximum number of vgroups to store in ref_array</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111571"></A>Vgetid</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-111572"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111573"></A>(vfgid)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111575"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111577"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111579"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111581"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111585"></A>vgroup_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111587"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111589"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111591"></A>Reference number of the current vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111593"></A>Vgetvgroups</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-111594"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111595"></A>(vfgvgroups)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111597"></A>id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111599"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111601"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111603"></A>File or vgroup identifer</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111607"></A>start_vgroup</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111609"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111611"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111613"></A>Vgroup index to start retrieving at</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111619"></A>vgroup_count</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111621"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111623"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111625"></A>Number of vgroups to be retrieved</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111629"></A>refarray</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111631"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111633"></A>integer (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111635"></A>Array to hold reference numbers of retrieved vgroups</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111637"></A>Vgisinternal</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-111638"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-111639"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111641"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111643"></A>int32</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-111645"></A>N/A</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-111647"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-7757"></A>	5.6.1.5	<A NAME="50593875_31002"></A>Obtaining the Name of a Vgroup: Vgetname</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-7758"></A><EM CLASS="FunctionName">
Vgetname</EM>
<A NAME="50593875_marker-26552"></A> retrieves the name of the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
 into the parameter <EM CLASS="VarName">
vgroup_name</EM>
. The syntax of <EM CLASS="FunctionName">
Vgetname</EM>
<A NAME="50593875_marker-45927"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-79239"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgetname(vgroup_id, vgroup_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-79240"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfgnam(vgroup_id, vgroup_name)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93035"></A>Starting from release 4.2.4, the maximum length of vgroup’s name is no longer limited to VGNAMELENMAX (or 64).  When an application attempts to read a vgroup’s name that is longer than 64 characters with an insufficient buffer, the result will be unpredictable.  Applications can use <EM CLASS="FunctionName">
Vgetnamelen</EM>
 to get the length of the vgroup’s name  prior to calling <EM CLASS="FunctionName">
Vgetname</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50382"></A><EM CLASS="FunctionName">
Vgetname</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_16231" CLASS="XRef">Vgetname, Vgetnamelen, Vgetclass, and Vgetclassnamelen Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-92970"></A>	5.6.1.6	<A NAME="50593875_46845"></A>Obtaining the Length of a Vgroup’s Name: Vgetnamelen</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-92972"></A><EM CLASS="FunctionName">
Vgetnamelen</EM>
<A NAME="50593875_marker-92971"></A> retrieves the length of a vgroup’s name and stores it in the parameter <EM CLASS="VarName">
name_len</EM>
.  The vgroup is identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
 . The syntax of <EM CLASS="FunctionName">
Vgetnamelen</EM>
<A NAME="50593875_marker-92973"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-92974"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgetnamelen(vgroup_id, name_len);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-92975"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Currently unavailable</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-92977"></A><EM CLASS="FunctionName">
Vgetnamelen</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_16231" CLASS="XRef">Vgetname, Vgetnamelen, Vgetclass, and Vgetclassnamelen Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-28155"></A>	5.6.1.7	<A NAME="50593875_33271"></A>Obtaining the Class Name of a Vgroup: Vgetclass</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-26575"></A><EM CLASS="FunctionName">
Vgetclass</EM>
<A NAME="50593875_marker-26584"></A> retrieves the class name of the vgroup specified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
 into the parameter <EM CLASS="VarName">
vgroup_class</EM>
. The syntax of <EM CLASS="FunctionName">
Vgetclass</EM>
<A NAME="50593875_marker-45932"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19457"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgetclass(vgroup_id, vgroup_class);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-93015"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfgcls(vgroup_id, vgroup_class)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93024"></A>Starting from release 4.2.5, the maximum length of vgroup’s class name is no longer limited to VGNAMELENMAX (or 64).  When an application attempts to read a vgroup’s name that is longer than 64 characters with an insufficient buffer, the result will be unpredictable.  Applications can use <EM CLASS="FunctionName">
Vgetclassnamelen</EM>
 to get the length of the vgroup’s class name  prior to calling <EM CLASS="FunctionName">
Vgetclass</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93017"></A><EM CLASS="FunctionName">
Vgetclass</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_16231" CLASS="XRef">Table 5E</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-93047"></A>	5.6.1.8	<A NAME="50593875_11290"></A>Obtaining the Length of a Vgroup’s Class Name: Vgetclassnamelen</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-93049"></A><EM CLASS="FunctionName">
Vgetclassnamelen</EM>
<A NAME="50593875_marker-93048"></A> retrieves the length of a vgroup’s class name and stores it in the parameter <EM CLASS="VarName">
classname_len</EM>
.  The vgroup is identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
 . The syntax of <EM CLASS="FunctionName">
Vgetclassnamelen</EM>
<A NAME="50593875_marker-93050"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-93051"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgetclassnamelen(vgroup_id, classname_len);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-93052"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Currently unavailable</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93053"></A><EM CLASS="FunctionName">
Vgetclassnamelen</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_16231" CLASS="XRef">Vgetname, Vgetnamelen, Vgetclass, and Vgetclassnamelen Parameter Lists</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-22645"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_16231"></A>Vg<A NAME="50593875_marker-28142"></A>etname, Vgetna<A NAME="50593875_marker-93263"></A>melen, Vg<A NAME="50593875_marker-22477"></A>etclass, and Vgetc<A NAME="50593875_marker-93264"></A>lassnamelen Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93124"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93125"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93126"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93128"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93130"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93134"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93140"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-93142"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93146"></A>Vgetname</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93147"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93148"></A>(vfgnam)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93150"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93152"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93154"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93156"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93160"></A>vgroup_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93162"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93164"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93166"></A>Buffer for the name of the vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93168"></A>Vgetnamelen</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93169"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93170"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93172"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93174"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93176"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93178"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93182"></A>name_len</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93184"></A>uint16*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93186"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93188"></A>Buffer for the length of the vgroup’s name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93190"></A>Vgetclass</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93191"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93192"></A>(vfgcls)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93194"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93196"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93198"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93200"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93204"></A>vgroup_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93206"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93208"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93210"></A>Buffer for the vgroup class</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93222"></A>Vgetclassnamelen</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-93223"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-93224"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93226"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93228"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93230"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93232"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93214"></A>classname_len</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93216"></A>uint16*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-93218"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-93220"></A>Buffer for the length of the vgroup’s class name</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-19981"></A>	5.6.1.9	<A NAME="50593875_18312"></A>Lo<A NAME="50593875_marker-19980"></A>cating a Vgroup Given Its Name: Vfind</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-17818"></A><EM CLASS="FunctionName">
Vfind</EM>
<A NAME="50593875_marker-26609"></A> searches the file identified by <EM CLASS="VarName">
file_id</EM>
 for a vgroup with the name specified by the parameter <EM CLASS="VarName">
vgroup_name</EM>
. The syntax for <EM CLASS="FunctionName">
Vfind</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19470"></A><EM CLASS="syntaxLang">
C:</EM>
		vgroup_ref = Vfind(file_id, vgroup_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19475"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	vgroup_ref = vfind(file_id, vgroup_name)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-57481"></A><EM CLASS="FunctionName">
Vfind</EM>
 returns the reference number of the vgroup if one is found, or <EM CLASS="DefName">
0</EM>
 otherwise. If more than one vgroup has the same name, <EM CLASS="FunctionName">
Vfind</EM>
 will return the reference number of the first one. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-57485"></A>The parameters of <EM CLASS="FunctionName">
Vfind</EM>
 are further defined in <A HREF="UG_html-5.htm#50593875_13786" CLASS="XRef">Table 5F</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-57488"></A>	5.6.1.10	<A NAME="50593875_27890"></A>Lo<A NAME="50593875_marker-57487"></A>cating a Vgroup Given Its Class Name: Vfindclass</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-17758"></A><EM CLASS="FunctionName">
Vfindclass</EM>
<A NAME="50593875_marker-17780"></A> searches the file identified by <EM CLASS="VarName">
file_id</EM>
 for a vgroup with the class name specified by the parameter <EM CLASS="VarName">
vgroup_class</EM>
. The syntax of <EM CLASS="FunctionName">
Vfindclass</EM>
<A NAME="50593875_marker-45937"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19483"></A><EM CLASS="syntaxLang">
C:</EM>
		vgroup_ref = Vfindclass(file_id, vgroup_class);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-19488"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	vgroup_ref = vfndcls(file_id, vgroup_class)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-24009"></A><EM CLASS="FunctionName">
Vfindclass</EM>
 returns the reference number of the vgroup if one is found, or <EM CLASS="DefName">
0</EM>
 otherwise. If more than one vgroup has the same class name, <EM CLASS="FunctionName">
Vfindclass</EM>
 will return the reference number of the first one.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50388"></A>The parameters of <EM CLASS="FunctionName">
Vfindclass</EM>
 are further defined in <A HREF="UG_html-5.htm#50593875_13786" CLASS="XRef">Table 5F</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-24056"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_13786"></A>V<A NAME="50593875_marker-28184"></A>find and Vfi<A NAME="50593875_marker-24010"></A>ndclass Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24013"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-24014"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24015"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24017"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24019"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24023"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24029"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24031"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28159"></A>Vfind</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28160"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28161"></A>(vfind)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28163"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28165"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28167"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28169"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28173"></A>vgroup_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28175"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28177"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28179"></A>Buffer for the name of the vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-24035"></A>Vfindclass</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-24036"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-24037"></A>(vfndcls)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24039"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24041"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24043"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-24045"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24049"></A>vgroup_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24051"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24053"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-24055"></A>Buffer for the vgroup class</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593875_pgfId-18158"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
Obtaining Information about Lone Vgroups</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-56140"></A>This example illustrates the use of <EM CLASS="FunctionName">
Vlone/vflone</EM>
 to obtain the list of reference numbers of all lone vgroups in the file and the use of <EM CLASS="FunctionName">
Vgetname/vfgnam</EM>
 and <EM CLASS="FunctionName">
Vgetclass/vfgcls</EM>
 to obtain the name and the class of a  vgroup. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-56142"></A>In this example, the program calls <EM CLASS="FunctionName">
Vlone/vflone</EM>
 twice.  The first call is to obtain the number of lone vgroups in the file so that sufficient space can be allocated; the later call is to obtain the actual reference numbers of the lone vgroups.  The program then goes through the list of lone vgroup reference numbers to get and display the name and class of each lone vgroup.  The file used in this example is &quot;General_Vgroups.hdf&quot;. </P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593875_pgfId-3767"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55404"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57192"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57193"></A>#define  FILE_NAME   &quot;General_Vgroups.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57194"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57195"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57196"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57197"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57198"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57199"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57200"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57201"></A>          file_id, vgroup_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57202"></A>   int32  lone_vg_number,      /* current lone vgroup number */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57203"></A>          num_of_lones = 0;    /* number of lone vgroups */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57204"></A>   int32 *ref_array;    /* buffer to hold the ref numbers of lone vgroups   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57205"></A>   char   vgroup_name[VGNAMELENMAX], vgroup_class[VGNAMELENMAX];</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57206"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57207"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57208"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57209"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57210"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57211"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57212"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0); </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57213"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57214"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57215"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57216"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57217"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57218"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57219"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57220"></A>   * Get and print the names and class names of all the lone vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57221"></A>   * First, call Vlone with num_of_lones set to 0 to get the number of</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57222"></A>   * lone vgroups in the file, but not to get their reference numbers.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57223"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57224"></A>   num_of_lones = Vlone (file_id, NULL, num_of_lones );</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57225"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57226"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57227"></A>   * Then, if there are any lone vgroups, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57228"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57229"></A>   if (num_of_lones &gt; 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57230"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57231"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57232"></A>      * use the num_of_lones returned to allocate sufficient space for the</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57233"></A>      * buffer ref_array to hold the reference numbers of all lone vgroups,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57234"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57235"></A>      ref_array = (int32 *) malloc(sizeof(int32) * num_of_lones);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57236"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57237"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57238"></A>      * and call Vlone again to retrieve the reference numbers into </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57239"></A>      * the buffer ref_array.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57240"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57241"></A>      num_of_lones = Vlone (file_id, ref_array, num_of_lones);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57242"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57243"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57244"></A>      * Display the name and class of each lone vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57245"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57246"></A>      printf (&quot;Lone vgroups in this file are:\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57247"></A>      for (lone_vg_number = 0; lone_vg_number &lt; num_of_lones; </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57248"></A>                                                            lone_vg_number++)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57249"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57250"></A>         /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57251"></A>         * Attach to the current vgroup then get and display its</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57252"></A>         * name and class. Note: the current vgroup must be detached before</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57253"></A>         * moving to the next.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57254"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57255"></A>         vgroup_id = Vattach (file_id, ref_array[lone_vg_number], &quot;r&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57256"></A>         status_32 = Vgetname (vgroup_id, vgroup_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57257"></A>         status_32 = Vgetclass (vgroup_id, vgroup_class);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57258"></A>         printf (&quot;   Vgroup name %s and class %s\n&quot;, vgroup_name,  </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57259"></A>                     vgroup_class); </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57260"></A>         status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57261"></A>      } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57262"></A>   } /* if */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57263"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57264"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57265"></A>   * Terminate access to the V interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57266"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57267"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57268"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57269"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57270"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57271"></A>   * Free the space allocated by this program.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57272"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57273"></A>   free (ref_array);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57274"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57275"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593875_pgfId-37793"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-55508"></A>      program  getinfo_about_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57547"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57548"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57549"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57550"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57551"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57552"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57553"></A>      parameter (FILE_NAME = ’General_Vgroups.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57554"></A>      integer DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57555"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57556"></A>      integer SIZE</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57557"></A>      parameter(SIZE = 10)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57558"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57559"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57560"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57561"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57562"></A>      integer vfstart, vfatch, vfgnam, vfgcls, vflone, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57563"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57564"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57565"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57566"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57567"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57568"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57569"></A>      integer vgroup_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57570"></A>      integer lone_vg_number, num_of_lones</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57571"></A>      character*64 vgroup_name, vgroup_class</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57572"></A>      integer ref_array(SIZE)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57573"></A>      integer i</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57574"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57575"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57576"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57577"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57578"></A>C     Initialize ref_array.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57579"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57580"></A>      do 10 i = 1, SIZE</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57581"></A>         ref_array(i) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57582"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57583"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57584"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57585"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57586"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57587"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57588"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57589"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57590"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57591"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57592"></A>C     Get and print the name and class name of all lone vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57593"></A>C     First, call vflone with num_of_lones set to 0 to get the number of</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57594"></A>C     lone vgroups in the file and check whether size of ref_array is </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57595"></A>C     big enough to hold reference numbers of ALL lone groups.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57596"></A>C     If ref_array is not big enough, exit the program after displaying an</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57597"></A>C     informative message.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57598"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57599"></A>      num_of_lones = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57600"></A>      num_of_lones = vflone(file_id, ref_array, num_of_lones)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57601"></A>      if (num_of_lones .gt. SIZE) then</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57602"></A>      write(*,*) num_of_lones, ’lone vgroups is found’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57603"></A>      write(*,*) ’increase the size of ref_array to hold reference ’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57604"></A>      write(*,*) ’numbers of all lone vgroups in the file’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57605"></A>      stop</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57606"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57607"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57608"></A>C     If there are any lone groups in the file,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57609"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57610"></A>      if (num_of_lones .gt. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57611"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57612"></A>C     call vflone again to retrieve the reference numbers into ref_array.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57613"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57614"></A>      num_of_lones = vflone(file_id, ref_array, num_of_lones)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57615"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57616"></A>C     Display the name and class of each vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57617"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57618"></A>      write(*,*) ’Lone vgroups in the file are:’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57619"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57620"></A>      do 20 lone_vg_number = 1, num_of_lones</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57621"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57622"></A>C     Attach to the current vgroup, then get and display its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57623"></A>C     Note: the current vgroup must be detached before moving to the next.  </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57624"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57625"></A>      vgroup_name = ’ ’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57626"></A>      vgroup_class = ’ ’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57627"></A>      vgroup_id = vfatch(file_id, ref_array(lone_vg_number), ’r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57628"></A>      status    = vfgnam(vgroup_id, vgroup_name)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57629"></A>      status    = vfgcls(vgroup_id, vgroup_class)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57630"></A>      write(*,*) ’Vgroup name ’ ,  vgroup_name</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57631"></A>      write(*,*) ’Vgroup class ’ , vgroup_class</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57632"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57633"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57634"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57635"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57636"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57637"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57638"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57639"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57640"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57641"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57642"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-57643"></A><A NAME="50593875_marker-11559"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-19539"></A>	5.6.2	Obta<A NAME="50593875_marker-19538"></A>ining Information about the Contents of a Vgroup</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-19540"></A>This section describes the Vgroup interface routines that allow the user to obtain various information about the contents of vgroups.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-19561"></A>	5.6.2.1	<A NAME="50593875_24547"></A>Obtai<A NAME="50593875_marker-19560"></A>ning the Number of Objects in a Vgroup: Vntagrefs</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-20917"></A><EM CLASS="FunctionName">
Vntagrefs</EM>
<A NAME="50593875_marker-26685"></A> returns the number of tag/reference number pairs (i.e., the number of vgroup members) stored in the specified vgroup. The syntax of <EM CLASS="FunctionName">
Vntagrefs</EM>
<A NAME="50593875_marker-45942"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-26700"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_tagrefs = Vntagrefs(vgroup_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-26701"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_tagrefs = vfntr(vgroup_id)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-26695"></A><EM CLASS="FunctionName">
Vntagrefs</EM>
 can be used together with <EM CLASS="FunctionName">
Vgettagrefs</EM>
<A NAME="50593875_marker-26693"></A> or <EM CLASS="FunctionName">
Vgettagref</EM>
<A NAME="50593875_marker-26694"></A> to identify the data objects linked to a given vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23489"></A><EM CLASS="FunctionName">
Vntagrefs</EM>
 returns 0 or a positive number representing the number of HDF data objects linked to the vgroup if successful, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameter of <EM CLASS="FunctionName">
Vntagrefs</EM>
 is further defined in <A HREF="UG_html-5.htm#50593875_14845" CLASS="XRef">Vntagrefs, Vgettagref, and Vgettagrefs Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-26732"></A>	5.6.2.2	<A NAME="50593875_23154"></A>Obtai<A NAME="50593875_marker-26731"></A>ning the Tag/Reference Number Pair of a Data Object within a Vgroup : Vgettagref </H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-26734"></A><EM CLASS="FunctionName">
Vgettagref</EM>
<A NAME="50593875_marker-26733"></A> retrieves the tag/reference number pair of a specified data object stored within the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vgettagref</EM>
<A NAME="50593875_marker-26735"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20781"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgettagref(vgroup_id, index, &amp;obj_tag, &amp;obj_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20789"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfgttr(vgroup_id, index, obj_tag, obj_ref)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-20779"></A><EM CLASS="FunctionName">
Vgettagref</EM>
 stores the tag and reference number in the parameters <EM CLASS="VarName">
obj_tag</EM>
 and <EM CLASS="VarName">
obj_ref</EM>
, respectively. The parameter <EM CLASS="VarName">
index</EM>
 specifies the location of the data object within the vgroup and is zero-based. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23505"></A>Often, this routine is called in a loop to identify the tag/reference number pair of each data object belong to a vgroup. In this case, <EM CLASS="FunctionName">
Vntagrefs</EM>
 is used to obtain the loop boundary.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23506"></A><EM CLASS="FunctionName">
Vgettagref</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_14845" CLASS="XRef">Vntagrefs, Vgettagref, and Vgettagrefs Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-20937"></A>	5.6.2.3	<A NAME="50593875_40839"></A>Obtai<A NAME="50593875_marker-20936"></A>ning the Tag/Reference Number Pairs of Data Objects in a Vgroup: Vgettagrefs</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-20938"></A><EM CLASS="FunctionName">
Vgettagrefs</EM>
 retrieves the tag/reference number pairs of the members of a vgroup and returns the number of pairs retrieved. The syntax of <EM CLASS="FunctionName">
Vgettagrefs</EM>
<A NAME="50593875_marker-20992"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20799"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_pairs = Vgettagrefs(vgroup_id, tag_array, ref_array, maxsize);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20807"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_pairs = vfgttrs(vgroup_id, tag_array, ref_array, maxsize)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-20797"></A><EM CLASS="FunctionName">
Vgettagrefs </EM>
stores the tags into the array <EM CLASS="VarName">
tag_array</EM>
 and the reference numbers into the array <EM CLASS="VarName">
ref_array</EM>
. The parameter <EM CLASS="VarName">
maxsize</EM>
 specifies the maximum number of tag/reference number pairs to return, therefore each array must be at least <EM CLASS="VarName">
maxsize</EM>
 in size.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23514"></A><EM CLASS="FunctionName">
Vgettagrefs</EM>
 can be used to obtain the value of <EM CLASS="VarName">
maxsize</EM>
 if the tag/reference number pairs for all members of the vgroup are desired. To do this, set <EM CLASS="VarName">
maxsize</EM>
 to 1 in the first call to <EM CLASS="FunctionName">
Vgettagrefs</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23517"></A><EM CLASS="FunctionName">
Vgettagrefs</EM>
 returns the number of tag/reference number pairs or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_14845" CLASS="XRef">Table 5G</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-21839"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_14845"></A>Vnta<A NAME="50593875_marker-28270"></A>grefs, Vgett<A NAME="50593875_marker-28271"></A>agref, and Vget<A NAME="50593875_marker-22277"></A>tagrefs Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-21646"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-21647"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-21648"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-21650"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-21652"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-21656"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-21662"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-21664"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28213"></A>Vntagrefs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28214"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28215"></A>(vfntr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28217"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28219"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28221"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28223"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28225"></A>Vgettagref</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28226"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28227"></A>(vfgttr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28229"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28231"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28233"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28235"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28239"></A>index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28241"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28243"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28245"></A>Index of the tag/reference number pair to be retrieved</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28249"></A>obj_tag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28251"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28253"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28255"></A>Tag of the data object</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28259"></A>obj_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28261"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28263"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28265"></A>Reference number of the data object</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-21722"></A>Vgettagrefs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-21723"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-21724"></A>(vfgttrs)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21726"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21728"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21730"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-21732"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21736"></A>tag_array</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21738"></A>int32 []</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21740"></A>integer (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-21742"></A>Buffer for the returned tags</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21746"></A>ref_array</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21748"></A>int32 []</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21750"></A>integer (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-21752"></A>Buffer for the returned reference numbers</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21756"></A>maxsize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21758"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-21760"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-21762"></A>Maximum number of tag/reference number pairs to be returned</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593875_pgfId-113480"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
Obtaining Information about the Contents of a Vgroup</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-113481"></A>This example illustrates the use of <EM CLASS="FunctionName">
Vgetid/vfgid</EM>
 to get the reference number of a vgroup, <EM CLASS="FunctionName">
Vntagrefs/vfntr</EM>
 to get the number of HDF data objects in the vgroup, <EM CLASS="FunctionName">
Vgettagref/vfgttr</EM>
 to get the tag/reference number pair of a data object within the vgroup, and <EM CLASS="FunctionName">
Visvg/vfisvg</EM>
 and <EM CLASS="FunctionName">
Visvs/vfisvs</EM>
 to determine whether a data object is a vgroup and a vdata, respectively. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-113482"></A>In the example, the program traverses the HDF file &quot;General_Vgroups.hdf&quot; from the beginning and obtains the reference number of each vgroup so it can be attached.  Once a vgroup is attached, the program gets the total number of tag/reference number pairs in the vgroup and displays some information about the vgroup. The information displayed includes the position of the vgroup in the file, the tag/reference number pair of each of its data objects, and the message stating whether the object is a vdata, vgroup, or neither.  </P>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593875_pgfId-113487"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
C:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113490"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113491"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113492"></A>#define   FILE_NAME        &quot;General_Vgroups.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113493"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113494"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113495"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113496"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113497"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113498"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113499"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113500"></A>          file_id, vgroup_id, vgroup_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113501"></A>          obj_index,    /* index of an object within a vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113502"></A>          num_of_pairs, /* number of tag/ref number pairs, i.e., objects */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113503"></A>          obj_tag, obj_ref,     /* tag/ref number of an HDF object */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113504"></A>          vgroup_pos = 0;       /* position of a vgroup in the file */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113505"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113506"></A>   /********************** End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113507"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113508"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113509"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113510"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113511"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113512"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113513"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113514"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113515"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113516"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113517"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113518"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113519"></A>   * Obtain each vgroup in the file by its reference number, get the</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113520"></A>   * number of objects in the vgroup, and display the information about</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113521"></A>   * that vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113522"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113523"></A>   vgroup_ref = -1;        /* set to -1 to search from the beginning of file */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113524"></A>   while (TRUE)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113525"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113526"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113527"></A>      * Get the reference number of the next vgroup in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113528"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113529"></A>      vgroup_ref = Vgetid (file_id, vgroup_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113530"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113531"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113532"></A>      * Attach to the vgroup for reading or exit the loop if no more vgroups</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113533"></A>      * are found.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113534"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113535"></A>      if (vgroup_ref == -1) break;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113536"></A>      vgroup_id = Vattach (file_id, vgroup_ref, &quot;r&quot;); </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113537"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113538"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113539"></A>      * Get the total number of objects in the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113540"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113541"></A>      num_of_pairs = Vntagrefs (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113542"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113543"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113544"></A>      * If the vgroup contains any object, print the tag/ref number </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113545"></A>      * pair of each object in the vgroup, in the order they appear in the</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113546"></A>      * file, and indicate whether the object is a vdata, vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113547"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113548"></A>      if (num_of_pairs &gt; 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113549"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113550"></A>         printf (&quot;\nVgroup #%d contains:\n&quot;, vgroup_pos);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113551"></A>         for (obj_index = 0; obj_index &lt; num_of_pairs; obj_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113552"></A>         {</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113553"></A>            /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113554"></A>            * Get the tag/ref number pair of the object specified </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113555"></A>            * by its index, obj_index, and display them.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113556"></A>            */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113557"></A>            status_n = Vgettagref (vgroup_id, obj_index, &amp;obj_tag, &amp;obj_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113558"></A>            printf (&quot;tag = %d, ref = %d&quot;, obj_tag, obj_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113559"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113560"></A>            /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113561"></A>            * State whether the HDF object referred to by obj_ref is a vdata,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113562"></A>            * a vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113563"></A>            */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113564"></A>            if (Visvg (vgroup_id, obj_ref))</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113565"></A>               printf (&quot;  &lt;-- is a vgroup\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113566"></A>            else if (Visvs (vgroup_id, obj_ref))</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113567"></A>               printf (&quot;  &lt;-- is a vdata\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113568"></A>            else</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113569"></A>               printf (&quot;  &lt;-- neither vdata nor vgroup\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113570"></A>         } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113571"></A>      } /* if */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113572"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113573"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113574"></A>         printf (&quot;Vgroup #%d contains no HDF objects\n&quot;, vgroup_pos);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113575"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113576"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113577"></A>      * Terminate access to the current vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113578"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113579"></A>      status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113580"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113581"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113582"></A>      * Move to the next vgroup position.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113583"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113584"></A>      vgroup_pos++;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113585"></A>   } /* while */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113586"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113587"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113588"></A>   * Terminate access to the V interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113589"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113590"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113591"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113592"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113594"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593875_pgfId-113599"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113602"></A>      program  vgroup_contents</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113603"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113604"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113605"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113606"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113607"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113608"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113609"></A>      parameter (FILE_NAME = ’General_Vgroups.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113610"></A>      integer DFACC_ READ</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113611"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113612"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113613"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113614"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113615"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113616"></A>      integer vfstart, vfatch, vfgid, vntrc, vfgttr, vfisvg,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113617"></A>     +        vfisvs, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113618"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113619"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113620"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113621"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113622"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113623"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113624"></A>      integer vgroup_id, vgroup_ref,  vgroup_pos</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113625"></A>      integer obj_index, num_of_pairs </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113626"></A>      integer obj_tag, obj_ref </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113627"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113628"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113629"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113630"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113631"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113632"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113633"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113634"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113635"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113636"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113637"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113638"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113639"></A>C     Obtain each vgroup in the file by its reference number, get the</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113640"></A>C     number of objects in the vgroup, and display the information</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113641"></A>C     about that vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113642"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113643"></A>      vgroup_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113644"></A>      vgroup_pos = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113645"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113646"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113647"></A>C     Get the reference number of the next vgroup in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113648"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113649"></A>      vgroup_ref = vfgid(file_id, vgroup_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113650"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113651"></A>C     Attach to the vgroup or go to the end if no additional vgroup is found.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113652"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113653"></A>      if(vgroup_ref. eq. -1) goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113654"></A>      vgroup_id = vfatch(file_id, vgroup_ref , ’r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113655"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113656"></A>C     Get the total number of objects in the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113657"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113658"></A>      num_of_pairs = vntrc(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113659"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113660"></A>C     If the vgroup contains any object, print the tag/ref number</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113661"></A>C     pair of each object in vgroup, in the order they appear in the</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113662"></A>C     file, and indicate whether the object is a vdata, vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113663"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113664"></A>      if (num_of_pairs .gt. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113665"></A>         write(*,*) ’Vgroup # ’, vgroup_pos, ’ contains:’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113666"></A>         do 20 obj_index = 1, num_of_pairs</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113667"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113668"></A>C     Get the tag/ref number pair of the object specified by its index </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113669"></A>C     and display them.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113670"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113671"></A>         status = vfgttr(vgroup_id, obj_index-1, obj_tag, obj_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113672"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113673"></A>C     State whether the HDF object referred to by obj_ref is a vdata,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113674"></A>C     a vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113675"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113676"></A>         if( vfisvg(vgroup_id, obj_ref) .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113677"></A>             write(*,*) ’tag = ’, obj_tag, ’ ref = ’, obj_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113678"></A>     +       ’  &lt;--- is a vgroup ’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113679"></A>         else if ( vfisvs(vgroup_id, obj_ref) .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113680"></A>             write(*,*) ’tag = ’, obj_tag, ’ ref = ’, obj_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113681"></A>     +       ’  &lt;--- is a vdata ’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113682"></A>         else</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113683"></A>             write(*,*) ’tag = ’, obj_tag, ’ ref = ’, obj_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113684"></A>     +       ’  &lt;--- neither vdata nor vgroup ’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113685"></A>         endif</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113686"></A>20       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113687"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113688"></A>         write (*,*) ’Vgroup #’, vgroup_pos, ’ contains no HDF objects’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113689"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113690"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113691"></A>      vgroup_pos = vgroup_pos + 1</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113692"></A>      goto 10 </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113693"></A>100   continue      </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113694"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113695"></A>C     Terminate access to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113696"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113697"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113698"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113699"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113700"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113701"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113702"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113743"></A>      end</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-113745"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-113748"></A>	5.6.2.4	<A NAME="50593875_26561"></A>Testing Whether a Data Object Belongs to a Vgroup<A NAME="50593875_marker-113747"></A>: Vinqtagref</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-20875"></A><EM CLASS="FunctionName">
Vinqtagref</EM>
<A NAME="50593875_marker-24420"></A> determines whether a data object is a member of the vgroup specified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vinqtagref</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-26798"></A><EM CLASS="syntaxLang">
C:</EM>
		true_false = Vinqtagref(vgroup_id, obj_tag, obj_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-26799"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	true_false = vfinqtr(vgroup_id, obj_tag, obj_ref)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-26790"></A>The data object is specified by its tag/reference number pair in the parameters <EM CLASS="VarName">
obj_tag</EM>
 and <EM CLASS="VarName">
obj_ref</EM>
. <EM CLASS="FunctionName">
Vinqtagref</EM>
 returns <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) if the object belongs to the vgroup, and <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
) otherwise. The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_35920" CLASS="XRef">Vinqtagref, Visvg, and Visvs Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-26258"></A>	5.6.2.5	<A NAME="50593875_17564"></A>Testin<A NAME="50593875_marker-26257"></A>g Whether a Data Object within a Vgroup is a Vgroup: Visvg</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-50598"></A><EM CLASS="FunctionName">
Visvg</EM>
<A NAME="50593875_marker-50597"></A> determines whether the data object specified by its reference number, <EM CLASS="VarName">
obj_ref</EM>
, is a vgroup and is a member of the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Visvg</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-50599"></A><EM CLASS="syntaxLang">
C:</EM>
		true_false = Visvg(vgroup_id, obj_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-50600"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	true_false = vfisvg(vgroup_id, obj_ref)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50601"></A><EM CLASS="FunctionName">
Visvg</EM>
 returns either <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) or <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_35920" CLASS="XRef">Vinqtagref, Visvg, and Visvs Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-20897"></A>	5.6.2.6	<A NAME="50593875_25247"></A>Testing<A NAME="50593875_marker-21018"></A> Whether an HDF Object within a Vgroup is a Vdata: Visvs</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-20898"></A><EM CLASS="FunctionName">
Visvs</EM>
<A NAME="50593875_marker-24678"></A> determines whether the data object specified by its reference number, <EM CLASS="VarName">
obj_ref</EM>
, is a vdata and is a member of the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Visvs</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20853"></A><EM CLASS="syntaxLang">
C:</EM>
		true_false = Visvs(vgroup_id, obj_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20861"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	true_false = vfisvs(vgroup_id, obj_ref)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-28464"></A><EM CLASS="FunctionName">
Visvs </EM>
returns either <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) or <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_35920" CLASS="XRef">Table 5H</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-28571"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
Vinqt<A NAME="50593875_marker-28470"></A>agref, Vi<A NAME="50593875_marker-28471"></A>svg, and Vi<A NAME="50593875_marker-28581"></A><A NAME="50593875_35920"></A>svs Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-28474"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28475"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-28476"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-28478"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-28480"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-28484"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-28490"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-28492"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28496"></A>Vinqtagref</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28497"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28498"></A>(vfinqtr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28500"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28502"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28504"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28506"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28510"></A>obj_tag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28512"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28514"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28516"></A>Tag of the data object to be queried</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28520"></A>obj_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28522"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28524"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28526"></A>Reference number of the data object to be queried</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28528"></A>Visvg</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28529"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28530"></A>(vfisvg)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28532"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28534"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28536"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28538"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28542"></A>obj_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28544"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28546"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28548"></A>Data object reference number to be queried</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28550"></A>Visvs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28551"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28552"></A>(vfisvs)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28554"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28556"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28558"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28560"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28564"></A>obj_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28566"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28568"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28570"></A>Data object reference number to be queried</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-28575"></A>	5.6.2.7	<A NAME="50593875_42303"></A>Lo<A NAME="50593875_marker-28573"></A>catin<A NAME="50593875_marker-28574"></A>g a Vdata in a Vgroup Given Vdata Fields: Vflocate</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-20649"></A><EM CLASS="FunctionName">
Vflocate</EM>
<A NAME="50593875_marker-24730"></A> locates a vdata that belongs to the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
 and contains the fields specified in the parameter <EM CLASS="VarName">
fieldname_list</EM>
. The syntax of <EM CLASS="FunctionName">
Vflocate</EM>
<A NAME="50593875_marker-45901"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20650"></A><EM CLASS="syntaxLang">
C:</EM>
		vdata_ref = Vflocate(vgroup_id, fieldname_list);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20652"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	vdata_ref = vffloc(vgroup_id, fieldname_list)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-24743"></A>The parameter <EM CLASS="VarName">
fieldname_list</EM>
 is a string of comma-separated field names containing no white space, for example, “<EM CLASS="DefName">
PX,PY,PZ</EM>
”. Note that a vdata must contain all of the fields specified in <EM CLASS="VarName">
fieldname_list</EM>
 to be qualified.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-45891"></A><EM CLASS="FunctionName">
Vflocate</EM>
 returns the reference number of the vdata, if one is found, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_13904" CLASS="XRef">Table 5I</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-45949"></A>	5.6.2.8	<A NAME="50593875_12226"></A>Retrieving the Number of Tags of a Given Type in a Vgroup: Vnrefs</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-45951"></A><EM CLASS="FunctionName">
Vnrefs</EM>
<A NAME="50593875_marker-45950"></A> returns the number of tags of the type specified by the parameter <EM CLASS="VarName">
tag_type</EM>
 in the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vnrefs</EM>
<A NAME="50593875_marker-45952"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-25685"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_tags = Vnrefs(vgroup_id, tag_type);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20660"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_tags = vnrefs(vgroup_id, tag_type)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-20661"></A>Possible values of the parameter <EM CLASS="VarName">
tag_type</EM>
 are defined in Appendix A of this manual. <EM CLASS="FunctionName">
Vnrefs</EM>
 returns 0 or the number of tags if successful, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_13904" CLASS="XRef">Table 5I</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-56947"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_13904"></A>Vfl<A NAME="50593875_marker-56878"></A>ocate and Vnr<A NAME="50593875_marker-56879"></A>efs Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-56882"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-56883"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-56884"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-56886"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-56888"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-56892"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-56898"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-56900"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-56904"></A>Vflocate</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-56905"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-56906"></A>(vffloc)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56908"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56910"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56912"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-56914"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56918"></A>fieldname_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56920"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56922"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-56924"></A>Buffer containing the names of the fields</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-56926"></A>Vnrefs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-56927"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-56928"></A>(vnrefs)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56930"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56932"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56934"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-56936"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56940"></A>tag_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56942"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-56944"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-56946"></A>Tag type</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-56950"></A>	5.6.2.9	<A NAME="50593875_35227"></A>Retri<A NAME="50593875_marker-56949"></A>eving the Reference Number of a Vgroup: VQueryref</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-56952"></A><EM CLASS="FunctionName">
VQueryref</EM>
<A NAME="50593875_marker-56951"></A> returns the reference number of the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) if unsuccessful. The syntax of <EM CLASS="FunctionName">
VQueryref</EM>
<A NAME="50593875_marker-56953"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20348"></A><EM CLASS="syntaxLang">
C:</EM>
		vgroup_ref = VQueryref(vgroup_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-36437"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	vgroup_ref = vqref(vgroup_id)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-36464"></A><EM CLASS="FunctionName">
VQueryref</EM>
 is further defined in <A HREF="UG_html-5.htm#50593875_21977" CLASS="XRef">Table 5J</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593875_pgfId-36467"></A>	5.6.2.10	R<A NAME="50593875_34419"></A>etri<A NAME="50593875_marker-36466"></A>eving the Tag of a Vgroup: VQuerytag</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-36469"></A><EM CLASS="FunctionName">
VQuerytag</EM>
<A NAME="50593875_marker-36468"></A> returns <EM CLASS="DefName">
DFTAG_VG</EM>
 (or <EM CLASS="DefName">
1965</EM>
), which would be the tag of the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) if unsuccessful. The syntax of <EM CLASS="FunctionName">
VQuerytag</EM>
<A NAME="50593875_marker-45961"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20358"></A><EM CLASS="syntaxLang">
C:</EM>
		vgroup_tag = VQuerytag(vgroup_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-20360"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	vgroup_tag = vqtag(vgroup_id)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-24890"></A><EM CLASS="FunctionName">
VQuerytag</EM>
 is further defined in <A HREF="UG_html-5.htm#50593875_21977" CLASS="XRef">Table 5J</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-24927"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_21977"></A>VQu<A NAME="50593875_marker-28636"></A>eryref and VQu<A NAME="50593875_marker-24891"></A>erytag Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24894"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-24895"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24896"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24898"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24900"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24904"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24910"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-24912"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28622"></A>VQueryref</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28623"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28624"></A>(vqref)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28626"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28628"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28630"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28632"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-24916"></A>VQuerytag</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-24917"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-24918"></A>(vqtag)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24920"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24922"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-24924"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-24926"></A>Vgroup identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-26857"></A>	5.7	<A NAME="50593875_marker-19885"></A>Deleting Vgroups and Data Objects within a Vgroup<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-26858"></A>The Vgroup interface includes two routines for deletion: one deletes a vgroup from a file and the other deletes a data object from a vgroup. These routines are discussed in the following subsections.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-26860"></A>	5.7.1	<A NAME="50593875_11227"></A>Deleting a Vgroup from a File: Vdelete</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-23595"></A><EM CLASS="FunctionName">
Vdelete</EM>
<A NAME="50593875_marker-24948"></A> removes the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
 from the file identified by the parameter <EM CLASS="VarName">
file_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vdelete</EM>
<A NAME="50593875_marker-45906"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-23596"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vdelete(file_id, vgroup_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-50410"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vdelete(file_id, vgroup_id)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50411"></A>This routine will remove the vgroup from the internal data structures and from the file.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50417"></A><EM CLASS="FunctionName">
Vdelete</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
Vdelete</EM>
 are further described in <A HREF="UG_html-5.htm#50593875_35880" CLASS="XRef">Vdelete and Vdeletetagref Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-24993"></A>	5.7.2	<A NAME="50593875_33315"></A>Deleting a Data Object from a Vgroup: Vdeletetagref</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-24994"></A><EM CLASS="FunctionName">
Vdeletetagref</EM>
<A NAME="50593875_marker-24998"></A> deletes the data object, specified by the parameters <EM CLASS="VarName">
obj_tag</EM>
 and <EM CLASS="VarName">
obj_ref</EM>
, from the vgroup, identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vdeletetagref </EM>
is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-23725"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vdeletetagref(vgroup_id, obj_tag, obj_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-23727"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfdtr(vgroup_id, obj_tag, obj_ref)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23809"></A><EM CLASS="FunctionName">
Vinqtagref </EM>
should be used to determine whether the tag/reference number pair exists before calling <EM CLASS="FunctionName">
Vdeletetagref</EM>
. If duplicate tag/reference number pairs are found in the vgroup, <EM CLASS="FunctionName">
Vdeletetagref</EM>
 deletes the first occurrence. <EM CLASS="FunctionName">
Vinqtagref</EM>
 should also be used to determine whether duplicate tag/reference number pairs exist in the vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-23730"></A><EM CLASS="FunctionName">
Vdeletetagref</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further described in <A HREF="UG_html-5.htm#50593875_35880" CLASS="XRef">Table 5K</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-23777"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_35880"></A>Vdelete<A NAME="50593875_marker-28667"></A> and Vdeletetagref <A NAME="50593875_marker-23731"></A>Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-23734"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-23735"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-23736"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-23738"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-23740"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-23744"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-23750"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-23752"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28643"></A>Vdelete</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28644"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28645"></A>(vdelete)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28647"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28649"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28651"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28653"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28657"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28659"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28661"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28663"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-23756"></A>Vdeletetagref</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-23757"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-23758"></A>(vfdtr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23799"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23801"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23803"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-23805"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23770"></A>obj_tag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23772"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23774"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-23776"></A>Tag of the data object to be deleted</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23791"></A>obj_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23793"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-23795"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-23797"></A>Reference number of the data object to be deleted</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-23720"></A>	5.8	<A NAME="50593875_83268"></A>Vgroup A<A NAME="50593875_marker-13031"></A>ttributes<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-11616"></A>HDF version 4.1r1 and later include the ability to assign attributes to a vgroup. The concept of attributes is fully explained in <A HREF="UG_html-3.htm#50593873_13938" CLASS="XRef">Scientific Data Sets (SD API)</A>. To review briefly, an attribute has a name, a data type, a number of attribute values, and the attribute values themselves. All attribute values must be of the same data type. For example, an attribute value cannot consist of ten characters and one integer, or a character value cannot be included in an attribute value consisting of two 32-bit integers.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-11617"></A>Any number of attributes can be assigned to a vgroup, however, each attribute name must be unique among all attributes in the vgroup. </P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-25059"></A>	5.8.1	<A NAME="50593875_22172"></A>Obtaining t<A NAME="50593875_marker-25058"></A>he Vgroup Version Number of a Given Vgroup: Vgetversion</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-25060"></A>The structure of the vgroup has gone through several changes since HDF was first written. Determining the version of any particular vgroup is necessary as some of the older versions of vgroups do not support some of the newer features, such as attributes. <EM CLASS="FunctionName">
Vgetversion</EM>
 returns the version number of the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vgetversion</EM>
<A NAME="50593875_marker-25061"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-23301"></A><EM CLASS="syntaxLang">
C:</EM>
		version_num = Vgetversion(vgroup_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-23303"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	version_num = vfgver(vgroup_id)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-25021"></A>There are three valid version numbers: <EM CLASS="DefName">
VSET_OLD_VERSION </EM>
(or <EM CLASS="DefName">
2</EM>
), <EM CLASS="DefName">
VSET_VERSION</EM>
 (or <EM CLASS="DefName">
3</EM>
), and <EM CLASS="DefName">
VSET_NEW_VERSION</EM>
 (or <EM CLASS="DefName">
4</EM>
).</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-25026"></A><EM CLASS="DefName">
VSET_OLD_VERSION</EM>
 is returned when the vgroup is of a version that corresponds to an HDF library version before version 3.2.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-25046"></A><EM CLASS="DefName">
VSET_VERSION</EM>
 is returned when the vgroup is of a version that corresponds to an HDF library version between versions 3.2 and 4.0 release 2.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-25079"></A><EM CLASS="DefName">
VSET_NEW_VERSION</EM>
 is returned when the vgroup is of a version that corresponds to an HDF library version  of version 4.1 release 1 or higher.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94926"></A><EM CLASS="FunctionName">
Vgetversion</EM>
 returns the vgroup version number if successful, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. This routine is further defined in <A HREF="UG_html-5.htm#50593875_81918" CLASS="XRef">Table 5L</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-94976"></A>	5.8.2	<A NAME="50593875_11483"></A>Setting the Attrib<A NAME="50593875_marker-94975"></A>ute of a Vgroup: Vsetattr</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-94978"></A><EM CLASS="FunctionName">
Vsetattr</EM>
<A NAME="50593875_marker-94977"></A> attaches an attribute to the vgroup specified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vsetattr</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94979"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vsetattr(vgroup_id, attr_name, data_type, n_values, attr_values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94980"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfsnatt(vgroup_id, attr_name, data_type, n_values, attr_values)</P>
<P CLASS="syntax-or-top">
<A NAME="50593875_pgfId-94981"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = vfscatt(vgroup_id, attr_name, data_type, n_values, attr_values)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94982"></A>If the attribute with the name specified in the parameter <EM CLASS="VarName">
attr_name</EM>
 already exists, the new values will replace the current ones, provided the data type and count are not different. If either the data type or the count have been changed, <EM CLASS="FunctionName">
Vsetattr</EM>
 will return <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94983"></A>The parameter <EM CLASS="VarName">
data_type</EM>
 is an integer number specifying the data type of the attribute values. Refer to <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A> for the definition of the data types to interpret this value. The parameter <EM CLASS="VarName">
n_values</EM>
 specifies the number of values to be stored in the attribute. The buffer <EM CLASS="VarName">
attr_values</EM>
 contains the values to be stored in the attribute.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94987"></A>Note that the FORTRAN-77 version of <EM CLASS="FunctionName">
Vsetattr</EM>
 has two routines; <EM CLASS="FunctionName">
vfsnatt</EM>
 sets a numeric value attribute and <EM CLASS="FunctionName">
vfscatt</EM>
 sets a character value attribute.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94988"></A><EM CLASS="FunctionName">
Vsetattr</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_81918" CLASS="XRef">Table 5L</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-95113"></A>	5.8.3	<A NAME="50593875_24084"></A>Retrieving the Index of a Vgroup <A NAME="50593875_marker-95112"></A>Attribute Given the Attribute Name: Vfindattr</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-95115"></A><EM CLASS="FunctionName">
Vfindattr</EM>
<A NAME="50593875_marker-95114"></A> searches the vgroup, identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
, for the  attribute with the name specified by the parameter <EM CLASS="VarName">
attr_name</EM>
, and returns the index of that attribute. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-95116"></A><EM CLASS="syntaxLang">
C:</EM>
		attr_index = Vfindattr(vgroup_id, attr_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-95117"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	attr_index = vffdatt(vgroup_id, attr_name)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-95118"></A><EM CLASS="FunctionName">
Vfindattr</EM>
 returns either an attribute index or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_81918" CLASS="XRef">Table 5L</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-95102"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_81918"></A>Vgetversion, Vset<A NAME="50593875_marker-95001"></A>attr, and Vfin<A NAME="50593875_marker-95003"></A>dattr Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-95290"></A>Routine Name </P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-95291"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-95292"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-95294"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-95296"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-95300"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-95306"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-95308"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-95312"></A>Vgetversion</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-95313"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-95314"></A>(vfgver)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95316"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95318"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95320"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95322"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-95324"></A>Vsetattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-95325"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-95326"></A>(vfsnatt/vfscatt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95328"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95330"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95332"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95334"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95338"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95340"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95342"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95344"></A>Name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95348"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95350"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95352"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95354"></A>Data type of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95358"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95360"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95362"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95364"></A>Number of values the attribute contains</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95368"></A>attr_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95370"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95372"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95373"></A>character* (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95375"></A>Buffer containing the attribute values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-95397"></A>Vfindattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-95398"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-95399"></A>(vffdatt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95401"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95403"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95405"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95407"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95411"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95413"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-95415"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-95417"></A>Name of the target attribute</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-94969"></A>	5.8.4	<A NAME="50593875_32857"></A>Obtaining the T<A NAME="50593875_marker-94968"></A>otal Number of Vgroup Attributes: Vnattrs and Vnattrs2</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-94140"></A>Both <EM CLASS="FunctionName">
Vnattrs</EM>
<A NAME="50593875_marker-94139"></A> and <EM CLASS="FunctionName">
Vnattrs2 </EM>
return the number of attributes assigned to the vgroup specified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
, but Vnattrs2 is an updated version of Vnattrs.  The syntax of both functions are as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-93976"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_attrs = Vnattrs(vgroup_id);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-94133"></A>			num_of_attrs = Vnattrs2(vgroup_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-93977"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_attrs = vfnatts(vgroup_id)</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-94134"></A>			Unvailable</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94064"></A>There are two types of attributes for vgroups.  One is the old-style that was created using methods other than the standard attribute API function <EM CLASS="FunctionName">
Vsetattr</EM>
, which was introduced after HDF Version 4.0 Release 2, July 19, 1996.  Without the use of <EM CLASS="FunctionName">
Vsetattr</EM>
, an application could simulate an attribute for a vgroup by creating and writing a vdata of class <EM CLASS="DefName">
_HDF_ATTRIBUTE</EM>
 and adding that vdata to the vgroup via these calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94065"></A>vdata_ref = VHstoredatam(file_id, ATTR_FIELD_NAME, values, size, type, attr_name, _HDF_ATTRIBUTE, order);</P>
<P CLASS="syntax">
<A NAME="50593875_pgfId-94075"></A>ret_value = Vaddtagref (vgroup_id, DFTAG_VH, vdata_ref);</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93991"></A>While both types of attributes are stored as vdatas, the vdatas of the two types of attributes are saved differently in the file.  Because of the different storages, the new-style attribute functions, such as <EM CLASS="FunctionName">
Vnattrs</EM>
, <EM CLASS="FunctionName">
Vgetattr</EM>
 or <EM CLASS="FunctionName">
Vattrinfo</EM>
, would miss the old-style attributes.  Starting in release 4.2.6, new functions were added to allow applications to get access to both types of attributes, i.e.,  <EM CLASS="FunctionName">
Vnattrs2</EM>
, <EM CLASS="FunctionName">
Vattrinfo2</EM>
, and <EM CLASS="FunctionName">
Vgetattr2</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93993"></A>Note that, when a vgroup has both type of attributes, the old-style attributes will preceed the new ones, regardless of when they were created.  Applications that anticipate to access files that were created by HDF Version 4.0 Release 2 and before (circa July 1996,) should use <EM CLASS="FunctionName">
Vnattrs2</EM>
 instead of <EM CLASS="FunctionName">
Vnattrs</EM>
 in order to include the old-style attributes if they exist and are desired.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93984"></A><EM CLASS="FunctionName">
Vnattrs</EM>
 and <EM CLASS="FunctionName">
Vnattrs2</EM>
 both returns the number of attributes, if successful, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
), otherwise. These routines are further defined in <A HREF="UG_html-5.htm#50593875_32780" CLASS="XRef">Table 5M</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-94432"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_32780"></A>Vnattrs and Vnattrs2 Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94325"></A>Routine Name </P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94326"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94327"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94329"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94331"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94335"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94341"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94343"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94421"></A>Vnattrs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94422"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94423"></A>(vfnatts)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94425"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94427"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94429"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94431"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94484"></A>Vnattrs2</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94502"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94486"></A>(Unavailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94488"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94490"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94492"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94494"></A>Vgroup identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-11620"></A>	5.8.5	<A NAME="50593875_18372"></A>Obtaining Information on a Given Vgroup Attribute: Vattrinfo</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-25124"></A><EM CLASS="FunctionName">
Vattrinfo</EM>
<A NAME="50593875_marker-25123"></A> retrieves the name, data type, number of values, and the size of the values of an attribute that belongs to the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vattrinfo</EM>
<A NAME="50593875_marker-23320"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-23322"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vattrinfo(vgroup_id, attr_index, attr_name, &amp;data_type, &amp;n_values, &amp;size);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-23324"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfainfo(vgroup_id, attr_index, attr_name, data_type, n_values, size)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-12103"></A><EM CLASS="FunctionName">
Vattrinfo</EM>
 stores the name, data type, number of values, and the size of the value of the attribute into the parameters <EM CLASS="VarName">
attr_name</EM>
, <EM CLASS="VarName">
data_type</EM>
, <EM CLASS="VarName">
n_values</EM>
, and <EM CLASS="VarName">
size</EM>
, respectively.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-28025"></A>The attribute is specified by its index, <EM CLASS="VarName">
attr_index</EM>
. The valid values of <EM CLASS="VarName">
attr_index</EM>
 range from 0 to the total number of attributes attached to the vgroup - 1. The number of vgroup attributes can be obtained using the routine <EM CLASS="FunctionName">
Vnattrs</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-28029"></A>The parameter <EM CLASS="VarName">
data_type</EM>
 is an integer number. Refer to <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A> for the definitions of the data types to interpret this value. The parameter <EM CLASS="VarName">
size</EM>
 contains the number of bytes taken by an attribute value.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-25175"></A>In C, the parameters <EM CLASS="VarName">
attr_name</EM>
, <EM CLASS="VarName">
data_type</EM>
, <EM CLASS="VarName">
n_values</EM>
, and <EM CLASS="VarName">
size</EM>
 can be set to <EM CLASS="DefName">
NULL</EM>
, if the information returned by these parameters is not needed.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93930"></A>Note that, when working with HDF files that were created by HDF Version 4.0 Release 2 and before (circa July 1996,) please refer to the section about <EM CLASS="FunctionName">
Vattrinfo2</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-11623"></A><EM CLASS="FunctionName">
Vattrinfo</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further described in <A HREF="UG_html-5.htm#50593875_64763" CLASS="XRef">Vattrinfo and Vattrinfo2 Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-93947"></A>	5.8.6	Obtaining Information on a Given Vgroup Attribute: Vattrinfo2</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-94158"></A><EM CLASS="FunctionName">
Vattrinfo2</EM>
 is an updated version of <EM CLASS="FunctionName">
Vattrinfo</EM>
.  Beside retrieving the name, datatype, number of values, and value size of an attribute identified by its index, attr_index, in the vgroup, vgroup_id as <EM CLASS="FunctionName">
Vattrinfo</EM>
, <EM CLASS="FunctionName">
Vattrinfo2</EM>
 also provides the reference number of and the number of fields in the vdata that represents the attribute.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93949"></A>The syntax of <EM CLASS="FunctionName">
Vattrinfo2</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94168"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vattrinfo2(vgroup_id, attr_index, attr_name, &amp;data_type, &amp;n_values, &amp;size, &amp;n_fields, &amp;ref_num);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94169"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Unavailable</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93954"></A>The attribute is specified by its index, <EM CLASS="VarName">
attr_index</EM>
. The valid values of <EM CLASS="VarName">
attr_index</EM>
 range from 0 to the total number of attributes attached to the vgroup - 1. The number of vgroup attributes can be obtained using the routine <EM CLASS="FunctionName">
Vnattrs2</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93958"></A>The parameter <EM CLASS="VarName">
data_type</EM>
 is an integer number. Refer to <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A> for the definitions of the data types to interpret this value. The parameter <EM CLASS="VarName">
size</EM>
 contains the number of bytes taken by an attribute value.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93959"></A>In C, the parameters <EM CLASS="VarName">
attr_name</EM>
, <EM CLASS="VarName">
data_type</EM>
, <EM CLASS="VarName">
n_values</EM>
, and <EM CLASS="VarName">
size</EM>
 can be set to <EM CLASS="DefName">
NULL</EM>
, if the information returned by these parameters is not needed.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93960"></A>Note that, this function should be used in place of <EM CLASS="FunctionName">
Vattrinfo</EM>
 when working with HDF files that were created by HDF Version 4.0 Release 2 and before (circa July 1996.)  Please refer to <A HREF="UG_html-5.htm#50593875_32857" CLASS="XRef">Obtaining the Total Number of Vgroup Attributes: Vnattrs and Vnattrs2</A> and the Appendix Attribute for more details about vgroup attributes.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-93961"></A><EM CLASS="FunctionName">
Vattrinfo2</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further described in <A HREF="UG_html-5.htm#50593875_64763" CLASS="XRef">Table 5N</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-12893"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_64763"></A>Vattrinfo<A NAME="50593875_marker-28908"></A> and Vattrinfo2 Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-51040"></A>Routine Name </P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-51041"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-12863"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-12865"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-12867"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-12871"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-12877"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-12879"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28844"></A>Vattrinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-28845"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-28846"></A>(vfainfo)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28848"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28850"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28852"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28854"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28858"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28860"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28862"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28864"></A>Index of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28868"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28870"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28872"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28874"></A>Returned name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28878"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28880"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28882"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28884"></A>Returned data type of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28888"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28890"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28892"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28894"></A>Returned number of values of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28898"></A>size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28900"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-28902"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-28904"></A>Returned size, in bytes, of the value of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="8" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94579"></A>Vattrinfo2</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94580"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94581"></A>(Unvailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94583"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94585"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94587"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94589"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94571"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94573"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94613"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94577"></A>Index of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94561"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94563"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94565"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94567"></A>Returned name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94551"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94553"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94555"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94557"></A>Returned data type of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94541"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94543"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94545"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94547"></A>Returned number of values of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94531"></A>size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94533"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94535"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94537"></A>Returned size, in bytes, of the value of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94603"></A>n_fields</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94605"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94607"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94609"></A>Returned number of fields in the attribute vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94593"></A>ref_num</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94595"></A>uint16 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94597"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94599"></A>Returned reference number of the attribute vdata</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-28694"></A>	5.8.7	<A NAME="50593875_12362"></A>Retrieving the Values of a Given Vgroup <A NAME="50593875_marker-28693"></A>Attribute: Vgetattr</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-94653"></A><EM CLASS="FunctionName">
Vgetattr</EM>
<A NAME="50593875_marker-94652"></A> retrieves the values of an attribute of the vgroup specified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vgetattr</EM>
<A NAME="50593875_marker-94654"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94655"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgetattr(vgroup_id, attr_index, attr_values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94656"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfgnatt(vgroup_id, attr_index, attr_values) </P>
<P CLASS="syntax-or-top">
<A NAME="50593875_pgfId-28699"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = vfgcatt(vgroup_id, attr_index, attr_values)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-28700"></A>The attribute is specified by its index, <EM CLASS="VarName">
attr_index</EM>
. The valid values of <EM CLASS="VarName">
attr_index</EM>
 range from 0 to the total number of attributes attached to the vgroup - 1. The number of vgroup attributes can be obtained using the routine <EM CLASS="FunctionName">
Vnattrs</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-28701"></A>The buffer <EM CLASS="VarName">
attr_values</EM>
 must be sufficiently allocated to hold the retrieved attribute values. Use <EM CLASS="FunctionName">
Vattrinfo</EM>
 to obtain information about the attribute values for appropriate memory allocation.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-28703"></A>Note that the FORTRAN-77 version of <EM CLASS="FunctionName">
Vgetattr</EM>
 has two routines; <EM CLASS="FunctionName">
vfgnatt</EM>
 gets a numeric value attribute and <EM CLASS="FunctionName">
vfgcatt</EM>
 gets a character value attribute.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-29024"></A><EM CLASS="FunctionName">
Vgetattr</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_78946" CLASS="XRef">Table 5O</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-94667"></A>	5.8.8	Retrieving the Values of a Given Vgroup <A NAME="50593875_marker-94666"></A>Attribute: Vgetattr2</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-94669"></A>As <EM CLASS="FunctionName">
Vgetattr</EM>
, <EM CLASS="FunctionName">
Vgetattr2</EM>
 retrieves the values of an attribute of the vgroup specified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax of <EM CLASS="FunctionName">
Vgetattr2</EM>
 are as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94671"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vgetattr2(vgroup_id, attr_index, attr_values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-94673"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Currently unavailable</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94675"></A>Unlike <EM CLASS="FunctionName">
Vgetattr</EM>
, <EM CLASS="FunctionName">
Vgetattr2</EM>
 can also read values from attributes that were created by methods other than <EM CLASS="FunctionName">
Vsetattr</EM>
.  Please refer to <A HREF="UG_html-5.htm#50593875_32857" CLASS="XRef">Obtaining the Total Number of Vgroup Attributes: Vnattrs and Vnattrs2</A> and the Appendix Attribute for information about the different types of vgroup attributes.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94715"></A>The attribute is specified by its index, <EM CLASS="VarName">
attr_index</EM>
. The valid values of <EM CLASS="VarName">
attr_index</EM>
 range from 0 to the total number of attributes attached to the vgroup - 1. The number of vgroup attributes can be obtained using the routine <EM CLASS="FunctionName">
Vnattrs2</EM>
.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94676"></A>The buffer <EM CLASS="VarName">
attr_values</EM>
 must be sufficiently allocated to hold the retrieved attribute values. Use <EM CLASS="FunctionName">
Vattrinfo2</EM>
 to obtain information about the attribute values for appropriate memory allocation.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-94679"></A><EM CLASS="FunctionName">
Vgetattr2</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further defined in <A HREF="UG_html-5.htm#50593875_78946" CLASS="XRef">Table 5O</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-94870"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_78946"></A>Vgetat<A NAME="50593875_marker-94737"></A>tr and Vgetattr2 Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94741"></A>Routine Name </P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94742"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94743"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94745"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94747"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94751"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94757"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-94759"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94816"></A>Vgetattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94817"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94818"></A>(vfgnatt/vfgcatt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94820"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94822"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94824"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94826"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94830"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94832"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94834"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94836"></A>Index of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94840"></A>attr_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94842"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94844"></A>&lt;valid numeric data type&gt; (*)/ </P>
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94845"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94847"></A>Buffer containing attribute values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94850"></A>Vgetattr2</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-94881"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-94851"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94853"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94855"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94857"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94859"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94863"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94865"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94867"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94869"></A>Index of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94907"></A>attr_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94909"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-94912"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-94914"></A>Buffer containing attribute values</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593875_pgfId-113185"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
Operations on Vgroup Attributes </H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-113186"></A>This example illustrates the use of <EM CLASS="FunctionName">
Vfind/vfind</EM>
 to locate a vgroup by its name, <EM CLASS="FunctionName">
Vsetattr/vfscatt</EM>
 to attach an attribute to the vgroup, <EM CLASS="FunctionName">
Vattrinfo/vfainfo</EM>
 to obtain information about the vgroup attribute, and <EM CLASS="FunctionName">
Vgetattr/vfgcatt</EM>
 to obtain the attribute values. </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-113187"></A>The program obtains the version of the group then sets an attribute named &quot;First Attribute&quot; for the vgroup named &quot;SD Vgroup&quot;.  Next, the program gets the number of attributes that the vgroup has, and obtains and displays the name, the number of values, and the values of each attribute.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593875_pgfId-113192"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
C:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113195"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113196"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113197"></A>#define  FILE_NAME      &quot;General_Vgroups.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113198"></A>#define  VGROUP_NAME    &quot;SD Vgroup&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113199"></A>#define  VGATTR_NAME    &quot;First Attribute&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113200"></A>#define  N_ATT_VALUES   7              /* number of values in the attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113201"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113202"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113203"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113204"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113205"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113206"></A>   intn   status_n,     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113207"></A>          n_attrs;      /* number of attributes of the vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113208"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113209"></A>          file_id, vgroup_ref, vgroup_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113210"></A>          attr_index, i, vg_version,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113211"></A>          data_type, n_values, size;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113212"></A>   char   vg_attr[N_ATT_VALUES] = {’v’,’g’,’r’,’o’,’u’,’p’,’\0’};</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113213"></A>   char   vgattr_buf[N_ATT_VALUES], attr_name[30];</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113214"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113215"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113216"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113217"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113218"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113219"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113220"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113221"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113222"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113223"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113224"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113225"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113226"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113227"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113228"></A>   * Get the reference number of the vgroup named VGROUP_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113229"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113230"></A>   vgroup_ref = Vfind (file_id, VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113231"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113232"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113233"></A>   * Attach to the vgroup found.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113234"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113235"></A>   vgroup_id = Vattach (file_id, vgroup_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113236"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113237"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113238"></A>   * Get and display the version of the attached vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113239"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113240"></A>   vg_version = Vgetversion (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113241"></A>   switch (vg_version) {</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113242"></A>        case VSET_NEW_VERSION:</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113243"></A>              printf (&quot;\nVgroup %s is of the newest version, version 4\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113244"></A>                   VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113245"></A>           break;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113246"></A>        case VSET_VERSION:</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113247"></A>              printf (&quot;Vgroup %s is of a version between 3.2 and 4.0r2\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113248"></A>                   VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113249"></A>           break;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113250"></A>        case VSET_OLD_VERSION:</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113251"></A>              printf (&quot;Vgroup %s is of version before 3.2\n&quot;, VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113252"></A>           break;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113253"></A>        default:</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113254"></A>           printf (&quot;Unknown version = %d\n&quot;, vg_version);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113255"></A>        } /* switch */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113256"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113257"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113258"></A>   * Add the attribute named VGATTR_NAME to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113259"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113260"></A>   status_n = Vsetattr (vgroup_id, VGATTR_NAME, DFNT_CHAR, N_ATT_VALUES, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113261"></A>                        vg_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113262"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113263"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113264"></A>   * Get and display the number of attributes attached to this vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113265"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113266"></A>   n_attrs = Vnattrs (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113267"></A>   printf (&quot;\nThis vgroup has %d attribute(s)\n&quot;, n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113268"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113269"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113270"></A>   * Get and display the name and the number of values of each attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113271"></A>   * Note that the fourth and last parameters are set to NULL because the type </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113272"></A>   * and the size of the attribute are not desired.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113273"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113274"></A>   for (attr_index = 0; attr_index &lt; n_attrs; attr_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113275"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113276"></A>      status_n = Vattrinfo (vgroup_id, attr_index, attr_name, NULL, </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113277"></A>                            &amp;n_values, NULL);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113278"></A>      printf (&quot;\nAttribute #%d is named %s and has %d values: &quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113279"></A>                            attr_index+1, attr_name, n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113280"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113281"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113282"></A>      * Get and display the attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113283"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113284"></A>      status_n = Vgetattr (vgroup_id, attr_index, vgattr_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113285"></A>      for (i = 0; i &lt; n_values; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113286"></A>         printf (&quot;%c &quot;, vgattr_buf[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113287"></A>      printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113288"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113289"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113290"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113291"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113292"></A>   * Terminate access to the vgroup and to the V interface, and close </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113293"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113294"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113295"></A>   status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113296"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113297"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113298"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113299"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113301"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593875_pgfId-113306"></A><DIV>
<IMG SRC="UG_html-36.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113309"></A>      program  vgroup_attribute</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113310"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113311"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113312"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113313"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113314"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113315"></A>      character*9  VGROUP_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113316"></A>      character*15 VGATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113317"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113318"></A>      parameter (FILE_NAME    = ’General_Vgroups.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113319"></A>     +           VGROUP_NAME  = ’SD Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113320"></A>     +           VGATTR_NAME  = ’First Attribute’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113321"></A>      integer VSET_NEW_VERSION, VSET_VERSION, VSET_OLD_VERSION</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113322"></A>      parameter (VSET_NEW_VERSION = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113323"></A>     +           VSET_VERSION     = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113324"></A>     +           VSET_OLD_VERSION = 2)  </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113325"></A>      integer DFACC_WRITE </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113326"></A>      parameter (DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113327"></A>      integer DFNT_CHAR</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113328"></A>      parameter (DFNT_CHAR = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113329"></A>      integer N_ATT_VALUES</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113330"></A>      parameter (N_ATT_VALUES = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113331"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113332"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113333"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113334"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113335"></A>      integer vfstart, vfatch, vfgver, vfscatt, vfnatts, vfainfo,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113336"></A>     +        vfind, vfgcatt, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113337"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113338"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113339"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113340"></A>      integer status, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113341"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113342"></A>      integer vgroup_id, vgroup_ref, vg_version</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113343"></A>      integer attr_index, i</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113344"></A>      integer data_type, n_values, size </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113345"></A>      character vg_attr(N_ATT_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113346"></A>      character vgattr_buf(N_ATT_VALUES), attr_name(30)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113347"></A>      data vg_attr /’v’,’g’,’r’,’o’,’u’,’p’/</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113348"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113349"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113350"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113351"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113352"></A>C     Open the HDF file for reading/writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113353"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113354"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113355"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113356"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113357"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113358"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113359"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113360"></A>C     Get the reference number of the vgroup named VGROUP_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113361"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113362"></A>      vgroup_ref = vfind(file_id, VGROUP_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113363"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113364"></A>C     Attach to the vgroup found.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113365"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113366"></A>      vgroup_id = vfatch(file_id, vgroup_ref , ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113367"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113368"></A>C     Get and display the version of the attached vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113369"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113370"></A>      vg_version = vfgver(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113371"></A>      if (vg_version .eq. VSET_NEW_VERSION) write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113372"></A>     +   VGROUP_NAME, ’ is of the newest version, version 4’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113373"></A>      if (vg_version .eq. VSET_VERSION) write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113374"></A>     +   VGROUP_NAME, ’ is of a version between 3.2 and 4.0r2’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113375"></A>      if(vg_version .eq. VSET_OLD_VERSION) write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113376"></A>     +   VGROUP_NAME, ’ is of version before 3.2’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113377"></A>      if ((vg_version .ne. VSET_NEW_VERSION) .and.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113378"></A>     +    (vg_version .ne. VSET_VERSION)     .and.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113379"></A>     +    (vg_version .ne. VSET_OLD_VERSION)) write(*,*)   </P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113380"></A>     +    ’Unknown version’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113381"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113382"></A>C     Add the attribute named VGATTR_NAME to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113383"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113384"></A>      status = vfscatt(vgroup_id, VGATTR_NAME, DFNT_CHAR, N_ATT_VALUES,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113385"></A>     +                 vg_attr)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113386"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113387"></A>C     Get and display the number of attributes attached to this group.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113388"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113389"></A>      n_attrs = vfnatts(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113390"></A>      write(*,*) ’This group has’, n_attrs, ’ attributes’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113391"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113392"></A>C     Get and display the name and the number of values of each attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113393"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113394"></A>      do 10 attr_index=1, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113395"></A>         status = vfainfo(vgroup_id, attr_index-1, attr_name, data_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113396"></A>     +                    n_values, size)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113397"></A>      write(*,*) ’Attribute #’, attr_index-1, ’ is named ’, attr_name</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113398"></A>      write(*,*) ’and has’, n_values, ’ values: ’</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113399"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113400"></A>C     Get and display the attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113401"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113402"></A>      status = vfgcatt(vgroup_id, attr_index-1, vgattr_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113403"></A>      write(*,*) (vgattr_buf(i), i=1,n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113404"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113405"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113406"></A>C     Terminate access to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113407"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113408"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113409"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113410"></A>C     Terminate accessto the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113411"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113412"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113413"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-113414"></A>      end</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-113183"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593875_pgfId-56070"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593875_pgfId-36799"></A>	5.9	Obs<A NAME="50593875_marker-36798"></A>olete Vgroup Interface Routines<DIV>
<IMG SRC="UG_html-30.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593875_pgfId-8086"></A>The following routines have been replaced by newer routines with similar functionality. These routines are still supported by the Vgroup interface, but their use is not recommended. HDF may not support these routines in a future version.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-6538"></A>	5.9.1	<A NAME="50593875_30894"></A>Determinin<A NAME="50593875_marker-11605"></A>g the Next Vg<A NAME="50593875_marker-11606"></A>roup or Vdata Identifier: Vgetnext</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-79291"></A><EM CLASS="FunctionName">
Vgetnext</EM>
<A NAME="50593875_marker-79290"></A> gets the reference number of the next member of a vgroup. This member can be either a vgroup or vdata. The syntax for <EM CLASS="FunctionName">
Vgetnext</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-79292"></A><EM CLASS="syntaxLang">
C:</EM>
		ref_num = Vgetnext(vgroup_id, v_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-79293"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	ref_num = vfgnxt(vgroup_id, v_ref)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-15340"></A><EM CLASS="FunctionName">
Vgetnext</EM>
 searches the vgroup, identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
, for the vgroup or vdata whose reference number is specified by the parameter <EM CLASS="VarName">
v_ref</EM>
. If this vgroup or vdata is found, <EM CLASS="FunctionName">
Vgetnext</EM>
 finds the next vgroup or vdata and returns its reference number. If <EM CLASS="VarName">
v_ref</EM>
 is set to <EM CLASS="DefName">
-1</EM>
, the routine will return the reference number of the first vgroup or vdata in the vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50452"></A><EM CLASS="FunctionName">
Vgetnext</EM>
 is now obsolete as the routine <EM CLASS="FunctionName">
Vgettagref</EM>
 provides the same functionality. In addition, <EM CLASS="FunctionName">
Vgettagref</EM>
 is not restricted to searching for members that are vgroups or vdatas.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-50458"></A><EM CLASS="FunctionName">
Vgetnext</EM>
 returns a reference number if the next vgroup or vdata is found, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) when an error occurs or when there are no more vdatas or vgroups in the vgroup. The parameters of <EM CLASS="FunctionName">
Vgetnext</EM>
 are further defined in <A HREF="UG_html-5.htm#50593875_27534" CLASS="XRef">Table 5P</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593875_pgfId-8040"></A>	5.9.2	<A NAME="50593875_15563"></A>Determin<A NAME="50593875_marker-11608"></A>ing the Number <A NAME="50593875_marker-11609"></A>of Members and Vgroup Name: Vinquire</H6>
<P CLASS="Body">
<A NAME="50593875_pgfId-7980"></A><EM CLASS="FunctionName">
Vinquire</EM>
<A NAME="50593875_marker-25624"></A> retrieves the number of data objects and the name of the vgroup identified by the parameter <EM CLASS="VarName">
vgroup_id</EM>
. The syntax for <EM CLASS="FunctionName">
Vinquire</EM>
<A NAME="50593875_marker-45911"></A> is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-2752"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Vinquire(vgroup_id, &amp;n_members, vgroup_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593875_pgfId-26168"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vfinq(vgroup_id, n_members, vgroup_name)</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-26170"></A><EM CLASS="FunctionName">
Vinquire</EM>
 stores the number of data objects and the vgroup name in the parameters <EM CLASS="VarName">
n_members</EM>
 and <EM CLASS="VarName">
vgroup_name</EM>
, respectively. In C, if either <EM CLASS="VarName">
n_members</EM>
 or <EM CLASS="VarName">
vgroup_name</EM>
 is set to <EM CLASS="DefName">
NULL</EM>
, the corresponding data is not returned. The maximum length of the vgroup’s name is defined by <EM CLASS="DefName">
VGNAMELENMAX</EM>
 (or <EM CLASS="DefName">
64</EM>
). </P>
<P CLASS="Body">
<A NAME="50593875_pgfId-25670"></A><EM CLASS="FunctionName">
Vinquire</EM>
 is now obsolete as the <EM CLASS="FunctionName">
Vntagrefs</EM>
 routine can be used to get the number of data objects in a vgroup and <EM CLASS="FunctionName">
Vgetname</EM>
 can be used to retrieve the name of a vgroup.</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-36512"></A><EM CLASS="FunctionName">
Vinquire</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routines are further defined in <A HREF="UG_html-5.htm#50593875_27534" CLASS="XRef">Table 5P</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593875_pgfId-13434"></A><DIV>
<IMG SRC="UG_html-31.gif" ALT="">
</DIV>
<A NAME="50593875_27534"></A>Vge<A NAME="50593875_marker-13356"></A>tnext and Vi<A NAME="50593875_marker-13357"></A>nquire Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-13360"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19378"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593875_pgfId-13361"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-13363"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-13365"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-13369"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-13375"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593875_pgfId-13377"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-13381"></A>Vgetnext</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19379"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-13382"></A>(vfgnxt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13384"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13386"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13388"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-13390"></A>Vgroup identifier of the parent vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13394"></A>v_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13396"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13398"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-13400"></A>Reference number for the target vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-13402"></A>Vinquire</H6>
<H6 CLASS="ReturnType">
<A NAME="50593875_pgfId-19380"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593875_pgfId-13403"></A>(vfinq)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13405"></A>vgroup_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13407"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13409"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-13411"></A>Vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13415"></A>n_members</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13417"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13419"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-13421"></A>Pointer to the number of entries in the vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13425"></A>vgroup_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13427"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593875_pgfId-13429"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593875_pgfId-13433"></A>Buffer for the name of the vgroup<A NAME="50593875_marker-13431"></A><A NAME="50593875_marker-13432"></A></P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593876_pgfId-1811"></A>&nbsp;</P>
</DIV>
</DIV>
</DIV>
</DIV>
<HR><P><table id="Botofpage" border="0" width="850" cellspacing="0" cellpadding="0">      <tr>        <td align="left">        HDF 4.2.12 - June 2016<br/>        <a href="THG_Copyright.html">Copyright</a>        <td align="right">          <span style="font-size: 12px; font-weight: bold">            The HDF Group<br />          </span>          <span style="font-size: 12px">            <a href="http://www.hdfgroup.org">www.hdfgroup.org</a><br />            <img valign="bottom" border="0" src="images/help.jpg" height="12" alt="The HDF Group" valign="top" />          </span>        </td>      </tr>    </table></BODY>
</HTML>
