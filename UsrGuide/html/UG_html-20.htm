<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 11.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="UG_html.css" CHARSET="UTF-8" TYPE="text/css">
<table id="Topofpage" border="0" width="850" cellspacing="0" cellpadding="0"><tr><td align="left"><a href="http://www.hdfgroup.org"><img id="THG_logo" border="0" src="images/hdf_logo.jpg" width="90" height="70" alt="The HDF Group" valign="top" /></a></td><td valign="middle" align="center"><H1>HDF User’s Guide</H1></td><td valign="middle" align="center"><a HREF=UG_html.htm> [Top]</a> <a HREF=UG_html-19.htm> [Prev]</a></td></tr></table><HR></HEAD>
<BODY>
<DIV>
<span style="font-size: 14px; font-weight: bold"><a href="UG_html-17.htm">Index</a>] [<a href="UG_html-20.htm">List of Examples</a>] [<a href="UG_html-19.htm">List of Tables</a>] [<a href="UG_html-18.htm">List of Figures</a>]</DIV>
<H1 CLASS="ChapterTitle">
<A NAME="50593901_pgfId-13731"></A>    List<A NAME="50593901_List of Examples"></A><A NAME="50593901_41239"></A> of Examples</H1>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30433"></A><EM CLASS="Italicbold">
<A HREF="UG_Intro.htm#50593871_pgfId-47168" CLASS="Index">Chapter 1</A></EM>
 - Introduction to HDF</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30435"></A><EM CLASS="Italicbold">
<A HREF="UG_Fundmtls.htm#50593872_pgfId-46902" CLASS="Index">Chapter 2</A></EM>
 - HDF Fundamentals</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30437"></A><EM CLASS="Italicbold">
<A HREF="UG_html-3.htm#50593873_pgfId-311694" CLASS="Index">Chapter 3</A></EM>
 - Scientific Data Sets (SD API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30439"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-227272" CLASS="Index">EXAMPLE 1.</A></EM>
	Creating an HDF file and an Empty SDS.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30441"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-16760" CLASS="Index">EXAMPLE 2.</A></EM>
	Writing to an SDS.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30443"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-169243" CLASS="Index">EXAMPLE 3.</A></EM>
	Writing a Slab of Data to an SDS.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30445"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-227341" CLASS="Index">EXAMPLE 4.</A></EM>
	Altering Values within an SDS Array.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30447"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-144687" CLASS="Index">EXAMPLE 5.</A></EM>
	Appending Data to an SDS Array with an Unlimited Dimension.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30449"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-162896" CLASS="Index">EXAMPLE 6.</A></EM>
	Compressing SDS Data.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30451"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-17250" CLASS="Index">EXAMPLE 7.</A></EM>
	Moving Data to the External File.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30453"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-17384" CLASS="Index">EXAMPLE 8.</A></EM>
	Reading from an SDS.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30455"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-227367" CLASS="Index">EXAMPLE 9.</A></EM>
	Reading Subsets of an SDS.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30457"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-297933" CLASS="Index">EXAMPLE 10.</A></EM>
	Getting Information about a File and an SDSs.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30459"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-18032" CLASS="Index">EXAMPLE 11.</A></EM>
	Locating an SDS by Its Name.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30461"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-170596" CLASS="Index">EXAMPLE 12.</A></EM>
	Setting and Retrieving Dimension Information.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30463"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-21522" CLASS="Index">EXAMPLE 13.</A></EM>
	Distinguishing a Dimension Scale from a Data Set in a File.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30465"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-169510" CLASS="Index">EXAMPLE 14.</A></EM>
	Setting Attributes.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30467"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-13645" CLASS="Index">EXAMPLE 15.</A></EM>
	Reading Attributes.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30469"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-14042" CLASS="Index">EXAMPLE 16.</A></EM>
	Calibrating Data.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30471"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-3.htm#50593873_pgfId-149492" CLASS="Index">EXAMPLE 17.</A></EM>
	Writing and Reading a Chunked SDS.</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30473"></A><EM CLASS="Italicbold">
<A HREF="UG_html-4.htm#50593874_pgfId-156136" CLASS="Index">Chapter 4</A></EM>
 - Vdatas (VS API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30475"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-98080" CLASS="Index">EXAMPLE 1.</A></EM>
	Accessing a Vdata in an HDF File</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30477"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-5795" CLASS="Index">EXAMPLE 2.</A></EM>
	Creating and Storing One-field Vdatas Using VHstoredata and VHstoredatam</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30479"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-6082" CLASS="Index">EXAMPLE 3.</A></EM>
	Writing a Vdata of Homogeneous Type</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30481"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-24983" CLASS="Index">EXAMPLE 4.</A></EM>
	Writing a Multi-field and Mixed-type Vdata with Packing</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30483"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-76416" CLASS="Index">EXAMPLE 5.</A></EM>
	Reading a Vdata of Homogeneous Type</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30485"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-98097" CLASS="Index">EXAMPLE 6.</A></EM>
	Reading a Multi-field and Mixed-type Vdata with Packing</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30487"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-76481" CLASS="Index">EXAMPLE 7.</A></EM>
	Locating a Vdata Containing Specified Field Names</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30489"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-18988" CLASS="Index">EXAMPLE 8.</A></EM>
	Operations on Field and Vdata Attributes</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30491"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-4.htm#50593874_pgfId-76534" CLASS="Index">EXAMPLE 9.</A></EM>
	Obtaining Vdata Information</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30493"></A><EM CLASS="Italicbold">
<A HREF="UG_html-5.htm#50593875_pgfId-112313" CLASS="Index">Chapter 5</A></EM>
 - Vgroups (V API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30495"></A><EM CLASS="Italic10bold">
<A HREF="UG_Vgroups.htm#50593875_pgfId-93398" CLASS="Index">EXAMPLE 1.</A></EM>
	Creating HDF Files and Vgroups</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30497"></A><EM CLASS="Italic10bold">
<A HREF="UG_Vgroups.htm#50593875_pgfId-69467" CLASS="Index">EXAMPLE 2.</A></EM>
	Adding an SDS to a New Vgroup</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30499"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-5.htm#50593875_pgfId-59046" CLASS="Index">EXAMPLE 3.</A></EM>
	Adding Three Vdatas into a Vgroup</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30501"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-5.htm#50593875_pgfId-18158" CLASS="Index">EXAMPLE 4.</A></EM>
	Obtaining Information about Lone Vgroups</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30503"></A><EM CLASS="Italic10bold">
<A HREF="UG_Vgroups.htm#50593875_pgfId-20336" CLASS="Index">EXAMPLE 5.</A></EM>
	Operations on Vgroup Attributes</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30505"></A><EM CLASS="Italic10bold">
<A HREF="UG_Vgroups.htm#50593875_pgfId-12479" CLASS="Index">EXAMPLE 6.</A></EM>
	Obtaining Information about the Contents of a Vgroup</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30507"></A><EM CLASS="Italicbold">
<A HREF="UG_html-6.htm#50593876_pgfId-27252" CLASS="Index">Chapter 6</A></EM>
 - 8-Bit Raster Images (DFR8 API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30509"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-6.htm#50593876_pgfId-13127" CLASS="Index">EXAMPLE 1.</A></EM>
	Writing an 8-Bit Raster Image to an HDF File</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30511"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-6.htm#50593876_pgfId-5088" CLASS="Index">EXAMPLE 2.</A></EM>
	Writing a Palette and an Image in RIS8 Format</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30513"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-6.htm#50593876_pgfId-3224" CLASS="Index">EXAMPLE 3.</A></EM>
	Writing a Set of Compressed 8-Bit Raster Images</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30515"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-6.htm#50593876_pgfId-8201" CLASS="Index">EXAMPLE 4.</A></EM>
	Compressing and Writing a 8-Bit Raster Image</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30517"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-6.htm#50593876_pgfId-1952" CLASS="Index">EXAMPLE 5.</A></EM>
	Reading an 8-Bit Raster Image</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30519"></A><EM CLASS="Italicbold">
<A HREF="UG_RIS24s.htm#50593877_pgfId-23279" CLASS="Index">Chapter 7</A></EM>
 - 24-bit Raster Images (DF24 API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30521"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-7.htm#50593877_pgfId-2788" CLASS="Index">EXAMPLE 1.</A></EM>
	Writing a 24-Bit Raster Image to an HDF File</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30523"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-7.htm#50593877_pgfId-2918" CLASS="Index">EXAMPLE 2.</A></EM>
	Writing 24-Bit Raster Images Using Scan-plane Interlacing</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30525"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-7.htm#50593877_pgfId-3075" CLASS="Index">EXAMPLE 3.</A></EM>
	Compressing and Writing a 24-Bit Raster Image</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30527"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-7.htm#50593877_pgfId-3287" CLASS="Index">EXAMPLE 4.</A></EM>
	Reading a 24-Bit Raster Image from an HDF File</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30529"></A><EM CLASS="Italicbold">
<A HREF="UG_html-8.htm#50593878_pgfId-126681" CLASS="Index">Chapter 8</A></EM>
 - General Raster Images (GR API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30531"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-47941" CLASS="Index">EXAMPLE 1.</A></EM>
	Creating and Writing a Raster Image</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30533"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-57991" CLASS="Index">EXAMPLE 2.</A></EM>
	Modifying an Existing Raster Image</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30535"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-34068" CLASS="Index">EXAMPLE 3.</A></EM>
	Reading a Raster Image.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30537"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-11170" CLASS="Index">EXAMPLE 4.</A></EM>
	Obtaining File and Image Information.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30539"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-11626" CLASS="Index">EXAMPLE 5.</A></EM>
	Operations on File and Raster Image Attributes.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30541"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-11896" CLASS="Index">EXAMPLE 6.</A></EM>
	Obtaining File and Image Attribute.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30543"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-12091" CLASS="Index">EXAMPLE 7.</A></EM>
	Writing a Palette.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30545"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-50425" CLASS="Index">EXAMPLE 8.</A></EM>
	Reading a Palette.</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30547"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-8.htm#50593878_pgfId-65591" CLASS="Index">EXAMPLE 9.</A></EM>
	Creating and Writing a Chunked Raster Image</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30549"></A><EM CLASS="Italicbold">
<A HREF="UG_Palettes.htm#50593879_pgfId-17674" CLASS="Index">Chapter 9</A></EM>
 - Palettes (DFP API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30551"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-9.htm#50593879_pgfId-1261" CLASS="Index">EXAMPLE 1.</A></EM>
	Writing a Palette</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30553"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-9.htm#50593879_pgfId-1385" CLASS="Index">EXAMPLE 2.</A></EM>
	Reading a Palette</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30555"></A><EM CLASS="Italicbold">
<A HREF="UG_MF_Annot.htm#50593880_pgfId-62320" CLASS="Index">Chapter 10</A></EM>
 - Annotations (AN API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30557"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-10.htm#50593880_pgfId-23344" CLASS="Index">EXAMPLE 1.</A></EM>
	Creating File and Data Annotations</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30559"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-10.htm#50593880_pgfId-44542" CLASS="Index">EXAMPLE 2.</A></EM>
	Reading File and Data Annotations</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30561"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-10.htm#50593880_pgfId-44596" CLASS="Index">EXAMPLE 3.</A></EM>
	Obtaining Annotation Information</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30563"></A><EM CLASS="Italicbold">
<A HREF="UG_Annot.htm#50593881_pgfId-42463" CLASS="Index">Chapter 11</A></EM>
 - Single-file Annotations (DFAN API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30565"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-11.htm#50593881_pgfId-3824" CLASS="Index">EXAMPLE 1.</A></EM>
	Writing a File Label and a File Description</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30567"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-11.htm#50593881_pgfId-3953" CLASS="Index">EXAMPLE 2.</A></EM>
	Writing an Object Label and Description to a Scientific Data Set</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30569"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-11.htm#50593881_pgfId-4192" CLASS="Index">EXAMPLE 3.</A></EM>
	Reading a File Label and a File Description</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30571"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-11.htm#50593881_pgfId-4355" CLASS="Index">EXAMPLE 4.</A></EM>
	Reading an Object Label and Description</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30573"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-11.htm#50593881_pgfId-3583" CLASS="Index">EXAMPLE 5.</A></EM>
	Getting a List of Labels for All Scientific Data Sets</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30575"></A><EM CLASS="Italicbold">
<A HREF="UG_html-12.htm#50593882_pgfId-62791" CLASS="Index">Chapter 12</A></EM>
 - Single-File Scientific Data Sets (DFSD API)</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30577"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-12.htm#50593882_pgfId-35682" CLASS="Index">EXAMPLE 1.</A></EM>
	Creating and Writing to a DFSD Scientific Data Set</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30579"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-12.htm#50593882_pgfId-51900" CLASS="Index">EXAMPLE 2.</A></EM>
	Reading from a DFSD Scientific Data Set</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30581"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-12.htm#50593882_pgfId-42548" CLASS="Index">EXAMPLE 3.</A></EM>
	Assigning Predefined String Attributes to a File</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30583"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-12.htm#50593882_pgfId-4846" CLASS="Index">EXAMPLE 4.</A></EM>
	Reading a Data Set and its Attribute Record</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30585"></A><EM CLASS="Italicbold">
<A HREF="UG_html-13.htm#50593883_pgfId-21768" CLASS="Index">Chapter 13</A></EM>
 - Error Reporting</P>
<P CLASS="ExampleLOP">
<A NAME="50593901_pgfId-30587"></A><EM CLASS="Italic10bold">
<A HREF="UG_html-13.htm#50593883_pgfId-14694" CLASS="Index">EXAMPLE 1.</A></EM>
	Writing Errors to a Console Window</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30589"></A><EM CLASS="Italicbold">
<A HREF="UG_html-14.htm#50593884_pgfId-185418" CLASS="Index">Chapter 14</A></EM>
 - HDF Performance Issues</P>
<P CLASS="ChapterTitleLOP">
<A NAME="50593901_pgfId-30591"></A><EM CLASS="Italicbold">
<A HREF="UG_html-15.htm#50593885_pgfId-91476" CLASS="Index">Chapter 15</A></EM>
 - HDF Command-line Utilities</P>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-473591"></A><A NAME="50593887_17109"></A>r24_ex1.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-930692"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931452"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931453"></A>#define WIDTH 5</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931454"></A>#define HEIGHT 6</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931455"></A>#define PIXEL_DEPTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931456"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931457"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931458"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931459"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931460"></A>	/* Initialize the image array. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931461"></A>	static uint8 raster_data[HEIGHT][WIDTH][PIXEL_DEPTH] =</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931462"></A>	{  1, 2, 3,  4, 5, 6,  7, 8, 9,  10,11,12,  13,14,15,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931463"></A>	  16,17,18, 19,20,21, 22,23,24,  25,26,27,  28,29,30,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931464"></A>	  31,32,33, 34,35,36, 37,38,39,  40,41,42,  43,44,45,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931465"></A>	  46,47,48, 49,50,51, 52,53,54,  55,56,57,  58,59,60,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931466"></A>	  61,62,63, 64,65,66, 67,68,69,  70,71,72,  73,74,75,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931467"></A>	  76,77,78, 79,80,81, 82,83,84,  85,86,87,  88,89,90 };</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931468"></A>    intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931469"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931470"></A>	/* Write the 24-bit raster image to the HDF file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931471"></A>	status = DF24addimage(“Example1.hdf”, (VOIDP)raster_data, WIDTH, \</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931472"></A>			   			  HEIGHT);</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931473"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931474"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931475"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-928476"></A><A NAME="50593887_13043"></A>r24_ex1.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-930723"></A>      PROGRAM WRITE RIS24</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931483"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931484"></A>      integer status, d2aimg </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931485"></A>      integer*4 WIDTH, HEIGHT, PIXEL_DEPTH</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931486"></A>      parameter (WIDTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931487"></A>     +         HEIGHT = 6, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931488"></A>     +         PIXEL_DEPTH = 3) </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931489"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931490"></A>      character raster_data(PIXEL_DEPTH, WIDTH, HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931491"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931492"></A>C     Initialize the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931493"></A>      data raster_data </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931494"></A>     +     /  1, 2, 3,  4, 5, 6,  7, 8, 9,  10,11,12,  13,14,15,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931495"></A>     +     16,17,18, 19,20,21, 22,23,24,  25,26,27,  28,29,30, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931496"></A>     +     31,32,33, 34,35,36, 37,38,39,  40,41,42,  43,44,45, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931497"></A>     +     46,47,48, 49,50,51, 52,53,54,  55,56,57,  58,59,60, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931498"></A>     +     61,62,63, 64,65,66, 67,68,69,  70,71,72,  73,74,75, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931499"></A>     +     76,77,78, 79,80,81, 82,83,84,  85,86,87,  88,89,90 /</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931500"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931501"></A>C     Write the 24-bit raster image to the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931502"></A>      status = d2aimg(‘Example1.hdf’, raster_data, WIDTH, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931503"></A>     +                HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931504"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931505"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931506"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-928479"></A><A NAME="50593887_14455"></A>r24_ex2.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-930775"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931514"></A>#include “hcomp.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931515"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931516"></A>#define WIDTH 5</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931517"></A>#define HEIGHT 6</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931518"></A>#define PIXEL_DEPTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931519"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931520"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931521"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931522"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931523"></A>	/* Initialize the image array. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931524"></A>	static uint8 raster_data[HEIGHT][WIDTH][PIXEL_DEPTH] = </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931525"></A>	{  1, 2, 3,  4, 5, 6,  7, 8, 9,  10,11,12,  13,14,15,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931526"></A>	16,17,18, 19,20,21, 22,23,24,  25,26,27,  28,29,30,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931527"></A>	31,32,33, 34,35,36, 37,38,39,  40,41,42,  43,44,45,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931528"></A>	46,47,48, 49,50,51, 52,53,54,  55,56,57,  58,59,60,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931529"></A>	61,62,63, 64,65,66, 67,68,69,  70,71,72,  73,74,75,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931530"></A>	76,77,78, 79,80,81, 82,83,84,  85,86,87,  88,89,90 };</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931531"></A>	intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931532"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931533"></A>	/* Change interlace from pixel to scan-plane. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931534"></A>	status = DF24setil(DFIL_PLANE); </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931535"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931536"></A>	/* Write the 24-bit image data to file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931537"></A>	status = DF24addimage(“Example2.hdf”, (VOIDP)raster_data, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931538"></A>					WIDTH, HEIGHT);</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931539"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931540"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931541"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-928481"></A><A NAME="50593887_18244"></A>r24_ex2.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-930820"></A>      PROGRAM CHANGE INTERLACE</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931549"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931550"></A>      integer status, d2aimg, d2setil </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931551"></A>      integer*4 WIDTH, HEIGHT, PIXEL_DEPTH, DFIL_PLANE</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931552"></A>      parameter (WIDTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931553"></A>     +    HEIGHT = 6, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931554"></A>     +    PIXEL_DEPTH = 3, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931555"></A>     +    DFIL_PLANE = 2) </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931556"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931557"></A>      integer raster_data(PIXEL_DEPTH, WIDTH, HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931558"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931559"></A>C     Initialize the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931560"></A>      data raster_data </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931561"></A>     + /  1, 2, 3,  4, 5, 6,  7, 8, 9,  10,11,12,  13,14,15,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931562"></A>     +  16,17,18, 19,20,21, 22,23,24,  25,26,27,  28,29,30, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931563"></A>     +  31,32,33, 34,35,36, 37,38,39,  40,41,42,  43,44,45, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931564"></A>     +  46,47,48, 49,50,51, 52,53,54,  55,56,57,  58,59,60, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931565"></A>     +  61,62,63, 64,65,66, 67,68,69,  70,71,72,  73,74,75, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931566"></A>     +  76,77,78, 79,80,81, 82,83,84,  85,86,87,  88,89,90  /</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931567"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931568"></A>C     Change interlace from pixel to scan plane.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931569"></A>      status = d2setil(DFIL_PLANE)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931570"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931571"></A>C     Write the 24-bit raster image to the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931572"></A>      status = d2aimg(‘Example2.hdf’, raster_data, WIDTH, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931573"></A>     +                 HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931574"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931575"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931576"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-928487"></A><A NAME="50593887_26424"></A>r24_ex3.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-930852"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931585"></A>#include “hcomp.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931586"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931587"></A>#define WIDTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931588"></A>#define HEIGHT 5</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931589"></A>#define PIXEL_DEPTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931590"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931591"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931592"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931593"></A>	/* Initialize the image array. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931594"></A>	static uint8 raster_data[HEIGHT][WIDTH][PIXEL_DEPTH] = </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931595"></A>		{  1, 2, 3,  4, 5, 6,  7, 8, 9,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931596"></A>		  10,11,12, 13,14,15, 16,17,18, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931597"></A>		  19,20,21, 22,23,24, 25,26,27,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931598"></A>		  28,29,30, 31,32,33, 34,35,36,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931599"></A>		  37,38,39, 40,41,42, 43,44,45 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931600"></A>	static comp_info compress_info;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931601"></A>	intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931602"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931603"></A>	/* Initialize JPEG compression structure. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931604"></A>	compress_info.jpeg.quality = 60;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931605"></A>	compress_info.jpeg.force_baseline = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931606"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931607"></A>	/* Set JPEG compression for storing the image. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931608"></A>	status = DF24setcompress(COMP_JPEG, &amp;compress_info);</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931609"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931610"></A>	/* Write the 24-bit image data to file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931611"></A>	status = DF24addimage(“Example2.hdf”, (VOIDP)raster_data, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931612"></A>					WIDTH, HEIGHT);</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931613"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931614"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931615"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-928489"></A><A NAME="50593887_27673"></A>r24_ex3.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-930882"></A>      PROGRAM COMPRESS RIS24</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931623"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931624"></A>      integer d2aimg, d2scomp, d2sjpeg, status</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931625"></A>      integer*4 WIDTH, HEIGHT, PIXEL_DEPTH</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931626"></A>      parameter(WIDTH = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931627"></A>     +          HEIGHT = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931628"></A>     +          PIXEL_DEPTH = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931629"></A>      character raster_data(PIXEL_DEPTH, WIDTH, HEIGHT) </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931630"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931631"></A>C     Initialize the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931632"></A>      data raster_data </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931633"></A>     + /  1, 2, 3,  4, 5, 6,  7, 8, 9,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931634"></A>     +   10,11,12, 13,14,15, 16,17,18, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931635"></A>     +   19,20,21, 22,23,24, 25,26,27,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931636"></A>     +   28,29,30, 31,32,33, 34,35,36,  </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931637"></A>     +   37,38,39, 40,41,42, 43,44,45  /</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931638"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931639"></A>C     Set compression.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931640"></A>      status = d2scomp(COMP_JPEG)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931641"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931642"></A>C     Set JPEG parameters to quality = 60, and turn compatibility on.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931643"></A>      status = d2sjpeg(60, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931644"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931645"></A>C     Write the 24-bit image data to the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931646"></A>      status = d2aimg(‘Example2.hdf’, raster_data, WIDTH, HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931647"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931648"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-928491"></A><A NAME="50593887_31772"></A>r24_ex4.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931390"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931660"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931661"></A>#define WIDTH 5</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931662"></A>#define HEIGHT 6</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931663"></A>#define PIXEL_DEPTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931664"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931665"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931666"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931667"></A>	uint8 raster_data[PIXEL_DEPTH][HEIGHT][WIDTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931668"></A>	int32 width, height;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931669"></A>	intn interlace, status;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931670"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931671"></A>	/* Get the image dimensions from the HDF file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931672"></A>	status = DF24getdims(“Example2.hdf”, &amp;width, &amp;height, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931673"></A>					&amp;interlace);</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931674"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931675"></A>	/* </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931676"></A>	* Read raster data if the dimensions are</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931677"></A>	* correct.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931678"></A>	*/</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931679"></A>	if (width &lt;= WIDTH &amp;&amp; height &lt;= HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931680"></A>	  status = DF24getimage(“Example2.hdf”, (VOIDP)raster_data, </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931681"></A>					width, height);</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931682"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931683"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593887_pgfId-931710"></A><A NAME="50593887_25498"></A>r24_ex4.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931709"></A>      PROGRAM READ RIS24 </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931767"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931768"></A>      integer d2gimg, d2gdims, status, width, height, interlace</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931769"></A>      integer*4 X_LENGTH, Y_LENGTH, PIXEL_DEPTH</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931770"></A>      parameter(X_LENGTH = 5, Y_LENGTH = 6, PIXEL_DEPTH = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931771"></A>      integer raster_data(PIXEL_DEPTH, X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931772"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931773"></A>C     Read the dimensions raster image.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931774"></A>      status = d2gdims(‘Example2.hdf’, width, height, interlace)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931775"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931776"></A>C     Read image data from the HDF file if the dimensions are </P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931777"></A>C     correct.</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931778"></A>      if (width .eq. X_LENGTH .and. height .eq. Y_LENGTH) then</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931779"></A>       status = d2gimg(‘Example2.hdf’, raster_data, width, height)</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931780"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931781"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931782"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593887_pgfId-931783"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="50593888_pgfId-929000"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593888_pgfId-930398"></A><A NAME="50593888_20548"></A>create_annotation.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930635"></A>&nbsp;</P>
<TABLE>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930403"></A>#include &quot;hdf.h&quot;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930405"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930407"></A>#define  FILE_NAME      &quot;General_HDFobjects.hdf&quot;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930409"></A>#define  VG_NAME        &quot;AN Vgroup&quot;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930411"></A>#define  FILE_LABEL_TXT &quot;General HDF objects&quot;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930413"></A>#define  FILE_DESC_TXT  &quot;This is an HDF file that contains general HDF objects&quot;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930415"></A>#define  DATA_LABEL_TXT &quot;Common AN Vgroup&quot;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930417"></A>#define  DATA_DESC_TXT  &quot;This is a vgroup that is used to test data annotations&quot;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930419"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930421"></A>main( )</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930423"></A>{</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930425"></A>   /************************* Variable declaration **************************/</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930427"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930429"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930431"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930433"></A>          file_id,      /* HDF file identifier */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930435"></A>          an_id,        /* AN interface identifier */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930437"></A>          file_label_id,  /* file label identifier */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930439"></A>          file_desc_id,   /* file description identifier */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930441"></A>          data_label_id,  /* data label identifier */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930443"></A>          data_desc_id,   /* data description identifier */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930445"></A>          vgroup_id;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930447"></A>   uint16 vgroup_tag, vgroup_ref;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930449"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930451"></A>   /********************** End of variable declaration **********************/</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930453"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930455"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930457"></A>   * Create the HDF file.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930459"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930461"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930463"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930465"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930467"></A>   * Initialize the AN interface.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930469"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930471"></A>   an_id = ANstart(file_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930473"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930475"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930477"></A>   * Create the file label.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930479"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930481"></A>   file_label_id = ANcreatef(an_id, AN_FILE_LABEL);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930483"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930485"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930487"></A>   * Write the annotations to the file label.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930489"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930491"></A>   status_32 = ANwriteann(file_label_id, FILE_LABEL_TXT, </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930493"></A>                          strlen (FILE_LABEL_TXT));</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930495"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930497"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930499"></A>   * Create file description.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930501"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930503"></A>   file_desc_id = ANcreatef(an_id, AN_FILE_DESC);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930505"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930507"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930509"></A>   * Write the annotation to the file description.  </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930511"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930513"></A>   status_32 = ANwriteann(file_desc_id, FILE_DESC_TXT, </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930515"></A>                          strlen (FILE_DESC_TXT));</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930517"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930519"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930521"></A>   * Create a vgroup in the V interface.  Note that the vgroup’s ref number </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930523"></A>   * is set to -1 for creating and the access mode is &quot;w&quot; for writing.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930525"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930527"></A>   status_n = Vstart(file_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930529"></A>   vgroup_id = Vattach(file_id, -1, &quot;w&quot;);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930531"></A>   status_32 = Vsetname (vgroup_id, VG_NAME);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930533"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930535"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930537"></A>   * Obtain the tag and ref number of the vgroup for subsequent</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930539"></A>   * references.  </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930541"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930543"></A>   vgroup_tag = (uint16) VQuerytag (vgroup_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930545"></A>   vgroup_ref = (uint16) VQueryref (vgroup_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930547"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930549"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930551"></A>   * Create the data label for the vgroup identified by its tag </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930553"></A>   * and ref number.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930555"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930557"></A>   data_label_id = ANcreate(an_id, vgroup_tag, vgroup_ref, AN_DATA_LABEL);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930559"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930561"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930563"></A>   * Write the annotation text to the data label.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930565"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930567"></A>   status_32 = ANwriteann(data_label_id, DATA_LABEL_TXT, </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930569"></A>                          strlen(DATA_LABEL_TXT));</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930571"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930573"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930575"></A>   * Create the data description for the vgroup identified by its tag </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930577"></A>   * and ref number.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930579"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930581"></A>   data_desc_id = ANcreate(an_id, vgroup_tag, vgroup_ref, AN_DATA_DESC);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930583"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930585"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930587"></A>   * Write the annotation text to the data description.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930589"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930591"></A>   status_32 = ANwriteann(data_desc_id, DATA_DESC_TXT, strlen(DATA_DESC_TXT));</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930593"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930595"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930597"></A>   * Teminate access to the vgroup and to the V interface.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930599"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930601"></A>   status_32 = Vdetach(vgroup_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930603"></A>   status_n = Vend(file_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930605"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930607"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930609"></A>   * Terminate access to each annotation explicitly.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930611"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930613"></A>   status_n = ANendaccess(file_label_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930615"></A>   status_n = ANendaccess(file_desc_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930617"></A>   status_n = ANendaccess(data_label_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930619"></A>   status_n = ANendaccess(data_desc_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930621"></A>&nbsp;</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930623"></A>   /*</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930625"></A>   * Terminate access to the AN interface and close the HDF file.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930627"></A>   */</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930629"></A>   status_32 = ANend(an_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930631"></A>   status_n = Hclose(file_id);</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-930633"></A>}</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593888_pgfId-930637"></A><A NAME="50593888_33922"></A>create_annotation.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928861"></A>      program create_annotation</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928866"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928867"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928868"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928869"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928870"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928871"></A>      character*9  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928872"></A>      character*19 FILE_LABEL_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928873"></A>      character*53 FILE_DESC_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928874"></A>      character*16 DATA_LABEL_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928875"></A>      character*54 DATA_DESC_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928876"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928877"></A>      parameter (FILE_NAME      = ’General_HDFobjects.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928878"></A>     +           VG_NAME        = ’AN Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928879"></A>     +           FILE_LABEL_TXT = ’General HDF objects’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928880"></A>     +           DATA_LABEL_TXT = ’Common AN Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928881"></A>     +           FILE_DESC_TXT  = </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928882"></A>     + ’This is an HDF file that contains general HDF objects’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928883"></A>     +           DATA_DESC_TXT  = </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928884"></A>     + ’This is a vgroup that is used to test data annotations’)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928885"></A>      integer DFACC_CREATE</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928886"></A>      parameter (DFACC_CREATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928887"></A>      integer AN_FILE_LABEL, AN_FILE_DESC, AN_DATA_LABEL, AN_DATA_DESC</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928888"></A>      parameter (AN_FILE_LABEL = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928889"></A>     +           AN_FILE_DESC  = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928890"></A>     +           AN_DATA_LABEL = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928891"></A>     +           AN_DATA_DESC  = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928892"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928893"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928894"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928895"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928896"></A>      integer afstart, affcreate, afwriteann, afcreate,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928897"></A>     +        afendaccess, afend</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928898"></A>      integer vfstart, vfatch, vfsnam, vqref, vqtag, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928899"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928900"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928901"></A>C**** Variable declaration ******************************************* </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928902"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928903"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928904"></A>      integer file_id, an_id</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928905"></A>      integer file_label_id, file_desc_id</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928906"></A>      integer data_label_id, data_desc_id</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928907"></A>      integer vgroup_id, vgroup_tag, vgroup_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928908"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928909"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928910"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928911"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928912"></A>C     Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928913"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928914"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928915"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928916"></A>C     Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928917"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928918"></A>      an_id = afstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928919"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928920"></A>C     Create the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928921"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928922"></A>      file_label_id = affcreate(an_id, AN_FILE_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928923"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928924"></A>C     Write the annotation to the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928925"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928926"></A>      status = afwriteann(file_label_id, FILE_LABEL_TXT,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928927"></A>     +                    len(FILE_LABEL_TXT))       </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928928"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928929"></A>C     Create file description.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928930"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928931"></A>      file_desc_id = affcreate(an_id, AN_FILE_DESC)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928932"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928933"></A>C     Write the annotation to the file description.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928934"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928935"></A>      status = afwriteann(file_desc_id, FILE_DESC_TXT,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928936"></A>     +                    len(FILE_DESC_TXT))</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928937"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928938"></A>C     Create a vgroup in the file. Note that the vgroup’s ref number is</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928939"></A>C     set to -1 for creating and the access mode is ’w’ for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928940"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928941"></A>      status    = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928942"></A>      vgroup_id = vfatch(file_id, -1, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928943"></A>      status    = vfsnam(vgroup_id, VG_NAME)      </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928944"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928945"></A>C     Obtain the tag and reference number of the vgroup for subsequent</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928946"></A>C     references.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928947"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928948"></A>      vgroup_ref = vqref(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928949"></A>      vgroup_tag = vqtag(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928950"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928951"></A>C     Create the data label for the vgroup identified by its tag and ref </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928952"></A>C     number.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928953"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928954"></A>      data_label_id = afcreate(an_id, vgroup_tag, vgroup_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928955"></A>     +                          AN_DATA_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928956"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928957"></A>C     Write the annotation text to the data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928958"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928959"></A>      status = afwriteann(data_label_id, DATA_LABEL_TXT, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928960"></A>     +                    len(DATA_LABEL_TXT))</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928961"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928962"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928963"></A>C     Create the data description for the vgroup identified by its tag and ref.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928964"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928965"></A>      data_desc_id = afcreate(an_id, vgroup_tag, vgroup_ref, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928966"></A>     +                        AN_DATA_DESC)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928967"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928968"></A>C     Write the annotation text to the data description.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928969"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928970"></A>      status = afwriteann(data_desc_id, DATA_DESC_TXT,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928971"></A>     +                    len(DATA_DESC_TXT))       </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928972"></A>C      </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928973"></A>C     Terminate access to the vgroup and to the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928974"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928975"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928976"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928977"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928978"></A>C     Terminate access to each annotation explicitly.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928979"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928980"></A>      status = afendaccess(file_label_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928981"></A>      status = afendaccess(file_desc_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928982"></A>      status = afendaccess(data_label_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928983"></A>      status = afendaccess(data_desc_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928984"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928985"></A>C     Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928986"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928987"></A>      status = afend(an_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928988"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928989"></A>      end </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-928990"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593888_pgfId-929010"></A><A NAME="50593888_31051"></A>read_annotation.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929014"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929019"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929020"></A>#define  FILE_NAME   &quot;General_HDFobjects.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929021"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929022"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929023"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929024"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929025"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929026"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929027"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929028"></A>         file_id,       /* HDF file identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929029"></A>         an_id,         /* AN interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929030"></A>         ann_id,        /* an annotation identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929031"></A>         index,         /* position of an annotation in all of the same type*/</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929032"></A>         ann_length,    /* length of the text in an annotation */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929033"></A>         n_file_labels, n_file_descs, n_data_labels, n_data_descs;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929034"></A>   char *ann_buf;       /* buffer to hold the read annotation */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929035"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929036"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929037"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929038"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929039"></A>   * Open the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929040"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929041"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929042"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929043"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929044"></A>   * Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929045"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929046"></A>   an_id = ANstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929047"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929048"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929049"></A>   * Get the annotation information, e.g., the numbers of file labels, file</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929050"></A>   * descriptions, data labels, and data descriptions.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929051"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929052"></A>   status_n = ANfileinfo (an_id, &amp;n_file_labels, &amp;n_file_descs,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929053"></A>                        &amp;n_data_labels, &amp;n_data_descs);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929054"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929055"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929056"></A>   * Get the data labels.  Note that this for loop can be used to</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929057"></A>   * obtain the contents of each kind of annotation with the appropriate</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929058"></A>   * number of annotations and the type of annotation, i.e., replace</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929059"></A>   * n_data_labels with n_file_labels, n_file_descs, or n_data_descs, and</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929060"></A>   * AN_DATA_LABEL with AN_FILE_LABEL, AN_FILE_DESC, or AN_DATA_DESC,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929061"></A>   * respectively.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929062"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929063"></A>   for (index = 0; index &lt; n_data_labels; index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929064"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929065"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929066"></A>      * Get the identifier of the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929067"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929068"></A>      ann_id = ANselect (an_id, index, AN_DATA_LABEL);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929069"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929070"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929071"></A>      * Get the length of the data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929072"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929073"></A>      ann_length = ANannlen (ann_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929074"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929075"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929076"></A>      * Allocate space for the buffer to hold the data label text.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929077"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929078"></A>      ann_buf = malloc ((ann_length+1) * sizeof (char));</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929079"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929080"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929081"></A>      * Read and display the data label.  Note that the size of the buffer,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929082"></A>      * i.e., the third parameter, is 1 character more than the length of</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929083"></A>      * the data label; that is for the null character.  It is not the case</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929084"></A>      * when a description is retrieved because the description does not </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929085"></A>      * necessarily end with a null character.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929086"></A>      * </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929087"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929088"></A>      status_32 = ANreadann (ann_id, ann_buf, ann_length+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929089"></A>      printf (&quot;Data label index: %d\n&quot;, index);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929090"></A>      printf (&quot;Data label contents: %s\n&quot;, ann_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929091"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929092"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929093"></A>      * Terminate access to the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929094"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929095"></A>      status_n = ANendaccess (ann_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929096"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929097"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929098"></A>      * Free the space allocated for the annotation buffer.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929099"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929100"></A>      free (ann_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929101"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929102"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929103"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929104"></A>   * Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929105"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929106"></A>   status_32 = ANend (an_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929107"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929108"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929109"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593888_pgfId-929118"></A><A NAME="50593888_16074"></A>read_annotation.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929119"></A>      program  read_annotation</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929124"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929125"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929126"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929127"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929128"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929129"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929130"></A>      parameter (FILE_NAME = ’General_HDFobjects.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929131"></A>      integer    DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929132"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929133"></A>      integer    AN_DATA_LABEL</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929134"></A>      parameter (AN_DATA_LABEL = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929135"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929136"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929137"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929138"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929139"></A>      integer afstart, affileinfo, afselect, afannlen, afreadann,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929140"></A>     +        afendaccess, afend</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929141"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929142"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929143"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929144"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929145"></A>      integer file_id, an_id, ann_id</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929146"></A>      integer index, ann_length </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929147"></A>      integer n_file_labels, n_file_descs, n_data_labels, n_data_descs </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929148"></A>      character*256 ann_buf </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929149"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929150"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929151"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929152"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929153"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929154"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929155"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929156"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929157"></A>C     Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929158"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929159"></A>      an_id = afstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929160"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929161"></A>C     Get the annotation information, i.e., the number of file labels,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929162"></A>C     file descriptions, data labels, and data descriptions.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929163"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929164"></A>      status = affileinfo(an_id, n_file_labels, n_file_descs,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929165"></A>     +                    n_data_labels, n_data_descs)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929166"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929167"></A>C     Get the data labels. Note that this DO loop can be used to obtain </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929168"></A>C     the contents of each kind of annotation with the appropriate number</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929169"></A>C     of annotations and the type of annotation, i.e., replace</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929170"></A>C     n_data_labels with n_file_labels, n_files_descs, or n_data_descs, and</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929171"></A>C     AN_DATA_LABEL with AN_FILE_LABEL, AN_FILE_DESC, or AN_DATA_DESC, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929172"></A>C     respectively.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929173"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929174"></A>      do 10 index = 0, n_data_labels-1</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929175"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929176"></A>C     Get the identifier of the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929177"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929178"></A>      ann_id = afselect(an_id, index, AN_DATA_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929179"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929180"></A>C     Get the length of the data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929181"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929182"></A>      ann_length = afannlen(ann_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929183"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929184"></A>C     Read and display the data label. The data label is read into buffer</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929185"></A>C     ann_buf. One has to make sure that ann_buf has sufficient size to hold</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929186"></A>C     the data label. Also note, that the third argument to afreadann is </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929187"></A>C     1 greater that the actual length of the data label (see comment to</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929188"></A>C     C example).</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929189"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929190"></A>      status = afreadann(ann_id, ann_buf, ann_length+1) </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929191"></A>      write(*,*) ’Data label index: ’, index</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929192"></A>      write(*,*) ’Data label contents: ’, ann_buf(1:ann_length) </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929193"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929194"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929195"></A>C     Terminate access to the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929196"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929197"></A>      status = afendaccess(ann_id)  </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929198"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929199"></A>C     Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929200"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929201"></A>      status = afend(an_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929202"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929203"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929204"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929361"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593888_pgfId-929634"></A><A NAME="50593888_32393"></A>get_annotation_info.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929364"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929365"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929366"></A>#define  FILE_NAME   &quot;General_HDFobjects.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929367"></A>#define  VG_NAME     &quot;AN Vgroup&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929368"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929369"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929370"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929371"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929372"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929373"></A>   intn   status_n;      /* returned status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929374"></A>   int32  status_32,     /* returned status for functions returning an int32*/</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929375"></A>          file_id, an_id, ann_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929376"></A>          n_annots,      /* number of annotations */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929377"></A>         *ann_list,      /* list of annotation identifiers */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929378"></A>          vgroup_ref,    /* reference number of the vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929379"></A>          index;         /* index of an annotation in the annotation list */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929380"></A>          ann_type annot_type = AN_DATA_DESC;   /* annotation to be obtained*/</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929381"></A>   uint16 ann_tag, ann_ref,              /* tag/ref number of an annotation */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929382"></A>          vgroup_tag = DFTAG_VG;         /* tag of the vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929383"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929384"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929385"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929386"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929387"></A>   * Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929388"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929389"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929390"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929391"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929392"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929393"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929394"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929395"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929396"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929397"></A>   * Get the vgroup named VG_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929398"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929399"></A>   vgroup_ref = Vfind  (file_id, VG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929400"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929401"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929402"></A>   * Initialize the AN interface and obtain an interface id.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929403"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929404"></A>   an_id = ANstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929405"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929406"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929407"></A>   * Get the number of object descriptions.  Note that, since ANnumann takes</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929408"></A>   * the tag and reference number as being of type unit16, vgroup_ref must be</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929409"></A>   * safely cast to uint16 by checking for FAIL value first.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929410"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929411"></A>   if (vgroup_ref != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929412"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929413"></A>      n_annots = ANnumann (an_id, annot_type, vgroup_tag, (uint16)vgroup_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929414"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929415"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929416"></A>      * Allocate space to hold the annotation identifiers.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929417"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929418"></A>      ann_list = malloc (n_annots * sizeof (int32));</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929419"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929420"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929421"></A>      * Get the list of identifiers of the annotations attached to the </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929422"></A>      * vgroup and of type annot_type.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929423"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929424"></A>      n_annots = ANannlist (an_id, annot_type, vgroup_tag, (uint16)vgroup_ref, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929425"></A>                            ann_list);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929426"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929427"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929428"></A>      * Get each annotation identifier from the list then display the </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929429"></A>      * tag/ref number pair of the corresponding annotation.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929430"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929431"></A>      printf (&quot;List of annotations of type AN_DATA_DESC:\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929432"></A>      for (index = 0; index &lt; n_annots; index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929433"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929434"></A>        /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929435"></A>         * Get and display the ref number of the annotation from </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929436"></A>         * its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929437"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929438"></A>         status_32 = ANid2tagref (ann_list[index], &amp;ann_tag, &amp;ann_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929439"></A>         printf (&quot;Annotation index %d: tag = %s\nreference number= %d\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929440"></A>           index, ann_tag == DFTAG_DIA ? &quot;DFTAG_DIA (data description)&quot;:</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929441"></A>           &quot;Incorrect&quot;, ann_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929442"></A>      } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929443"></A>   } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929444"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929445"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929446"></A>   * Get and display an annotation type from an annotation tag.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929447"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929448"></A>   annot_type = ANtag2atype (DFTAG_FID);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929449"></A>   printf (&quot;\nAnnotation type of DFTAG_FID (file label) is %s\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929450"></A>              annot_type == AN_FILE_LABEL ? &quot;AN_FILE_LABEL&quot;:&quot;Incorrect&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929451"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929452"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929453"></A>   * Get and display an annotation tag from an annotation type.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929454"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929455"></A>   ann_tag = ANatype2tag (AN_DATA_LABEL);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929456"></A>   printf (&quot;\nAnnotation tag of AN_DATA_LABEL is %s\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929457"></A>              ann_tag == DFTAG_DIL ? &quot;DFTAG_DIL (data label)&quot;:&quot;Incorrect&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929458"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929459"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929460"></A>   * Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929461"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929462"></A>   status_32 = ANend (an_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929463"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929464"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929465"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929466"></A>   * Free the space allocated for the annotation identifier list.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929467"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929468"></A>   free (ann_list);</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929469"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929475"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593888_pgfId-929635"></A><A NAME="50593888_33005"></A>get_annotation_info.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929478"></A>      program annotation_info</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929483"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929484"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929485"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929486"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929487"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929488"></A>      character*9  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929489"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929490"></A>      parameter (FILE_NAME      = ’General_HDFobjects.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929491"></A>     +           VG_NAME        = ’AN Vgroup’)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929492"></A>      integer    DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929493"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929494"></A>      integer AN_FILE_LABEL, AN_DATA_LABEL, AN_DATA_DESC</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929495"></A>      parameter (AN_FILE_LABEL = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929496"></A>     +           AN_DATA_LABEL = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929497"></A>     +           AN_DATA_DESC  = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929498"></A>      integer DFTAG_DIA, DFTAG_FID, DFTAG_DIL</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929499"></A>      parameter (DFTAG_DIA = 105,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929500"></A>     +           DFTAG_FID = 100,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929501"></A>     +           DFTAG_DIL = 104)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929502"></A>      integer DFTAG_VG</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929503"></A>      parameter (DFTAG_VG = 1965)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929504"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929505"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929506"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929507"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929508"></A>      integer afstart, afnumann, afannlist, afidtagref, aftagatype,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929509"></A>     +        afatypetag, afend</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929510"></A>      integer vfstart, vfind </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929511"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929512"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929513"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929514"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929515"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929516"></A>      integer file_id, an_id</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929517"></A>      integer n_annots, ann_index, annot_type, ann_tag, ann_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929518"></A>      integer ann_list(10) </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929519"></A>      integer vgroup_tag, vgroup_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929520"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929521"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929522"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929523"></A>      annot_type = AN_DATA_DESC</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929524"></A>      vgroup_tag = DFTAG_VG</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929525"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929526"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929527"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929528"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929529"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929530"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929531"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929532"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929533"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929534"></A>C     Get the group named VG_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929535"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929536"></A>      vgroup_ref = vfind(file_id, VG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929537"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929538"></A>C     Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929539"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929540"></A>      an_id = afstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929541"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929542"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929543"></A>C     Get the number of object descriptions. </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929544"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929545"></A>      if (vgroup_ref .eq. -1) goto 100 </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929546"></A>      n_annots = afnumann(an_id, annot_type, vgroup_tag, vgroup_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929547"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929548"></A>C     Get the list of identifiers of the annotations attached to the</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929549"></A>C     vgroup and of type annot_type. Identifiers are read into ann_list</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929550"></A>C     buffer. One has to make sure that ann_list has the size big enough</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929551"></A>C     to hold the list of identifiers.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929552"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929553"></A>      n_annots = afannlist(an_id, annot_type, vgroup_tag, vgroup_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929554"></A>     +                     ann_list)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929555"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929556"></A>C     Get each annotation identifier from the list then display the</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929557"></A>C     tag/ref number pair of the corresponding annotation.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929558"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929559"></A>      write(*,*) ’List of annotations of type AN_DATA_DESC’</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929560"></A>      do 10 ann_index = 0, n_annots - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929561"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929562"></A>C     Get and display the ref number of the annotation from its</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929563"></A>C     identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929564"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929565"></A>      status = afidtagref(ann_list(ann_index+1), ann_tag, ann_ref) </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929566"></A>      write(*,*) ’Annotation index: ’, ann_index</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929567"></A>      if (ann_tag .eq. DFTAG_DIA) then</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929568"></A>          write(*,*) ’tag = DFTAG_DIA (data description)’</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929569"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929570"></A>          write(*,*) ’ tag = Incorrect’</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929571"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929572"></A>      write(*,*) ’reference number = ’, ann_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929573"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929574"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929575"></A>C     Get and display an annotation type from an annotation tag.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929576"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929577"></A>      annot_type = aftagatype(DFTAG_FID)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929578"></A>      if (annot_type .eq. AN_FILE_LABEL) then</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929579"></A>         write(*,*) ’Annotation type of DFTAG_FID (file label) is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929580"></A>     +               ’AN_FILE_LABEL ’</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929581"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929582"></A>         write(*,*) ’Annotation type of DFTAG_FID (file label) is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929583"></A>     +               ’Incorrect’</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929584"></A>      endif   </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929585"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929586"></A>C     Get and display an annotation tag from an annotation type.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929587"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929588"></A>      ann_tag = afatypetag(AN_DATA_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929589"></A>      if (ann_tag .eq. DFTAG_DIL ) then</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929590"></A>         write(*,*) ’Annotation tag of AN_DATA_LABEL is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929591"></A>     +               ’DFTAG_DIL (data label)’</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929592"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929593"></A>         write(*,*) ’Annotation type of DFTAG_FID (file label) is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929594"></A>     +               ’Incorrect’</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929595"></A>      endif   </P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929596"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929597"></A>C     Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929598"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929599"></A>100   continue</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929600"></A>      status = afend(an_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929601"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929602"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929603"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929472"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593888_pgfId-929348"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-929958"></A><A NAME="50593889_41763"></A>dfsd_ex1.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930078"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930389"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930390"></A>#define LENGTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930391"></A>#define HEIGHT 2</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930392"></A>#define WIDTH 5</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930393"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930394"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930395"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930396"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930397"></A>	/* Create data array - store dimensions in array ’dims’ */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930398"></A>	static float64 scien_data[LENGTH][HEIGHT][WIDTH] = </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930399"></A>  		{ 1., 2., 3., 4., 5.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930400"></A>		6., 7., 8., 9.,10.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930401"></A>		11.,12.,13.,14.,15.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930402"></A>		16.,17.,18.,19.,20.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930403"></A>		21.,22.,23.,24.,25.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930404"></A>		26.,27.,28.,29.,30. };</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930405"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930406"></A>	intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930407"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930408"></A>	int32 dims[3] = {LENGTH, HEIGHT, WIDTH};</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930409"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930410"></A>	/* Set number type to 64-bit float */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930411"></A>	status = DFSDsetNT(DFNT_FLOAT64);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930412"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930413"></A>	/* Write the data to file */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930414"></A>	status = DFSDadddata(&quot;Example1.hdf&quot;, 3, dims, scien_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930415"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930416"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930417"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-930080"></A><A NAME="50593889_10905"></A>dfsd_ex1.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929948"></A>      PROGRAM WRITE SDS      </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930453"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930454"></A>      integer  dsadata, dssnt, dims(3), status</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930455"></A>      real*8   sci_data(5,2,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930456"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930457"></A>C     Create array called ’sci_data’; store dimensions in array ’dims’.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930458"></A>      data     sci_data/ 1., 2., 3., 4., 5.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930459"></A>     $                   6., 7., 8., 9.,10.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930460"></A>     $                   11.,12.,13.,14.,15.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930461"></A>     $                   16.,17.,18.,19.,20.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930462"></A>     $                   21.,22.,23.,24.,25.,</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930463"></A>     $                   26.,27.,28.,29.,30./</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930464"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930465"></A>      data dims /3,2,5/</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930466"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930467"></A>C     Set number type to 64-bit float</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930468"></A>      status = dssnt(6)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930469"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930470"></A>C     Write the data to file</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930471"></A>      status = dsadata(’Example1.hdf’, 3, dims, sci_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930472"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930473"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930474"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-928587"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-930234"></A><A NAME="50593889_32927"></A>dfsd_ex2.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929641"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930486"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930487"></A>#define LENGTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930488"></A>#define HEIGHT 2</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930489"></A>#define WIDTH 5</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930490"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930491"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930492"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930493"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930494"></A>	float64 scien_data[LENGTH][HEIGHT][WIDTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930495"></A>	int32 number_type;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930496"></A>	intn rank, status;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930497"></A>	int32 dims[3];</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930498"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930499"></A>	/* Get the dimensions and number type of the array */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930500"></A>	status = DFSDgetdims(&quot;Example1.hdf&quot;, &amp;rank, dims, 3);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930501"></A>	status = DFSDgetNT(&amp;number_type);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930502"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930503"></A>	/* Read the array if the dimensions are correct */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930504"></A>	if (dims[0] &lt;= LENGTH &amp;&amp; dims[1] &lt;= HEIGHT &amp;&amp; dims[2] &lt;= WIDTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930505"></A>    		status = DFSDgetdata(&quot;Example1.hdf&quot;, rank, dims, scien_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930506"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930507"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930508"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-930439"></A><A NAME="50593889_26034"></A>dfsd_ex2.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-928990"></A>      PROGRAM READ SDS      </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930518"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930519"></A>      integer  dsgdata, dsgdims, dsgnt, dims(3), status</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930520"></A>      integer rank, num_type</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930521"></A>      real*8   sci_data(5, 2, 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930522"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930523"></A>C     Get the dimensions and number type of the array.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930524"></A>      status = dsgdims(’Example1.hdf’, rank, dims, 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930525"></A>      status = dsgnt(num_type)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930526"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930527"></A>C     Read the array if the dimensions are correct.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930528"></A>      if ((dims(1) .eq. 3) .and. (dims(2) .eq. 2) .and. </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930529"></A>     +    (dims(3) .eq. 5)) then </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930530"></A>            status = dsgdata(’Example1.hdf’, rank, dims, sci_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930531"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930532"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930533"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930534"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-929010"></A><A NAME="50593889_39180"></A>dfsd_ex3.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929109"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930545"></A>		</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930546"></A>/*  </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930547"></A> *  Write an array of floating point values representing</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930548"></A> *  pressure in a 3x2x5 array.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930549"></A> */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930550"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930551"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930552"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930553"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930554"></A>	float32 data[3][2][5];</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930555"></A>	int32 dimsizes[3];</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930556"></A>	float32 max, min;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930557"></A>	intn status, rank;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930558"></A>	int i, j, k; </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930559"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930560"></A>	/* Set the rank and dimension sizes. */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930561"></A>	rank = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930562"></A>	dimsizes[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930563"></A>	dimsizes[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930564"></A>	dimsizes[2] = 5;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930565"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930566"></A>	/* Set the dimensions, to define the beginning of a data set. */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930567"></A>	status = DFSDsetdims(rank, dimsizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930568"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930569"></A>	/* Set the maximum string length to 50. */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930570"></A>	status = DFSDsetlengths(50, 50, 50, 50);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930571"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930572"></A>	/* Define the attribute strings and values. */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930573"></A>	status = DFSDsetdatastrs(&quot;Pressure Data&quot;, &quot;Millibars&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930574"></A>						&quot;F5.5&quot;, &quot;None&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930575"></A>	max = 1500.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930576"></A>	min = 0.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930577"></A>	status = DFSDsetrange(&amp;max, &amp;min);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930578"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930579"></A>	/* Set the rank to 3. */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930580"></A>	rank = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930581"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930582"></A>	/* Calculate the data values. */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930583"></A>	for (i = 0; i &lt; 3; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930584"></A>		for (j = 0; j &lt; 2; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930585"></A>			for (k = 0; k &lt; 5; k++)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930586"></A>				data[i][j][k] = i*100.0 + j*10.0 + k;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930587"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930588"></A>	/* Write the data set and its attributes to file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930589"></A>	status = DFSDadddata(&quot;Example3.hdf&quot;, rank, dimsizes, data);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930590"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930591"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930592"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-929118"></A><A NAME="50593889_12714"></A>dfsd_ex3.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929361"></A>      PROGRAM SET ATTRIBS</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930601"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930602"></A>      real*8 data(5, 2, 3), max, min, i, j, k</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930603"></A>      integer*4 dimsizes(3)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930604"></A>      integer status, rank</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930605"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930606"></A>      integer dsslens, dssdast, dssrang, dsadata</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930607"></A>      integer dssdims</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930608"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930609"></A>      character*13 label /&quot;Pressure Data&quot;/</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930610"></A>      character*9 unit /&quot;Millibars&quot;/</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930611"></A>      character*4 format /&quot;F5.5&quot;/</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930612"></A>      character*4 coordsys /&quot;None&quot;/</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930613"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930614"></A>C     Set the dimensions, to define the beginning of a data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930615"></A>      rank = 3</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930616"></A>      dimsizes(1) = 5</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930617"></A>      dimsizes(2) = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930618"></A>      dimsizes(3) = 3</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930619"></A>      status = dssdims(rank, dimsizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930620"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930621"></A>C     Set the maximum string lengths to 50.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930622"></A>      status = dsslens(50, 50, 50, 50)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930623"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930624"></A>C     Define the attribute strings and values.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930625"></A>      status = dssdast(label, unit, format, coordsys)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930626"></A>      max = 1500.0</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930627"></A>      min = 0.0</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930628"></A>      status = dssrang(max, min)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930629"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930630"></A>C     Fill the data array with values.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930631"></A>      do 30 k = 1, 3</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930632"></A>       do 20 j = 1, 2</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930633"></A>        do 10 i = 1, 5</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930634"></A>          data(i, j, k) = i*100.0 + j*10.0 + k</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930635"></A>10      continue</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930636"></A>20     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930637"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930638"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930639"></A>C     Write the data set and its attributes to file.</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930640"></A>      status = dsadata(&quot;Example3.hdf&quot;, rank, dimsizes, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930641"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930642"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930643"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-929634"></A><A NAME="50593889_38577"></A>dfsd_ex4.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929475"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930651"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930652"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930653"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930654"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930655"></A>	intn rank, maxrank, status;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930656"></A>	int32 dimsizes[3];</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930657"></A>	char datalabel[50], dataunit[50], datafmt[50], coordsys[50];</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930658"></A>	float64 data[3][2][5];</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930659"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930660"></A>	maxrank = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930661"></A>	status = DFSDgetdims(&quot;Example3.hdf&quot;, &amp;rank, dimsizes, </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930662"></A>					maxrank);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930663"></A>	status = DFSDgetdatastrs(datalabel, dataunit, datafmt, </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930664"></A>					coordsys);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930665"></A>	status = DFSDgetdata(&quot;Example3.hdf&quot;, rank, dimsizes, data);</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930666"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930667"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930668"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593889_pgfId-929635"></A><A NAME="50593889_11432"></A>dfsd_ex4.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929603"></A>      PROGRAM READ SD INFO</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930678"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930679"></A>      integer dsgdata, dsgdast, dsgdims</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930680"></A>      integer*4 dimsizes(3)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930681"></A>      integer status, rank, maxrank</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930682"></A>      character*50 datalabel, dataunit, datafmt</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930683"></A>      character*10 coordsys</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930684"></A>      real*8 data(5, 2, 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930685"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930686"></A>      maxrank = 3</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930687"></A>      status = dsgdims(’Example3.hdf’, rank, dimsizes, maxrank)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930688"></A>      status = dsgdast(datalabel, dataunit, datafmt, coordsys)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930689"></A>      status = dsgdata(’Example3.hdf’, rank, dimsizes, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930690"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930691"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-930692"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929472"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593889_pgfId-929348"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-473591"></A><A NAME="50593890_25741"></A>an_ex1.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-928643"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930670"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930671"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930672"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930673"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930674"></A>	int32 file_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930675"></A>	intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930676"></A>	static char file_label[] = “This is a file label.”;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930677"></A>	static char file_desc[] = “This is a file description.”;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930678"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930679"></A>	/* Open the HDF file to write the annotations. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930680"></A>	file_id = Hopen(“Example1.hdf”, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930681"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930682"></A>	/* Write the label to the file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930683"></A>	status = DFANaddfid(file_id, file_label);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930684"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930685"></A>	/* Write the description to the file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930686"></A>	status = DFANaddfds(file_id, file_desc, strlen(file_desc));</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930687"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930688"></A>	/* Close the file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930689"></A>	status = Hclose(file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930690"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930691"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930692"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928476"></A><A NAME="50593890_29306"></A>an_ex1.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-928774"></A>      PROGRAM CREATE ANNOTATION</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930700"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930701"></A>      character*50 file_label, file_desc</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930702"></A>      integer daafid, daafds, status, file_id, hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930703"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930704"></A>      integer*4 DFACC_CREATE</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930705"></A>      parameter (DFACC_CREATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930706"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930707"></A>      file_label = “This is a file label.”</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930708"></A>      file_desc = “This is a file description.”</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930709"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930710"></A>C     Open the HDF file to write the annotations.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930711"></A>      file_id = hopen(‘Example1.hdf’, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930712"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930713"></A>C     Write the label to the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930714"></A>      status = daafid(file_id, file_label)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930715"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930716"></A>C     Write the description to the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930717"></A>      status = daafds(file_id, file_desc, 26)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930718"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930719"></A>C     Close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930720"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930721"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930722"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930723"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928479"></A>an_ex2.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-928881"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930734"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930735"></A>#define X_LENGTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930736"></A>#define Y_LENGTH 2</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930737"></A>#define Z_LENGTH 5</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930738"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930739"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930740"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930741"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930742"></A>	/* Create the data array. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930743"></A>	static float32 sds_data[X_LENGTH][Y_LENGTH][Z_LENGTH] =</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930744"></A>	{  1,  2,  3,  4,  5,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930745"></A>	   6,  7,  8,  9, 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930746"></A>	  11, 12, 13, 14, 15,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930747"></A>	  16, 17, 18, 19, 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930748"></A>	  21, 22, 23, 24, 25,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930749"></A>	  26, 27, 28, 29, 30 };</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930750"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930751"></A>	/* </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930752"></A>	* Create the array that will hold the dimensions of </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930753"></A>	* the data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930754"></A>	*/</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930755"></A>	int32 dims[3] = {X_LENGTH, Y_LENGTH, Z_LENGTH};</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930756"></A>	intn refnum, status;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930757"></A>	static char object_desc[] = “This is an object description.”;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930758"></A>	static char object_label[] = “This is an object label.”;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930759"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930760"></A>	/* Write the data to the HDF file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930761"></A>	status = DFSDadddata(“Example1.hdf”, 3, dims, (VOIDP)sds_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930762"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930763"></A>	/* Get the reference number for the newly written data set. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930764"></A>	refnum = DFSDlastref( );</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930765"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930766"></A>	/* Assign the object label to the scientific data set. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930767"></A>	status = DFANputlabel(“Example1.hdf”, DFTAG_NDG, refnum, \</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930768"></A>					object_label); </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930769"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930770"></A>	/* Assign the object description to the scientific data set. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930771"></A>	status = DFANputdesc(“Example1.hdf”, DFTAG_NDG, refnum, \</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930772"></A>					object_desc, strlen(object_desc));</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930773"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930774"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930775"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928481"></A><A NAME="50593890_32648"></A>an_ex2.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-928969"></A>      PROGRAM ANNOTATE OBJECT</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930782"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930783"></A>      integer dsadata, dims(3), status, refnum</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930784"></A>      integer daplab, dapdesc, dslref</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930785"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930786"></A>      integer*4 DFTAG_NDG, X_LENGTH, Y_LENGTH, Z_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930787"></A>      parameter(DFTAG_NDG = 720,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930788"></A>     +          X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930789"></A>     +          Y_LENGTH = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930790"></A>     +          Z_LENGTH = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930791"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930792"></A>C     Create the data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930793"></A>      real*4 sds_data(X_LENGTH, Y_LENGTH, Z_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930794"></A>      data sds_data /                            </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930795"></A>     +          1,  2,  3,  4,  5,  </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930796"></A>     +          6,  7,  8,  9, 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930797"></A>     +         11, 12, 13, 14, 15,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930798"></A>     +         16, 17, 18, 19, 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930799"></A>     +         21, 22, 23, 24, 25,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930800"></A>     +         26, 27, 28, 29, 30  /</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930801"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930802"></A>C     Create the array the will hold the dimensions of the data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930803"></A>      data dims /X_LENGTH, Y_LENGTH, Z_LENGTH/</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930804"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930805"></A>C     Write the data to the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930806"></A>      ref = dsadata(‘Example1.hdf’, 3, dims, sds_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930807"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930808"></A>C     Get the reference number for the newly written data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930809"></A>      refnum = dslref( )</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930810"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930811"></A>C     Assign the object label to the scientific data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930812"></A>      status = daplab(‘Example1.hdf’, DFTAG_NDG, refnum, </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930813"></A>     +             ‘This is an object label.’)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930814"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930815"></A>C     Assign an object description to the scientific data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930816"></A>      status = dapdesc(‘Example1.hdf’, DFTAG_NDG, refnum, </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930817"></A>     +              ‘This is an object description.’, 30)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930818"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930819"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930820"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928487"></A>an_ex3.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-929073"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930829"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930830"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930831"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930832"></A>	int32 file_id, file_label_len;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930833"></A>	char *file_label;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930834"></A>	intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930835"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930836"></A>	/* Open the HDF file containing the annotation. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930837"></A>	file_id = Hopen(“Example1.hdf”, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930838"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930839"></A>	/* Determine the length of the file label. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930840"></A>	file_label_len = DFANgetfidlen(file_id, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930841"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930842"></A>	/* Allocated memory for the file label buffer. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930843"></A>	file_label = HDgetspace(file_label_len);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930844"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930845"></A>	/* Read the file label. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930846"></A>	file_label_len = DFANgetfid(file_id, file_label, file_label_len, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930847"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930848"></A>	/* Close the file */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930849"></A>	status = Hclose(file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930850"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930851"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930852"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928489"></A><A NAME="50593890_37302"></A>an_ex3.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-929192"></A>      PROGRAM GET ANNOTATION</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930861"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930862"></A>      integer status, file_id, label_length</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930863"></A>      integer hopen, hclose, dagfidl, dagfid </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930864"></A>      character file_label(50)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930865"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930866"></A>      integer*4 DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930867"></A>      parameter(DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930868"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930869"></A>C     Open the HDF file containing the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930870"></A>      file_id = hopen(“Example1.hdf”, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930871"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930872"></A>C     Determine the length of the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930873"></A>      label_length = dagfidl(file_id, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930874"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930875"></A>C     Read the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930876"></A>      status = dagfid(file_id, file_label, label_length, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930877"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930878"></A>C     Close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930879"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930880"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930881"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930882"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928491"></A><A NAME="50593890_28941"></A>an_ex4.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-929319"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930892"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930893"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930894"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930895"></A>	intn desc_length = -1, status;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930896"></A>	char desc[50];</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930897"></A>	int32 file_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930898"></A>	uint16 tag = 0, ref = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930899"></A>	uint32 find_offset, find_length;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930900"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930901"></A>	/* Open the file and initialize the searching parameters to 0. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930902"></A>	file_id = Hopen(“Example1.hdf”, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930903"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930904"></A>	/*</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930905"></A>	* Start a sequential forward search for the first reference</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930906"></A>	* number assigned to a scientific data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930907"></A>	*/</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930908"></A>	while (Hfind(file_id, DFTAG_NDG, DFREF_WILDCARD, &amp;tag, &amp;ref, \</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930909"></A>		&amp;find_offset, &amp;find_length, DF_FORWARD) != FAIL) {</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930910"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930911"></A>	/*</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930912"></A>	* After discovering a valid reference number, check for an</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930913"></A>	* object description by returning the length of the description.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930914"></A>	* If the inquiry fails, continue searching for the next valid</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930915"></A>	* reference number assigned to a scientific data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930916"></A>	*/</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930917"></A>	if ((desc_length = DFANgetdesclen(“Example1.hdf”, tag, ref)) \</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930918"></A>		== FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930919"></A>		break;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930920"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930921"></A>	/* </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930922"></A>	* If a description exists and it will fit in the description buffer,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930923"></A>	* print it.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930924"></A>	*/</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930925"></A>	if (desc_length != FAIL &amp;&amp; desc_length &lt;= 50) {</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930926"></A>		status = DFANgetdesc(“Example1.hdf”, tag, ref, desc, desc_length);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930927"></A>		printf(“Description: %s\n”, desc);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930928"></A>	}</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930929"></A>	}</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930930"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930931"></A>	/* Close the file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930932"></A>	status = Hclose(file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930933"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930934"></A>}</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928495"></A><A NAME="50593890_27928"></A>an_ex5.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-929558"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930950"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930951"></A>#define LISTSIZE 20</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930952"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930953"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930954"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930955"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930956"></A>	int i, num_of_labels, start_position = 1, list_length = 10;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930957"></A>	uint16 ref_list[LISTSIZE];</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930958"></A>	char label_list[DFS_MAXLEN*LISTSIZE-1];</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930959"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930960"></A>	/* Get the total number of labels in the “Example1.hdf” file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930961"></A>	num_of_labels = DFANlablist(“Example1.hdf”, DFTAG_NDG, ref_list, \</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930962"></A>			  label_list, list_length, DFS_MAXLEN, 		  \</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930963"></A>			  start_position);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930964"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930965"></A>	/* </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930966"></A>	* Print the reference numbers and label names for each label</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930967"></A>	* in the list.</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930968"></A>	*/</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930969"></A>	for (i = 0; i &lt; num_of_labels; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930970"></A>	  printf(“\n\t%d\tRef number: %d\tLabel: %s”, i+1, ref_list[i], \</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930971"></A>	         label_list - (i * 13));</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930972"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930973"></A>	printf(“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930974"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930975"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930976"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930977"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928497"></A><A NAME="50593890_31192"></A>an_ex5.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-929664"></A>      PROGRAM GET LABEL LIST            </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930989"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930990"></A>      integer dallist</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930991"></A>      integer*4 DFTAG_NDG, LISTSIZE, DFS_MAXLEN</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930992"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930993"></A>      parameter (DFTAG_NDG = 720,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930994"></A>     +          LISTSIZE = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930995"></A>     +          DFS_MAXLEN = 255)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930996"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930997"></A>      character*60 label_list(DFS_MAXLEN*LISTSIZE)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930998"></A>      integer i, num_of_labels, start_position, ref_list(DFS_MAXLEN)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-930999"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931000"></A>      start_position = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931001"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931002"></A>      num_of_labels = dallist(‘Example1.hdf’, DFTAG_NDG, ref_list,</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931003"></A>     +                        label_list, 10, DFS_MAXLEN, </P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931004"></A>     +                        start_position)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931005"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931006"></A>      do 10 i = 1, num_of_labels</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931007"></A>        print *,’    Ref number:  ‘,ref_list(i),</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931008"></A>     +          ‘    Label: ‘,label_list(i)</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931009"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931010"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931011"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593890_pgfId-931012"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593890_pgfId-928518"></A>&nbsp;</H6>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-473591"></A><A NAME="50593891_17461"></A>create_vdatas.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928478"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928529"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928530"></A>#define  FILE1_NAME     “General_Vdatas.hdf” </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928531"></A>#define  FILE2_NAME     “Two_Vdatas.hdf” </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928532"></A>#define  VDATA_NAME     “Vdata 1”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928533"></A>#define  VDATA_CLASS    “Empty Vdatas”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928534"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928535"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928536"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928537"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928538"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928539"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928540"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928541"></A>         file1_id, file2_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928542"></A>         vdata_id, vdata1_id, vdata2_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928543"></A>         vdata_ref = -1;     /* ref number of a vdata, set to -1 to create  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928544"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928545"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928546"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928547"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928548"></A>   * Create the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928549"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928550"></A>   file1_id = Hopen (FILE1_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928551"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928552"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928553"></A>   * Initialize the VS interface associated with the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928554"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928555"></A>   status_n = Vstart (file1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928556"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928557"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928558"></A>   * Create a vdata in the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928559"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928560"></A>   vdata_id = VSattach (file1_id, vdata_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928561"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928562"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928563"></A>   * Assign a name to the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928564"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928565"></A>   status_32 = VSsetname (vdata_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928566"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928567"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928568"></A>   * Other operations on the vdata identified by vdata_id can be carried</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928569"></A>   * out starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928570"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928571"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928572"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928573"></A>   * Create the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928574"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928575"></A>   file2_id = Hopen (FILE2_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928576"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928577"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928578"></A>   * Initialize the VS interface associated with the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928579"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928580"></A>   status_n = Vstart (file2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928581"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928582"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928583"></A>   * Create the first vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928584"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928585"></A>   vdata1_id = VSattach (file2_id, vdata_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928586"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928587"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928588"></A>   * Create the second vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928589"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928590"></A>   vdata2_id = VSattach (file2_id, vdata_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928591"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928592"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928593"></A>   * Assign a class name to these vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928594"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928595"></A>   status_32 = VSsetclass (vdata1_id, VDATA_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928596"></A>   status_32 = VSsetclass (vdata2_id, VDATA_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928597"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928598"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928599"></A>   * Other operations on the vdatas identified by vdata1_id and vdata2_id </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928600"></A>   * can be carried out starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928601"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928602"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928603"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928604"></A>   * Terminate access to the first vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928605"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928606"></A>   status_32 = VSdetach (vdata1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928607"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928608"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928609"></A>   * Terminate access to the second vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928610"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928611"></A>   status_32 = VSdetach (vdata2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928612"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928613"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928614"></A>   * From this point on, any operations on the vdatas identified by vdata1_id </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928615"></A>   and vdata2_id are invalid but not on the vdata identified by vdata_id.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928616"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928617"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928618"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928619"></A>   * Terminate access to the VS interface associated with the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928620"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928621"></A>   status_n = Vend (file2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928622"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928623"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928624"></A>   * Close the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928625"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928626"></A>   status_n = Hclose (file2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928627"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928628"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928629"></A>   * Terminate access to the vdata in the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928630"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928631"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928632"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928633"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928634"></A>   * Terminate access to the VS interface associated with the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928635"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928636"></A>   status_n = Vend (file1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928637"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928638"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928639"></A>   * Close the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928640"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928641"></A>   status_n = Hclose (file1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928642"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928643"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928476"></A><A NAME="50593891_39038"></A>create_vdatas.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928664"></A>      program create_vdatas</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928669"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928670"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928671"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928672"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928673"></A>      character*18 FILE1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928674"></A>      character*14 FILE2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928675"></A>      character*7  VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928676"></A>      character*12 VDATA_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928677"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928678"></A>      parameter (FILE1_NAME  = ‘General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928679"></A>     +           FILE2_NAME  = ‘Two_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928680"></A>     +           VDATA_NAME  = ‘Vdata 1’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928681"></A>     +           VDATA_CLASS = ‘Empty Vdatas’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928682"></A>      integer DFACC_CREATE</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928683"></A>      parameter (DFACC_CREATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928684"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928685"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928686"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928687"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928688"></A>      integer vfstart, vsfatch, vsfsnam, vsfscls, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928689"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928690"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928691"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928692"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928693"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928694"></A>      integer file1_id, file2_id</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928695"></A>      integer vdata_id, vdata1_id, vdata2_id </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928696"></A>      integer vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928697"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928698"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928699"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928700"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928701"></A>C     Create the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928702"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928703"></A>      file1_id = hopen(FILE1_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928704"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928705"></A>C     Initialize the VS interface associated with the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928706"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928707"></A>      status = vfstart(file1_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928708"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928709"></A>C     Create a vdata in the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928710"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928711"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928712"></A>      vdata_id = vsfatch(file1_id, vdata_ref, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928713"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928714"></A>C     Assign a name to the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928715"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928716"></A>      status = vsfsnam(vdata_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928717"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928718"></A>C     Other operations on the vdata identified by vdata_id can be carried out</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928719"></A>C     starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928720"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928721"></A>C     Create the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928722"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928723"></A>      file2_id = hopen(FILE2_NAME, DFACC_CREATE, 0) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928724"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928725"></A>C     Initialize the VS interface associated with the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928726"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928727"></A>      status = vfstart(file2_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928728"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928729"></A>C     Create the first vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928730"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928731"></A>      vdata1_id = vsfatch(file2_id, vdata_ref, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928732"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928733"></A>C     Create the second vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928734"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928735"></A>      vdata2_id = vsfatch(file2_id, vdata_ref, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928736"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928737"></A>C     Assign a class name to these vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928738"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928739"></A>      status = vsfscls(vdata1_id, VDATA_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928740"></A>      status = vsfscls(vdata2_id, VDATA_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928741"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928742"></A>C     Other operations on the vdatas identified by vdata1_id and vdata2_id</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928743"></A>C     can be carried out starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928744"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928745"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928746"></A>C     Terminate access to the first vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928747"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928748"></A>      status = vsfdtch(vdata1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928749"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928750"></A>C     Terminate access to the second vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928751"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928752"></A>      status = vsfdtch(vdata2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928753"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928754"></A>C     Terminate access to the VS interface associated with the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928755"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928756"></A>      status = vfend(file2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928757"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928758"></A>C     Close the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928759"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928760"></A>      status = hclose(file2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928761"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928762"></A>C     Terminate access to the vdata in the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928763"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928764"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928765"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928766"></A>C     terminate access to the VS interface associated with the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928767"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928768"></A>      status = vfend(file1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928769"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928770"></A>C     Close the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928771"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928772"></A>      status = hclose(file1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928773"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928774"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928479"></A><A NAME="50593891_21934"></A>create_onefield_vdata.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928810"></A>#include “hdf.h” </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928815"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928816"></A>#define  FILE_NAME      “General_Vdatas.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928817"></A>#define  CLASS1_NAME    “5x1 Array”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928818"></A>#define  CLASS2_NAME    “6x4 Array”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928819"></A>#define  VDATA1_NAME    “First Vdata”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928820"></A>#define  VDATA2_NAME    “Second Vdata”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928821"></A>#define  FIELD1_NAME    “Single-component Field”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928822"></A>#define  FIELD2_NAME    “Multi-component Field”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928823"></A>#define  N_RECORDS_1    5    /* number of records the first vdata contains  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928824"></A>#define  N_RECORDS_2    6    /* number of records the second vdata contains */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928825"></A>#define  ORDER_2        4    /* order of the field in the second vdata      */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928826"></A>                /* Note that the order of the field in the first vdata is 1 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928827"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928828"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928829"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928830"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928831"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928832"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928833"></A>   int32 status_32;     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928834"></A>   int32 file_id, vdata1_ref, vdata2_ref; </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928835"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928836"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928837"></A>   * Define an array to buffer the data of the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928838"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928839"></A>   char8 vdata1_buf [N_RECORDS_1] = {‘V’, ‘D’, ‘A’, ‘T’, ‘A’};</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928840"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928841"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928842"></A>   * Define an array to buffer the data of the second vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928843"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928844"></A>   int32 vdata2_buf [N_RECORDS_2][ORDER_2] = {{1, 2, 3, 4}, {2, 4, 6, 8},</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928845"></A>                                              {3, 6, 9, 12}, {4, 8, 12, 16},</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928846"></A>                                              {5, 10, 15, 20}, {6, 12, 18, 24}};</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928847"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928848"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928849"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928850"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928851"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928852"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928853"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928854"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928855"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928856"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928857"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928858"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928859"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928860"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928861"></A>   * Create the first vdata and populate it with data from the vdata1_buf </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928862"></A>   * array. Note that the buffer vdata1_buf is cast to (uint8 *) for the </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928863"></A>   * benefit of generic data type.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928864"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928865"></A>   vdata1_ref = VHstoredata (file_id, FIELD1_NAME, (uint8 *)vdata1_buf, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928866"></A>                       N_RECORDS_1, DFNT_CHAR8, VDATA1_NAME, CLASS1_NAME); </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928867"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928868"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928869"></A>   * Create the second vdata and populate it with data from the vdata2_buf </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928870"></A>   * array. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928871"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928872"></A>   vdata2_ref = VHstoredatam (file_id, FIELD2_NAME, (uint8 *)vdata2_buf, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928873"></A>               N_RECORDS_2, DFNT_INT32, VDATA2_NAME, CLASS2_NAME, ORDER_2); </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928874"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928875"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928876"></A>   * Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928877"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928878"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928879"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928880"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928881"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928481"></A><A NAME="50593891_13884"></A>create_onefield_vdata.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928886"></A>      program create_onefield_vdatas</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928891"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928892"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928893"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928894"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928895"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928896"></A>      character*9  CLASS1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928897"></A>      character*9  CLASS2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928898"></A>      character*11 VDATA1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928899"></A>      character*12 VDATA2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928900"></A>      character*22 FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928901"></A>      character*21 FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928902"></A>      integer      N_RECORDS_1, N_RECORDS_2</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928903"></A>      integer      ORDER_2</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928904"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928905"></A>      parameter (FILE_NAME   = ‘General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928906"></A>     +           CLASS1_NAME = ‘5x1 Array’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928907"></A>     +           CLASS2_NAME = ‘6x4 Array’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928908"></A>     +           VDATA1_NAME = ‘First Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928909"></A>     +           VDATA2_NAME = ‘Second Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928910"></A>     +           FIELD1_NAME = ‘Single-component Field’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928911"></A>     +           FIELD2_NAME = ‘Multi-component Field’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928912"></A>      parameter (N_RECORDS_1 = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928913"></A>     +           N_RECORDS_2 = 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928914"></A>     +           ORDER_2     = 4)               </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928915"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928916"></A>      integer DFACC_WRITE, DFNT_CHAR8, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928917"></A>      parameter (DFACC_WRITE = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928918"></A>     +           DFNT_CHAR8  = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928919"></A>     +           DFNT_INT32  = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928920"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928921"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928922"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928923"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928924"></A>      integer vfstart, vhfscd, vhfsdm, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928925"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928926"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928927"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928928"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928929"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928930"></A>      integer   file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928931"></A>      integer   vdata1_ref, vdata2_ref </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928932"></A>      character vdata1_buf(N_RECORDS_1)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928933"></A>      integer   vdata2_buf(ORDER_2, N_RECORDS_2)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928934"></A>      data vdata1_buf /’V’,’D’,’A’,’T’,’A’/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928935"></A>      data vdata2_buf / 1,  2,  3,  4,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928936"></A>     +                  2,  4,  6,  8,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928937"></A>     +                  3,  6,  9, 12,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928938"></A>     +                  4,  8, 12, 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928939"></A>     +                  5, 10, 15, 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928940"></A>     +                  6, 12, 18, 24/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928941"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928942"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928943"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928944"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928945"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928946"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928947"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928948"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928949"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928950"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928951"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928952"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928953"></A>C     Create the first vdata and populate it with data from vdata1_buf array.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928954"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928955"></A>      vdata1_ref = vhfscd(file_id, FIELD1_NAME, vdata1_buf, N_RECORDS_1,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928956"></A>     +                    DFNT_CHAR8, VDATA1_NAME, CLASS1_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928957"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928958"></A>C     Create the second vdata and populate it with data from vdata2_buf array.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928959"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928960"></A>      vdata2_ref = vhfsdm(file_id, FIELD2_NAME, vdata2_buf, N_RECORDS_2,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928961"></A>     +                    DFNT_INT32, VDATA2_NAME, CLASS2_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928962"></A>     +                    ORDER_2)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928963"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928964"></A>C     Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928965"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928966"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928967"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928968"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928969"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928487"></A><A NAME="50593891_23634"></A>write_to_vdata.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928974"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928979"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928980"></A>#define  FILE_NAME        “General_Vdatas.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928981"></A>#define  N_RECORDS        10        /* number of records the vdata contains */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928982"></A>#define  ORDER_1          3         /* order of first field */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928983"></A>#define  ORDER_2          1         /* order of second field */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928984"></A>#define  ORDER_3          2         /* order of third field */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928985"></A>#define  CLASS_NAME       “Particle Data”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928986"></A>#define  VDATA_NAME       “Solid Particle”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928987"></A>#define  FIELD1_NAME      “Position”      /* contains x, y, z values */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928988"></A>#define  FIELD2_NAME      “Mass”          /* contains weight values */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928989"></A>#define  FIELD3_NAME      “Temperature”   /* contains min and max values */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928990"></A>#define  FIELDNAME_LIST   “Position,Mass,Temperature” /* No spaces b/w names */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928991"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928992"></A>/* number of values per record */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928993"></A>#define  N_VALS_PER_REC   (ORDER_1 + ORDER_2 + ORDER_3)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928994"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928995"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928996"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928997"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928998"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-928999"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929000"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929001"></A>          file_id, vdata_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929002"></A>          vdata_ref = -1,    /* ref number of a vdata, set to -1 to create  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929003"></A>          num_of_records;    /* number of records actually written to vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929004"></A>   int16  rec_num;           /* current record number */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929005"></A>   float32  data_buf[N_RECORDS][N_VALS_PER_REC]; /* buffer for vdata values */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929006"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929007"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929008"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929009"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929010"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929011"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929012"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929013"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929014"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929015"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929016"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929017"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929018"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929019"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929020"></A>   * Create a new vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929021"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929022"></A>   vdata_id = VSattach (file_id, vdata_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929023"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929024"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929025"></A>   * Set name and class name of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929026"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929027"></A>   status_32 = VSsetname (vdata_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929028"></A>   status_32 = VSsetclass (vdata_id, CLASS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929029"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929030"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929031"></A>   * Introduce each field’s name, data type, and order.  This is the first</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929032"></A>   * part in defining a field.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929033"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929034"></A>   status_n = VSfdefine (vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER_1 );</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929035"></A>   status_n = VSfdefine (vdata_id, FIELD2_NAME, DFNT_FLOAT32, ORDER_2 );</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929036"></A>   status_n = VSfdefine (vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER_3 );</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929037"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929038"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929039"></A>   * Finalize the definition of the fields.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929040"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929041"></A>   status_n = VSsetfields (vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929042"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929043"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929044"></A>   * Buffer the data by the record for fully interlaced mode.  Note that the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929045"></A>   * first three elements contain the three values of the first field, the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929046"></A>   * fourth element contains the value of the second field, and the last two</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929047"></A>   * elements contain the two values of the third field.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929048"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929049"></A>   for (rec_num = 0; rec_num &lt; N_RECORDS; rec_num++)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929050"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929051"></A>      data_buf[rec_num][0] = 1.0 * rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929052"></A>      data_buf[rec_num][1] = 2.0 * rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929053"></A>      data_buf[rec_num][2] = 3.0 * rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929054"></A>      data_buf[rec_num][3] = 0.1 + rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929055"></A>      data_buf[rec_num][4] = 0.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929056"></A>      data_buf[rec_num][5] = 65.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929057"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929058"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929059"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929060"></A>   * Write the data from data_buf to the vdata with full interlacing mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929061"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929062"></A>   num_of_records = VSwrite (vdata_id, (uint8 *)data_buf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929063"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929064"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929065"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929066"></A>   * Terminate access to the vdata and to the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929067"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929068"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929069"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929070"></A>   status_n  = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929071"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929072"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929073"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928489"></A><A NAME="50593891_23145"></A>write_to_vdata.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929082"></A>      program write_to_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929087"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929088"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929089"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929090"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929091"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929092"></A>      character*13 CLASS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929093"></A>      character*14 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929094"></A>      character*8  FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929095"></A>      character*4  FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929096"></A>      character*11 FIELD3_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929097"></A>      character*27 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929098"></A>      integer      N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929099"></A>      integer      ORDER_1, ORDER_2, ORDER_3</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929100"></A>      integer      N_VALS_PER_REC</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929101"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929102"></A>      parameter (FILE_NAME       = ‘General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929103"></A>     +           CLASS_NAME      = ‘Particle Data’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929104"></A>     +           VDATA_NAME      = ‘Solid Particle’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929105"></A>     +           FIELD1_NAME     = ‘Position’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929106"></A>     +           FIELD2_NAME     = ‘Mass’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929107"></A>     +           FIELD3_NAME     = ‘Temperature’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929108"></A>     +           FIELDNAME_LIST = ‘Position,Mass,Temperature’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929109"></A>      parameter (N_RECORDS = 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929110"></A>     +           ORDER_1   = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929111"></A>     +           ORDER_2   = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929112"></A>     +           ORDER_3   = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929113"></A>     +           N_VALS_PER_REC = ORDER_1 + ORDER_2 + ORDER_3)               </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929114"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929115"></A>      integer DFACC_WRITE, DFNT_FLOAT32, FULL_INTERLACE</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929116"></A>      parameter (DFACC_WRITE    = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929117"></A>     +           DFNT_FLOAT32   = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929118"></A>     +           FULL_INTERLACE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929119"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929120"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929121"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929122"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929123"></A>      integer vfstart, vsfatch, vsfsnam, vsfscls, vsffdef, vsfsfld,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929124"></A>     +        vsfwrt, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929125"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929126"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929127"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929128"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929129"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929130"></A>      integer file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929131"></A>      integer vdata_ref, rec_num, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929132"></A>      real    data_buf(N_VALS_PER_REC, N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929133"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929134"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929135"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929136"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929137"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929138"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929139"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929140"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929141"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929142"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929143"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929144"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929145"></A>C     Create a new vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929146"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929147"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929148"></A>      vdata_id = vsfatch(file_id, vdata_ref, ‘w’) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929149"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929150"></A>C     Set name and class name of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929151"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929152"></A>      status = vsfsnam(vdata_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929153"></A>      status = vsfscls(vdata_id, CLASS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929154"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929155"></A>C     Introduce each field’s name, data type, and order. This is the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929156"></A>C     first part in defining a field.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929157"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929158"></A>      status = vsffdef(vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER_1)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929159"></A>      status = vsffdef(vdata_id, FIELD2_NAME, DFNT_FLOAT32, ORDER_2)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929160"></A>      status = vsffdef(vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER_3)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929161"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929162"></A>C     Finalize the definition of the fields.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929163"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929164"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929165"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929166"></A>C     Buffer the data by the record for fully interlaced mode. Note that the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929167"></A>C     first three elements contain the three values of the first field,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929168"></A>C     the forth element contains the value of the second field, and the last two</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929169"></A>C     elements contain the two values of the third field.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929170"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929171"></A>      do 10 rec_num = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929172"></A>         data_buf(1, rec_num) = 1.0 * rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929173"></A>         data_buf(2, rec_num) = 2.0 * rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929174"></A>         data_buf(3, rec_num) = 3.0 * rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929175"></A>         data_buf(4, rec_num) = 0.1 + rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929176"></A>         data_buf(5, rec_num) = 0.0</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929177"></A>         data_buf(6, rec_num) = 65.0</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929178"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929179"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929180"></A>C     Write the data from data_buf to the vdata with the full interlacing mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929181"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929182"></A>      num_of_records = vsfwrt(vdata_id, data_buf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929183"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929184"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929185"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929186"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929187"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929188"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929189"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929190"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929191"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929192"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928491"></A><A NAME="50593891_18462"></A>write_mixed_vdata.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929201"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929206"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929207"></A>#define  FILE_NAME        “Packed_Vdata.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929208"></A>#define  VDATA_NAME       “Mixed Data Vdata”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929209"></A>#define  CLASS_NAME       “General Data Class”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929210"></A>#define  FIELD1_NAME      “Temp” </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929211"></A>#define  FIELD2_NAME      “Height” </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929212"></A>#define  FIELD3_NAME      “Speed” </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929213"></A>#define  FIELD4_NAME      “Ident”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929214"></A>#define  ORDER            1        /* number of values in the field         */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929215"></A>#define  N_RECORDS        20       /* number of records the vdata contains  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929216"></A>#define  N_FIELDS         4        /* number of fields in the vdata         */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929217"></A>#define  FIELDNAME_LIST   “Temp,Height,Speed,Ident”  /* No spaces b/w names */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929218"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929219"></A>/* number of bytes of the data to be written, i.e., the size of all the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929220"></A>   field values combined times the number of records */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929221"></A>#define BUF_SIZE (2*sizeof(float32) + sizeof(int16) + sizeof(char)) * N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929222"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929223"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929224"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929225"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929226"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929227"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929228"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929229"></A>         file_id, vdata_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929230"></A>         vdata_ref = -1,   /* vdata’s reference number, set to -1 to create */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929231"></A>         num_of_records; /* number of records actually written to the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929232"></A>   float32 temp[N_RECORDS];       /* buffer to hold values of first field   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929233"></A>   int16   height[N_RECORDS];     /* buffer to hold values of second field  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929234"></A>   float32 speed[N_RECORDS];      /* buffer to hold values of third field   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929235"></A>   char8   ident[N_RECORDS];      /* buffer to hold values of fourth field  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929236"></A>   VOIDP   fldbufptrs[N_FIELDS];/*pointers to be pointing to the field buffers*/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929237"></A>   uint16  databuf[BUF_SIZE]; /* buffer to hold the data after being packed*/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929238"></A>   int     i;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929239"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929240"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929241"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929242"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929243"></A>   * Create an HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929244"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929245"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929246"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929247"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929248"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929249"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929250"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929251"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929252"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929253"></A>   * Create a new vdata. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929254"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929255"></A>   vdata_id = VSattach (file_id, vdata_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929256"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929257"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929258"></A>   * Set name and class name of the vdata. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929259"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929260"></A>   status_32 = VSsetname (vdata_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929261"></A>   status_32 = VSsetclass (vdata_id, CLASS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929262"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929263"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929264"></A>   * Introduce each field’s name, data type, and order.  This is the first</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929265"></A>   * part in defining a vdata field.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929266"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929267"></A>   status_n = VSfdefine (vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929268"></A>   status_n = VSfdefine (vdata_id, FIELD2_NAME, DFNT_INT16, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929269"></A>   status_n = VSfdefine (vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929270"></A>   status_n = VSfdefine (vdata_id, FIELD4_NAME, DFNT_CHAR8, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929271"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929272"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929273"></A>   * Finalize the definition of the fields of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929274"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929275"></A>   status_n = VSsetfields (vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929276"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929277"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929278"></A>   * Enter data values into the field buffers by the records.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929279"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929280"></A>   for (i = 0; i &lt; N_RECORDS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929281"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929282"></A>      temp[i] = 1.11 * (i+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929283"></A>      height[i] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929284"></A>      speed[i] = 1.11 * (i+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929285"></A>      ident[i] = ‘A’ + i;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929286"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929287"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929288"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929289"></A>   * Build an array of pointers each of which points to a field buffer that</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929290"></A>   * holds all values of the field.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929291"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929292"></A>   fldbufptrs[0] = &amp;temp[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929293"></A>   fldbufptrs[1] = &amp;height[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929294"></A>   fldbufptrs[2] = &amp;speed[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929295"></A>   fldbufptrs[3] = &amp;ident[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929296"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929297"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929298"></A>   * Pack all data in the field buffers that are pointed to by the set of</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929299"></A>   * pointers fldbufptrs, and store the packed data into the buffer </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929300"></A>   * databuf.  Note that the second parameter is _HDF_VSPACK for packing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929301"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929302"></A>   status_n = VSfpack (vdata_id,_HDF_VSPACK, NULL, (VOIDP)databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929303"></A>           BUF_SIZE, N_RECORDS, NULL, (VOIDP)fldbufptrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929304"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929305"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929306"></A>   * Write all records of the packed data to the vdata. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929307"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929308"></A>   num_of_records = VSwrite (vdata_id, (uint8 *)databuf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929309"></A>                             FULL_INTERLACE); </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929310"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929311"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929312"></A>   * Terminate access to the vdata and the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929313"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929314"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929315"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929316"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929317"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929318"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929319"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928493"></A><A NAME="50593891_36298"></A>write_mixed_vdata.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929328"></A>      program write_mixed_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929333"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929334"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929335"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929336"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929337"></A>      character*16 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929338"></A>      character*18 CLASS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929339"></A>      character*16 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929340"></A>      character*4  FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929341"></A>      character*6  FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929342"></A>      character*5  FIELD3_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929343"></A>      character*5  FIELD4_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929344"></A>      character*23 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929345"></A>      integer      N_RECORDS, N_FIELDS, ORDER</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929346"></A>      integer      BUF_SIZE </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929347"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929348"></A>      parameter (FILE_NAME       = ‘Packed_Vdata.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929349"></A>     +           CLASS_NAME      = ‘General Data Class’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929350"></A>     +           VDATA_NAME      = ‘Mixed Data Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929351"></A>     +           FIELD1_NAME     = ‘Temp’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929352"></A>     +           FIELD2_NAME     = ‘Height’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929353"></A>     +           FIELD3_NAME     = ‘Speed’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929354"></A>     +           FIELD4_NAME     = ‘Ident’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929355"></A>     +           FIELDNAME_LIST = ‘Temp,Height,Speed,Ident’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929356"></A>      parameter (N_RECORDS = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929357"></A>     +           N_FIELDS  = 4, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929358"></A>     +           ORDER     = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929359"></A>     +           BUF_SIZE = (4 + 2 + 4 + 1)*N_RECORDS)               </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929360"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929361"></A>      integer DFACC_WRITE, DFNT_FLOAT32, DFNT_INT16, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929362"></A>     +        FULL_INTERLACE, HDF_VSPACK  </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929363"></A>      parameter (DFACC_WRITE    = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929364"></A>     +           DFNT_FLOAT32   = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929365"></A>     +           DFNT_INT16     = 22,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929366"></A>     +           DFNT_CHAR8     = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929367"></A>     +           FULL_INTERLACE = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929368"></A>     +           HDF_VSPACK     = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929369"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929370"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929371"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929372"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929373"></A>      integer vfstart, vsfatch, vsfsnam, vsfscls, vsffdef, vsfsfld,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929374"></A>     +        vsfnpak, vsfcpak, vsfwrit, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929375"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929376"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929377"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929378"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929379"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929380"></A>      integer   file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929381"></A>      integer   vdata_ref, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929382"></A>      real      temp(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929383"></A>      integer*2 height(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929384"></A>      real      speed(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929385"></A>      character ident(N_RECORDS) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929386"></A>      integer   i</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929387"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929388"></A>C     Buffer for packed data should be big enough to hold N_RECORDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929389"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929390"></A>      integer   databuf(BUF_SIZE/4 + 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929391"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929392"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929393"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929394"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929395"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929396"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929397"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929398"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929399"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929400"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929401"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929402"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929403"></A>C     Create a new vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929404"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929405"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929406"></A>      vdata_id = vsfatch(file_id, vdata_ref, ‘w’) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929407"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929408"></A>C     Set name and class name of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929409"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929410"></A>      status = vsfsnam(vdata_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929411"></A>      status = vsfscls(vdata_id, CLASS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929412"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929413"></A>C     Introduce each field’s name, data type, and order. This is the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929414"></A>C     first part in defining a field.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929415"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929416"></A>      status = vsffdef(vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929417"></A>      status = vsffdef(vdata_id, FIELD2_NAME, DFNT_INT16, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929418"></A>      status = vsffdef(vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929419"></A>      status = vsffdef(vdata_id, FIELD4_NAME, DFNT_CHAR8, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929420"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929421"></A>C     Finalize the definition of the fields.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929422"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929423"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929424"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929425"></A>C     Enter data values into the field databufs by the records.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929426"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929427"></A>      do 10 i = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929428"></A>         temp(i)   = 1.11 * i</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929429"></A>         height(i) = i - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929430"></A>         speed(i)  = 1.11 * i</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929431"></A>         ident(i)  = char(64+i)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929432"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929433"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929434"></A>C     Pack N_RECORDS of data into databuf. In Fortran, each field is packed </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929435"></A>C     using separate calls to vsfnpak or vsfcpak.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929436"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929437"></A>      status = vsfnpak(vdata_id, HDF_VSPACK, ‘ ‘, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929438"></A>     +                 N_RECORDS, FIELD1_NAME, temp) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929439"></A>      status = vsfnpak(vdata_id, HDF_VSPACK, ‘ ‘, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929440"></A>     +                 N_RECORDS, FIELD2_NAME, height) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929441"></A>      status = vsfnpak(vdata_id, HDF_VSPACK, ‘ ‘, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929442"></A>     +                 N_RECORDS, FIELD3_NAME, speed) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929443"></A>      status = vsfcpak(vdata_id, HDF_VSPACK, ‘ ‘, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929444"></A>     +                 N_RECORDS, FIELD4_NAME, ident) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929445"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929446"></A>C     Write all the records of the packed data to the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929447"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929448"></A>      num_of_records = vsfwrit(vdata_id, databuf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929449"></A>     +                         FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929450"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929451"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929452"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929453"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929454"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929455"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929456"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929457"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929458"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928495"></A><A NAME="50593891_35626"></A>read_from_vdata.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929467"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929472"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929473"></A>#define  FILE_NAME       “General_Vdatas.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929474"></A>#define  VDATA_NAME      “Solid Particle”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929475"></A>#define  N_RECORDS       5    /* number of records the vdata contains */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929476"></A>#define  RECORD_INDEX    3    /* position where reading starts - 4th record */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929477"></A>#define  ORDER_1         3    /* order of first field to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929478"></A>#define  ORDER_2         2    /* order of second field to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929479"></A>#define  FIELDNAME_LIST  “Position,Temperature” /* only two fields are read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929480"></A>#define  N_VALS_PER_REC  (ORDER_1 + ORDER_2)   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929481"></A>                         /* number of values per record */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929482"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929483"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929484"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929485"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929486"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929487"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929488"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929489"></A>         file_id, vdata_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929490"></A>         vdata_ref,     /* vdata’s reference number */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929491"></A>         num_of_records, /* number of records actually written to the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929492"></A>         record_pos;    /* position of the current record */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929493"></A>   int16 i, rec_num;    /* current record number in the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929494"></A>   float32 databuf[N_RECORDS][N_VALS_PER_REC];   /* buffer for vdata values */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929495"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929496"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929497"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929498"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929499"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929500"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929501"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929502"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929503"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929504"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929505"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929506"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929507"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929508"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929509"></A>   * Get the reference number of the vdata, whose name is specified in </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929510"></A>   * VDATA_NAME, using VSfind, which will be discussed in Section 4.7.3.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929511"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929512"></A>   vdata_ref = VSfind (file_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929513"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929514"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929515"></A>   * Attach to the vdata for reading if it is found, otherwise </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929516"></A>   * exit the program.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929517"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929518"></A>   if (vdata_ref == 0) exit;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929519"></A>   vdata_id = VSattach (file_id, vdata_ref, “r”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929520"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929521"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929522"></A>   * Specify the fields that will be read.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929523"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929524"></A>   status_n = VSsetfields (vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929525"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929526"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929527"></A>   * Place the current point to the position specified in RECORD_INDEX.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929528"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929529"></A>   record_pos = VSseek (vdata_id, RECORD_INDEX);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929530"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929531"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929532"></A>   * Read the next N_RECORDS records from the vdata and store the data </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929533"></A>   * in the buffer databuf with fully interlaced mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929534"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929535"></A>   num_of_records = VSread (vdata_id, (uint8 *)databuf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929536"></A>                            FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929537"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929538"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929539"></A>   * Display the read data as many records as the number of records </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929540"></A>   * returned by VSread.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929541"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929542"></A>   printf (“\n       Particle Position        Temperature Range\n\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929543"></A>   for (rec_num = 0; rec_num &lt; num_of_records; rec_num++)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929544"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929545"></A>      printf (“   %6.2f, %6.2f, %6.2f        %6.2f, %6.2f\n”, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929546"></A>        databuf[rec_num][0], databuf[rec_num][1], databuf[rec_num][2], </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929547"></A>        databuf[rec_num][3], databuf[rec_num][4]);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929548"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929549"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929550"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929551"></A>   * Terminate access to the vdata and to the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929552"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929553"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929554"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929555"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929556"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929557"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929558"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928497"></A><A NAME="50593891_27819"></A>read_from_vdata.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929567"></A>      program read_from_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929572"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929573"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929574"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929575"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929576"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929577"></A>      character*14 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929578"></A>      character*20 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929579"></A>      integer      N_RECORDS, RECORD_INDEX</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929580"></A>      integer      ORDER_1, ORDER_2</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929581"></A>      integer      N_VALS_PER_REC</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929582"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929583"></A>      parameter (FILE_NAME       = ‘General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929584"></A>     +           VDATA_NAME      = ‘Solid Particle’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929585"></A>     +           FIELDNAME_LIST = ‘Position,Temperature’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929586"></A>      parameter (N_RECORDS  = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929587"></A>     +           RECORD_INDEX = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929588"></A>     +           ORDER_1    = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929589"></A>     +           ORDER_2    = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929590"></A>     +           N_VALS_PER_REC = ORDER_1 + ORDER_2 )               </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929591"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929592"></A>      integer DFACC_READ, FULL_INTERLACE</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929593"></A>      parameter (DFACC_READ     = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929594"></A>     +           FULL_INTERLACE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929595"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929596"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929597"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929598"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929599"></A>      integer vfstart, vsffnd, vsfatch, vsfsfld, vsfrd, vsfseek,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929600"></A>     +        vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929601"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929602"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929603"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929604"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929605"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929606"></A>      integer file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929607"></A>      integer vdata_ref, rec_num, num_of_records, rec_pos</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929608"></A>      real    databuf(N_VALS_PER_REC, N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929609"></A>      integer i</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929610"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929611"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929612"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929613"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929614"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929615"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929616"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929617"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929618"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929619"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929620"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929621"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929622"></A>C     Get the reference number of the vdata, whose name is specified in</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929623"></A>C     VDATA_NAME, using vsffnd, which will be discussed in Section 4.7.3. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929624"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929625"></A>      vdata_ref = vsffnd(file_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929626"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929627"></A>C     Attach to the vdata for reading if it is found, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929628"></A>C     otherwise exit the program.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929629"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929630"></A>      if (vdata_ref .eq. 0) stop</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929631"></A>      vdata_id = vsfatch(file_id, vdata_ref, ‘r’) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929632"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929633"></A>C     Specify the fields that will be read. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929634"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929635"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929636"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929637"></A>C     Place the current point to the position specified in RECORD_INDEX.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929638"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929639"></A>      rec_pos = vsfseek(vdata_id, RECORD_INDEX) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929640"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929641"></A>C     Read the next N_RECORDS from the vdata and store the data in the buffer </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929642"></A>C     databuf with fully interlace mode. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929643"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929644"></A>      num_of_records = vsfrd(vdata_id, databuf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929645"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929646"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929647"></A>C     Display the read data as many records as the number of records returned</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929648"></A>C     by vsfrd.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929649"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929650"></A>      write(*,*) ‘  Particle Position     Temperature Range’</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929651"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929652"></A>      do 10 rec_num = 1, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929653"></A>         write(*,1000) (databuf(i, rec_num), i = 1, N_VALS_PER_REC)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929654"></A>10    continue </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929655"></A>1000  format(1x,3(f6.2), 8x,2(f6.2))</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929656"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929657"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929658"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929659"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929660"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929661"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929662"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929663"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929664"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928499"></A><A NAME="50593891_29663"></A>read_mixed_vdata.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929673"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929678"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929679"></A>#define  N_RECORDS       20      /* number of records to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929680"></A>#define  N_FIELDS        2       /* number of fields to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929681"></A>#define  FILE_NAME       “Packed_Vdata.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929682"></A>#define  VDATA_NAME      “Mixed Data Vdata”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929683"></A>#define  FIELDNAME_LIST  “Temp,Ident”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929684"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929685"></A>/* number of bytes of the data to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929686"></A>#define  BUFFER_SIZE     ( sizeof(float32) + sizeof(char)) * N_RECORDS </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929687"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929688"></A>main ()</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929689"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929690"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929691"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929692"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929693"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929694"></A>         file_id, vdata_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929695"></A>         num_of_records,        /* number of records actually read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929696"></A>         vdata_ref,             /* reference number of the vdata to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929697"></A>         buffer_size;           /* number of bytes the vdata can hold       */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929698"></A>   float32 itemp[N_RECORDS];    /* buffer to hold values of first field     */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929699"></A>   char  idents[N_RECORDS];     /* buffer to hold values of fourth field    */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929700"></A>   uint8 databuf[BUFFER_SIZE];  /* buffer to hold read data, still packed   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929701"></A>   VOIDP fldbufptrs[N_FIELDS];/*pointers to be pointing to the field buffers*/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929702"></A>   int   i;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929703"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929704"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929705"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929706"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929707"></A>   * Open the HDF file for reading. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929708"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929709"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929710"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929711"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929712"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929713"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929714"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929715"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929716"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929717"></A>   * Get the reference number of the vdata, whose name is specified in</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929718"></A>   * VDATA_NAME, using VSfind, which will be discussed in Section 4.7.3.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929719"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929720"></A>   vdata_ref = VSfind (file_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929721"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929722"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929723"></A>   * Attach to the vdata for reading. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929724"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929725"></A>   vdata_id = VSattach (file_id, vdata_ref, “r”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929726"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929727"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929728"></A>   * Specify the fields that will be read. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929729"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929730"></A>   status_n = VSsetfields(vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929731"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929732"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929733"></A>   * Read N_RECORDS records of the vdata and store the values into the </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929734"></A>   * buffer databuf. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929735"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929736"></A>   num_of_records = VSread (vdata_id, (uint8 *)databuf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929737"></A>                            FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929738"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929739"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929740"></A>   * Build an array of pointers each of which points to an array that</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929741"></A>   * will hold all values of a field after being unpacked.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929742"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929743"></A>   fldbufptrs[0] = &amp;itemp[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929744"></A>   fldbufptrs[1] = &amp;idents[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929745"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929746"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929747"></A>   * Unpack the data from the buffer databuf and store the values into the </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929748"></A>   * appropriate field buffers pointed to by the set of pointers fldbufptrs.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929749"></A>   * Note that the second parameter is _HDF_VSUNPACK for unpacking and the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929750"></A>   * number of records is the one returned by VSread.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929751"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929752"></A>   status_n = VSfpack (vdata_id, _HDF_VSUNPACK, FIELDNAME_LIST, (VOIDP)databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929753"></A>               BUFFER_SIZE, num_of_records, NULL, (VOIDP)fldbufptrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929754"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929755"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929756"></A>   * Display the read data being stored in the field buffers.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929757"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929758"></A>   printf (“\n     Temp      Ident\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929759"></A>   for (i=0; i &lt; num_of_records; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929760"></A>       printf (“   %6.2f        %c\n”, itemp[i], idents[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929761"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929762"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929763"></A>   * Terminate access to the vdata and the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929764"></A>   * the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929765"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929766"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929767"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929768"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929769"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929770"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928501"></A><A NAME="50593891_25145"></A>read_mixed_vdata.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929775"></A>      program read_mixed_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929780"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929781"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929782"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929783"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929784"></A>      character*16 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929785"></A>      character*16 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929786"></A>      character*4  FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929787"></A>      character*5  FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929788"></A>      character*10 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929789"></A>      integer      N_RECORDS, N_FIELDS</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929790"></A>      integer      BUFFER_SIZE </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929791"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929792"></A>      parameter (FILE_NAME       = ‘Packed_Vdata.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929793"></A>     +           VDATA_NAME      = ‘Mixed Data Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929794"></A>     +           FIELD1_NAME     = ‘Temp’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929795"></A>     +           FIELD2_NAME     = ‘Ident’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929796"></A>     +           FIELDNAME_LIST = ‘Temp,Ident’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929797"></A>      parameter (N_RECORDS   = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929798"></A>     +           N_FIELDS    = 2, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929799"></A>     +           BUFFER_SIZE = (4 + 1)*N_RECORDS)               </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929800"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929801"></A>      integer DFACC_READ, DFNT_FLOAT32, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929802"></A>     +        FULL_INTERLACE, HDF_VSUNPACK  </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929803"></A>      parameter (DFACC_READ       = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929804"></A>     +           DFNT_FLOAT32     = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929805"></A>     +           DFNT_CHAR8       = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929806"></A>     +           FULL_INTERLACE   = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929807"></A>     +           HDF_VSUNPACK     = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929808"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929809"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929810"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929811"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929812"></A>      integer vfstart, vsfatch, vsffnd, vsfsfld,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929813"></A>     +        vsfnpak, vsfcpak, vsfread, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929814"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929815"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929816"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929817"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929818"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929819"></A>      integer   file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929820"></A>      integer   vdata_ref, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929821"></A>      real      temp(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929822"></A>      character ident(N_RECORDS) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929823"></A>      integer   i</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929824"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929825"></A>C     Buffer for read packed data should be big enough to hold N_RECORDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929826"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929827"></A>      integer   databuf(BUFFER_SIZE/4 + 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929828"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929829"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929830"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929831"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929832"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929833"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929834"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929835"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929836"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929837"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929838"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929839"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929840"></A>C     Get the reference number of the vdata, whose name is specified in</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929841"></A>C     VDATA_NAME, using vsffnd, which will be discussed in Section 4.7.3. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929842"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929843"></A>      vdata_ref = vsffnd(file_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929844"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929845"></A>C     Attach to the vdata for reading if it is found, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929846"></A>C     otherwise exit the program.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929847"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929848"></A>      if (vdata_ref .eq. 0) stop</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929849"></A>      vdata_id = vsfatch(file_id, vdata_ref, ‘r’) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929850"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929851"></A>C     Specify the fields that will be read. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929852"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929853"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929854"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929855"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929856"></A>C     Read N_RECORDS records of the vdata and store the values into the databuf.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929857"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929858"></A>      num_of_records = vsfread(vdata_id, databuf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929859"></A>     +                         FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929860"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929861"></A>C     Unpack N_RECORDS from databuf into temp and ident arrays.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929862"></A>C     In Fortran, each field is unpacked using separate calls to </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929863"></A>C     vsfnpak or vsfcpak.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929864"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929865"></A>      status = vsfnpak(vdata_id, HDF_VSUNPACK, FIELDNAME_LIST, databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929866"></A>     +                 BUFFER_SIZE, num_of_records, FIELD1_NAME, temp) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929867"></A>      status = vsfcpak(vdata_id, HDF_VSUNPACK, FIELDNAME_LIST, databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929868"></A>     +                 BUFFER_SIZE, num_of_records, FIELD2_NAME, ident) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929869"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929870"></A>C     Display the read data being stored in the field databufs.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929871"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929872"></A>      write (*,*) ‘    Temp  Ident’</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929873"></A>      do 10 i = 1, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929874"></A>         write(*,1000) temp(i), ident(i)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929875"></A>10    continue </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929876"></A>1000  format (3x,F6.2, 4x, a)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929877"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929878"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929879"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929880"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929881"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929882"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929883"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929884"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929885"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928503"></A><A NAME="50593891_34127"></A>locate_vdata.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929894"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929899"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929900"></A>#define  FILE_NAME         “General_Vdatas.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929901"></A>#define  SEARCHED_FIELDS   “Position,Temperature”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929902"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929903"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929904"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929905"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929906"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929907"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929908"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929909"></A>         file_id, vdata_id, vdata_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929910"></A>         index = 0;     /* index of the vdata in the file - manually kept   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929911"></A>   int8  found_fields;  /* TRUE if the specified fields exist in the vdata  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929912"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929913"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929914"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929915"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929916"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929917"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929918"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929919"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929920"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929921"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929922"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929923"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929924"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929925"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929926"></A>   * Set the reference number to -1 to start the search from </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929927"></A>   * the beginning of file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929928"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929929"></A>   vdata_ref = -1;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929930"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929931"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929932"></A>   * Assume that the specified fields are not found in the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929933"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929934"></A>   found_fields = FALSE;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929935"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929936"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929937"></A>   * Use VSgetid to obtain each vdata by its reference number then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929938"></A>   * attach to the vdata and search for the fields.  The loop</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929939"></A>   * terminates when the last vdata is reached or when a vdata which</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929940"></A>   * contains the fields listed in SEARCHED_FIELDS is found.  </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929941"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929942"></A>   while ((vdata_ref = VSgetid (file_id, vdata_ref)) != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929943"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929944"></A>      vdata_id = VSattach (file_id, vdata_ref, “r”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929945"></A>      if ((status_n = VSfexist (vdata_id, SEARCHED_FIELDS)) != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929946"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929947"></A>         found_fields = TRUE;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929948"></A>         break;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929949"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929950"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929951"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929952"></A>      * Detach from the current vdata before continuing searching.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929953"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929954"></A>      status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929955"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929956"></A>      index++;		/* advance the index by 1 for the next vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929957"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929958"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929959"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929960"></A>   * Print the index of the vdata containing the fields or a “not found” </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929961"></A>   * message if no such vdata is found.  Also detach from the vdata found.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929962"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929963"></A>   if (!found_fields) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929964"></A>      printf (“Fields Position and Temperature were not found.\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929965"></A>   else </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929966"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929967"></A>      printf</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929968"></A>     (“Fields Position and Temperature found in the vdata at position %d\n”, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929969"></A>       index);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929970"></A>      status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929971"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929972"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929973"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929974"></A>   * Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929975"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929976"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929977"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929978"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929979"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928512"></A><A NAME="50593891_32469"></A>locate_vdata.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929988"></A>      program locate_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929993"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929994"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929995"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929996"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929997"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929998"></A>      character*20 SEARCHED_FIELDS </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-929999"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930000"></A>      parameter (FILE_NAME       = ‘General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930001"></A>     +           SEARCHED_FIELDS = ‘Position,Temperature’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930002"></A>      integer DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930003"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930004"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930005"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930006"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930007"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930008"></A>      integer vfstart, vsfatch, vsfgid, vsfex, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930009"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930010"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930011"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930012"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930013"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930014"></A>      integer file_id, vdata_id, vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930015"></A>      integer index </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930016"></A>      logical found_fields </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930017"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930018"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930019"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930020"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930021"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930022"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930023"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930024"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930025"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930026"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930027"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930028"></A>      index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930029"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930030"></A>C     Set the reference number to -1 to start the search from the beginning</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930031"></A>C     of the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930032"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930033"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930034"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930035"></A>C     Assume that the specified fields are not found in the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930036"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930037"></A>      found_fields = .FALSE.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930038"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930039"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930040"></A>C     Use vsfgid to obtain each vdata by its reference number then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930041"></A>C     attach to the vdata and search for the fields. The loop terminates</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930042"></A>C     when the last vdata is reached or when a vdata which contains the</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930043"></A>C     fields listed in SEARCHED_FIELDS is found.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930044"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930045"></A>      vdata_ref = vsfgid(file_id, vdata_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930046"></A>      if (vdata_ref .eq. -1) goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930047"></A>      vdata_id = vsfatch(file_id, vdata_ref, ‘r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930048"></A>      status = vsfex(vdata_id, SEARCHED_FIELDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930049"></A>      if (status .ne. -1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930050"></A>          found_fields = .TRUE.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930051"></A>          goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930052"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930053"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930054"></A>      index = index + 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930055"></A>      goto 10</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930056"></A>100   continue</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930057"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930058"></A>C     Print the index of the vdata containing the fields or a ‘not found’</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930059"></A>C     message if no such vdata is found. Also detach from the vdata found.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930060"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930061"></A>      if(.NOT.found_fields) then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930062"></A>         write(*,*) ‘Fields Positions and Temperature were not found’</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930063"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930064"></A>         write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930065"></A>     +   ‘Fields Positions and Temperature were found in the vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930066"></A>     +   ‘ at position ‘, index</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930067"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930068"></A>C        Terminate access to the vdata</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930069"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930070"></A>         status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930071"></A>      endif  </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930072"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930073"></A>C     Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930074"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930075"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930076"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930077"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930078"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930079"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928514"></A><A NAME="50593891_19252"></A>set_get_vdata_attr.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930084"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930093"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930094"></A>#define  FILE_NAME        “General_Vdatas.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930095"></A>#define  VDATA_NAME       “Solid Particle”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930096"></A>#define  FIELD_NAME       “Mass”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930097"></A>#define  VATTR_NAME       “Site Ident”      /* name of the vdata attribute  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930098"></A>#define  FATTR_NAME       “Scales”          /* name of the field attribute  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930099"></A>#define  VATTR_N_VALUES   3      /* number of values in the vdata attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930100"></A>#define  FATTR_N_VALUES   4      /* number of values in the field attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930101"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930102"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930103"></A>{   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930104"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930105"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930106"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930107"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930108"></A>         file_id, vdata_ref, vdata_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930109"></A>         field_index,   /* index of a field within the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930110"></A>         n_vdattrs,     /* number of vdata attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930111"></A>         n_fldattrs,    /* number of field attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930112"></A>         vdata_type,    /* to hold the type of vdata’s attribute */ </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930113"></A>         vdata_n_values,/* to hold the number of vdata’s attribute values   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930114"></A>         vdata_size,    /* to hold the size of vdata’s attribute values     */ </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930115"></A>         field_type,    /* to hold the type of field’s attribute            */ </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930116"></A>         field_n_values,/* to hold the number of field’s attribute values   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930117"></A>         field_size;    /* to hold the size of field’s attribute values     */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930118"></A>   char  vd_attr[VATTR_N_VALUES] = {‘A’, ‘B’, ‘C’};/* vdata attribute values*/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930119"></A>   int32 fld_attr[FATTR_N_VALUES] = {2, 4, 6, 8};  /* field attribute values*/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930120"></A>   char  vattr_buf[VATTR_N_VALUES];     /* to hold vdata attribute’s values */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930121"></A>   int32 fattr_buf[FATTR_N_VALUES];     /* to hold field attribute’s values */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930122"></A>   char  vattr_name[30],                /* name of vdata attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930123"></A>         fattr_name[30];                /* name of field attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930124"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930125"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930126"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930127"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930128"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930129"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930130"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930131"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930132"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930133"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930134"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930135"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930136"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930137"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930138"></A>   * Get the reference number of the vdata named VDATA_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930139"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930140"></A>   vdata_ref = VSfind (file_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930141"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930142"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930143"></A>   * Attach to the vdata for writing. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930144"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930145"></A>   vdata_id = VSattach (file_id, vdata_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930146"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930147"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930148"></A>   * Attach an attribute to the vdata, i.e., indicated by the second parameter.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930149"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930150"></A>   status_n = VSsetattr (vdata_id, _HDF_VDATA, VATTR_NAME, DFNT_CHAR,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930151"></A>                                                   VATTR_N_VALUES, vd_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930152"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930153"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930154"></A>   * Get the index of the field FIELD_NAME within the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930155"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930156"></A>   status_n = VSfindex (vdata_id, FIELD_NAME, &amp;field_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930157"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930158"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930159"></A>   * Attach an attribute to the field field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930160"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930161"></A>   status_n = VSsetattr (vdata_id, field_index, FATTR_NAME, DFNT_INT32, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930162"></A>                                                   FATTR_N_VALUES, fld_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930163"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930164"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930165"></A>   * Get the number of attributes attached to the vdata’s first </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930166"></A>   * field - should be 0. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930167"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930168"></A>   n_fldattrs = VSfnattrs (vdata_id, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930169"></A>   printf ( “Number of attributes of the first field of the vdata: %d\n”, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930170"></A>             n_fldattrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930171"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930172"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930173"></A>   * Get the number of attributes attached to the field specified by </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930174"></A>   * field_index - should be 1.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930175"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930176"></A>   n_fldattrs = VSfnattrs (vdata_id, field_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930177"></A>   printf ( “Number of attributes of field %s: %d\n”, FIELD_NAME, n_fldattrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930178"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930179"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930180"></A>   * Get the total number of the field’s and vdata’s attributes - should be 2. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930181"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930182"></A>   n_vdattrs = VSnattrs (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930183"></A>   printf ( “Number of attributes of the vdata and its fields: %d\n”, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930184"></A>             n_vdattrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930185"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930186"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930187"></A>   * Get information about the vdata’s first attribute, indicated</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930188"></A>   * by the third parameter which is the index of the attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930189"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930190"></A>   status_n = VSattrinfo (vdata_id, _HDF_VDATA, 0, vattr_name, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930191"></A>                          &amp;vdata_type, &amp;vdata_n_values, &amp;vdata_size);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930192"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930193"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930194"></A>   * Get information about the first attribute of the field specified by </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930195"></A>   * field_index. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930196"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930197"></A>   status_n = VSattrinfo (vdata_id, field_index, 0, fattr_name, &amp;field_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930198"></A>                          &amp;field_n_values, &amp;field_size);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930199"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930200"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930201"></A>   * Get the vdata’s first attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930202"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930203"></A>   status_n = VSgetattr (vdata_id, _HDF_VDATA, 0, vattr_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930204"></A>   printf(“Values of the vdata attribute = %c %c %c\n”, vattr_buf[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930205"></A>                          vattr_buf[1], vattr_buf[2]);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930206"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930207"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930208"></A>   * Get the first attribute of the field specified by field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930209"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930210"></A>   status_n = VSgetattr (vdata_id, field_index, 0, fattr_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930211"></A>   printf(“Values of the field attribute = %d %d %d %d\n”, fattr_buf[0], </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930212"></A>                          fattr_buf[1], fattr_buf[2], fattr_buf[3]);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930213"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930214"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930215"></A>   * Terminate access to the vdata and to the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930216"></A>   * the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930217"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930218"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930219"></A>   status_n  = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930220"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930221"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930222"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928516"></A><A NAME="50593891_30138"></A>set_get_vdata_attr.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930231"></A>      program vdata_attributes </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930236"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930237"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930238"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930239"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930240"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930241"></A>      character*14 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930242"></A>      character*4  FIELD_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930243"></A>      character*10 VATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930244"></A>      character*6  FATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930245"></A>      integer      VATTR_N_VALUES, FATTR_N_VALUES </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930246"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930247"></A>      parameter (FILE_NAME    = ‘General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930248"></A>     +           VDATA_NAME   = ‘Solid Particle’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930249"></A>     +           FIELD_NAME   = ‘Mass’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930250"></A>     +           VATTR_NAME   = ‘Site Ident’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930251"></A>     +           FATTR_NAME   = ‘Scales’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930252"></A>      parameter (VATTR_N_VALUES = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930253"></A>     +           FATTR_N_VALUES = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930254"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930255"></A>      integer DFACC_WRITE, FULL_INTERLACE, HDF_VDATA</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930256"></A>      integer DFNT_INT32, DFNT_CHAR8</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930257"></A>      parameter (DFACC_WRITE    =  2,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930258"></A>     +           FULL_INTERLACE =  0,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930259"></A>     +           HDF_VDATA      = -1,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930260"></A>     +           DFNT_INT32     = 24,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930261"></A>     +           DFNT_CHAR8     =  4)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930262"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930263"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930264"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930265"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930266"></A>      integer vfstart, vsffnd, vsfatch, vsfscat, vsfsnat, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930267"></A>     +        vsffnas, vsffidx, vsfnats, vsfainf, vsfgcat, vsfgnat,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930268"></A>     +        vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930269"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930270"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930271"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930272"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930273"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930274"></A>      integer   file_id, vdata_id, vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930275"></A>      integer   field_index, n_vdattrs, n_fldattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930276"></A>      integer   vdata_type, vdata_n_values, vdata_size</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930277"></A>      integer   field_type, field_n_values, field_size </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930278"></A>      character vd_attr(VATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930279"></A>      integer   fld_attr(FATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930280"></A>      character vattr_buf(VATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930281"></A>      integer   fattr_buf(FATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930282"></A>      character vattr_name_out(30), fattr_name_out(30)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930283"></A>      data vd_attr /’A’, ‘B’, ‘C’/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930284"></A>      data fld_attr /2, 4, 6, 8/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930285"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930286"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930287"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930288"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930289"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930290"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930291"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930292"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930293"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930294"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930295"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930296"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930297"></A>C     Get the reference number of the vdata named VDATA_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930298"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930299"></A>      vdata_ref = vsffnd(file_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930300"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930301"></A>C     Attach to the vdata for writing. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930302"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930303"></A>      vdata_id = vsfatch(file_id, vdata_ref, ‘w’) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930304"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930305"></A>C     Attach an attribute to the vdata, as it is indicated by second parameter.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930306"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930307"></A>      status = vsfscat(vdata_id, HDF_VDATA, VATTR_NAME, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930308"></A>     +                  VATTR_N_VALUES, vd_attr)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930309"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930310"></A>C     Get the index of the field FIELD_NAME within the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930311"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930312"></A>      status = vsffidx(vdata_id, FIELD_NAME, field_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930313"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930314"></A>C     Attach an attribute to the field with the index field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930315"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930316"></A>      status = vsfsnat(vdata_id, field_index, FATTR_NAME, DFNT_INT32,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930317"></A>     +                  FATTR_N_VALUES, fld_attr)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930318"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930319"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930320"></A>C     Get the number of attributes attached to the vdata’s first</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930321"></A>C     field - should be 0.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930322"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930323"></A>      n_fldattrs = vsffnas(vdata_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930324"></A>      write(*,*) ‘Number of attributes of the first field’ </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930325"></A>      write(*,*) ‘ of the vdata: ‘, n_fldattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930326"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930327"></A>C     Get the number of the attributes attached to the field specified by</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930328"></A>C     index field_index - should be 1.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930329"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930330"></A>      n_fldattrs = vsffnas(vdata_id, field_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930331"></A>      write(*,*) ‘Number of attributes of field ‘, FIELD_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930332"></A>     +           n_fldattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930333"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930334"></A>C     Get the total number of the field’s and vdata’s attributes - should be 2.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930335"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930336"></A>      n_vdattrs = vsfnats(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930337"></A>      write(*,*) ‘Number of attributes of the vdata and its fields: ‘,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930338"></A>     +           n_vdattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930339"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930340"></A>C     Get information about the vdata’s first attribute, indicated by </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930341"></A>C     the third parameter, which is the index of the attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930342"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930343"></A>      status = vsfainf(vdata_id, HDF_VDATA, 0, vattr_name_out,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930344"></A>     +                 vdata_type, vdata_n_values, vdata_size)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930345"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930346"></A>C     Get information about the first attribute of the field specified by</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930347"></A>C     field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930348"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930349"></A>      status = vsfainf(vdata_id, field_index, 0, fattr_name_out, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930350"></A>     +                 field_type, field_n_values, field_size)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930351"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930352"></A>C     Get the vdata’s first attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930353"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930354"></A>      status = vsfgcat(vdata_id, HDF_VDATA, 0, vattr_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930355"></A>      write(*,*) ‘Values of vdata attribute  ‘, vattr_buf</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930356"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930357"></A>C     Get the first attribute of the field specified by field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930358"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930359"></A>      status = vsfgnat(vdata_id, field_index, 0, fattr_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930360"></A>      write(*,*)  ‘Values of the field attribute = ‘, fattr_buf</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930361"></A>C       </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930362"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930363"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930364"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930365"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930366"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930367"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930368"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930369"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928518"></A><A NAME="50593891_35942"></A>get_vdata_info.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930378"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930383"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930384"></A>#define  FILE_NAME      “General_Vdatas.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930385"></A>#define  FIELD_SIZE     80         /* maximum length of all the field names */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930386"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930387"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930388"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930389"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930390"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930391"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930392"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930393"></A>         n_records,     /* to retrieve the number of records in the vdata   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930394"></A>         interlace_mode,/* to retrieve the interlace mode of the vdata      */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930395"></A>         vdata_size,    /* to retrieve the size of all specified fields     */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930396"></A>         file_id, vdata_ref, vdata_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930397"></A>   char  fieldname_list[FIELD_SIZE], /* buffer to retrieve the vdata data   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930398"></A>         vdata_name[VSNAMELENMAX];   /* buffer to retrieve the vdata name   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930399"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930400"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930401"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930402"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930403"></A>   * Open the HDF file for reading. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930404"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930405"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930406"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930407"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930408"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930409"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930410"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930411"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930412"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930413"></A>   * Set vdata_ref to -1 to start the search from the beginning of file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930414"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930415"></A>   vdata_ref = -1;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930416"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930417"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930418"></A>   * Use VSgetid to obtain each vdata by its reference number then attach </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930419"></A>   * to the vdata and get its information.  The loop terminates when </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930420"></A>   * the last vdata is reached.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930421"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930422"></A>   while ((vdata_ref = VSgetid (file_id, vdata_ref)) != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930423"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930424"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930425"></A>      * Attach to the current vdata for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930426"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930427"></A>      vdata_id = VSattach (file_id, vdata_ref, “r”);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930428"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930429"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930430"></A>      * Test whether the current vdata is not a storage of an attribute, then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930431"></A>      * obtain and display its information.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930432"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930433"></A>      if( VSisattr (vdata_id) != TRUE )</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930434"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930435"></A>         status_n = VSinquire (vdata_id, &amp;n_records, &amp;interlace_mode, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930436"></A>                            fieldname_list, &amp;vdata_size, vdata_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930437"></A>         printf (“Vdata %s: - contains %d records\n\tInterlace mode: %s \</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930438"></A>                 \n\tFields: %s - %d bytes\n\t\n”, vdata_name, n_records,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930439"></A>                 interlace_mode == FULL_INTERLACE ? “FULL” : “NONE”, </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930440"></A>                 fieldname_list, vdata_size );</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930441"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930442"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930443"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930444"></A>      * Detach from the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930445"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930446"></A>      status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930447"></A>   } /* while */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930448"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930449"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930450"></A>   * Terminate access to the VS interface and close the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930451"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930452"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930453"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930454"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930455"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593891_pgfId-928520"></A><A NAME="50593891_41190"></A>get_vdata_info.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930464"></A>      program vdata_info </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930469"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930470"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930471"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930472"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930473"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930474"></A>      integer      DFACC_READ, FULL_INTERLACE</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930475"></A>      integer      FIELD_SIZE</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930476"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930477"></A>      parameter (FILE_NAME      = ‘General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930478"></A>     +           DFACC_READ     = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930479"></A>     +           FULL_INTERLACE = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930480"></A>     +           FIELD_SIZE     = 80)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930481"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930482"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930483"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930484"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930485"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930486"></A>      integer vfstart, vsfatch, vsfgid, vsfinq,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930487"></A>     +        vsfisat, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930488"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930489"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930490"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930491"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930492"></A>      integer      status</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930493"></A>      integer      file_id, vdata_id, vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930494"></A>      integer      n_records, interlace_mode, vdata_size</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930495"></A>      character*64 vdata_name</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930496"></A>      character*80 fieldname_list </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930497"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930498"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930499"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930500"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930501"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930502"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930503"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930504"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930505"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930506"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930507"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930508"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930509"></A>C     Set the reference number to -1 to start the search from the beginning</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930510"></A>C     of the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930511"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930512"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930513"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930514"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930515"></A>C     Use vsfgid to obtain each vdata by its reference number then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930516"></A>C     attach to the vdata and get information. The loop terminates</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930517"></A>C     when the last vdata is reached.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930518"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930519"></A>      vdata_ref = vsfgid(file_id, vdata_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930520"></A>      if (vdata_ref .eq. -1) goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930521"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930522"></A>C     Attach to the current vdata for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930523"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930524"></A>      vdata_id = vsfatch(file_id, vdata_ref, ‘r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930525"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930526"></A>C     Test whether the current vdata is not a storage for an attribute,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930527"></A>C     then obtain and display its information.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930528"></A>      if (vsfisat(vdata_id) .ne. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930529"></A>          status = vsfinq(vdata_id, n_records, interlace_mode,</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930530"></A>     +                    fieldname_list, vdata_size, vdata_name)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930531"></A>          write(*,*) ‘Vdata: ‘, vdata_name</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930532"></A>          write(*,*) ‘contains ‘, n_records, ‘ records’</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930533"></A>          if (interlace_mode .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930534"></A>              write(*,*) ‘Interlace mode: FULL’</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930535"></A>          else	 </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930536"></A>              write(*,*) ‘Interlace mode: NONE’</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930537"></A>          endif</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930538"></A>          write(*,*) ‘Fields: ‘, fieldname_list(1:30)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930539"></A>          write(*,*) ‘Vdata record size in bytes :’, vdata_size</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930540"></A>          write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930541"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930542"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930543"></A>C     Detach from the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930544"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930545"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930546"></A>      goto 10 </P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930547"></A>100   continue</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930548"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930549"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930550"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930551"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930552"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930553"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930554"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930555"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593891_pgfId-930556"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928550"></A><A NAME="50593892_21445"></A>create_and_write_image.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928554"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928599"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928600"></A>#define  FILE_NAME     “General_RImages.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928601"></A>#define  IMAGE_NAME    “Image Array 1”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928602"></A>#define  X_LENGTH      10    /* number of columns in the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928603"></A>#define  Y_LENGTH      5     /* number of rows in the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928604"></A>#define  N_COMPS       2     /* number of components in the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928605"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928606"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928607"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928608"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928609"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928610"></A>   intn  status;         /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928611"></A>   int32 file_id,        /* HDF file identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928612"></A>         gr_id,          /* GR interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928613"></A>         ri_id,          /* raster image identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928614"></A>         start[2],       /* start position to write for each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928615"></A>         edges[2],       /* number of elements to be written </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928616"></A>                           along each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928617"></A>         dim_sizes[2],   /* dimension sizes of the image array */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928618"></A>         interlace_mode, /* interlace mode of the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928619"></A>         data_type,      /* data type of the image data */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928620"></A>         i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928621"></A>   int16 image_buf[Y_LENGTH][X_LENGTH][N_COMPS];</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928622"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928623"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928624"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928625"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928626"></A>   * Create and open the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928627"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928628"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928629"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928630"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928631"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928632"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928633"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928634"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928635"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928636"></A>   * Set the data type, interlace mode, and dimensions of the image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928637"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928638"></A>   data_type = DFNT_INT16;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928639"></A>   interlace_mode = MFGR_INTERLACE_PIXEL;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928640"></A>   dim_sizes[0] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928641"></A>   dim_sizes[1] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928642"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928643"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928644"></A>   * Create the raster image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928645"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928646"></A>   ri_id = GRcreate (gr_id, IMAGE_NAME, N_COMPS, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928647"></A>                     interlace_mode, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928648"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928649"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928650"></A>   * Fill the image data buffer with values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928651"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928652"></A>   for (i = 0; i &lt; Y_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928653"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928654"></A>      for (j = 0; j &lt; X_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928655"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928656"></A>         image_buf[i][j][0] = (i + j) + 1;     /* first component */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928657"></A>         image_buf[i][j][1] = (i + j) + 1;     /* second component */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928658"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928659"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928660"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928661"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928662"></A>   * Define the size of the data to be written, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928663"></A>   * and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928664"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928665"></A>   start[0] = start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928666"></A>   edges[0] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928667"></A>   edges[1] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928668"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928669"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928670"></A>   * Write the data in the buffer into the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928671"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928672"></A>   status = GRwriteimage(ri_id, start, NULL, edges, (VOIDP)image_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928673"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928674"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928675"></A>   * Terminate access to the raster image and to the GR interface and, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928676"></A>   * close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928677"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928678"></A>   status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928679"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928680"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928681"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928682"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928555"></A><A NAME="50593892_41475"></A>create_and_write_image.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928715"></A>      program create_raster_image</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928720"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928721"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928722"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928723"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928724"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928725"></A>      character*13 IMAGE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928726"></A>      integer      X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928727"></A>      integer      Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928728"></A>      integer      N_COMPS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928729"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928730"></A>      parameter (FILE_NAME  = ‘General_RImages.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928731"></A>     +           IMAGE_NAME = ‘Image Array 1’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928732"></A>     +           X_LENGTH   = 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928733"></A>     +           Y_LENGTH   = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928734"></A>     +           N_COMPS    = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928735"></A>      integer DFACC_CREATE, DFNT_INT16, MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928736"></A>      parameter (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928737"></A>     +           DFNT_INT16   = 22,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928738"></A>     +           MFGR_INTERLACE_PIXEL = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928739"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928740"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928741"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928742"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928743"></A>      integer mgstart, mgcreat, mgwrimg, mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928744"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928745"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928746"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928747"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928748"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928749"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928750"></A>      integer gr_id, ri_id, num_type, interlace_mode</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928751"></A>      integer start(2), stride(2), edges(2), dimsizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928752"></A>      integer i, j, k</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928753"></A>      integer*2  image_buf(N_COMPS, X_LENGTH, Y_LENGTH) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928754"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928755"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928756"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928757"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928758"></A>C     Create and open the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928759"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928760"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928761"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928762"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928763"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928764"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928765"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928766"></A>C     Set the number type, interlace mode, and dimensions of the image.  </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928767"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928768"></A>      num_type = DFNT_INT16</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928769"></A>      interlace_mode = MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928770"></A>      dimsizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928771"></A>      dimsizes(2) = Y_lENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928772"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928773"></A>C     Create the raster image array. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928774"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928775"></A>      ri_id = mgcreat(gr_id, IMAGE_NAME, N_COMPS, num_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928776"></A>     +                interlace_mode, dimsizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928777"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928778"></A>C     Fill the image data buffer with values. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928779"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928780"></A>      do 30 i = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928781"></A>         do 20 j = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928782"></A>            do 10 k = 1, N_COMPS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928783"></A>               image_buf(k,j,i) = (i+j) - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928784"></A>10          continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928785"></A>20       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928786"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928787"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928788"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928789"></A>C     Define the size of the data to be written, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928790"></A>C     and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928791"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928792"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928793"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928794"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928795"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928796"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928797"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928798"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928799"></A>C     Write the data in the buffer into the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928800"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928801"></A>      status = mgwrimg(ri_id, start, stride, edges, image_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928802"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928803"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928804"></A>C     Terminate access to the raster image and to the GR interface, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928805"></A>C     and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928806"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928807"></A>      status = mgendac(ri_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928808"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928809"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928810"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928827"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928828"></A>modify_image.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928970"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928837"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928838"></A>#define  FILE_NAME    “General_RImages.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928839"></A>#define  X1_LENGTH    5     /* number of columns in the first image </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928840"></A>                              being modified */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928841"></A>#define  Y1_LENGTH    2     /* number of rows in the first image </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928842"></A>                              being modified */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928843"></A>#define  N1_COMPS     2     /* number of components in the first image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928844"></A>#define  IMAGE1_NAME  “Image Array 1”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928845"></A>#define  IMAGE2_NAME  “Image Array 2”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928846"></A>#define  X2_LENGTH    6     /* number of columns in the second image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928847"></A>#define  Y2_LENGTH    4     /* number of rows in the second image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928848"></A>#define  N2_COMPS     3     /* number of components in the second image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928849"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928850"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928851"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928852"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928853"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928854"></A>   intn  status;         /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928855"></A>   int32 file_id,        /* HDF file identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928856"></A>         gr_id,          /* GR interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928857"></A>         ri1_id,         /* raster image identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928858"></A>         start1[2],      /* start position to write for each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928859"></A>         edges1[2],      /* number of elements to be written along</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928860"></A>                           each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928861"></A>         ri2_id,         /* raster image identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928862"></A>         start2[2],      /* start position to write for each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928863"></A>         edges2[2],      /* number of elements to be written along </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928864"></A>                           each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928865"></A>         dims_sizes[2],  /* sizes of the two dimensions of the image array */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928866"></A>         data_type,      /* data type of the image data */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928867"></A>         interlace_mode; /* interlace mode of the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928868"></A>   int16 i, j;           /* indices for the dimensions */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928869"></A>   int16 image1_buf[Y1_LENGTH][X1_LENGTH][N1_COMPS]; /* data of first image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928870"></A>   char  image2_buf[Y2_LENGTH][X2_LENGTH][N2_COMPS]; /* data of second image*/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928871"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928872"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928873"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928874"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928875"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928876"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928877"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928878"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928879"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928880"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928881"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928882"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928883"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928884"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928885"></A>   * Select the first raster image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928886"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928887"></A>   ri1_id = GRselect (gr_id, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928888"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928889"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928890"></A>   * Fill the first image data buffer with values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928891"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928892"></A>   for (i = 0; i &lt; Y1_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928893"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928894"></A>      for (j = 0; j &lt; X1_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928895"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928896"></A>         image1_buf[i][j][0] = 0;  /* first component */ </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928897"></A>         image1_buf[i][j][1] = 0;  /* second component */ </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928898"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928899"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928900"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928901"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928902"></A>   * Define the size of the data to be written, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928903"></A>   * and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928904"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928905"></A>   start1[0] = start1[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928906"></A>   edges1[0] = X1_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928907"></A>   edges1[1] = Y1_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928908"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928909"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928910"></A>   * Write the data in the buffer into the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928911"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928912"></A>   status = GRwriteimage (ri1_id, start1, NULL, edges1, (VOIDP)image1_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928913"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928914"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928915"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928916"></A>   * Set the interlace mode and dimensions of the second image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928917"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928918"></A>   data_type = DFNT_CHAR8;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928919"></A>   interlace_mode = MFGR_INTERLACE_PIXEL;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928920"></A>   dims_sizes[0] = X2_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928921"></A>   dims_sizes[1] = Y2_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928922"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928923"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928924"></A>   * Create the second image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928925"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928926"></A>   ri2_id = GRcreate (gr_id, IMAGE2_NAME, N2_COMPS, data_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928927"></A>                                interlace_mode, dims_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928928"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928929"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928930"></A>   * Fill the second image data buffer with values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928931"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928932"></A>   for (i = 0; i &lt; Y2_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928933"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928934"></A>      for (j = 0; j &lt; X2_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928935"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928936"></A>         image2_buf[i][j][0] = ‘A’;     /* first component */ </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928937"></A>         image2_buf[i][j][1] = ‘B’;     /* second component */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928938"></A>         image2_buf[i][j][2] = ‘C’;     /* third component */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928939"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928940"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928941"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928942"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928943"></A>   * Define the size of the data to be written, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928944"></A>   * and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928945"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928946"></A>   for (i = 0; i &lt; 2; i++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928947"></A>      start2[i] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928948"></A>      edges2[i] = dims_sizes[i];</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928949"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928950"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928951"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928952"></A>   * Write the data in the buffer into the second image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928953"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928954"></A>   status = GRwriteimage (ri2_id, start2, NULL, edges2, (VOIDP)image2_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928955"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928956"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928957"></A>   * Terminate access to the raster images and to the GR interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928958"></A>   * close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928959"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928960"></A>   status = GRendaccess (ri1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928961"></A>   status = GRendaccess (ri2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928962"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928963"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928964"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928965"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928829"></A><A NAME="50593892_32877"></A>modify_image.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928973"></A>      program modify_image</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928978"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928979"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928980"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928981"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928982"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928983"></A>      character*13 IMAGE1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928984"></A>      integer      X1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928985"></A>      integer      Y1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928986"></A>      integer      N1_COMPS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928987"></A>      character*13 IMAGE2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928988"></A>      integer      X2_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928989"></A>      integer      Y2_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928990"></A>      integer      N2_COMPS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928991"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928992"></A>      parameter (FILE_NAME   = ‘General_RImages.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928993"></A>     +           IMAGE1_NAME = ‘Image Array 1’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928994"></A>     +           IMAGE2_NAME = ‘Image Array 2’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928995"></A>     +           X1_LENGTH   = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928996"></A>     +           Y1_LENGTH   = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928997"></A>     +           N1_COMPS    = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928998"></A>     +           X2_LENGTH   = 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-928999"></A>     +           Y2_LENGTH   = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929000"></A>     +           N2_COMPS    = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929001"></A>      integer DFACC_WRITE, DFNT_INT16, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929002"></A>     +        MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929003"></A>      parameter (DFACC_WRITE  = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929004"></A>     +           DFNT_CHAR8   = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929005"></A>     +           DFNT_INT16   = 22,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929006"></A>     +           MFGR_INTERLACE_PIXEL = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929007"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929008"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929009"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929010"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929011"></A>      integer mgstart, mgselct, mgcreat, mgwrimg, mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929012"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929013"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929014"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929015"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929016"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929017"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929018"></A>      integer gr_id, ri1_id, ri2_id, data_type, interlace_mode</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929019"></A>      integer start1(2), stride1(2), edges1(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929020"></A>      integer start2(2), stride2(2), edges2(2), dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929021"></A>      integer i, j, k</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929022"></A>      integer*2  image1_buf(N1_COMPS, X1_LENGTH, Y1_LENGTH) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929023"></A>      character  image2_buf(N2_COMPS, X2_LENGTH, Y2_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929024"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929025"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929026"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929027"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929028"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929029"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929030"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929031"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929032"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929033"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929034"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929035"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929036"></A>C     Select the first raster image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929037"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929038"></A>      ri1_id = mgselct(gr_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929039"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929040"></A>C     Fill the buffer with values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929041"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929042"></A>      do 20 i = 1, Y1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929043"></A>         do 10 j = 1, X1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929044"></A>               image1_buf(1,j,i) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929045"></A>               image1_buf(2,j,i) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929046"></A>10       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929047"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929048"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929049"></A>C     Define the part of the data in the first image that will be overwritten</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929050"></A>C     with the new values from image1_buf.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929051"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929052"></A>      start1(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929053"></A>      start1(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929054"></A>      edges1(1) = X1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929055"></A>      edges1(2) = Y1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929056"></A>      stride1(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929057"></A>      stride1(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929058"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929059"></A>C     Write the data in the buffer into the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929060"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929061"></A>      status = mgwrimg(ri1_id, start1, stride1, edges1, image1_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929062"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929063"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929064"></A>C     Set the number type, interlace mode, and dimensions of the second image.  </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929065"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929066"></A>      data_type = DFNT_CHAR8</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929067"></A>      interlace_mode = MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929068"></A>      dim_sizes(1) = X2_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929069"></A>      dim_sizes(2) = Y2_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929070"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929071"></A>C     Create the second image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929072"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929073"></A>      ri2_id = mgcreat(gr_id, IMAGE2_NAME, N2_COMPS, data_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929074"></A>     +                interlace_mode, dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929075"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929076"></A>C     Fill the image data buffer with values. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929077"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929078"></A>      do 60 i = 1, Y2_LENGTH </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929079"></A>         do 50 j = 1, X2_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929080"></A>            do 40 k = 1, N2_COMPS </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929081"></A>               image2_buf(k,j,i) = char(65 + k - 1) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929082"></A>40          continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929083"></A>50       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929084"></A>60    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929085"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929086"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929087"></A>C     Define the size of the data to be written, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929088"></A>C     and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929089"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929090"></A>      start2(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929091"></A>      start2(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929092"></A>      edges2(1) =  dim_sizes(1)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929093"></A>      edges2(2) =  dim_sizes(2) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929094"></A>      stride2(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929095"></A>      stride2(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929096"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929097"></A>C     Write the data in the buffer into the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929098"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929099"></A>      status = mgwrimg(ri2_id, start2, stride2, edges2, image2_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929100"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929101"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929102"></A>C     Terminate access to the raster images and to the GR interface,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929103"></A>C     and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929104"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929105"></A>      status = mgendac(ri1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929106"></A>      status = mgendac(ri2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929107"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929108"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929109"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929110"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928565"></A>read_image.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929119"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929124"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929125"></A>#define  FILE_NAME       “General_RImages.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929126"></A>#define  N_COMPS         2</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929127"></A>#define  X_LENGTH        10   /* number of columns of the entire image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929128"></A>#define  Y_LENGTH        5    /* number of rows of the entire image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929129"></A>#define  PART_COLS       2    /* number of columns read for partial image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929130"></A>#define  PART_ROWS       3    /* number of rows read for partial image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929131"></A>#define  SKIP_COLS       5    /* number of columns read for skipped image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929132"></A>#define  SKIP_ROWS       3    /* number of rows read for skipped image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929133"></A>#define  COLS_PART_START 3    /* starting column to read partial image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929134"></A>#define  ROWS_PART_START 1    /* starting row to read partial image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929135"></A>#define  COLS_SKIP_START 1    /* starting column to read skipped image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929136"></A>#define  ROWS_SKIP_START 0    /* starting row to read skipped image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929137"></A>#define  N_STRIDES       2    /* number of elements to skip on each dim. */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929138"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929139"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929140"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929141"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929142"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929143"></A>   intn  status;        /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929144"></A>   int32 index;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929145"></A>   int32 file_id, gr_id, ri_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929146"></A>         start[2],      /* start position to write for each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929147"></A>         edges[2],      /* number of elements to bewritten along </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929148"></A>                           each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929149"></A>         stride[2],     /* number of elements to skip on each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929150"></A>         dim_sizes[2];  /* dimension sizes of the image array */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929151"></A>   int16 entire_image[Y_LENGTH][X_LENGTH][N_COMPS],</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929152"></A>         partial_image[PART_ROWS][PART_COLS][N_COMPS],</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929153"></A>         skipped_image[SKIP_ROWS][SKIP_COLS][N_COMPS];</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929154"></A>   int32 i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929155"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929156"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929157"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929158"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929159"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929160"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929161"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929162"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929163"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929164"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929165"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929166"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929167"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929168"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929169"></A>   * Select the first raster image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929170"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929171"></A>   ri_id = GRselect (gr_id, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929172"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929173"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929174"></A>   * Define the size of the data to be read, i.e., start from the origin </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929175"></A>   * and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929176"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929177"></A>   start[0] = start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929178"></A>   edges[0] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929179"></A>   edges[1] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929180"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929181"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929182"></A>   * Read the data from the raster image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929183"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929184"></A>   status = GRreadimage (ri_id, start, NULL, edges, (VOIDP)entire_image);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929185"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929186"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929187"></A>   * Display only the first component of the image since the two components </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929188"></A>   * have the same data in this example.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929189"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929190"></A>   printf (“First component of the entire image:\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929191"></A>   for (i = 0; i &lt; Y_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929192"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929193"></A>      for (j = 0; j &lt; X_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929194"></A>         printf (“%d “, entire_image[i][j][0]);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929195"></A>      printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929196"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929197"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929198"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929199"></A>   * Define the size of the data to be read.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929200"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929201"></A>   start[0] = COLS_PART_START;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929202"></A>   start[1] = ROWS_PART_START;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929203"></A>   edges[0] = PART_COLS;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929204"></A>   edges[1] = PART_ROWS;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929205"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929206"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929207"></A>   * Read a subset of the raster image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929208"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929209"></A>   status = GRreadimage (ri_id, start, NULL, edges, (VOIDP)partial_image);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929210"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929211"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929212"></A>   * Display the first component of the read sample.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929213"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929214"></A>   printf (“\nThree rows &amp; two cols at 2nd row and 4th column”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929215"></A>   printf (“ of the first component:\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929216"></A>   for (i = 0; i &lt; PART_ROWS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929217"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929218"></A>      for (j = 0; j &lt; PART_COLS; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929219"></A>         printf (“%d “, partial_image[i][j][0]);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929220"></A>      printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929221"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929222"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929223"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929224"></A>   * Define the size and the pattern to read the data.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929225"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929226"></A>   start[0] = COLS_SKIP_START;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929227"></A>   start[1] = ROWS_SKIP_START;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929228"></A>   edges[0] = SKIP_COLS;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929229"></A>   edges[1] = SKIP_ROWS;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929230"></A>   stride[0] = stride[1] = N_STRIDES;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929231"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929232"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929233"></A>   * Read all the odd rows and even columns of the image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929234"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929235"></A>   status = GRreadimage (ri_id, start, stride, edges, (VOIDP)skipped_image);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929236"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929237"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929238"></A>   * Display the first component of the read sample.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929239"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929240"></A>   printf (“\nAll odd rows and even columns of the first component:\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929241"></A>   for (i = 0; i &lt; SKIP_ROWS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929242"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929243"></A>      for (j = 0; j &lt; SKIP_COLS; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929244"></A>         printf (“%d “, skipped_image[i][j][0]);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929245"></A>      printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929246"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929247"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929248"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929249"></A>   * Terminate access to the raster image and to the GR interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929250"></A>   * close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929251"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929252"></A>   status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929253"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929254"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929255"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929256"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928567"></A><A NAME="50593892_10923"></A>read_image.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929269"></A>      program read_raster_image</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929274"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929275"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929276"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929277"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929278"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929279"></A>      integer      X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929280"></A>      integer      Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929281"></A>      integer      N_COMPS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929282"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929283"></A>      parameter (FILE_NAME  = ‘General_RImages.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929284"></A>     +           X_LENGTH   = 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929285"></A>     +           Y_LENGTH   = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929286"></A>     +           N_COMPS    = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929287"></A>      integer PART_COLS, PART_ROWS, SKIP_COLS, SKIP_ROWS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929288"></A>      integer COLS_PART_START, ROWS_PART_START</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929289"></A>      integer COLS_SKIP_START, ROWS_SKIP_START</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929290"></A>      integer N_STRIDES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929291"></A>      parameter (PART_COLS = 3, PART_ROWS = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929292"></A>     +           SKIP_COLS = 3, SKIP_ROWS = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929293"></A>     +           COLS_PART_START = 1, ROWS_PART_START = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929294"></A>     +           COLS_SKIP_START = 0, ROWS_SKIP_START = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929295"></A>     +           N_STRIDES = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929296"></A>      integer DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929297"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929298"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929299"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929300"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929301"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929302"></A>      integer mgstart, mgselct, mgrdimg, mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929303"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929304"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929305"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929306"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929307"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929308"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929309"></A>      integer gr_id, ri_id</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929310"></A>      integer start(2), stride(2), edges(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929311"></A>      integer i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929312"></A>      integer*2  entire_image(N_COMPS, X_LENGTH, Y_LENGTH) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929313"></A>      integer*2  partial_image(N_COMPS, PART_ROWS, PART_COLS) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929314"></A>      integer*2  skipped_image(N_COMPS, SKIP_ROWS, SKIP_COLS) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929315"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929316"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929317"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929318"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929319"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929320"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929321"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929322"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929323"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929324"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929325"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929326"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929327"></A>C     Select the first raster image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929328"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929329"></A>      ri_id = mgselct(gr_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929330"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929331"></A>C     Define the size of the data to be read, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929332"></A>C     and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929333"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929334"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929335"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929336"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929337"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929338"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929339"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929340"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929341"></A>C     Read the data from the raster image array. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929342"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929343"></A>      status = mgrdimg(ri_id, start, stride, edges, entire_image)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929344"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929345"></A>C     Display only the first component of the image since the two components</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929346"></A>C     have the same data in this example.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929347"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929348"></A>      write(*,*) ‘First component of the entire image’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929349"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929350"></A>      do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929351"></A>         write(*,1000) (entire_image(1,i,j), j = 1, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929352"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929353"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929354"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929355"></A>C     Define the size of the data to be read.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929356"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929357"></A>      start(1) = ROWS_PART_START</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929358"></A>      start(2) = COLS_PART_START </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929359"></A>      edges(1) = PART_ROWS </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929360"></A>      edges(2) = PART_COLS </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929361"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929362"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929363"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929364"></A>C     Read a subset of the raster image array. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929365"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929366"></A>      status = mgrdimg(ri_id, start, stride, edges, partial_image)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929367"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929368"></A>C     Display only the first component of the read sample. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929369"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929370"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929371"></A>     +  ‘Two rows and three columns at 4th row and 2nd column’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929372"></A>     +  ‘ of the first component’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929373"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929374"></A>      do 20 i = 1, PART_ROWS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929375"></A>         write(*,1000) (partial_image(1,i,j), j = 1, PART_COLS)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929376"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929377"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929378"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929379"></A>C     Define the size and the pattern to read the data.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929380"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929381"></A>      start(1) = ROWS_SKIP_START</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929382"></A>      start(2) = COLS_SKIP_START </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929383"></A>      edges(1) = SKIP_ROWS </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929384"></A>      edges(2) = SKIP_COLS </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929385"></A>      stride(1) = N_STRIDES </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929386"></A>      stride(2) = N_STRIDES </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929387"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929388"></A>C     Read all the odd rows and even columns of the image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929389"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929390"></A>      status = mgrdimg(ri_id, start, stride, edges, skipped_image)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929391"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929392"></A>C     Display only the first component of the read sample. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929393"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929394"></A>      write(*,*) ‘All even rows and odd columns of the first component’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929395"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929396"></A>      do 30 i = 1, SKIP_ROWS</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929397"></A>         write(*,1000) (skipped_image(1,i,j), j = 1, SKIP_COLS)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929398"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929399"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929400"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929401"></A>C     Terminate access to the raster image and to the GR interface, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929402"></A>C     and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929403"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929404"></A>      status = mgendac(ri_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929405"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929406"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929407"></A>1000  format(1x, 5(I4))</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929408"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929409"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928569"></A>image_info.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929418"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929423"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929424"></A>#define  FILE_NAME    “General_RImages.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929425"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929426"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929427"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929428"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929429"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929430"></A>   intn  status;            /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929431"></A>   int32 file_id, gr_id, ri_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929432"></A>         n_rimages,         /* number of raster images in the file */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929433"></A>         n_file_attrs,      /* number of file attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929434"></A>         ri_index,          /* index of a image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929435"></A>         dim_sizes[2],      /* dimensions of an image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929436"></A>         n_comps,           /* number of components an image contains */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929437"></A>         interlace_mode,    /* interlace mode of an image */ </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929438"></A>         data_type,         /* number type of an image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929439"></A>         n_attrs;           /* number of attributes belong to an image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929440"></A>   char  name[MAX_GR_NAME], /* name of an image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929441"></A>        *type_string,       /* mapped text of a number type */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929442"></A>        *interlace_string;  /* mapped text of an interlace mode */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929443"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929444"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929445"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929446"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929447"></A>   * Open the file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929448"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929449"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929450"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929451"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929452"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929453"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929454"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929455"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929456"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929457"></A>   * Determine the contents of the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929458"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929459"></A>   status = GRfileinfo (gr_id, &amp;n_rimages, &amp;n_file_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929460"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929461"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929462"></A>   * For each image in the file, get and display the image information.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929463"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929464"></A>   printf (“RI#    Name       Components  Type         Interlace     \</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929465"></A>   Dimensions   Attributes\n\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929466"></A>   for (ri_index = 0; ri_index &lt; n_rimages; ri_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929467"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929468"></A>      ri_id = GRselect (gr_id, ri_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929469"></A>      status = GRgetiminfo (ri_id, name, &amp;n_comps, &amp;data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929470"></A>                          &amp;interlace_mode, dim_sizes, &amp;n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929471"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929472"></A>      * Map the number type and interlace mode into text strings for output </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929473"></A>      * readability.  Note that, in this example, only two possible types </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929474"></A>      * are considered because of the simplicity of the example.  For real </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929475"></A>      * problems, all possible types should be checked and, if reading the</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929476"></A>      * data is desired, the size of the type must be determined based on the</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929477"></A>      * machine where the program resides.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929478"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929479"></A>      if (data_type == DFNT_CHAR8)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929480"></A>         type_string = “Char8”;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929481"></A>      else if (data_type == DFNT_INT16)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929482"></A>         type_string = “Int16”;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929483"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929484"></A>         type_string = “Unknown”;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929485"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929486"></A>      switch (interlace_mode)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929487"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929488"></A>         case MFGR_INTERLACE_PIXEL:</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929489"></A>            interlace_string = “MFGR_INTERLACE_PIXEL”;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929490"></A>            break;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929491"></A>         case MFGR_INTERLACE_LINE:</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929492"></A>            interlace_string = “MFGR_INTERLACE_LINE”;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929493"></A>            break;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929494"></A>         case MFGR_INTERLACE_COMPONENT:</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929495"></A>            interlace_string = “MFGR_INTERLACE_COMPONENT”;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929496"></A>            break;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929497"></A>         default:</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929498"></A>            interlace_string = “Unknown”;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929499"></A>            break;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929500"></A>      } /* switch */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929501"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929502"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929503"></A>      * Display the image information for the current raster image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929504"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929505"></A>          printf (“%d  %s       %d      %s   %s     %2d,%2d         %d\n”, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929506"></A>                 ri_index, name, n_comps, type_string, interlace_string,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929507"></A>                 dim_sizes[0], dim_sizes[1], n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929508"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929509"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929510"></A>      * Terminate access to the current raster image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929511"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929512"></A>      status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929513"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929514"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929515"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929516"></A>   * Terminate access to the GR interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929517"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929518"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929519"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929520"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929521"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928571"></A><A NAME="50593892_39905"></A>image_info.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929530"></A>      program image_info</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929535"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929536"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929537"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929538"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929539"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929540"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929541"></A>      parameter (FILE_NAME = ‘General_RImages.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929542"></A>      integer DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929543"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929544"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929545"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929546"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929547"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929548"></A>      integer mgstart, mgselct, mgfinfo, mggiinf, mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929549"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929550"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929551"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929552"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929553"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929554"></A>      integer file_id, gr_id, ri_id</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929555"></A>      integer n_rimages, n_file_attrs, ri_index</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929556"></A>      integer n_comps, interlace_mode, n_attrs, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929557"></A>      integer dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929558"></A>      character*10 type_string</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929559"></A>      character*24 interlace_string</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929560"></A>      character*64 name</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929561"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929562"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929563"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929564"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929565"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929566"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929567"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929568"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929569"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929570"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929571"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929572"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929573"></A>C     Determine the contents of the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929574"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929575"></A>      status = mgfinfo(gr_id, n_rimages, n_file_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929576"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929577"></A>C     For each image in the file, get and display image information.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929578"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929579"></A>      do 100 ri_index = 0, n_rimages-1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929580"></A>         ri_id = mgselct(gr_id, ri_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929581"></A>         status = mggiinf(ri_id, name, n_comps, data_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929582"></A>     +                    interlace_mode, dim_sizes, n_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929583"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929584"></A>C     Map the number type and interlace mode into text strings for</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929585"></A>C     output readability.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929586"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929587"></A>      if(data_type .eq. 4) then</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929588"></A>         type_string = ‘DFNT_CHAR8’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929589"></A>      else if(data_type .eq. 22) then</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929590"></A>         type_string = ‘DFNT_INT16’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929591"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929592"></A>         type_string = ‘Unknown’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929593"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929594"></A>      if (interlace_mode .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929595"></A>          interlace_string = ‘MFGR_INTERLACE_PIXEL’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929596"></A>      else if(interlace_mode .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929597"></A>          interlace_string = ‘MFGR_INTERLACE_LINE’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929598"></A>      else if(interlace_mode .eq. 2) then</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929599"></A>          interlace_string = ‘MFGR_INTERLACE_COMPONENT’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929600"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929601"></A>         interlace_string = ‘Unknown’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929602"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929603"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929604"></A>C     Display the image information for the current image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929605"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929606"></A>      write(*,*) ‘Image index: ‘, ri_index</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929607"></A>      write(*,*) ‘Image name: ‘, name </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929608"></A>      write(*,*) ‘Number of components: ‘, n_comps</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929609"></A>      write(*,*) ‘Number type: ‘, type_string </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929610"></A>      write(*,*) ‘Interlace mode: ‘, interlace_string</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929611"></A>      write(*,*) ‘Dimnesions: ‘, dim_sizes(1), dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929612"></A>      write(*,*) ‘Number of image attributes: ‘, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929613"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929614"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929615"></A>C     Terminate access to the current raster image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929616"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929617"></A>      status = mgendac(ri_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929618"></A>100   continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929619"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929620"></A>C     Terminate access to the GR interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929621"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929622"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929623"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929624"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928573"></A>set_attribute.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929633"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929638"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929639"></A>#define  FILE_NAME          “General_RImages.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929640"></A>#define  IMAGE_NAME         “Image Array 2”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929641"></A>#define  F_ATT1_NAME        “File Attribute 1”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929642"></A>#define  F_ATT2_NAME        “File Attribute 2”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929643"></A>#define  RI_ATT1_NAME       “Image Attribute 1”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929644"></A>#define  RI_ATT2_NAME       “Image Attribute 2”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929645"></A>#define  F_ATT1_VAL         “Contents of First FILE Attribute”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929646"></A>#define  F_ATT2_VAL         “Contents of Second FILE Attribute”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929647"></A>#define  F_ATT1_N_VALUES    32</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929648"></A>#define  F_ATT2_N_VALUES    33</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929649"></A>#define  RI_ATT1_VAL        “Contents of IMAGE’s First Attribute”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929650"></A>#define  RI_ATT1_N_VALUES   35</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929651"></A>#define  RI_ATT2_N_VALUES   6</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929652"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929653"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929654"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929655"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929656"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929657"></A>   intn  status;         /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929658"></A>   int32 gr_id, ri_id, file_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929659"></A>         ri_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929660"></A>   int16 ri_attr_2[RI_ATT2_N_VALUES] = {1, 2, 3, 4, 5, 6};</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929661"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929662"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929663"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929664"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929665"></A>   * Open the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929666"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929667"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929668"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929669"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929670"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929671"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929672"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929673"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929674"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929675"></A>   * Set two file attributes to the file with names, data types, numbers of </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929676"></A>   * values, and values of the attributes specified.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929677"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929678"></A>   status = GRsetattr (gr_id, F_ATT1_NAME, DFNT_CHAR8, F_ATT1_N_VALUES, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929679"></A>                       (VOIDP)F_ATT1_VAL); </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929680"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929681"></A>   status = GRsetattr (gr_id, F_ATT2_NAME, DFNT_CHAR8, F_ATT2_N_VALUES, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929682"></A>                       (VOIDP)F_ATT2_VAL);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929683"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929684"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929685"></A>   * Obtain the index of the image named IMAGE_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929686"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929687"></A>   ri_index = GRnametoindex (gr_id, IMAGE_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929688"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929689"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929690"></A>   * Obtain the identifier of this image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929691"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929692"></A>   ri_id = GRselect (gr_id, ri_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929693"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929694"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929695"></A>   * Set two attributes to the image with names, data types, numbers of </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929696"></A>   * values, and values of the attributes specified.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929697"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929698"></A>   status = GRsetattr (ri_id, RI_ATT1_NAME, DFNT_CHAR8, RI_ATT1_N_VALUES, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929699"></A>                       (VOIDP)RI_ATT1_VAL);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929700"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929701"></A>   status = GRsetattr (ri_id, RI_ATT2_NAME, DFNT_INT16, RI_ATT2_N_VALUES, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929702"></A>                       (VOIDP)ri_attr_2);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929703"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929704"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929705"></A>   * Terminate access to the image and to the GR interface, and close the</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929706"></A>   * HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929707"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929708"></A>   status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929709"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929710"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929711"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929712"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928575"></A><A NAME="50593892_28310"></A>set_attribute.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929717"></A>      program  set_attribute</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929722"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929723"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929724"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929725"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929726"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929727"></A>      character*13 IMAGE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929728"></A>      character*16 F_ATT1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929729"></A>      character*16 F_ATT2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929730"></A>      character*17 RI_ATT1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929731"></A>      character*17 RI_ATT2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929732"></A>      character*32 F_ATT1_VAL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929733"></A>      character*33 F_ATT2_VAL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929734"></A>      integer      F_ATT1_N_VALUES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929735"></A>      integer      F_ATT2_N_VALUES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929736"></A>      character*35 RI_ATT1_VAL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929737"></A>      integer      RI_ATT1_N_VALUES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929738"></A>      integer      RI_ATT2_N_VALUES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929739"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929740"></A>      parameter (FILE_NAME    = ‘General_RImages.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929741"></A>     +           IMAGE_NAME   = ‘Image Array 2’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929742"></A>     +           F_ATT1_NAME  = ‘File Attribute 1’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929743"></A>     +           F_ATT2_NAME  = ‘File Attribute 2’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929744"></A>     +           RI_ATT1_NAME = ‘Image Attribute 1’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929745"></A>     +           RI_ATT2_NAME = ‘Image Attribute 2’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929746"></A>     +           F_ATT1_VAL   = ‘Contents of First FILE Attribute’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929747"></A>     +           F_ATT2_VAL   = ‘Contents of Second FILE Attribute’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929748"></A>     +           F_ATT1_N_VALUES = 32,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929749"></A>     +           F_ATT2_N_VALUES = 33,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929750"></A>     +           RI_ATT1_VAL = ‘Contents of IMAGE’’s First Attribute’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929751"></A>     +           RI_ATT1_N_VALUES = 35,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929752"></A>     +           RI_ATT2_N_VALUES = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929753"></A>      integer DFACC_WRITE, DFNT_INT16, DFNT_CHAR8</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929754"></A>      parameter (DFACC_WRITE  = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929755"></A>     +           DFNT_CHAR8   = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929756"></A>     +           DFNT_INT16   = 22)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929757"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929758"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929759"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929760"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929761"></A>      integer mgstart, mgscatt, mgsnatt , mgn2ndx,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929762"></A>     +        mgselct, mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929763"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929764"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929765"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929766"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929767"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929768"></A>      integer   file_id, gr_id, ri_id, ri_index</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929769"></A>      integer*2 ri_attr_2(RI_ATT2_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929770"></A>      integer   i</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929771"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929772"></A>      do 10 i = 1, RI_ATT2_N_VALUES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929773"></A>         ri_attr_2(i) = i</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929774"></A>10    continue </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929775"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929776"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929777"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929778"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929779"></A>C     Open the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929780"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929781"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929782"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929783"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929784"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929785"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929786"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929787"></A>C     Set two file attributes to the file with names, data type, numbers of</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929788"></A>C     values, and values of attributes specified.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929789"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929790"></A>      status = mgscatt(gr_id, F_ATT1_NAME, DFNT_CHAR8, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929791"></A>     +                 F_ATT1_N_VALUES, F_ATT1_VAL)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929792"></A>      status = mgscatt(gr_id, F_ATT2_NAME, DFNT_CHAR8, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929793"></A>     +                 F_ATT2_N_VALUES, F_ATT2_VAL)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929794"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929795"></A>C     Obtain the index of the image named IMAGE_NAMR.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929796"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929797"></A>      ri_index = mgn2ndx(gr_id, IMAGE_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929798"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929799"></A>C     Obtain the identifier of this image. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929800"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929801"></A>      ri_id = mgselct(gr_id, ri_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929802"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929803"></A>C     Set two attributes of the image with names, data types, number of</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929804"></A>C     values, and values of the attributes specified. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929805"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929806"></A>      status = mgscatt(ri_id, RI_ATT1_NAME, DFNT_CHAR8, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929807"></A>     +                 RI_ATT1_N_VALUES, RI_ATT1_VAL) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929808"></A>      status = mgsnatt(ri_id, RI_ATT2_NAME, DFNT_INT16, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929809"></A>     +                 RI_ATT2_N_VALUES, ri_attr_2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929810"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929811"></A>C     Terminate access to the image and to the GR interface,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929812"></A>C     and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929813"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929814"></A>      status = mgendac(ri_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929815"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929816"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929817"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929818"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928577"></A>get_attribute.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929827"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929832"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929833"></A>#define  FILE_NAME       “General_RImages.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929834"></A>#define  RI_ATTR_NAME    “Image Attribute 2”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929835"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929836"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929837"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929838"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929839"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929840"></A>   intn   status;          /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929841"></A>   int32  gr_id, ri_id, file_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929842"></A>          f_att_index,     /* index of file attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929843"></A>          ri_att_index,    /* index of raster image attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929844"></A>          data_type,       /* image data type */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929845"></A>          n_values,        /* number of values in an attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929846"></A>          value_index,     /* index of values in an attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929847"></A>          n_rimages,       /* number of raster images in the file */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929848"></A>          n_file_attrs;    /* number of file attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929849"></A>   char   attr_name[MAX_GR_NAME];  /* buffer to hold the attribute name     */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929850"></A>   VOIDP  data_buf;                /* buffer to hold the attribute values   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929851"></A>   int16 *int_ptr;      /* int16 pointer to point to a void data buffer     */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929852"></A>   char8 *char_ptr;     /* char8 pointer to point to a void data buffer     */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929853"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929854"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929855"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929856"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929857"></A>   * Open the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929858"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929859"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929860"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929861"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929862"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929863"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929864"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929865"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929866"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929867"></A>   * Determine the number of attributes in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929868"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929869"></A>   status = GRfileinfo (gr_id, &amp;n_rimages, &amp;n_file_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929870"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929871"></A>   if (status != FAIL &amp;&amp; n_file_attrs &gt; 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929872"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929873"></A>      for (f_att_index = 0; f_att_index &lt; n_file_attrs; f_att_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929874"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929875"></A>         /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929876"></A>         * Get information about the current file attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929877"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929878"></A>         status = GRattrinfo (gr_id, f_att_index, attr_name, &amp;data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929879"></A>                              &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929880"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929881"></A>         /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929882"></A>         * Allocate a buffer to hold the file attribute data.  In this example,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929883"></A>         * knowledge about the data type is assumed to be available from </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929884"></A>         * the previous example for simplicity.  In reality, the size</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929885"></A>         * of the type must be determined based on the machine where the </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929886"></A>         * program resides.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929887"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929888"></A>         if (data_type == DFNT_CHAR8)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929889"></A>         {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929890"></A>            data_buf = malloc (n_values * sizeof (char8));</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929891"></A>            if (data_buf == NULL)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929892"></A>            {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929893"></A>               printf (“Unable to allocate space for attribute data.\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929894"></A>               exit (1);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929895"></A>            }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929896"></A>         }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929897"></A>         else</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929898"></A>         {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929899"></A>            printf (“Unable to determine data type to allocate data buffer.\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929900"></A>            exit (1);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929901"></A>         }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929902"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929903"></A>         /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929904"></A>         * Read and display the attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929905"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929906"></A>         status = GRgetattr (gr_id, f_att_index, (VOIDP)data_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929907"></A>         char_ptr = (char8 *) data_buf;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929908"></A>         printf (“Attribute %s: “, attr_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929909"></A>         for (value_index = 0; value_index &lt; n_values; value_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929910"></A>            printf (“%c”, char_ptr[value_index]);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929911"></A>         printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929912"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929913"></A>         /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929914"></A>         * Free the space allocated for the data buffer.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929915"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929916"></A>         free (data_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929917"></A>      } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929918"></A>   } /* if */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929919"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929920"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929921"></A>   * Select the second image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929922"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929923"></A>   ri_id = GRselect (gr_id, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929924"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929925"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929926"></A>   * Find the image attribute named RI_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929927"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929928"></A>   ri_att_index = GRfindattr (ri_id, RI_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929929"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929930"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929931"></A>   * Get information about the attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929932"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929933"></A>   status = GRattrinfo (ri_id, ri_att_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929934"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929935"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929936"></A>   * Allocate a buffer to hold the file attribute data.  As mentioned above,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929937"></A>   * knowledge about the data type is assumed to be available from</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929938"></A>   * the previous example for simplicity.  In reality, the size of the </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929939"></A>   * type must be determined based on the machine where the program resides.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929940"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929941"></A>   if (data_type == DFNT_INT16)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929942"></A>      data_buf = malloc (n_values * sizeof (int16));</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929943"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929944"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929945"></A>   * Read and display the attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929946"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929947"></A>   status = GRgetattr (ri_id, ri_att_index, (VOIDP)data_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929948"></A>   printf (“\nAttribute %s: “, RI_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929949"></A>   int_ptr = (int16 *)data_buf;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929950"></A>   for (value_index = 0; value_index &lt; n_values; value_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929951"></A>      printf (“%d “, int_ptr[value_index]);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929952"></A>   printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929953"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929954"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929955"></A>   * Free the space allocated for the data buffer.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929956"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929957"></A>   free (data_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929958"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929959"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929960"></A>   * Terminate access to the raster image and to the GR interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929961"></A>   * close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929962"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929963"></A>   status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929964"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929965"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929966"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929967"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928579"></A><A NAME="50593892_21808"></A>get_attribute.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929980"></A>      program  get_attribute</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929985"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929986"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929987"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929988"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929989"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929990"></A>      character*17 RI_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929991"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929992"></A>      parameter (FILE_NAME    = ‘General_RImages.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929993"></A>     +           RI_ATTR_NAME  = ‘Image Attribute 2’)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929994"></A>      integer DFACC_READ, DFNT_INT16, DFNT_CHAR8</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929995"></A>      parameter (DFACC_READ   = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929996"></A>     +           DFNT_CHAR8   = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929997"></A>     +           DFNT_INT16   = 22)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929998"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-929999"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930000"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930001"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930002"></A>      integer mgstart, mgfinfo, mgatinf, mggcatt, mggnatt , mgfndat,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930003"></A>     +        mgselct, mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930004"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930005"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930006"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930007"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930008"></A>      integer      status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930009"></A>      integer      file_id, gr_id, ri_id</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930010"></A>      integer      f_att_index, ri_att_index, data_type, n_values </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930011"></A>      integer      n_rimages, n_file_attrs </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930012"></A>      integer*2    int_buf(10)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930013"></A>      character*17 attr_name</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930014"></A>      character*80 char_buf</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930015"></A>      integer      i</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930016"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930017"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930018"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930019"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930020"></A>C     Open the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930021"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930022"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930023"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930024"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930025"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930026"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930027"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930028"></A>C     Determine the number of attributes in the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930029"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930030"></A>      status = mgfinfo(gr_id, n_rimages, n_file_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930031"></A>      if ((status .NE. -1) .AND. (n_file_attrs .GT. 0)) then</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930032"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930033"></A>         do 10 f_att_index = 0, n_file_attrs-1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930034"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930035"></A>C        Get information about the current file attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930036"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930037"></A>         status = mgatinf(gr_id, f_att_index, attr_name, data_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930038"></A>     +                    n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930039"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930040"></A>C        Check whether data type is DFNT_CHAR8 in order to use allocated buffer.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930041"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930042"></A>         if(data_type .NE. DFNT_CHAR8) then</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930043"></A>            write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930044"></A>     +      ‘Unable to determine data type to use allocated buffer’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930045"></A>         else</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930046"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930047"></A>C           Read and display the attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930048"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930049"></A>            status = mggcatt(gr_id, f_att_index, char_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930050"></A>            write(*,*) ‘Attribute ‘, attr_name, ‘ : ‘, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930051"></A>     +                 char_buf(1:n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930052"></A>         endif</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930053"></A>10       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930054"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930055"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930056"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930057"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930058"></A>C     Select the second image in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930059"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930060"></A>      ri_id = mgselct(gr_id, 1) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930061"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930062"></A>C     Find the image attribute named RI_ATTR_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930063"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930064"></A>      ri_att_index = mgfndat(ri_id, RI_ATTR_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930065"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930066"></A>C     Get information about the attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930067"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930068"></A>      status = mgatinf(ri_id, ri_att_index, attr_name, data_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930069"></A>     +                 n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930070"></A>C      </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930071"></A>C     Read and display attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930072"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930073"></A>      status = mggnatt(ri_id, ri_att_index, int_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930074"></A>      write(*,*) ‘Attributes :’, (int_buf(i), i = 1, n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930075"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930076"></A>C     Terminate access to the image and to the GR interface,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930077"></A>C     and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930078"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930079"></A>      status = mgendac(ri_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930080"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930081"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930082"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930083"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928581"></A>write_palette.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930088"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930093"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930094"></A>#define  FILE_NAME         “Image_with_Palette.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930095"></A>#define  NEW_IMAGE_NAME    “Image with Palette”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930096"></A>#define  N_COMPS_IMG       2       /* number of image components */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930097"></A>#define  X_LENGTH          5</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930098"></A>#define  Y_LENGTH          5</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930099"></A>#define  N_ENTRIES         256     /* number of entries in the palette */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930100"></A>#define  N_COMPS_PAL       3       /* number of palette’s components */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930101"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930102"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930103"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930104"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930105"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930106"></A>   intn  status,         /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930107"></A>         i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930108"></A>   int32 file_id, gr_id, ri_id, pal_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930109"></A>         interlace_mode, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930110"></A>         start[2],     /* holds where to start to write for each dimension  */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930111"></A>         edges[2],     /* holds how long to write for each dimension */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930112"></A>         dim_sizes[2];  /* sizes of the two dimensions of the image array   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930113"></A>   uint8 image_buf[Y_LENGTH][X_LENGTH][N_COMPS_IMG]; /* data of first image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930114"></A>   uint8 palette_buf[N_ENTRIES][N_COMPS_PAL];</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930115"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930116"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930117"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930118"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930119"></A>   * Open the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930120"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930121"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930122"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930123"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930124"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930125"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930126"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930127"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930128"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930129"></A>   * Define the dimensions and interlace mode of the image. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930130"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930131"></A>   dim_sizes[0] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930132"></A>   dim_sizes[1] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930133"></A>   interlace_mode = MFGR_INTERLACE_PIXEL;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930134"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930135"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930136"></A>   * Create the image named NEW_IMAGE_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930137"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930138"></A>   ri_id = GRcreate (gr_id, NEW_IMAGE_NAME, N_COMPS_IMG, DFNT_UINT8, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930139"></A>                     interlace_mode, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930140"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930141"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930142"></A>   * Fill the image data buffer with values.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930143"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930144"></A>   for (i = 0; i &lt; Y_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930145"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930146"></A>      for (j = 0; j &lt; X_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930147"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930148"></A>         image_buf[i][j][0] = (i + j) + 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930149"></A>         image_buf[i][j][1] = (i + j) + 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930150"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930151"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930152"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930153"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930154"></A>   * Define the size of the data to be written, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930155"></A>   * and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930156"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930157"></A>   start[0] = start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930158"></A>   edges[0] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930159"></A>   edges[1] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930160"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930161"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930162"></A>   * Write the data in the buffer into the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930163"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930164"></A>   status = GRwriteimage (ri_id, start, NULL, edges, (VOIDP)image_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930165"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930166"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930167"></A>   * Initialize the palette to grayscale. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930168"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930169"></A>   for (i = 0; i &lt; N_ENTRIES; i++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930170"></A>      palette_buf[i][0] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930171"></A>      palette_buf[i][1] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930172"></A>      palette_buf[i][2] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930173"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930174"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930175"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930176"></A>   * Define palette interlace mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930177"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930178"></A>   interlace_mode = MFGR_INTERLACE_PIXEL;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930179"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930180"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930181"></A>   * Get the identifier of the palette attached to the image NEW_IMAGE_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930182"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930183"></A>   pal_id = GRgetlutid (ri_id, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930184"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930185"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930186"></A>   * Write data to the palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930187"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930188"></A>   status = GRwritelut (pal_id, N_COMPS_PAL, DFNT_UINT8, interlace_mode,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930189"></A>                        N_ENTRIES, (VOIDP)palette_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930190"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930191"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930192"></A>   * Terminate access to the image and to the GR interface, and </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930193"></A>   * close the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930194"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930195"></A>   status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930196"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930197"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930198"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930199"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928590"></A><A NAME="50593892_17431"></A>write_palette.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930208"></A>      program  write_palette</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930213"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930214"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930215"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930216"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930217"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930218"></A>      character*18 NEW_IMAGE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930219"></A>      integer      X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930220"></A>      integer      Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930221"></A>      integer      N_ENTRIES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930222"></A>      integer      N_COMPS_IMG</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930223"></A>      integer      N_COMPS_PAL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930224"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930225"></A>      parameter (FILE_NAME       = ‘Image_with_Palette.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930226"></A>     +           NEW_IMAGE_NAME  = ‘Image with Palette’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930227"></A>     +           X_LENGTH        = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930228"></A>     +           Y_LENGTH        = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930229"></A>     +           N_ENTRIES       = 256,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930230"></A>     +           N_COMPS_IMG     = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930231"></A>     +           N_COMPS_PAL     = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930232"></A>      integer DFACC_CREATE, DFNT_CHAR8, DFNT_UINT8, MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930233"></A>      parameter (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930234"></A>     +           DFNT_CHAR8   = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930235"></A>     +           DFNT_UINT8   = 21,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930236"></A>     +           MFGR_INTERLACE_PIXEL = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930237"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930238"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930239"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930240"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930241"></A>      integer mgstart, mgcreat, mgwcimg, mggltid, mgwclut, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930242"></A>     +        mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930243"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930244"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930245"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930246"></A>      integer    file_id, gr_id, ri_id, pal_id</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930247"></A>      integer    interlace_mode</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930248"></A>      integer    start(2), stride(2), edges(2), dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930249"></A>      integer    status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930250"></A>      integer    i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930251"></A>      character  image_buf(N_COMPS_IMG, X_LENGTH, Y_LENGTH) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930252"></A>      character  palette_buf(N_COMPS_PAL, N_ENTRIES)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930253"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930254"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930255"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930256"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930257"></A>C     Create and open the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930258"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930259"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930260"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930261"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930262"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930263"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930264"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930265"></A>C     Define interlace mode and dimensions of the image.  </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930266"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930267"></A>      interlace_mode = MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930268"></A>      dim_sizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930269"></A>      dim_sizes(2) = Y_lENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930270"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930271"></A>C     Create the raster image array. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930272"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930273"></A>      ri_id = mgcreat(gr_id, NEW_IMAGE_NAME, N_COMPS_IMG, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930274"></A>     +                interlace_mode, dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930275"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930276"></A>C     Fill the image data buffer with values. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930277"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930278"></A>      do 20 i = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930279"></A>         do 10 j = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930280"></A>               image_buf(1,j,i) = char(i + j - 1 )</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930281"></A>               image_buf(2,j,i) = char(i + j) </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930282"></A>10       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930283"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930284"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930285"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930286"></A>C     Define the size of the data to be written, i.e., start from the origin</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930287"></A>C     and go as long as the length of each dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930288"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930289"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930290"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930291"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930292"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930293"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930294"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930295"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930296"></A>C     Write the data in the buffer into the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930297"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930298"></A>      status = mgwcimg(ri_id, start, stride, edges, image_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930299"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930300"></A>C     Initilaize the palette buffer to grayscale.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930301"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930302"></A>      do 40 i = 1, N_ENTRIES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930303"></A>          do 30 j = 1, N_COMPS_PAL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930304"></A>             palette_buf(j,i) = char(i)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930305"></A>30        continue</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930306"></A>40    continue </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930307"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930308"></A>C     Get the identifier of the palette attached to the image NEW_IMAGE_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930309"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930310"></A>      pal_id = mggltid(ri_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930311"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930312"></A>C     Set palette interlace mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930313"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930314"></A>      interlace_mode = MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930315"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930316"></A>C     Write data to the palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930317"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930318"></A>      status = mgwclut(pal_id, N_COMPS_PAL, DFNT_UINT8, interlace_mode,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930319"></A>     +                 N_ENTRIES, palette_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930320"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930321"></A>C     Terminate access to the raster image and to the GR interface,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930322"></A>C     and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930323"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930324"></A>      status = mgendac(ri_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930325"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930326"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930327"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930328"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928592"></A>read_palette.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930341"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930346"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930347"></A>#define  FILE_NAME      “Image_with_Palette.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930348"></A>#define  IMAGE_NAME     “Image with Palette”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930349"></A>#define  N_ENTRIES      256     /* number of elements of each color */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930350"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930351"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930352"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930353"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930354"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930355"></A>   intn  status,         /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930356"></A>         i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930357"></A>   int32 file_id, gr_id, ri_id, pal_id, ri_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930358"></A>   int32 data_type, n_comps, n_entries, interlace_mode; </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930359"></A>   uint8 palette_data[N_ENTRIES][3];        /* static because of fixed size */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930360"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930361"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930362"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930363"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930364"></A>   * Open the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930365"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930366"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930367"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930368"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930369"></A>   * Initiate the GR interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930370"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930371"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930372"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930373"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930374"></A>   * Get the index of the image IMAGR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930375"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930376"></A>   ri_index = GRnametoindex (gr_id, IMAGE_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930377"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930378"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930379"></A>   * Get image identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930380"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930381"></A>   ri_id = GRselect (gr_id, ri_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930382"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930383"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930384"></A>   * Get the identifier of the palette attached to the image. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930385"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930386"></A>   pal_id = GRgetlutid (ri_id, ri_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930387"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930388"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930389"></A>   * Obtain and display information about the palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930390"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930391"></A>   status = GRgetlutinfo (pal_id, &amp;n_comps, &amp;data_type, &amp;interlace_mode, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930392"></A>                          &amp;n_entries);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930393"></A>   printf (“Palette: %d components; %d entries\n”, n_comps, n_entries); </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930394"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930395"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930396"></A>   * Read the palette data. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930397"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930398"></A>   status = GRreadlut (pal_id, (VOIDP)palette_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930399"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930400"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930401"></A>   * Display the palette data.  Recall that HDF supports only 256 colors.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930402"></A>   * Each color is defined by its 3 components. Therefore, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930403"></A>   * verifying the value of n_entries and n_comps is not necessary and </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930404"></A>   * the buffer to hold the palette data can be static.  However, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930405"></A>   * if more values or colors are added to the model, these parameters </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930406"></A>   * must be checked to allocate sufficient space when reading a palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930407"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930408"></A>   printf (“  Palette Data: \n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930409"></A>   for (i=0; i&lt; n_entries; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930410"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930411"></A>      for (j = 0; j &lt; n_comps; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930412"></A>         printf (“%i “, palette_data[i][j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930413"></A>      printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930414"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930415"></A>   printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930416"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930417"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930418"></A>   * Terminate access to the image and to the GR interface, and </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930419"></A>   * close the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930420"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930421"></A>   status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930422"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930423"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930424"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930425"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-928594"></A><A NAME="50593892_37811"></A>read_palette.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930430"></A>      program  read_palette</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930435"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930436"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930437"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930438"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930439"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930440"></A>      character*18 IMAGE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930441"></A>      integer      N_ENTRIES</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930442"></A>      integer      N_COMPS_PAL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930443"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930444"></A>      parameter (FILE_NAME   = ‘Image_with_Palette.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930445"></A>     +           IMAGE_NAME  = ‘Image with Palette’,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930446"></A>     +           N_COMPS_PAL = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930447"></A>     +           N_ENTRIES   = 256)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930448"></A>      integer DFACC_READ, DFNT_CHAR8, DFNT_UINT8, MFGR_INTERLACE_PIXEL</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930449"></A>      parameter (DFACC_READ  = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930450"></A>     +           DFNT_CHAR8  = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930451"></A>     +           DFNT_UINT8  = 21,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930452"></A>     +           MFGR_INTERLACE_PIXEL = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930453"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930454"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930455"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930456"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930457"></A>      integer mgstart, mgn2ndx, mgselct, mggltid, mgglinf, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930458"></A>     +        mgrclut, mgendac, mgend </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930459"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930460"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930461"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930462"></A>      integer    file_id, gr_id, ri_id, ri_index, pal_id, pal_index</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930463"></A>      integer    interlace_mode</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930464"></A>      integer    data_type, n_comps, n_entries_out</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930465"></A>      integer    status</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930466"></A>      integer    i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930467"></A>      character  palette_data(N_COMPS_PAL, N_ENTRIES)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930468"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930469"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930470"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930471"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930472"></A>C     Open the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930473"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930474"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930475"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930476"></A>C     Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930477"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930478"></A>      gr_id = mgstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930479"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930480"></A>C     Get the index of the image IMAGE_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930481"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930482"></A>      ri_index = mgn2ndx(gr_id, IMAGE_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930483"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930484"></A>C     Get the image identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930485"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930486"></A>      ri_id = mgselct(gr_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930487"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930488"></A>C     Get the identifier of the palette attached to the image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930489"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930490"></A>      pal_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930491"></A>      pal_id = mggltid(ri_id, pal_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930492"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930493"></A>C     Obtain information about the palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930494"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930495"></A>      status = mgglinf(pal_id, n_comps, data_type, interlace_mode,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930496"></A>     +                 n_entries_out)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930497"></A>      write(*,*) ‘ Palette: ‘, n_comps, ‘ components;  ‘, </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930498"></A>     +           n_entries_out, ‘ entries’</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930499"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930500"></A>C     Read the palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930501"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930502"></A>      status = mgrclut(pal_id, palette_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930503"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930504"></A>C     Display the palette data.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930505"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930506"></A>      write(*,*) “Palette data”</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930507"></A>      do 10 i = 1, n_entries_out</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930508"></A>         write(*,*) (ichar(palette_data(j,i)), j = 1, n_comps)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930509"></A>10    continue  </P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930510"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930511"></A>C     Terminate access to the raster image and to the GR interface,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930512"></A>C     and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930513"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930514"></A>      status = mgendac(ri_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930515"></A>      status = mgend(gr_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930516"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930517"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930518"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930725"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593892_pgfId-930849"></A>write_chunks.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930939"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930940"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930941"></A>#define  FILE_NAME     &quot;Image_Chunked.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930942"></A>#define  IMAGE_NAME    &quot;Image with Chunks&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930943"></A>#define  X_LENGTH      10    /* number of rows in the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930944"></A>#define  Y_LENGTH      6     /* number of columns in the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930945"></A>#define  NCOMPS        3     /* number of components in the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930946"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930947"></A>int main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930948"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930949"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930950"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930951"></A>   intn  status;         /* status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930952"></A>   int32 file_id,        /* HDF file identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930953"></A>         gr_id,          /* GR interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930954"></A>         ri_id,          /* raster image identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930955"></A>         dims[2],        /* dimension sizes of the image array */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930956"></A>         origin[2],      /* origin position to write each chunk */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930957"></A>         interlace_mode; /* interlace mode of the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930958"></A>   HDF_CHUNK_DEF chunk_def;     /* Chunk defintion set */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930959"></A>   int32 chunk00[] = {1, 2, 3, 4, 5, 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930960"></A>                      7, 8, 9, 10, 11, 12,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930961"></A>                      13, 14, 15, 16, 17, 18 };</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930962"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930963"></A>   int32 chunk01[] = {210, 211, 212, 220, 221, 222,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930964"></A>                      230, 231, 232, 240, 241, 242,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930965"></A>                      250, 251, 252, 260, 261, 262};</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930966"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930967"></A>   int32 chunk14[] = {1010, 1011, 1012, 1020, 1021, 1022,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930968"></A>                      1030, 1031, 1032, 1040, 1041, 1042,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930969"></A>                      1050, 1051, 1052, 1060, 1061, 1062};</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930970"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930971"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930972"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930973"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930974"></A>   * Create and open the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930975"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930976"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930977"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930978"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930979"></A>   * Initialize the GR interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930980"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930981"></A>   gr_id = GRstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930982"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930983"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930984"></A>   * Set dimensions of the image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930985"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930986"></A>   dims[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930987"></A>   dims[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930988"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930989"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930990"></A>   * Create the raster image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930991"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930992"></A>   ri_id = GRcreate (gr_id, IMAGE_NAME, NCOMPS, DFNT_INT32,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930993"></A>                     MFGR_INTERLACE_PIXEL, dims);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930994"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930995"></A>   * Define chunked image.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930996"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930997"></A>   chunk_def.comp.comp_type = COMP_CODE_DEFLATE;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930998"></A>   chunk_def.comp.cinfo.deflate.level = 6;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930999"></A>   chunk_def.comp.chunk_lengths[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931000"></A>   chunk_def.comp.chunk_lengths[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931001"></A>   status = GRsetchunk (ri_id, chunk_def, HDF_CHUNK | HDF_COMP);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931002"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931003"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931004"></A>   * Write first chunk(0,0).</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931005"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931006"></A>   origin[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931007"></A>   origin[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931008"></A>   status = GRwritechunk (ri_id, origin, (VOIDP)chunk00);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931009"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931010"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931011"></A>   * Write second chunk(0,1).</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931012"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931013"></A>   origin[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931014"></A>   origin[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931015"></A>   status = GRwritechunk (ri_id, origin, (VOIDP)chunk01);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931016"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931017"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931018"></A>   * Write third chunk(1,4).</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931019"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931020"></A>   origin[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931021"></A>   origin[1] = 4;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931022"></A>   status = GRwritechunk (ri_id, origin, (VOIDP)chunk14);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931023"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931024"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931025"></A>   * Terminate access to the raster image and to the GR interface and,</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931026"></A>   * close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931027"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931028"></A>   status = GRendaccess (ri_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931029"></A>   status = GRend (gr_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931030"></A>   status = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931031"></A>   return 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-931032"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593892_pgfId-930604"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928574"></A><A NAME="50593893_37759"></A>create_vgroups.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928579"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928584"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928585"></A>#define  FILE_NAME    “Two_Vgroups.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928586"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928587"></A>main()</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928588"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928589"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928590"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928591"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928592"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928593"></A>         vgroup_ref = -1,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928594"></A>         vgroup1_id, vgroup2_id, file_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928595"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928596"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928597"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928598"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928599"></A>   * Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928600"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928601"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928602"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928603"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928604"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928605"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928606"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928607"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928608"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928609"></A>   * Create the first vgroup.  Note that the vgroup reference number is set</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928610"></A>   * to -1 for creating and the access mode is “w” for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928611"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928612"></A>   vgroup1_id = Vattach (file_id, vgroup_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928613"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928614"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928615"></A>   * Create the second vgroup. </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928616"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928617"></A>   vgroup2_id = Vattach (file_id, vgroup_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928618"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928619"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928620"></A>   * Any operations on the vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928621"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928622"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928623"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928624"></A>   * Terminate access to the first vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928625"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928626"></A>   status_32 = Vdetach (vgroup1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928627"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928628"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928629"></A>   * Terminate access to the second vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928630"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928631"></A>   status_32 = Vdetach (vgroup2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928632"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928633"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928634"></A>   * Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928635"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928636"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928637"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928638"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928639"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928575"></A><A NAME="50593893_30235"></A>create_vgroups.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928646"></A>      program  create_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928651"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928652"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928653"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928654"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928655"></A>      character*15 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928656"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928657"></A>      parameter (FILE_NAME = ‘Two_Vgroups.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928658"></A>      integer DFACC_CREATE</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928659"></A>      parameter (DFACC_CREATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928660"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928661"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928662"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928663"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928664"></A>      integer vfstart, vfatch, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928665"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928666"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928667"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928668"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928669"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928670"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928671"></A>      integer vgroup1_id, vgroup2_id, vgroup_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928672"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928673"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928674"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928675"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928676"></A>C     Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928677"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928678"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928679"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928680"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928681"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928682"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928683"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928684"></A>C     Create the first vgroup. Note that the vgroup reference number is set</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928685"></A>C     to -1 for creating and the access mode is ‘w’ for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928686"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928687"></A>      vgroup_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928688"></A>      vgroup1_id = vfatch(file_id, vgroup_ref, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928689"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928690"></A>C     Create the second vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928691"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928692"></A>      vgroup2_id = vfatch(file_id, vgroup_ref, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928693"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928694"></A>C     Any operations on the vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928695"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928696"></A>C     ..............................</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928697"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928698"></A>C     Terminate access to the first vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928699"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928700"></A>      status = vfdtch(vgroup1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928701"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928702"></A>C     Terminate access to the second vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928703"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928704"></A>      status = vfdtch(vgroup2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928705"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928706"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928707"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928708"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928709"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928710"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928711"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928532"></A><A NAME="50593893_33782"></A>add_sds_to_vgroup.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928717"></A>#include   “hdf.h”      /* Note: in this example, hdf.h can be omitted...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928722"></A>#include   “mfhdf.h”    /* ...since mfhdf.h already includes hdf.h */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928723"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928724"></A>#define  FILE_NAME    “General_Vgroups.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928725"></A>#define  SDS_NAME     “Test SD”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928726"></A>#define  VG_NAME      “SD Vgroup”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928727"></A>#define  VG_CLASS     “Common Vgroups”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928728"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928729"></A>main()</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928730"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928731"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928732"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928733"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928734"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928735"></A>          sd_id,        /* SD interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928736"></A>          sds_id,       /* data set identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928737"></A>          sds_ref,      /* reference number of the data set */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928738"></A>          dim_sizes[1], /* dimension of the data set - only one */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928739"></A>          rank = 1,     /* rank of the data set array */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928740"></A>          vgroup_id,    /* vgroup identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928741"></A>          file_id;      /* HDF file identifier, same for V interface */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928742"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928743"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928744"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928745"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928746"></A>   * Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928747"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928748"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928749"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928750"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928751"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928752"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928753"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928754"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928755"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928756"></A>   * Initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928757"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928758"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928759"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928760"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928761"></A>   * Set the size of the SDS’s dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928762"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928763"></A>   dim_sizes[0] = 10;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928764"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928765"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928766"></A>   * Create the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928767"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928768"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, rank, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928769"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928770"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928771"></A>   * Create a vgroup and set its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928772"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928773"></A>   vgroup_id = Vattach (file_id, -1, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928774"></A>   status_32 = Vsetname (vgroup_id, VG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928775"></A>   status_32 = Vsetclass (vgroup_id, VG_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928776"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928777"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928778"></A>   * Obtain the reference number of the SDS using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928779"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928780"></A>   sds_ref = SDidtoref (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928781"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928782"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928783"></A>   * Add the SDS to the vgroup.  Note: the tag DFTAG_NDG is used</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928784"></A>   * when adding an SDS.  Refer to Appendix A for the entire list of tags.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928785"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928786"></A>   status_32 = Vaddtagref (vgroup_id, DFTAG_NDG, sds_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928787"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928788"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928789"></A>   * Terminate access to the SDS and to the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928790"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928791"></A>   status_n = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928792"></A>   status_n = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928793"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928794"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928795"></A>   * Terminate access to the vgroup and to the V interface, and </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928796"></A>   * close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928797"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928798"></A>   status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928799"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928800"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928801"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928802"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928534"></A><A NAME="50593893_13760"></A>add_sds_to_vgroup.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928811"></A>      program  add_SDS_to_a_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928816"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928817"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928818"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928819"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928820"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928821"></A>      character*7  SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928822"></A>      character*9  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928823"></A>      character*13 VG_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928824"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928825"></A>      parameter (FILE_NAME = ‘General_Vgroups.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928826"></A>     +           SDS_NAME  = ‘Test SD’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928827"></A>     +           VG_NAME   = ‘SD Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928828"></A>     +           VG_CLASS  = ‘Common Vgroups’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928829"></A>      integer DFACC_CREATE, DFACC_WRITE </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928830"></A>      parameter (DFACC_CREATE = 4, DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928831"></A>      integer DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928832"></A>      parameter (DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928833"></A>      integer DFTAG_NDG</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928834"></A>      parameter (DFTAG_NDG = 720)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928835"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928836"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928837"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928838"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928839"></A>      integer vfstart, vfatch, vfsnam, vfscls, vfadtr, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928840"></A>      integer sfstart, sfcreate, sfid2ref, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928841"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928842"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928843"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928844"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928845"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928846"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928847"></A>      integer vgroup_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928848"></A>      integer sd_id, sds_id, sds_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928849"></A>      integer dim_sizes(1), rank</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928850"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928851"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928852"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928853"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928854"></A>C     Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928855"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928856"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928857"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928858"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928859"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928860"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928861"></A>       </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928862"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928863"></A>C     Initialize SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928864"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928865"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE) </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928866"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928867"></A>C     Set the rank and the size of SDS’s dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928868"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928869"></A>      rank = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928870"></A>      dim_sizes(1) = 10</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928871"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928872"></A>C     Create the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928873"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928874"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, rank, dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928875"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928876"></A>C     Create a vgroup and set its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928877"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928878"></A>      vgroup_id = vfatch(file_id, -1 , ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928879"></A>      status    = vfsnam(vgroup_id, VG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928880"></A>      status    = vfscls(vgroup_id, VG_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928881"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928882"></A>C     Obtain the reference number of the SDS using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928883"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928884"></A>      sds_ref = sfid2ref(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928885"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928886"></A>C     Add the SDS to the vgroup. Note: the tag DFTAG_NDG is used</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928887"></A>C     when adding an SDS.  Refer to HDF Reference Manual, Section III, Table 3K,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928888"></A>C     for the entire list of tags.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928889"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928890"></A>      status = vfadtr(vgroup_id, DFTAG_NDG, sds_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928891"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928892"></A>C     Terminate access to the SDS and to the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928893"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928894"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928895"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928896"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928897"></A>C     Terminate access to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928898"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928899"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928900"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928901"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928902"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928903"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928904"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928905"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928906"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928536"></A>insert_vdatas_to_vgroup.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928911"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928916"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928917"></A>#define  FILE_NAME         “General_Vgroups.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928918"></A>#define  N_RECORDS         30       /* number of records in the vdatas */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928919"></A>#define  ORDER             3        /* order of field FIELD_VD2 */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928920"></A>#define  VG_NAME           “Vertices”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928921"></A>#define  VG_CLASS          “Vertex Set”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928922"></A>#define  VD1_NAME          “X,Y Coordinates”   /* first vdata to hold X,Y...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928923"></A>#define  VD1_CLASS         “Position”          /*...values of the vertices */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928924"></A>#define  VD2_NAME          “Temperature”       /* second vdata to hold the...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928925"></A>#define  VD2_CLASS         “Property List”     /*...temperature field */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928926"></A>#define  VD3_NAME          “Node List”         /* third vdata to hold...*/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928927"></A>#define  VD3_CLASS         “Mesh”              /*...the list of nodes */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928928"></A>#define  FIELD1_VD1        “PX”    /* first field of first vdata - X values */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928929"></A>#define  FIELD2_VD1        “PY”/* second field of first vdata - Y values */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928930"></A>#define  FIELD_VD2         “TMP”/* field of third vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928931"></A>#define  FIELD_VD3         “PLIST”/* field of second vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928932"></A>#define  FIELDNAME_LIST    “PX,PY” /* field name list for first vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928933"></A>/* Note that the second and third vdatas can use the field names as </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928934"></A>   the field name lists unless more fields are added to a vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928935"></A>   Then a field name list is needed for that vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928936"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928937"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928938"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928939"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928940"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928941"></A>   intn     status_n;   /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928942"></A>   int32    status_32,  /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928943"></A>            file_id, vgroup_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928944"></A>            vdata1_id, vdata2_id, vdata3_id; </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928945"></A>   int32    num_of_records,           /* number of records actually written */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928946"></A>            vd_index;                 /* position of a vdata in the vgroup  */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928947"></A>   int8     i, j, k = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928948"></A>   float32  pxy[N_RECORDS][2] =       /* buffer for data of the first vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928949"></A>		  	{-1.5, 2.3, -1.5, 1.98, -2.4, .67,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928950"></A>   			-3.4, 1.46, -.65, 3.1, -.62, 1.23,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928951"></A>   			-.4, 3.8, -3.55, 2.3, -1.43, 2.44,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928952"></A>   			.23, 1.13, -1.4, 5.43, -1.4, 5.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928953"></A>   			-3.4, 3.85, -.55, .3, -.21, 1.22,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928954"></A>   			-1.44, 1.9, -1.4, 2.8, .94, 1.78,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928955"></A>   			-.4, 2.32, -.87, 1.99, -.54, 4.11,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928956"></A>   			-1.5, 1.35, -1.4, 2.21, -.22, 1.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928957"></A>   			-1.1, 4.55, -.44, .54, -1.11, 3.93,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928958"></A>   			-.76, 1.9, -2.34, 1.7, -2.2, 1.21};</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928959"></A>   float32  tmp[N_RECORDS];          /* buffer for data of the second vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928960"></A>   int16    plist[N_RECORDS][3];     /* buffer for data of the third vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928961"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928962"></A>   /********************** End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928963"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928964"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928965"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928966"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928967"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928968"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928969"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928970"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928971"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928972"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928973"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928974"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928975"></A>   * Buffer the data for the second and third vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928976"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928977"></A>   for (i = 0; i &lt; N_RECORDS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928978"></A>      for (j = 0; j &lt; ORDER; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928979"></A>         plist[i][j] = ++k;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928980"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928981"></A>   for (i = 0; i &lt; N_RECORDS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928982"></A>      tmp[i] = i * 10.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928983"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928984"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928985"></A>   * Create the vgroup then set its name and class.  Note that the vgroup’s</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928986"></A>   * reference number is set to -1 for creating and the access mode is “w” for</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928987"></A>   * writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928988"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928989"></A>   vgroup_id = Vattach (file_id, -1, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928990"></A>   status_32 = Vsetname (vgroup_id, VG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928991"></A>   status_32 = Vsetclass (vgroup_id, VG_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928992"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928993"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928994"></A>   * Create the first vdata then set its name and class. Note that the vdata’s</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928995"></A>   * reference number is set to -1 for creating and the access mode is “w” for</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928996"></A>   * writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928997"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928998"></A>   vdata1_id = VSattach (file_id, -1, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928999"></A>   status_32 = VSsetname (vdata1_id, VD1_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929000"></A>   status_32 = VSsetclass (vdata1_id, VD1_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929001"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929002"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929003"></A>   * Introduce and define the fields of the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929004"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929005"></A>   status_n = VSfdefine (vdata1_id, FIELD1_VD1, DFNT_FLOAT32, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929006"></A>   status_n = VSfdefine (vdata1_id, FIELD2_VD1, DFNT_FLOAT32, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929007"></A>   status_n = VSsetfields (vdata1_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929008"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929009"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929010"></A>   * Write the buffered data into the first vdata with full interlace mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929011"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929012"></A>   num_of_records = VSwrite (vdata1_id, (uint8 *)pxy, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929013"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929014"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929015"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929016"></A>   * Insert the vdata into the vgroup using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929017"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929018"></A>   vd_index = Vinsert (vgroup_id, vdata1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929019"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929020"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929021"></A>   * Detach from the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929022"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929023"></A>   status_32 = VSdetach (vdata1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929024"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929025"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929026"></A>   * Create, write, and insert the second vdata to the vgroup using</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929027"></A>   * steps similar to those used for the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929028"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929029"></A>   vdata2_id = VSattach (file_id, -1, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929030"></A>   status_32 = VSsetname (vdata2_id, VD2_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929031"></A>   status_32 = VSsetclass (vdata2_id, VD2_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929032"></A>   status_n = VSfdefine (vdata2_id, FIELD_VD2, DFNT_FLOAT32, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929033"></A>   status_n = VSsetfields (vdata2_id, FIELD_VD2);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929034"></A>   num_of_records = VSwrite (vdata2_id, (uint8 *)tmp, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929035"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929036"></A>   vd_index = Vinsert (vgroup_id, vdata2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929037"></A>   status_32 = VSdetach (vdata2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929038"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929039"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929040"></A>   * Create, write, and insert the third vdata to the vgroup using </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929041"></A>   * steps similar to those used for the first and second vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929042"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929043"></A>   vdata3_id = VSattach (file_id, -1, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929044"></A>   status_32 = VSsetname (vdata3_id, VD3_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929045"></A>   status_32 = VSsetclass (vdata3_id, VD3_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929046"></A>   status_n = VSfdefine (vdata3_id, FIELD_VD3, DFNT_INT16, 3);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929047"></A>   status_n = VSsetfields (vdata3_id, FIELD_VD3);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929048"></A>   num_of_records = VSwrite (vdata3_id, (uint8 *)plist, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929049"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929050"></A>   vd_index = Vinsert (vgroup_id, vdata3_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929051"></A>   status_32 = VSdetach (vdata3_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929052"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929053"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929054"></A>   * Terminate access to the vgroup “Vertices”.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929055"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929056"></A>   status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929057"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929058"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929059"></A>   * Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929060"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929061"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929062"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929063"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929064"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928538"></A><A NAME="50593893_23601"></A>insert_vdatas_to_vgroup.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929077"></A>      program  add_vdatas_to_a_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929082"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929083"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929084"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929085"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929086"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929087"></A>      character*8  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929088"></A>      character*10 VG_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929089"></A>      character*15 VD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929090"></A>      character*8  VD1_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929091"></A>      character*11 VD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929092"></A>      character*13 VD2_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929093"></A>      character*9  VD3_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929094"></A>      character*4  VD3_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929095"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929096"></A>      parameter (FILE_NAME = ‘General_Vgroups.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929097"></A>     +           VG_NAME   = ‘Vertices’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929098"></A>     +           VG_CLASS  = ‘Vertex Set’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929099"></A>      parameter (VD1_NAME  = ‘X,Y Coordinates’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929100"></A>     +           VD2_NAME  = ‘Temperature’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929101"></A>     +           VD3_NAME  = ‘Node List’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929102"></A>      parameter (VD1_CLASS = ‘Position’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929103"></A>     +           VD2_CLASS = ‘Property List’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929104"></A>     +           VD3_CLASS = ‘Mesh’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929105"></A>      character*2 FIELD1_VD1</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929106"></A>      character*2 FIELD2_VD1</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929107"></A>      character*3 FIELD_VD2</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929108"></A>      character*4 FIELD_VD3</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929109"></A>      character*5 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929110"></A>      parameter (FIELD1_VD1 = ‘PX’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929111"></A>     +           FIELD2_VD1 = ‘PY’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929112"></A>     +           FIELD_VD2  = ‘TMP’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929113"></A>     +           FIELD_VD3  = ‘PLIST’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929114"></A>     +           FIELDNAME_LIST = ‘PX,PY’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929115"></A>      integer N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929116"></A>      parameter (N_RECORDS = 30)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929117"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929118"></A>      integer  DFACC_WRITE </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929119"></A>      parameter (DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929120"></A>      integer DFNT_FLOAT32, DFNT_INT16</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929121"></A>      parameter (DFNT_FLOAT32 = 5, DFNT_INT16 = 22)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929122"></A>      integer FULL_INTERLACE </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929123"></A>      parameter (FULL_INTERLACE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929124"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929125"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929126"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929127"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929128"></A>      integer vfstart, vfatch, vfsnam, vfscls, vfinsrt, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929129"></A>      integer vsfatch, vsfsnam, vsfscls, vsffdef, vsfsfld, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929130"></A>     +        vsfwrt, vsfwrtc, vsfdtch</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929131"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929132"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929133"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929134"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929135"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929136"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929137"></A>      integer vgroup_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929138"></A>      integer vdata1_id, vdata2_id, vdata3_id, vd_index </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929139"></A>      integer num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929140"></A>      integer i, j, k</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929141"></A>      real    pxy(2,N_RECORDS), tmp(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929142"></A>      integer plist(3,N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929143"></A>      data pxy /-1.5, 2.3, -1.5, 1.98, -2.4, .67,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929144"></A>     +          -3.4, 1.46, -.65, 3.1, -.62, 1.23,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929145"></A>     +          -.4, 3.8, -3.55, 2.3, -1.43, 2.44,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929146"></A>     +          .23, 1.13, -1.4, 5.43, -1.4, 5.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929147"></A>     +          -3.4, 3.85, -.55, .3, -.21, 1.22,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929148"></A>     +          -1.44, 1.9, -1.4, 2.8, .94, 1.78,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929149"></A>     +          -.4, 2.32, -.87, 1.99, -.54, 4.11,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929150"></A>     +          -1.5, 1.35, -1.4, 2.21, -.22, 1.8,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929151"></A>     +          -1.1, 4.55, -.44, .54, -1.11, 3.93,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929152"></A>     +          -.76, 1.9, -2.34, 1.7, -2.2, 1.21/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929153"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929154"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929155"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929156"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929157"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929158"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929159"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929160"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929161"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929162"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929163"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929164"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929165"></A>C     Buffer the data for the third and second vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929166"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929167"></A>      do 20 i = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929168"></A>         do 10 j = 1, 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929169"></A>            plist(j,i) = k </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929170"></A>            k = k+1</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929171"></A>10       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929172"></A>20    continue    </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929173"></A>      do 30 i = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929174"></A>         tmp(i) = (i-1) * 10.0</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929175"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929176"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929177"></A>C     Create a vgroup and set its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929178"></A>C     Note that the vgroup’s reference number is set to -1 for creating</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929179"></A>C     and the access mode is ‘w’ for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929180"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929181"></A>      vgroup_id = vfatch(file_id, -1 , ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929182"></A>      status    = vfsnam(vgroup_id, VG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929183"></A>      status    = vfscls(vgroup_id, VG_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929184"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929185"></A>C     Create the first vdata then set its name and class. Note that the vdata’s</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929186"></A>C     reference number is set to -1 for creating and the access mode is ‘w’ for</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929187"></A>C     writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929188"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929189"></A>      vdata1_id = vsfatch(file_id, -1, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929190"></A>      status = vsfsnam(vdata1_id, VD1_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929191"></A>      status = vsfscls(vdata1_id, VD1_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929192"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929193"></A>C     Introduce and define the fields of the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929194"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929195"></A>      status = vsffdef(vdata1_id, FIELD1_VD1, DFNT_FLOAT32, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929196"></A>      status = vsffdef(vdata1_id, FIELD2_VD1, DFNT_FLOAT32, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929197"></A>      status = vsfsfld(vdata1_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929198"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929199"></A>C     Write the buffered data into the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929200"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929201"></A>      num_of_records = vsfwrt(vdata1_id, pxy, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929202"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929203"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929204"></A>C     Insert the vdata into the vgroup using its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929205"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929206"></A>      vd_index = vfinsrt(vgroup_id, vdata1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929207"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929208"></A>C     Detach from the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929209"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929210"></A>      status = vsfdtch(vdata1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929211"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929212"></A>C     Create, write, and insert the second vdata to the vgroup using</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929213"></A>C     steps similar to those used for the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929214"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929215"></A>      vdata2_id = vsfatch(file_id, -1, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929216"></A>      status = vsfsnam(vdata2_id, VD2_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929217"></A>      status = vsfscls(vdata2_id, VD2_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929218"></A>      status = vsffdef(vdata2_id, FIELD_VD2, DFNT_FLOAT32, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929219"></A>      status = vsfsfld(vdata2_id, FIELD_VD2)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929220"></A>      num_of_records = vsfwrt(vdata2_id, tmp, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929221"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929222"></A>      vd_index = vfinsrt(vgroup_id, vdata2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929223"></A>      status = vsfdtch(vdata2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929224"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929225"></A>C     Create, write, and insert the third vdata to the vgroup using </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929226"></A>C     steps similar to those used for the first and second vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929227"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929228"></A>      vdata3_id = vsfatch(file_id, -1, ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929229"></A>      status = vsfsnam(vdata3_id, VD3_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929230"></A>      status = vsfscls(vdata3_id, VD3_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929231"></A>      status = vsffdef(vdata3_id, FIELD_VD3, DFNT_INT16, 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929232"></A>      status = vsfsfld(vdata3_id, FIELD_VD3)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929233"></A>      num_of_records = vsfwrtc(vdata3_id, plist, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929234"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929235"></A>      vd_index = vfinsrt(vgroup_id, vdata3_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929236"></A>      status = vsfdtch(vdata3_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929237"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929238"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929239"></A>C     Terminate access to the vgroup ‘Vertices’.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929240"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929241"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929242"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929243"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929244"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929245"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929246"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929247"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929248"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928540"></A>get_vgroup_info.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929261"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929266"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929267"></A>#define  FILE_NAME   “General_Vgroups.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929268"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929269"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929270"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929271"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929272"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929273"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929274"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929275"></A>          file_id, vgroup_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929276"></A>   int32  lone_vg_number,      /* current lone vgroup number */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929277"></A>          num_of_lones = 0;    /* number of lone vgroups */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929278"></A>   int32 *ref_array;    /* buffer to hold the ref numbers of lone vgroups   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929279"></A>   char   vgroup_name[VGNAMELENMAX], vgroup_class[VGNAMELENMAX];</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929280"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929281"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929282"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929283"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929284"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929285"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929286"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0); </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929287"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929288"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929289"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929290"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929291"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929292"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929293"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929294"></A>   * Get and print the names and class names of all the lone vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929295"></A>   * First, call Vlone with num_of_lones set to 0 to get the number of</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929296"></A>   * lone vgroups in the file, but not to get their reference numbers.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929297"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929298"></A>   num_of_lones = Vlone (file_id, NULL, num_of_lones );</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929299"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929300"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929301"></A>   * Then, if there are any lone vgroups, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929302"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929303"></A>   if (num_of_lones &gt; 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929304"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929305"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929306"></A>      * use the num_of_lones returned to allocate sufficient space for the</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929307"></A>      * buffer ref_array to hold the reference numbers of all lone vgroups,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929308"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929309"></A>      ref_array = (int32 *) malloc(sizeof(int32) * num_of_lones);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929310"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929311"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929312"></A>      * and call Vlone again to retrieve the reference numbers into </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929313"></A>      * the buffer ref_array.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929314"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929315"></A>      num_of_lones = Vlone (file_id, ref_array, num_of_lones);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929316"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929317"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929318"></A>      * Display the name and class of each lone vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929319"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929320"></A>      printf (“Lone vgroups in this file are:\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929321"></A>      for (lone_vg_number = 0; lone_vg_number &lt; num_of_lones; </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929322"></A>                                                            lone_vg_number++)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929323"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929324"></A>         /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929325"></A>         * Attach to the current vgroup then get and display its</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929326"></A>         * name and class. Note: the current vgroup must be detached before</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929327"></A>         * moving to the next.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929328"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929329"></A>         vgroup_id = Vattach (file_id, ref_array[lone_vg_number], “r”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929330"></A>         status_32 = Vgetname (vgroup_id, vgroup_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929331"></A>         status_32 = Vgetclass (vgroup_id, vgroup_class);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929332"></A>         printf (“   Vgroup name %s and class %s\n”, vgroup_name,  </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929333"></A>                     vgroup_class); </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929334"></A>         status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929335"></A>      } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929336"></A>   } /* if */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929337"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929338"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929339"></A>   * Terminate access to the V interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929340"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929341"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929342"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929343"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929344"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929345"></A>   * Free the space allocated by this program.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929346"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929347"></A>   free (ref_array);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929348"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929349"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928542"></A><A NAME="50593893_31879"></A>get_vgroup_info.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929358"></A>      program  getinfo_about_vgroup</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929363"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929364"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929365"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929366"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929367"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929368"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929369"></A>      parameter (FILE_NAME = ‘General_Vgroups.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929370"></A>      integer DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929371"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929372"></A>      integer SIZE</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929373"></A>      parameter(SIZE = 10)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929374"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929375"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929376"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929377"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929378"></A>      integer vfstart, vfatch, vfgnam, vfgcls, vflone, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929379"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929380"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929381"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929382"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929383"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929384"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929385"></A>      integer vgroup_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929386"></A>      integer lone_vg_number, num_of_lones</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929387"></A>      character*64 vgroup_name, vgroup_class</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929388"></A>      integer ref_array(SIZE)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929389"></A>      integer i</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929390"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929391"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929392"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929393"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929394"></A>C     Initialize ref_array.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929395"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929396"></A>      do 10 i = 1, SIZE</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929397"></A>         ref_array(i) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929398"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929399"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929400"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929401"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929402"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929403"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929404"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929405"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929406"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929407"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929408"></A>C     Get and print the name and class name of all lone vgroups.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929409"></A>C     First, call vflone with num_of_lones set to 0 to get the number of</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929410"></A>C     lone vgroups in the file and check whether size of ref_array is </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929411"></A>C     big enough to hold reference numbers of ALL lone groups.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929412"></A>C     If ref_array is not big enough, exit the program after displaying an</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929413"></A>C     informative message.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929414"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929415"></A>      num_of_lones = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929416"></A>      num_of_lones = vflone(file_id, ref_array, num_of_lones)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929417"></A>      if (num_of_lones .gt. SIZE) then</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929418"></A>      write(*,*) num_of_lones, ‘lone vgroups is found’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929419"></A>      write(*,*) ‘increase the size of ref_array to hold reference ‘</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929420"></A>      write(*,*) ‘numbers of all lone vgroups in the file’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929421"></A>      stop</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929422"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929423"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929424"></A>C     If there are any lone groups in the file,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929425"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929426"></A>      if (num_of_lones .gt. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929427"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929428"></A>C     call vflone again to retrieve the reference numbers into ref_array.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929429"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929430"></A>      num_of_lones = vflone(file_id, ref_array, num_of_lones)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929431"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929432"></A>C     Display the name and class of each vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929433"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929434"></A>      write(*,*) ‘Lone vgroups in the file are:’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929435"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929436"></A>      do 20 lone_vg_number = 1, num_of_lones</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929437"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929438"></A>C     Attach to the current vgroup, then get and display its name and class.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929439"></A>C     Note: the current vgroup must be detached before moving to the next.  </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929440"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929441"></A>      vgroup_name = ‘ ‘</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929442"></A>      vgroup_class = ‘ ‘</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929443"></A>      vgroup_id = vfatch(file_id, ref_array(lone_vg_number), ‘r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929444"></A>      status    = vfgnam(vgroup_id, vgroup_name)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929445"></A>      status    = vfgcls(vgroup_id, vgroup_class)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929446"></A>      write(*,*) ‘Vgroup name ‘ ,  vgroup_name</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929447"></A>      write(*,*) ‘Vgroup class ‘ , vgroup_class</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929448"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929449"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929450"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929451"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929452"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929453"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929454"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929455"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929456"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929457"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929458"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929459"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928544"></A>set_get_vgroup_attr.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929468"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929473"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929474"></A>#define  FILE_NAME      “General_Vgroups.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929475"></A>#define  VGROUP_NAME    “SD Vgroup”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929476"></A>#define  VGATTR_NAME    “First Attribute”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929477"></A>#define  N_ATT_VALUES   7              /* number of values in the attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929478"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929479"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929480"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929481"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929482"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929483"></A>   intn   status_n,     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929484"></A>          n_attrs;      /* number of attributes of the vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929485"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929486"></A>          file_id, vgroup_ref, vgroup_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929487"></A>          attr_index, i, vg_version,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929488"></A>          data_type, n_values, size;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929489"></A>   char   vg_attr[N_ATT_VALUES] = {‘v’,’g’,’r’,’o’,’u’,’p’,’\0’};</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929490"></A>   char   vgattr_buf[N_ATT_VALUES], attr_name[30];</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929491"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929492"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929493"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929494"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929495"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929496"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929497"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929498"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929499"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929500"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929501"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929502"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929503"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929504"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929505"></A>   * Get the reference number of the vgroup named VGROUP_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929506"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929507"></A>   vgroup_ref = Vfind (file_id, VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929508"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929509"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929510"></A>   * Attach to the vgroup found.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929511"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929512"></A>   vgroup_id = Vattach (file_id, vgroup_ref, “w”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929513"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929514"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929515"></A>   * Get and display the version of the attached vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929516"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929517"></A>   vg_version = Vgetversion (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929518"></A>   switch (vg_version) {</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929519"></A>        case VSET_NEW_VERSION:</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929520"></A>              printf (“\nVgroup %s is of the newest version, version 4\n”, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929521"></A>                   VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929522"></A>           break;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929523"></A>        case VSET_VERSION:</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929524"></A>              printf (“Vgroup %s is of a version between 3.2 and 4.0r2\n”, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929525"></A>                   VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929526"></A>           break;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929527"></A>        case VSET_OLD_VERSION:</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929528"></A>              printf (“Vgroup %s is of version before 3.2\n”, VGROUP_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929529"></A>           break;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929530"></A>        default:</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929531"></A>           printf (“Unknown version = %d\n”, vg_version);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929532"></A>        } /* switch */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929533"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929534"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929535"></A>   * Add the attribute named VGATTR_NAME to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929536"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929537"></A>   status_n = Vsetattr (vgroup_id, VGATTR_NAME, DFNT_CHAR, N_ATT_VALUES, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929538"></A>                        vg_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929539"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929540"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929541"></A>   * Get and display the number of attributes attached to this vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929542"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929543"></A>   n_attrs = Vnattrs (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929544"></A>   printf (“\nThis vgroup has %d attribute(s)\n”, n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929545"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929546"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929547"></A>   * Get and display the name and the number of values of each attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929548"></A>   * Note that the fourth and last parameters are set to NULL because the type </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929549"></A>   * and the size of the attribute are not desired.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929550"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929551"></A>   for (attr_index = 0; attr_index &lt; n_attrs; attr_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929552"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929553"></A>      status_n = Vattrinfo (vgroup_id, attr_index, attr_name, NULL, </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929554"></A>                            &amp;n_values, NULL);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929555"></A>      printf (“\nAttribute #%d is named %s and has %d values: “,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929556"></A>                            attr_index+1, attr_name, n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929557"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929558"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929559"></A>      * Get and display the attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929560"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929561"></A>      status_n = Vgetattr (vgroup_id, attr_index, vgattr_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929562"></A>      for (i = 0; i &lt; n_values; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929563"></A>         printf (“%c “, vgattr_buf[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929564"></A>      printf (“\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929565"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929566"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929567"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929568"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929569"></A>   * Terminate access to the vgroup and to the V interface, and close </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929570"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929571"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929572"></A>   status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929573"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929574"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929575"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929576"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929577"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928546"></A><A NAME="50593893_35626"></A>set_get_vgroup_attr.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929586"></A>      program  vgroup_attribute</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929591"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929592"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929593"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929594"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929595"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929596"></A>      character*9  VGROUP_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929597"></A>      character*15 VGATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929598"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929599"></A>      parameter (FILE_NAME    = ‘General_Vgroups.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929600"></A>     +           VGROUP_NAME  = ‘SD Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929601"></A>     +           VGATTR_NAME  = ‘First Attribute’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929602"></A>      integer VSET_NEW_VERSION, VSET_VERSION, VSET_OLD_VERSION</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929603"></A>      parameter (VSET_NEW_VERSION = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929604"></A>     +           VSET_VERSION     = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929605"></A>     +           VSET_OLD_VERSION = 2)  </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929606"></A>      integer DFACC_WRITE </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929607"></A>      parameter (DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929608"></A>      integer DFNT_CHAR</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929609"></A>      parameter (DFNT_CHAR = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929610"></A>      integer N_ATT_VALUES</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929611"></A>      parameter (N_ATT_VALUES = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929612"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929613"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929614"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929615"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929616"></A>      integer vfstart, vfatch, vfgver, vfscatt, vfnatts, vfainfo,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929617"></A>     +        vfind, vfgcatt, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929618"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929619"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929620"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929621"></A>      integer status, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929622"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929623"></A>      integer vgroup_id, vgroup_ref, vg_version</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929624"></A>      integer attr_index, i</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929625"></A>      integer data_type, n_values, size </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929626"></A>      character vg_attr(N_ATT_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929627"></A>      character vgattr_buf(N_ATT_VALUES), attr_name(30)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929628"></A>      data vg_attr /’v’,’g’,’r’,’o’,’u’,’p’/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929629"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929630"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929631"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929632"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929633"></A>C     Open the HDF file for reading/writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929634"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929635"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929636"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929637"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929638"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929639"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929640"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929641"></A>C     Get the reference number of the vgroup named VGROUP_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929642"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929643"></A>      vgroup_ref = vfind(file_id, VGROUP_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929644"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929645"></A>C     Attach to the vgroup found.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929646"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929647"></A>      vgroup_id = vfatch(file_id, vgroup_ref , ‘w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929648"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929649"></A>C     Get and display the version of the attached vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929650"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929651"></A>      vg_version = vfgver(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929652"></A>      if (vg_version .eq. VSET_NEW_VERSION) write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929653"></A>     +   VGROUP_NAME, ‘ is of the newest version, version 4’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929654"></A>      if (vg_version .eq. VSET_VERSION) write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929655"></A>     +   VGROUP_NAME, ‘ is of a version between 3.2 and 4.0r2’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929656"></A>      if(vg_version .eq. VSET_OLD_VERSION) write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929657"></A>     +   VGROUP_NAME, ‘ is of version before 3.2’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929658"></A>      if ((vg_version .ne. VSET_NEW_VERSION) .and.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929659"></A>     +    (vg_version .ne. VSET_VERSION)     .and.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929660"></A>     +    (vg_version .ne. VSET_OLD_VERSION)) write(*,*)   </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929661"></A>     +    ‘Unknown version’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929662"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929663"></A>C     Add the attribute named VGATTR_NAME to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929664"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929665"></A>      status = vfscatt(vgroup_id, VGATTR_NAME, DFNT_CHAR, N_ATT_VALUES,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929666"></A>     +                 vg_attr)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929667"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929668"></A>C     Get and display the number of attributes attached to this group.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929669"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929670"></A>      n_attrs = vfnatts(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929671"></A>      write(*,*) ‘This group has’, n_attrs, ‘ attributes’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929672"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929673"></A>C     Get and display the name and the number of values of each attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929674"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929675"></A>      do 10 attr_index=1, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929676"></A>         status = vfainfo(vgroup_id, attr_index-1, attr_name, data_type,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929677"></A>     +                    n_values, size)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929678"></A>      write(*,*) ‘Attribute #’, attr_index-1, ‘ is named ‘, attr_name</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929679"></A>      write(*,*) ‘and has’, n_values, ‘ values: ‘</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929680"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929681"></A>C     Get and display the attribute values.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929682"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929683"></A>      status = vfgcatt(vgroup_id, attr_index-1, vgattr_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929684"></A>      write(*,*) (vgattr_buf(i), i=1,n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929685"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929686"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929687"></A>C     Terminate access to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929688"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929689"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929690"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929691"></A>C     Terminate accessto the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929692"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929693"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929694"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929695"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929696"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928548"></A>vgroup_contents.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929705"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929710"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929711"></A>#define   FILE_NAME        “General_Vgroups.hdf”</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929712"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929713"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929714"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929715"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929716"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929717"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929718"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929719"></A>          file_id, vgroup_id, vgroup_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929720"></A>          obj_index,    /* index of an object within a vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929721"></A>          num_of_pairs, /* number of tag/ref number pairs, i.e., objects */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929722"></A>          obj_tag, obj_ref,     /* tag/ref number of an HDF object */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929723"></A>          vgroup_pos = 0;       /* position of a vgroup in the file */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929724"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929725"></A>   /********************** End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929726"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929727"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929728"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929729"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929730"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929731"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929732"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929733"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929734"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929735"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929736"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929737"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929738"></A>   * Obtain each vgroup in the file by its reference number, get the</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929739"></A>   * number of objects in the vgroup, and display the information about</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929740"></A>   * that vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929741"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929742"></A>   vgroup_ref = -1;        /* set to -1 to search from the beginning of file */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929743"></A>   while (TRUE)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929744"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929745"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929746"></A>      * Get the reference number of the next vgroup in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929747"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929748"></A>      vgroup_ref = Vgetid (file_id, vgroup_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929749"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929750"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929751"></A>      * Attach to the vgroup for reading or exit the loop if no more vgroups</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929752"></A>      * are found.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929753"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929754"></A>      if (vgroup_ref == -1) break;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929755"></A>      vgroup_id = Vattach (file_id, vgroup_ref, “r”); </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929756"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929757"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929758"></A>      * Get the total number of objects in the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929759"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929760"></A>      num_of_pairs = Vntagrefs (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929761"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929762"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929763"></A>      * If the vgroup contains any object, print the tag/ref number </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929764"></A>      * pair of each object in the vgroup, in the order they appear in the</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929765"></A>      * file, and indicate whether the object is a vdata, vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929766"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929767"></A>      if (num_of_pairs &gt; 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929768"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929769"></A>         printf (“\nVgroup #%d contains:\n”, vgroup_pos);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929770"></A>         for (obj_index = 0; obj_index &lt; num_of_pairs; obj_index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929771"></A>         {</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929772"></A>            /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929773"></A>            * Get the tag/ref number pair of the object specified </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929774"></A>            * by its index, obj_index, and display them.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929775"></A>            */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929776"></A>            status_n = Vgettagref (vgroup_id, obj_index, &amp;obj_tag, &amp;obj_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929777"></A>            printf (“tag = %d, ref = %d”, obj_tag, obj_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929778"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929779"></A>            /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929780"></A>            * State whether the HDF object referred to by obj_ref is a vdata,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929781"></A>            * a vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929782"></A>            */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929783"></A>            if (Visvg (vgroup_id, obj_ref))</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929784"></A>               printf (“  &lt;-- is a vgroup\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929785"></A>            else if (Visvs (vgroup_id, obj_ref))</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929786"></A>               printf (“  &lt;-- is a vdata\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929787"></A>            else</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929788"></A>               printf (“  &lt;-- neither vdata nor vgroup\n”);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929789"></A>         } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929790"></A>      } /* if */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929791"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929792"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929793"></A>         printf (“Vgroup #%d contains no HDF objects\n”, vgroup_pos);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929794"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929795"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929796"></A>      * Terminate access to the current vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929797"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929798"></A>      status_32 = Vdetach (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929799"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929800"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929801"></A>      * Move to the next vgroup position.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929802"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929803"></A>      vgroup_pos++;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929804"></A>   } /* while */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929805"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929806"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929807"></A>   * Terminate access to the V interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929808"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929809"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929810"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929811"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929812"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593893_pgfId-928550"></A><A NAME="50593893_24706"></A>vgroup_contents.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929817"></A>      program  vgroup_contents</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929826"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929827"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929828"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929829"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929830"></A>      character*19 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929831"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929832"></A>      parameter (FILE_NAME = ‘General_Vgroups.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929833"></A>      integer DFACC_ READ</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929834"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929835"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929836"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929837"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929838"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929839"></A>      integer vfstart, vfatch, vfgid, vntrc, vfgttr, vfisvg,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929840"></A>     +        vfisvs, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929841"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929842"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929843"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929844"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929845"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929846"></A>      integer file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929847"></A>      integer vgroup_id, vgroup_ref,  vgroup_pos</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929848"></A>      integer obj_index, num_of_pairs </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929849"></A>      integer obj_tag, obj_ref </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929850"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929851"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929852"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929853"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929854"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929855"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929856"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929857"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929858"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929859"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929860"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929861"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929862"></A>C     Obtain each vgroup in the file by its reference number, get the</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929863"></A>C     number of objects in the vgroup, and display the information</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929864"></A>C     about that vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929865"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929866"></A>      vgroup_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929867"></A>      vgroup_pos = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929868"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929869"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929870"></A>C     Get the reference number of the next vgroup in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929871"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929872"></A>      vgroup_ref = vfgid(file_id, vgroup_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929873"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929874"></A>C     Attach to the vgroup or go to the end if no additional vgroup is found.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929875"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929876"></A>      if(vgroup_ref. eq. -1) goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929877"></A>      vgroup_id = vfatch(file_id, vgroup_ref , ‘r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929878"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929879"></A>C     Get the total number of objects in the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929880"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929881"></A>      num_of_pairs = vntrc(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929882"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929883"></A>C     If the vgroup contains any object, print the tag/ref number</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929884"></A>C     pair of each object in vgroup, in the order they appear in the</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929885"></A>C     file, and indicate whether the object is a vdata, vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929886"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929887"></A>      if (num_of_pairs .gt. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929888"></A>         write(*,*) ‘Vgroup # ‘, vgroup_pos, ‘ contains:’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929889"></A>         do 20 obj_index = 1, num_of_pairs</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929890"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929891"></A>C     Get the tag/ref number pair of the object specified by its index </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929892"></A>C     and display them.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929893"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929894"></A>         status = vfgttr(vgroup_id, obj_index-1, obj_tag, obj_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929895"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929896"></A>C     State whether the HDF object referred to by obj_ref is a vdata,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929897"></A>C     a vgroup, or neither.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929898"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929899"></A>         if( vfisvg(vgroup_id, obj_ref) .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929900"></A>             write(*,*) ‘tag = ‘, obj_tag, ‘ ref = ‘, obj_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929901"></A>     +       ‘  &lt;--- is a vgroup ‘</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929902"></A>         else if ( vfisvs(vgroup_id, obj_ref) .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929903"></A>             write(*,*) ‘tag = ‘, obj_tag, ‘ ref = ‘, obj_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929904"></A>     +       ‘  &lt;--- is a vdata ‘</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929905"></A>         else</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929906"></A>             write(*,*) ‘tag = ‘, obj_tag, ‘ ref = ‘, obj_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929907"></A>     +       ‘  &lt;--- neither vdata nor vgroup ‘</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929908"></A>         endif</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929909"></A>20       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929910"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929911"></A>         write (*,*) ‘Vgroup #’, vgroup_pos, ‘ contains no HDF objects’</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929912"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929913"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929914"></A>      vgroup_pos = vgroup_pos + 1</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929915"></A>      goto 10 </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929916"></A>100   continue      </P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929917"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929918"></A>C     Terminate access to the vgroup.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929919"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929920"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929921"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929922"></A>C     Terminate access to the V interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929923"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929924"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929925"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929926"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-929927"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593893_pgfId-928578"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593894_pgfId-929000"></A><A NAME="50593894_20548"></A>create_annotation.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929002"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928734"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928735"></A>#define  FILE_NAME      &quot;General_HDFobjects.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928736"></A>#define  VG_NAME        &quot;AN Vgroup&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928737"></A>#define  FILE_LABEL_TXT &quot;General HDF objects&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928738"></A>#define  FILE_DESC_TXT  &quot;This is an HDF file that contains general HDF objects&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928739"></A>#define  DATA_LABEL_TXT &quot;Common AN Vgroup&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928740"></A>#define  DATA_DESC_TXT  &quot;This is a vgroup that is used to test data annotations&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928741"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928742"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928743"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928744"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928745"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928746"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928747"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928748"></A>          file_id,      /* HDF file identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928749"></A>          an_id,        /* AN interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928750"></A>          file_label_id,  /* file label identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928751"></A>          file_desc_id,   /* file description identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928752"></A>          data_label_id,  /* data label identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928753"></A>          data_desc_id,   /* data description identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928754"></A>          vgroup_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928755"></A>   uint16 vgroup_tag, vgroup_ref;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928756"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928757"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928758"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928759"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928760"></A>   * Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928761"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928762"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928763"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928764"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928765"></A>   * Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928766"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928767"></A>   an_id = ANstart(file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928768"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928769"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928770"></A>   * Create the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928771"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928772"></A>   file_label_id = ANcreatef(an_id, AN_FILE_LABEL);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928773"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928774"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928775"></A>   * Write the annotations to the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928776"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928777"></A>   status_32 = ANwriteann(file_label_id, FILE_LABEL_TXT, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928778"></A>                          strlen (FILE_LABEL_TXT));</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928779"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928780"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928781"></A>   * Create file description.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928782"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928783"></A>   file_desc_id = ANcreatef(an_id, AN_FILE_DESC);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928784"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928785"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928786"></A>   * Write the annotation to the file description.  </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928787"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928788"></A>   status_32 = ANwriteann(file_desc_id, FILE_DESC_TXT, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928789"></A>                          strlen (FILE_DESC_TXT));</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928790"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928791"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928792"></A>   * Create a vgroup in the V interface.  Note that the vgroup’s ref number </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928793"></A>   * is set to -1 for creating and the access mode is &quot;w&quot; for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928794"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928795"></A>   status_n = Vstart(file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928796"></A>   vgroup_id = Vattach(file_id, -1, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928797"></A>   status_32 = Vsetname (vgroup_id, VG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928798"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928799"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928800"></A>   * Obtain the tag and ref number of the vgroup for subsequent</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928801"></A>   * references.  </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928802"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928803"></A>   vgroup_tag = (uint16) VQuerytag (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928804"></A>   vgroup_ref = (uint16) VQueryref (vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928805"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928806"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928807"></A>   * Create the data label for the vgroup identified by its tag </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928808"></A>   * and ref number.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928809"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928810"></A>   data_label_id = ANcreate(an_id, vgroup_tag, vgroup_ref, AN_DATA_LABEL);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928811"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928812"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928813"></A>   * Write the annotation text to the data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928814"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928815"></A>   status_32 = ANwriteann(data_label_id, DATA_LABEL_TXT, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928816"></A>                          strlen(DATA_LABEL_TXT));</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928817"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928818"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928819"></A>   * Create the data description for the vgroup identified by its tag </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928820"></A>   * and ref number.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928821"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928822"></A>   data_desc_id = ANcreate(an_id, vgroup_tag, vgroup_ref, AN_DATA_DESC);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928823"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928824"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928825"></A>   * Write the annotation text to the data description.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928826"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928827"></A>   status_32 = ANwriteann(data_desc_id, DATA_DESC_TXT, strlen(DATA_DESC_TXT));</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928828"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928829"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928830"></A>   * Teminate access to the vgroup and to the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928831"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928832"></A>   status_32 = Vdetach(vgroup_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928833"></A>   status_n = Vend(file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928834"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928835"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928836"></A>   * Terminate access to each annotation explicitly.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928837"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928838"></A>   status_n = ANendaccess(file_label_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928839"></A>   status_n = ANendaccess(file_desc_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928840"></A>   status_n = ANendaccess(data_label_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928841"></A>   status_n = ANendaccess(data_desc_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928842"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928843"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928844"></A>   * Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928845"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928846"></A>   status_32 = ANend(an_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928847"></A>   status_n = Hclose(file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928848"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928587"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593894_pgfId-929641"></A><A NAME="50593894_33922"></A>create_annotation.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928861"></A>      program create_annotation</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928866"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928867"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928868"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928869"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928870"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928871"></A>      character*9  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928872"></A>      character*19 FILE_LABEL_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928873"></A>      character*53 FILE_DESC_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928874"></A>      character*16 DATA_LABEL_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928875"></A>      character*54 DATA_DESC_TXT</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928876"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928877"></A>      parameter (FILE_NAME      = ’General_HDFobjects.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928878"></A>     +           VG_NAME        = ’AN Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928879"></A>     +           FILE_LABEL_TXT = ’General HDF objects’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928880"></A>     +           DATA_LABEL_TXT = ’Common AN Vgroup’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928881"></A>     +           FILE_DESC_TXT  = </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928882"></A>     + ’This is an HDF file that contains general HDF objects’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928883"></A>     +           DATA_DESC_TXT  = </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928884"></A>     + ’This is a vgroup that is used to test data annotations’)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928885"></A>      integer DFACC_CREATE</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928886"></A>      parameter (DFACC_CREATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928887"></A>      integer AN_FILE_LABEL, AN_FILE_DESC, AN_DATA_LABEL, AN_DATA_DESC</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928888"></A>      parameter (AN_FILE_LABEL = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928889"></A>     +           AN_FILE_DESC  = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928890"></A>     +           AN_DATA_LABEL = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928891"></A>     +           AN_DATA_DESC  = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928892"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928893"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928894"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928895"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928896"></A>      integer afstart, affcreate, afwriteann, afcreate,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928897"></A>     +        afendaccess, afend</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928898"></A>      integer vfstart, vfatch, vfsnam, vqref, vqtag, vfdtch, vfend</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928899"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928900"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928901"></A>C**** Variable declaration ******************************************* </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928902"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928903"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928904"></A>      integer file_id, an_id</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928905"></A>      integer file_label_id, file_desc_id</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928906"></A>      integer data_label_id, data_desc_id</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928907"></A>      integer vgroup_id, vgroup_tag, vgroup_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928908"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928909"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928910"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928911"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928912"></A>C     Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928913"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928914"></A>      file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928915"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928916"></A>C     Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928917"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928918"></A>      an_id = afstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928919"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928920"></A>C     Create the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928921"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928922"></A>      file_label_id = affcreate(an_id, AN_FILE_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928923"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928924"></A>C     Write the annotation to the file label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928925"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928926"></A>      status = afwriteann(file_label_id, FILE_LABEL_TXT,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928927"></A>     +                    len(FILE_LABEL_TXT))       </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928928"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928929"></A>C     Create file description.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928930"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928931"></A>      file_desc_id = affcreate(an_id, AN_FILE_DESC)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928932"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928933"></A>C     Write the annotation to the file description.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928934"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928935"></A>      status = afwriteann(file_desc_id, FILE_DESC_TXT,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928936"></A>     +                    len(FILE_DESC_TXT))</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928937"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928938"></A>C     Create a vgroup in the file. Note that the vgroup’s ref number is</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928939"></A>C     set to -1 for creating and the access mode is ’w’ for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928940"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928941"></A>      status    = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928942"></A>      vgroup_id = vfatch(file_id, -1, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928943"></A>      status    = vfsnam(vgroup_id, VG_NAME)      </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928944"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928945"></A>C     Obtain the tag and reference number of the vgroup for subsequent</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928946"></A>C     references.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928947"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928948"></A>      vgroup_ref = vqref(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928949"></A>      vgroup_tag = vqtag(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928950"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928951"></A>C     Create the data label for the vgroup identified by its tag and ref </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928952"></A>C     number.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928953"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928954"></A>      data_label_id = afcreate(an_id, vgroup_tag, vgroup_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928955"></A>     +                          AN_DATA_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928956"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928957"></A>C     Write the annotation text to the data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928958"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928959"></A>      status = afwriteann(data_label_id, DATA_LABEL_TXT, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928960"></A>     +                    len(DATA_LABEL_TXT))</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928961"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928962"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928963"></A>C     Create the data description for the vgroup identified by its tag and ref.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928964"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928965"></A>      data_desc_id = afcreate(an_id, vgroup_tag, vgroup_ref, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928966"></A>     +                        AN_DATA_DESC)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928967"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928968"></A>C     Write the annotation text to the data description.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928969"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928970"></A>      status = afwriteann(data_desc_id, DATA_DESC_TXT,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928971"></A>     +                    len(DATA_DESC_TXT))       </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928972"></A>C      </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928973"></A>C     Terminate access to the vgroup and to the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928974"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928975"></A>      status = vfdtch(vgroup_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928976"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928977"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928978"></A>C     Terminate access to each annotation explicitly.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928979"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928980"></A>      status = afendaccess(file_label_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928981"></A>      status = afendaccess(file_desc_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928982"></A>      status = afendaccess(data_label_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928983"></A>      status = afendaccess(data_desc_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928984"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928985"></A>C     Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928986"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928987"></A>      status = afend(an_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928988"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928989"></A>      end </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-928990"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593894_pgfId-929010"></A><A NAME="50593894_31051"></A>read_annotation.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929014"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929019"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929020"></A>#define  FILE_NAME   &quot;General_HDFobjects.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929021"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929022"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929023"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929024"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929025"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929026"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929027"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929028"></A>         file_id,       /* HDF file identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929029"></A>         an_id,         /* AN interface identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929030"></A>         ann_id,        /* an annotation identifier */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929031"></A>         index,         /* position of an annotation in all of the same type*/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929032"></A>         ann_length,    /* length of the text in an annotation */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929033"></A>         n_file_labels, n_file_descs, n_data_labels, n_data_descs;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929034"></A>   char *ann_buf;       /* buffer to hold the read annotation */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929035"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929036"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929037"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929038"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929039"></A>   * Open the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929040"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929041"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929042"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929043"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929044"></A>   * Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929045"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929046"></A>   an_id = ANstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929047"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929048"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929049"></A>   * Get the annotation information, e.g., the numbers of file labels, file</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929050"></A>   * descriptions, data labels, and data descriptions.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929051"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929052"></A>   status_n = ANfileinfo (an_id, &amp;n_file_labels, &amp;n_file_descs,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929053"></A>                        &amp;n_data_labels, &amp;n_data_descs);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929054"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929055"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929056"></A>   * Get the data labels.  Note that this for loop can be used to</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929057"></A>   * obtain the contents of each kind of annotation with the appropriate</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929058"></A>   * number of annotations and the type of annotation, i.e., replace</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929059"></A>   * n_data_labels with n_file_labels, n_file_descs, or n_data_descs, and</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929060"></A>   * AN_DATA_LABEL with AN_FILE_LABEL, AN_FILE_DESC, or AN_DATA_DESC,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929061"></A>   * respectively.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929062"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929063"></A>   for (index = 0; index &lt; n_data_labels; index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929064"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929065"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929066"></A>      * Get the identifier of the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929067"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929068"></A>      ann_id = ANselect (an_id, index, AN_DATA_LABEL);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929069"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929070"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929071"></A>      * Get the length of the data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929072"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929073"></A>      ann_length = ANannlen (ann_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929074"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929075"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929076"></A>      * Allocate space for the buffer to hold the data label text.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929077"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929078"></A>      ann_buf = malloc ((ann_length+1) * sizeof (char));</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929079"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929080"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929081"></A>      * Read and display the data label.  Note that the size of the buffer,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929082"></A>      * i.e., the third parameter, is 1 character more than the length of</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929083"></A>      * the data label; that is for the null character.  It is not the case</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929084"></A>      * when a description is retrieved because the description does not </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929085"></A>      * necessarily end with a null character.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929086"></A>      * </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929087"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929088"></A>      status_32 = ANreadann (ann_id, ann_buf, ann_length+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929089"></A>      printf (&quot;Data label index: %d\n&quot;, index);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929090"></A>      printf (&quot;Data label contents: %s\n&quot;, ann_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929091"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929092"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929093"></A>      * Terminate access to the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929094"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929095"></A>      status_n = ANendaccess (ann_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929096"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929097"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929098"></A>      * Free the space allocated for the annotation buffer.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929099"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929100"></A>      free (ann_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929101"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929102"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929103"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929104"></A>   * Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929105"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929106"></A>   status_32 = ANend (an_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929107"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929108"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929109"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593894_pgfId-929118"></A><A NAME="50593894_16074"></A>read_annotation.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929119"></A>      program  read_annotation</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929124"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929125"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929126"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929127"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929128"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929129"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929130"></A>      parameter (FILE_NAME = ’General_HDFobjects.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929131"></A>      integer    DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929132"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929133"></A>      integer    AN_DATA_LABEL</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929134"></A>      parameter (AN_DATA_LABEL = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929135"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929136"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929137"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929138"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929139"></A>      integer afstart, affileinfo, afselect, afannlen, afreadann,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929140"></A>     +        afendaccess, afend</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929141"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929142"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929143"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929144"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929145"></A>      integer file_id, an_id, ann_id</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929146"></A>      integer index, ann_length </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929147"></A>      integer n_file_labels, n_file_descs, n_data_labels, n_data_descs </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929148"></A>      character*256 ann_buf </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929149"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929150"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929151"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929152"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929153"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929154"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929155"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929156"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929157"></A>C     Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929158"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929159"></A>      an_id = afstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929160"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929161"></A>C     Get the annotation information, i.e., the number of file labels,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929162"></A>C     file descriptions, data labels, and data descriptions.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929163"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929164"></A>      status = affileinfo(an_id, n_file_labels, n_file_descs,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929165"></A>     +                    n_data_labels, n_data_descs)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929166"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929167"></A>C     Get the data labels. Note that this DO loop can be used to obtain </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929168"></A>C     the contents of each kind of annotation with the appropriate number</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929169"></A>C     of annotations and the type of annotation, i.e., replace</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929170"></A>C     n_data_labels with n_file_labels, n_files_descs, or n_data_descs, and</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929171"></A>C     AN_DATA_LABEL with AN_FILE_LABEL, AN_FILE_DESC, or AN_DATA_DESC, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929172"></A>C     respectively.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929173"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929174"></A>      do 10 index = 0, n_data_labels-1</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929175"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929176"></A>C     Get the identifier of the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929177"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929178"></A>      ann_id = afselect(an_id, index, AN_DATA_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929179"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929180"></A>C     Get the length of the data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929181"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929182"></A>      ann_length = afannlen(ann_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929183"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929184"></A>C     Read and display the data label. The data label is read into buffer</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929185"></A>C     ann_buf. One has to make sure that ann_buf has sufficient size to hold</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929186"></A>C     the data label. Also note, that the third argument to afreadann is </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929187"></A>C     1 greater that the actual length of the data label (see comment to</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929188"></A>C     C example).</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929189"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929190"></A>      status = afreadann(ann_id, ann_buf, ann_length+1) </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929191"></A>      write(*,*) ’Data label index: ’, index</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929192"></A>      write(*,*) ’Data label contents: ’, ann_buf(1:ann_length) </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929193"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929194"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929195"></A>C     Terminate access to the current data label.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929196"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929197"></A>      status = afendaccess(ann_id)  </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929198"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929199"></A>C     Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929200"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929201"></A>      status = afend(an_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929202"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929203"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929204"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929361"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593894_pgfId-929634"></A><A NAME="50593894_32393"></A>get_annotation_info.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929364"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929365"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929366"></A>#define  FILE_NAME   &quot;General_HDFobjects.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929367"></A>#define  VG_NAME     &quot;AN Vgroup&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929368"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929369"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929370"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929371"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929372"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929373"></A>   intn   status_n;      /* returned status for functions returning an intn */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929374"></A>   int32  status_32,     /* returned status for functions returning an int32*/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929375"></A>          file_id, an_id, ann_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929376"></A>          n_annots,      /* number of annotations */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929377"></A>         *ann_list,      /* list of annotation identifiers */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929378"></A>          vgroup_ref,    /* reference number of the vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929379"></A>          index;         /* index of an annotation in the annotation list */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929380"></A>          ann_type annot_type = AN_DATA_DESC;   /* annotation to be obtained*/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929381"></A>   uint16 ann_tag, ann_ref,              /* tag/ref number of an annotation */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929382"></A>          vgroup_tag = DFTAG_VG;         /* tag of the vgroup */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929383"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929384"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929385"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929386"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929387"></A>   * Create the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929388"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929389"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929390"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929391"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929392"></A>   * Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929393"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929394"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929395"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929396"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929397"></A>   * Get the vgroup named VG_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929398"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929399"></A>   vgroup_ref = Vfind  (file_id, VG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929400"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929401"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929402"></A>   * Initialize the AN interface and obtain an interface id.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929403"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929404"></A>   an_id = ANstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929405"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929406"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929407"></A>   * Get the number of object descriptions.  Note that, since ANnumann takes</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929408"></A>   * the tag and reference number as being of type unit16, vgroup_ref must be</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929409"></A>   * safely cast to uint16 by checking for FAIL value first.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929410"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929411"></A>   if (vgroup_ref != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929412"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929413"></A>      n_annots = ANnumann (an_id, annot_type, vgroup_tag, (uint16)vgroup_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929414"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929415"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929416"></A>      * Allocate space to hold the annotation identifiers.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929417"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929418"></A>      ann_list = malloc (n_annots * sizeof (int32));</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929419"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929420"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929421"></A>      * Get the list of identifiers of the annotations attached to the </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929422"></A>      * vgroup and of type annot_type.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929423"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929424"></A>      n_annots = ANannlist (an_id, annot_type, vgroup_tag, (uint16)vgroup_ref, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929425"></A>                            ann_list);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929426"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929427"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929428"></A>      * Get each annotation identifier from the list then display the </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929429"></A>      * tag/ref number pair of the corresponding annotation.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929430"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929431"></A>      printf (&quot;List of annotations of type AN_DATA_DESC:\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929432"></A>      for (index = 0; index &lt; n_annots; index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929433"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929434"></A>        /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929435"></A>         * Get and display the ref number of the annotation from </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929436"></A>         * its identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929437"></A>         */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929438"></A>         status_32 = ANid2tagref (ann_list[index], &amp;ann_tag, &amp;ann_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929439"></A>         printf (&quot;Annotation index %d: tag = %s\nreference number= %d\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929440"></A>           index, ann_tag == DFTAG_DIA ? &quot;DFTAG_DIA (data description)&quot;:</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929441"></A>           &quot;Incorrect&quot;, ann_ref);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929442"></A>      } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929443"></A>   } /* for */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929444"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929445"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929446"></A>   * Get and display an annotation type from an annotation tag.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929447"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929448"></A>   annot_type = ANtag2atype (DFTAG_FID);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929449"></A>   printf (&quot;\nAnnotation type of DFTAG_FID (file label) is %s\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929450"></A>              annot_type == AN_FILE_LABEL ? &quot;AN_FILE_LABEL&quot;:&quot;Incorrect&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929451"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929452"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929453"></A>   * Get and display an annotation tag from an annotation type.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929454"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929455"></A>   ann_tag = ANatype2tag (AN_DATA_LABEL);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929456"></A>   printf (&quot;\nAnnotation tag of AN_DATA_LABEL is %s\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929457"></A>              ann_tag == DFTAG_DIL ? &quot;DFTAG_DIL (data label)&quot;:&quot;Incorrect&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929458"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929459"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929460"></A>   * Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929461"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929462"></A>   status_32 = ANend (an_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929463"></A>   status_n = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929464"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929465"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929466"></A>   * Free the space allocated for the annotation identifier list.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929467"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929468"></A>   free (ann_list);</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929469"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929475"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593894_pgfId-929635"></A><A NAME="50593894_33005"></A>get_annotation_info.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929478"></A>      program annotation_info</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929483"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929484"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929485"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929486"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929487"></A>      character*22 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929488"></A>      character*9  VG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929489"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929490"></A>      parameter (FILE_NAME      = ’General_HDFobjects.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929491"></A>     +           VG_NAME        = ’AN Vgroup’)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929492"></A>      integer    DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929493"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929494"></A>      integer AN_FILE_LABEL, AN_DATA_LABEL, AN_DATA_DESC</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929495"></A>      parameter (AN_FILE_LABEL = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929496"></A>     +           AN_DATA_LABEL = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929497"></A>     +           AN_DATA_DESC  = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929498"></A>      integer DFTAG_DIA, DFTAG_FID, DFTAG_DIL</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929499"></A>      parameter (DFTAG_DIA = 105,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929500"></A>     +           DFTAG_FID = 100,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929501"></A>     +           DFTAG_DIL = 104)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929502"></A>      integer DFTAG_VG</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929503"></A>      parameter (DFTAG_VG = 1965)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929504"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929505"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929506"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929507"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929508"></A>      integer afstart, afnumann, afannlist, afidtagref, aftagatype,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929509"></A>     +        afatypetag, afend</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929510"></A>      integer vfstart, vfind </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929511"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929512"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929513"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929514"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929515"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929516"></A>      integer file_id, an_id</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929517"></A>      integer n_annots, ann_index, annot_type, ann_tag, ann_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929518"></A>      integer ann_list(10) </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929519"></A>      integer vgroup_tag, vgroup_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929520"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929521"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929522"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929523"></A>      annot_type = AN_DATA_DESC</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929524"></A>      vgroup_tag = DFTAG_VG</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929525"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929526"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929527"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929528"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929529"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929530"></A>C     Initialize the V interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929531"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929532"></A>      status = vfstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929533"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929534"></A>C     Get the group named VG_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929535"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929536"></A>      vgroup_ref = vfind(file_id, VG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929537"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929538"></A>C     Initialize the AN interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929539"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929540"></A>      an_id = afstart(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929541"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929542"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929543"></A>C     Get the number of object descriptions. </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929544"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929545"></A>      if (vgroup_ref .eq. -1) goto 100 </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929546"></A>      n_annots = afnumann(an_id, annot_type, vgroup_tag, vgroup_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929547"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929548"></A>C     Get the list of identifiers of the annotations attached to the</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929549"></A>C     vgroup and of type annot_type. Identifiers are read into ann_list</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929550"></A>C     buffer. One has to make sure that ann_list has the size big enough</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929551"></A>C     to hold the list of identifiers.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929552"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929553"></A>      n_annots = afannlist(an_id, annot_type, vgroup_tag, vgroup_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929554"></A>     +                     ann_list)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929555"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929556"></A>C     Get each annotation identifier from the list then display the</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929557"></A>C     tag/ref number pair of the corresponding annotation.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929558"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929559"></A>      write(*,*) ’List of annotations of type AN_DATA_DESC’</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929560"></A>      do 10 ann_index = 0, n_annots - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929561"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929562"></A>C     Get and display the ref number of the annotation from its</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929563"></A>C     identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929564"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929565"></A>      status = afidtagref(ann_list(ann_index+1), ann_tag, ann_ref) </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929566"></A>      write(*,*) ’Annotation index: ’, ann_index</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929567"></A>      if (ann_tag .eq. DFTAG_DIA) then</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929568"></A>          write(*,*) ’tag = DFTAG_DIA (data description)’</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929569"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929570"></A>          write(*,*) ’ tag = Incorrect’</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929571"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929572"></A>      write(*,*) ’reference number = ’, ann_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929573"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929574"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929575"></A>C     Get and display an annotation type from an annotation tag.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929576"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929577"></A>      annot_type = aftagatype(DFTAG_FID)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929578"></A>      if (annot_type .eq. AN_FILE_LABEL) then</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929579"></A>         write(*,*) ’Annotation type of DFTAG_FID (file label) is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929580"></A>     +               ’AN_FILE_LABEL ’</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929581"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929582"></A>         write(*,*) ’Annotation type of DFTAG_FID (file label) is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929583"></A>     +               ’Incorrect’</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929584"></A>      endif   </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929585"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929586"></A>C     Get and display an annotation tag from an annotation type.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929587"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929588"></A>      ann_tag = afatypetag(AN_DATA_LABEL)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929589"></A>      if (ann_tag .eq. DFTAG_DIL ) then</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929590"></A>         write(*,*) ’Annotation tag of AN_DATA_LABEL is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929591"></A>     +               ’DFTAG_DIL (data label)’</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929592"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929593"></A>         write(*,*) ’Annotation type of DFTAG_FID (file label) is ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929594"></A>     +               ’Incorrect’</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929595"></A>      endif   </P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929596"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929597"></A>C     Terminate access to the AN interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929598"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929599"></A>100   continue</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929600"></A>      status = afend(an_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929601"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929602"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929603"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929472"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593894_pgfId-929348"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593895_pgfId-473591"></A><A NAME="50593895_33223"></A>pal_ex1.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-930692"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931544"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931545"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931546"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931547"></A>	uint8 palette_data[768];</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931548"></A>	intn i;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931549"></A>	int32 status;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931550"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931551"></A>	/* Initialize the palette to grayscale. */</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931552"></A>	for (i = 0; i &lt; 256; i++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931553"></A>	  palette_data[i * 3] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931554"></A>	  palette_data[i * 3 + 1] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931555"></A>	  palette_data[i * 3 + 2] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931556"></A>	}</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931557"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931558"></A>	/* Write the palette to file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931559"></A>	status = DFPaddpal(“Example1.hdf”, (VOIDP)palette_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931560"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931561"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931562"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593895_pgfId-928476"></A><A NAME="50593895_19717"></A>pal_ex1.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-930723"></A>      PROGRAM WRITE PALETTE</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931569"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931570"></A>      integer dpapal, status, i</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931571"></A>      character palette_data(768)</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931572"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931573"></A>C     Initialize the palette to greyscale.</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931574"></A>      do 10, i = 1, 256</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931575"></A>        palette_data((i - 1) * 3 + 1) = char(i - 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931576"></A>        palette_data((i - 1) * 3 + 2) = char(i - 1) </P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931577"></A>        palette_data((i - 1) * 3 + 3) = char(i - 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931578"></A>10     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931579"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931580"></A>C     Write the palette to the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931581"></A>      status = dpapal(‘Example1.hdf’, palette_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931582"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931583"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931584"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593895_pgfId-928479"></A><A NAME="50593895_40507"></A>pal_ex2.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-930775"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931591"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931592"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931593"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931594"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931595"></A>	uint8 palette_data[768];</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931596"></A>	intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931597"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931598"></A>	/* Read the palette data from a file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931599"></A>	status = DFPgetpal(“Example1.hdf”, (VOIDP)palette_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931600"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931601"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931602"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593895_pgfId-931681"></A><A NAME="50593895_31632"></A>pal_ex2.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931683"></A>      PROGRAM READ PALETTE</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931684"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931672"></A>      integer dpgpal, status</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931673"></A>      character palette_data(768)</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931674"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931675"></A>C     Read the palette from the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931676"></A>      status = dpgpal(‘Example1.hdf’, palette_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931677"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931678"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593895_pgfId-931679"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593895_pgfId-928518"></A>&nbsp;</H6>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-473591"></A><A NAME="50593896_20219"></A>r8_ex1.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930692"></A> &nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-928476"></A><A NAME="50593896_12213"></A>r8_ex1.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930723"></A>      PROGRAM RASTER8      </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932100"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932101"></A>      character*1 raster_data(5,6)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932102"></A>      integer retn, d8aimg</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932103"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932104"></A>      integer*4 WIDTH, HEIGHT</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932105"></A>      parameter(WIDTH = 5, HEIGHT = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932106"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932107"></A>C     Initialize the image array</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932108"></A>      data raster_data /  1,  2,  3,  4,  5,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932109"></A>     $                    6,  7,  8,  9, 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932110"></A>     $                   11, 12, 13, 14, 15,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932111"></A>     $                   16, 17, 18, 19, 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932112"></A>     $                   21, 22, 23, 24, 25,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932113"></A>     $                   26, 27, 28, 29, 30 /</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932114"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932115"></A>C     Write the 8-bit raster image to the file</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932116"></A>      retn = d8aimg(‘Example1.hdf’, raster_data, WIDTH, HEIGHT, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932117"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932118"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932119"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-928479"></A><A NAME="50593896_21832"></A>r8_ex2.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930775"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931438"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931439"></A>#define WIDTH 20</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931440"></A>#define HEIGHT 20</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931441"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931442"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931443"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931444"></A>	uint8 colors[256*3], picture[HEIGHT][WIDTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931445"></A>	uint8 i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931446"></A>	int16 status;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931447"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931448"></A>	/* Initialize image arrays. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931449"></A>	for (j = 0; j &lt; WIDTH; j++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931450"></A>		for (i = 0; i &lt; HEIGHT; i++) </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931451"></A>			picture[j][i] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931452"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931453"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931454"></A>	/* Set the current palette. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931455"></A>	status = DFR8setpalette(colors);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931456"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931457"></A>	/* Write the image data to the file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931458"></A>	status = DFR8putimage(“Example2.hdf”, picture, WIDTH,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931459"></A>					HEIGHT, COMP_NONE);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931460"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931461"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931462"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-928481"></A><A NAME="50593896_18226"></A>r8_ex2.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930820"></A>      PROGRAM WRITE UNCOMPRESSED RIS8</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931469"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931470"></A>      integer   d8spal, d8pimg, status, i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931471"></A>      integer   colors(768)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931472"></A>      integer*4   WIDTH, HEIGHT, COMP_NONE</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931473"></A>      parameter (COMP_NONE = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931474"></A>     +           WIDTH = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931475"></A>     +           HEIGHT = 20)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931476"></A>      integer   picture(WIDTH, HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931477"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931478"></A>C     Initialize the image data.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931479"></A>      do 20 j = 1, WIDTH</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931480"></A>       do 10 i = 1, HEIGHT</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931481"></A>          picture(j, i) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931482"></A>10     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931483"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931484"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931485"></A>C     Set the current palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931486"></A>      status = d8spal(colors)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931487"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931488"></A>C     Write the image data to the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931489"></A>      status = d8pimg(‘Example2.hdf’, picture, WIDTH, HEIGHT,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931490"></A>     +                COMP_NONE)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931491"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931492"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931493"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931494"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-928487"></A><A NAME="50593896_15539"></A>r8_ex3.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930852"></A> #include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932010"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932011"></A>#define WIDTH 20</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932012"></A>#define HEIGHT 20</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932013"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932014"></A>main ( )</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932015"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932016"></A>	uint8 paletteA[256*3], paletteB[256*3];</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932017"></A>	uint8 picture1[HEIGHT][WIDTH], picture2[HEIGHT][WIDTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932018"></A>	uint8 picture3[HEIGHT][WIDTH], picture4[HEIGHT][WIDTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932019"></A>	uint8 i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932020"></A>	int16 status;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932021"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932022"></A>	/* Initialize image arrays. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932023"></A>	for (j = 0; j &lt; WIDTH; j++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932024"></A>		for (i = 0; i &lt; HEIGHT; i++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932025"></A>			picture1[j][i] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932026"></A>			picture2[j][i] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932027"></A>			picture3[j][i] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932028"></A>			picture4[j][i] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932029"></A>		}</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932030"></A>	}</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932031"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932032"></A>	/* Set the first palette. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932033"></A>	status = DFR8setpalette(paletteA);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932034"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932035"></A>	/* Write the compressed image data to the HDF file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932036"></A>	status = DFR8putimage(“Example3.hdf”, (VOIDP)picture1, WIDTH, HEIGHT, \</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932037"></A>					COMP_RLE);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932038"></A>	status = DFR8addimage(“Example3.hdf”, (VOIDP)picture2, WIDTH, HEIGHT, \</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932039"></A>					COMP_RLE);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932040"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932041"></A>	/* Set the second palette. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932042"></A>	status = DFR8setpalette(paletteB);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932043"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932044"></A>	/* Write the uncompressed image data to the HDF file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932045"></A>	status = DFR8addimage(“Example3.hdf”, (VOIDP)picture3, WIDTH, HEIGHT, \</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932046"></A>					COMP_NONE);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932047"></A>	status = DFR8addimage(“Example3.hdf”, (VOIDP)picture4, WIDTH, HEIGHT, \</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932048"></A>					COMP_NONE);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932049"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932050"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932051"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-928489"></A><A NAME="50593896_12091"></A>r8_ex3.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930882"></A>      PROGRAM WRITE IMAGE SETS</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931556"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931557"></A>      integer d8spal, d8pimg, d8aimg, status</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931558"></A>      integer*4 COMP_RLE, COMP_NONE, WIDTH, HEIGHT</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931559"></A>      parameter (COMP_RLE = 11,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931560"></A>     +           COMP_NONE = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931561"></A>     +           WIDTH = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931562"></A>     +           HEIGHT = 20)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931563"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931564"></A>      integer paletteA(768), paletteB(768)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931565"></A>      integer picture1(WIDTH, HEIGHT), picture2(WIDTH, HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931566"></A>      integer picture3(WIDTH, HEIGHT), picture4(WIDTH, HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931567"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931568"></A>C     Initialize the image data.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931569"></A>      do 20 j = 1, WIDTH</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931570"></A>       do 10 i = 1, HEIGHT</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931571"></A>        picture1(j, i) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931572"></A>        picture2(j, i) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931573"></A>        picture3(j, i) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931574"></A>        picture4(j, i) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931575"></A>10     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931576"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931577"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931578"></A>C     Set the first palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931579"></A>      status = d8spal(paletteA)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931580"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931581"></A>C     Write the compressed image data to the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931582"></A>      status = d8pimg(‘Example3.hdf’, picture1, WIDTH, HEIGHT, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931583"></A>     +               COMP_RLE)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931584"></A>      status = d8aimg(‘Example3.hdf’, picture2, WIDTH, HEIGHT, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931585"></A>     +               COMP_RLE)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931586"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931587"></A>C     Set the second palette.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931588"></A>      status = d8spal(paletteB)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931589"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931590"></A>C     Write the uncompressed image data to the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931591"></A>      status = d8aimg(‘Example3.hdf’, picture3, WIDTH, HEIGHT, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931592"></A>     +               COMP_NONE)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931593"></A>      status = d8aimg(‘Example3.hdf’, picture4, WIDTH, HEIGHT, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931594"></A>     +               COMP_NONE)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931595"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931596"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931597"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-931686"></A><A NAME="50593896_13407"></A>r8_ex4.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931689"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931690"></A>#include “hcomp.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931691"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931692"></A>#define WIDTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931693"></A>#define HEIGHT 5</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931694"></A>#define PIXEL_DEPTH 3</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931695"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931696"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931697"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931698"></A>	/* Initialize the image array. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931699"></A>	static uint8 raster_data[HEIGHT][WIDTH][PIXEL_DEPTH] = </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931700"></A>		{  1, 2, 3,  4, 5, 6,  7, 8, 9,  </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931701"></A>		  10,11,12, 13,14,15, 16,17,18, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931702"></A>		  19,20,21, 22,23,24, 25,26,27,  </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931703"></A>		  28,29,30, 31,32,33, 34,35,36,  </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931704"></A>		  37,38,39, 40,41,42, 43,44,45 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931705"></A>	static comp_info compress_info;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931706"></A>	intn status;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931707"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931708"></A>	/* Initialize JPEG compression structure. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931709"></A>	compress_info.jpeg.quality = 60;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931710"></A>	compress_info.jpeg.force_baseline = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931711"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931712"></A>	/* Set JPEG compression for storing the image. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931713"></A>	status = DFR8setcompress(COMP_JPEG, &amp;compress_info);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931714"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931715"></A>	/* Write the 8-bit image data to file. */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931716"></A>	status = DFR8addimage(“Example2.hdf”, (VOIDP)raster_data, WIDTH, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931717"></A>                          HEIGHT, COMP_JPEG);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931718"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931719"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931721"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-931762"></A><A NAME="50593896_32843"></A>r8_ex4.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931725"></A>      PROGRAM COMPRESS RIS8</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931813"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931814"></A>      integer d8aimg, d8scomp, d8sjpeg, status</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931815"></A>      integer*4 WIDTH, HEIGHT, PIXEL_DEPTH, COMP_JPEG</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931816"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931817"></A>C     COMP_JPEG is defined in hcomp.h.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931818"></A>      parameter(WIDTH = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931819"></A>     +          HEIGHT = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931820"></A>     +          COMP_JPEG = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931821"></A>     +          PIXEL_DEPTH = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931822"></A>      character raster_data(PIXEL_DEPTH, WIDTH, HEIGHT) </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931823"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931824"></A>C     Initialize the image array.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931825"></A>      data raster_data </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931826"></A>     + /  1, 2, 3,  4, 5, 6,  7, 8, 9,  </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931827"></A>     +    10,11,12, 13,14,15, 16,17,18, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931828"></A>     +    19,20,21, 22,23,24, 25,26,27,  </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931829"></A>     +    28,29,30, 31,32,33, 34,35,36,  </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931830"></A>     +    37,38,39, 40,41,42, 43,44,45  /</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931831"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931832"></A>C     Set compression.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931833"></A>      status = d8scomp(COMP_JPEG)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931834"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931835"></A>C     Set JPEG parameters to quality = 60, and turn compatibility on.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931836"></A>      status = d8sjpeg(60, 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931837"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931838"></A>C     Write the 8-bit image data to the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931839"></A>      status = d8aimg(‘Example2.hdf’, raster_data, WIDTH, HEIGHT,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931840"></A>     +              COMP_JPEG)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931841"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931842"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931843"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-931804"></A><A NAME="50593896_14048"></A>r8_ex5.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931757"></A>#include “hdf.h”</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931851"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931852"></A>#define WIDTH 5</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931853"></A>#define HEIGHT 6</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931854"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931855"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931856"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931857"></A>	uint8 raster_data[HEIGHT][WIDTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931858"></A>	int32 width, height;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931859"></A>	intn haspal, status;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931860"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931861"></A>	/* Get the dimensions of the image */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931862"></A>	status = DFR8getdims(“Example1.hdf”, &amp;width, &amp;height, &amp;haspal);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931863"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931864"></A>	/* Read the raster data if the dimensions are correct */</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931865"></A>	if (width &lt;= WIDTH &amp;&amp; height &lt;= HEIGHT)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931866"></A>		status = DFR8getimage(“Example1.hdf”, (VOIDP)raster_data, width, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931867"></A>						height, NULL);</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931868"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931869"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931870"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593896_pgfId-931758"></A><A NAME="50593896_30700"></A>r8_ex5.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931890"></A>      PROGRAM RASTER8      </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932121"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932122"></A>      character*1 image(5, 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932123"></A>      integer status, height, width, d8gimg, d8gdims, haspal</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932124"></A>      integer*4 width, height</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932125"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932126"></A>C     Get the dimensions of the image.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932127"></A>      status = d8gdims(‘Example1.hdf’, width, height, haspal)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932128"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932129"></A>C     Read the raster data if the dimensions are correct.</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932130"></A>      if (width .le. 5 .and. height .le. 6) then</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932131"></A>         status = d8gimg(‘Example1.hdf’, image, width, height, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932132"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932133"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932134"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-932135"></A>      PROGRAM GET LABEL LIST            </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930989"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930990"></A>      integer dallist</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930991"></A>      integer*4 DFTAG_NDG, LISTSIZE, DFS_MAXLEN</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930992"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930993"></A>      parameter (DFTAG_NDG = 720,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930994"></A>     +          LISTSIZE = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930995"></A>     +          DFS_MAXLEN = 255)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930996"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930997"></A>      character*60 label_list(DFS_MAXLEN*LISTSIZE)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930998"></A>      integer i, num_of_labels, start_position, ref_list(DFS_MAXLEN)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-930999"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931000"></A>      start_position = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931001"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931002"></A>      num_of_labels = dallist(‘Example1.hdf’, DFTAG_NDG, ref_list,</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931003"></A>     +                        label_list, 10, DFS_MAXLEN, </P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931004"></A>     +                        start_position)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931005"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931006"></A>      do 10 i = 1, num_of_labels</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931007"></A>        print *,’    Ref number:  ‘,ref_list(i),</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931008"></A>     +          ‘    Label: ‘,label_list(i)</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931009"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931010"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593896_pgfId-931011"></A>      end</P>
<P CLASS="Body">
<A NAME="50593896_pgfId-931012"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="50593896_pgfId-928518"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-929000"></A><A NAME="50593897_20548"></A>create_sds.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929721"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933506"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933507"></A>#define FILE_NAME     &quot;SDS.hdf&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933508"></A>#define SDS_NAME      &quot;SDStemplate&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933509"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933510"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933511"></A>#define RANK          2  /* Number of dimensions of the SDS */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933512"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933513"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933514"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933515"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933516"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933517"></A>   int32 sd_id, sds_id;     /* SD interface and data set identifiers */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933518"></A>   int32 dim_sizes[2];      /* sizes of the SDS dimensions */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933519"></A>   intn  status;            /* status returned by some routines; has value</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933520"></A>                               SUCCEED or FAIL */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933521"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933522"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933523"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933524"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933525"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933526"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933527"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933528"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933529"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933530"></A>   * Define the dimensions of the array to be created.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933531"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933532"></A>   dim_sizes[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933533"></A>   dim_sizes[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933534"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933535"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933536"></A>   * Create the data set with the name defined in SDS_NAME. Note that </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933537"></A>   * DFNT_INT32 indicates that the SDS data is of type int32. Refer to</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933538"></A>   * Table 2E for definitions of other types. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933539"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933540"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933541"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933542"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933543"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933544"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933545"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933546"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933547"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933548"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933549"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933550"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933551"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933552"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-929641"></A><A NAME="50593897_33922"></A>create_sds.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929791"></A>      program  create_SDS </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933560"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933561"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933562"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933563"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933564"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933565"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933566"></A>      integer      X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933567"></A>      parameter   (FILE_NAME = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933568"></A>     +             SDS_NAME = ’SDStemplate’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933569"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933570"></A>     +             Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933571"></A>     +             RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933572"></A>      integer      DFACC_CREATE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933573"></A>      parameter   (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933574"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933575"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933576"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933577"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933578"></A>      integer sfstart, sfcreate, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933579"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933580"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933581"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933582"></A>      integer sd_id, sds_id, dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933583"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933584"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933585"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933586"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933587"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933588"></A>C     Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933589"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933590"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933591"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933592"></A>C     Define dimensions of the array to be created.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933593"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933594"></A>      dim_sizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933595"></A>      dim_sizes(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933596"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933597"></A>C     Create the array with the name defined in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933598"></A>C     Note that DFNT_INT32 indicates that the SDS data is of type</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933599"></A>C     integer. Refer to Tables 2E and 2I for the definition of other types.  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933600"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933601"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933602"></A>     .                  dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933603"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933604"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933605"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933606"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933607"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933608"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933609"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933610"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933611"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933612"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933613"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-929010"></A><A NAME="50593897_11770"></A>write_to_sds.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929109"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933621"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933622"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933623"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933624"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933625"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933626"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933627"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933628"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933629"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933630"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933631"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933632"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933633"></A>   int32 data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933634"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933635"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933636"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933637"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933638"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933639"></A>   * Data set data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933640"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933641"></A>   for (j = 0; j &lt; Y_LENGTH; j++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933642"></A>       for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933643"></A>            data[j][i] = (i + j) + 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933644"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933645"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933646"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933647"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933648"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933649"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933650"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933651"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933652"></A>   * Attach to the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933653"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933654"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933655"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933656"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933657"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933658"></A>   * Define the location and size of the data to be written to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933659"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933660"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933661"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933662"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933663"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933664"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933665"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933666"></A>   * Write the stored data to the data set. The third argument is set to NULL</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933667"></A>   * to specify contiguous data elements. The last argument must</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933668"></A>   * be explicitly cast to a generic pointer since SDwritedata is designed</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933669"></A>   * to write generic data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933670"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933671"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933672"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933673"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933674"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933675"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933676"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933677"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933678"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933679"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933680"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933681"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933682"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933683"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-929118"></A><A NAME="50593897_42067"></A>write_to_sds.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929361"></A>      program  write_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933692"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933693"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933694"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933695"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933696"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933697"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933698"></A>      integer      X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933699"></A>      parameter   (FILE_NAME = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933700"></A>     +             SDS_NAME = ’SDStemplate’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933701"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933702"></A>     +             Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933703"></A>     +             RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933704"></A>      integer      DFACC_WRITE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933705"></A>      parameter   (DFACC_WRITE = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933706"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933707"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933708"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933709"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933710"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933711"></A>      integer sfstart, sfselect, sfwdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933712"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933713"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933714"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933715"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933716"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933717"></A>      integer i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933718"></A>      integer data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933719"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933720"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933721"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933722"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933723"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933724"></A>C     Data set data initialization. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933725"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933726"></A>      do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933727"></A>         do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933728"></A>            data(i, j) = i + j - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933729"></A>10         continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933730"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933731"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933732"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933733"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933734"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933735"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933736"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933737"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933738"></A>C     Attach to the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933739"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933740"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933741"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933742"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933743"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933744"></A>C     Define the location and size of the data to be written</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933745"></A>C     to the data set. Note that setting values of the array stride to 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933746"></A>C     specifies the contiguous writing of data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933747"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933748"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933749"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933750"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933751"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933752"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933753"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933754"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933755"></A>C     Write the stored data to the data set named in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933756"></A>C     Note that the routine sfwdata is used instead of sfwcdata </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933757"></A>C     to write the numeric data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933758"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933759"></A>      status = sfwdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933760"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933761"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933762"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933763"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933764"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933765"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933766"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933767"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933768"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933769"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933770"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-929634"></A><A NAME="50593897_34945"></A>write_slab.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930835"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933778"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933779"></A>#define FILE_NAME     &quot;SLABS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933780"></A>#define SDS_NAME      &quot;FilledBySlabs&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933781"></A>#define X_LENGTH      4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933782"></A>#define Y_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933783"></A>#define Z_LENGTH      6</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933784"></A>#define RANK          3  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933785"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933786"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933787"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933788"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933789"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933790"></A>   int32 sd_id, sds_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933791"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933792"></A>   int32 dim_sizes[3], start[3], edges[3];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933793"></A>   int32 data[Z_LENGTH][Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933794"></A>   int32 zx_data[Z_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933795"></A>   int   i, j, k;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933796"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933797"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933798"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933799"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933800"></A>   * Data initialization. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933801"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933802"></A>   for (k = 0; k &lt; Z_LENGTH; k++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933803"></A>       for (j = 0; j &lt; Y_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933804"></A>           for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933805"></A>               data[k][j][i] = (i + 1) + (j + 1) + (k + 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933806"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933807"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933808"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933809"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933810"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933811"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933812"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933813"></A>   * Define dimensions of the array to be created.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933814"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933815"></A>   dim_sizes[0] = Z_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933816"></A>   dim_sizes[1] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933817"></A>   dim_sizes[2] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933818"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933819"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933820"></A>   * Create the array with the name defined in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933821"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933822"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933823"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933824"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933825"></A>   * Set the parameters start and edges to write  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933826"></A>   * a 6x4 element slab of data to the data set; note</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933827"></A>   * that edges[1] is set to 1 to define a 2-dimensional slab</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933828"></A>   * parallel to the ZX plane.  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933829"></A>   * start[1] (slab position in the array) is initialized inside</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933830"></A>   * the for loop.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933831"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933832"></A>   edges[0] = Z_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933833"></A>   edges[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933834"></A>   edges[2] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933835"></A>   start[0] = start[2] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933836"></A>   for (j = 0; j &lt; Y_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933837"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933838"></A>       start[1] = j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933839"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933840"></A>       /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933841"></A>       * Initialize zx_data buffer (data slab).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933842"></A>       */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933843"></A>       for ( k = 0; k &lt; Z_LENGTH; k++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933844"></A>       {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933845"></A>           for ( i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933846"></A>           {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933847"></A>                 zx_data[k][i] = data[k][j][i];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933848"></A>           }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933849"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933850"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933851"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933852"></A>   * Write the data slab into the SDS array defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933853"></A>   * Note that the 3rd parameter is NULL which indicates that consecutive</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933854"></A>   * slabs in the Y direction are written.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933855"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933856"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)zx_data); </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933857"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933858"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933859"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933860"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933861"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933862"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933863"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933864"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933865"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933866"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933867"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933868"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933869"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930836"></A><A NAME="50593897_23700"></A>write_slab.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929603"></A>      program  write_slab</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933877"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933878"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933879"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933880"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933881"></A>      character*9  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933882"></A>      character*13 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933883"></A>      integer      X_LENGTH, Y_LENGTH, Z_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933884"></A>      parameter   (FILE_NAME = ’SLABS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933885"></A>     +             SDS_NAME = ’FilledBySlabs’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933886"></A>     +             X_LENGTH = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933887"></A>     +             Y_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933888"></A>     +             Z_LENGTH = 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933889"></A>     +             RANK     = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933890"></A>      integer      DFACC_CREATE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933891"></A>      parameter   (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933892"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933893"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933894"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933895"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933896"></A>      integer sfstart, sfcreate, sfwdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933897"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933898"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933899"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933900"></A>      integer sd_id, sds_id</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933901"></A>      integer dim_sizes(3), start(3), edges(3), stride(3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933902"></A>      integer i, j, k, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933903"></A>      integer data(X_LENGTH, Y_LENGTH, Z_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933904"></A>      integer xz_data(X_LENGTH, Z_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933905"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933906"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933907"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933908"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933909"></A>C     Data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933910"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933911"></A>      do 30 k = 1, Z_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933912"></A>         do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933913"></A>            do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933914"></A>               data(i, j, k) = i + j + k </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933915"></A>10            continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933916"></A>20         continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933917"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933918"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933919"></A>C     Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933920"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933921"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933922"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933923"></A>C     Define dimensions of the array to be created. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933924"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933925"></A>      dim_sizes(1) = X_LENGTH   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933926"></A>      dim_sizes(2) = Y_LENGTH   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933927"></A>      dim_sizes(3) = Z_LENGTH   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933928"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933929"></A>C     Create the data set with the name defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933930"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933931"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933932"></A>     .                  dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933933"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933934"></A>C     Set the parameters start and edges to write </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933935"></A>C     a 4x6 element slab of data to the data set;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933936"></A>C     note that edges(2) is set to 1 to define a 2 dimensional slab</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933937"></A>C     parallel to the XZ plane;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933938"></A>C     start(2) (slab position in the array) is initialized inside the</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933939"></A>C     for loop.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933940"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933941"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933942"></A>      edges(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933943"></A>      edges(3) = Z_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933944"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933945"></A>      start(3) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933946"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933947"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933948"></A>      stride(3) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933949"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933950"></A>      do 60 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933951"></A>       start(2) = j - 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933952"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933953"></A>C     Initialize the buffer xz_data (data slab).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933954"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933955"></A>       do 50 k = 1, Z_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933956"></A>        do 40 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933957"></A>         xz_data(i, k) = data(i, j, k)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933958"></A>40      continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933959"></A>50     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933960"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933961"></A>C     Write the data slab into SDS array defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933962"></A>C     Note that the elements of array stride are set to 1 to</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933963"></A>C     specify that the consecutive slabs in the Y direction are written.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933964"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933965"></A>         status = sfwdata(sds_id, start, stride, edges, xz_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933966"></A>60    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933967"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933968"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933969"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933970"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933971"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933972"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933973"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933974"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933975"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933976"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933977"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929472"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-929804"></A><A NAME="50593897_32731"></A>alter_sds_values.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929914"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933985"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933986"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933987"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933988"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933989"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933990"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933991"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933992"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933993"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933994"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933995"></A>   int32 new_data[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933996"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933997"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933998"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933999"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934000"></A>   * Open the file and initialize the SD interface with write access.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934001"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934002"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934003"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934004"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934005"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934006"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934007"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934008"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934009"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934010"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934011"></A>   * Set up the start and edge parameters to write new element values</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934012"></A>   * into 10th row, 2nd column place, and 11th row, 2nd column place. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934013"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934014"></A>   start[0] = 9;     /* starting at 10th row   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934015"></A>   start[1] = 1;     /* starting at 2nd column */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934016"></A>   edges[0] = 2;     /* rows 10th and 11th     */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934017"></A>   edges[1] = 1;     /* column 2nd only        */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934018"></A>       </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934019"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934020"></A>   * Initialize buffer with the new values to be written.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934021"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934022"></A>   new_data[0] = new_data[1] = 1000; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934023"></A>        </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934024"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934025"></A>   * Write the new values. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934026"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934027"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)new_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934028"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934029"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934030"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934031"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934032"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934033"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934034"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934035"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934036"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934037"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934038"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934039"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-929915"></A><A NAME="50593897_22515"></A>alter_sds_values.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930040"></A>      program  alter_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934048"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934049"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934050"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934051"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934052"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934053"></A>      integer      DFACC_WRITE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934054"></A>      parameter   (FILE_NAME = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934055"></A>     +             DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934056"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934057"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934058"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934059"></A>      integer sfstart, sfselect, sfwdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934060"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934061"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934062"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934063"></A>      integer sd_id, sds_id, sds_index</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934064"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934065"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934066"></A>      integer new_data(2) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934067"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934068"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934069"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934070"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934071"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934072"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934073"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934074"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934075"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934076"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934077"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934078"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934079"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934080"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934081"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934082"></A>C     Initialize the start, edge, and stride parameters to write </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934083"></A>C     two elements into 2nd row, 10th column and 11th column places.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934084"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934085"></A>C     Specify 2nd row.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934086"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934087"></A>      start(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934088"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934089"></A>C     Specify 10th column.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934090"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934091"></A>      start(2) = 9 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934092"></A>      edges(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934093"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934094"></A>C     Two elements are written along 2nd row.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934095"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934096"></A>      edges(2) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934097"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934098"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934099"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934100"></A>C     Initialize the new values to be written.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934101"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934102"></A>      new_data(1) = 1000</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934103"></A>      new_data(2) = 1000</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934104"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934105"></A>C     Write the new values. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934106"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934107"></A>      status = sfwdata(sds_id, start, stride, edges, new_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934108"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934109"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934110"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934111"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934112"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934113"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934114"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934115"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934116"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934117"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934118"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930041"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930058"></A><A NAME="50593897_14647"></A>unlimited_sds.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930168"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934127"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934128"></A>#define FILE_NAME     &quot;SDSUNLIMITED.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934129"></A>#define SDS_NAME      &quot;AppendableData&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934130"></A>#define X_LENGTH      10</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934131"></A>#define Y_LENGTH      10</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934132"></A>#define RANK          2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934133"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934134"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934135"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934136"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934137"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934138"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934139"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934140"></A>   int32 dim_sizes[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934141"></A>   int32 data[Y_LENGTH][X_LENGTH], append_data[X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934142"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934143"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934144"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934145"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934146"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934147"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934148"></A>   * Data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934149"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934150"></A>   for (j = 0; j &lt; Y_LENGTH; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934151"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934152"></A>       for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934153"></A>           data[j][i] = (i + 1) + (j + 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934154"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934155"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934156"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934157"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934158"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934159"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934160"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934161"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934162"></A>   * Define dimensions of the array. Make the first dimension </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934163"></A>   * appendable by defining its length to be unlimited.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934164"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934165"></A>   dim_sizes[0] = SD_UNLIMITED;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934166"></A>   dim_sizes[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934167"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934168"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934169"></A>   * Create the array data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934170"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934171"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934172"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934173"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934174"></A>   * Define the location and the size of the data to be written </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934175"></A>   * to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934176"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934177"></A>   start[0] = start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934178"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934179"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934180"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934181"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934182"></A>   * Write the data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934183"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934184"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934185"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934186"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934187"></A>   * Terminate access to the array data set, terminate access </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934188"></A>   * to the SD interface, and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934189"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934190"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934191"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934192"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934193"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934194"></A>   * Store the array values to be appended to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934195"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934196"></A>   for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934197"></A>       append_data[i] = 1000 + i;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934198"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934199"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934200"></A>   * Reopen the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934201"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934202"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934203"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934204"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934205"></A>   * Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934206"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934207"></A>   sds_index = 0; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934208"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934209"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934210"></A>   /*  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934211"></A>   * Check if selected SDS is unlimited. If it is not, then terminate access</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934212"></A>   * to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934213"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934214"></A>   if ( SDisrecord (sds_id) ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934215"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934216"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934217"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934218"></A>   * Define the location of the append to start at the first column </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934219"></A>   * of the 11th row of the data set and to stop at the end of the</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934220"></A>   * eleventh row.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934221"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934222"></A>   start[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934223"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934224"></A>   edges[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934225"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934226"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934227"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934228"></A>   * Append data to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934229"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934230"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)append_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934231"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934232"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934233"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934234"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934235"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934236"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934237"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934238"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934239"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934240"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934241"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934242"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934243"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930169"></A><A NAME="50593897_25578"></A>unlimited_sds.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930294"></A>      program append_sds</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934255"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934256"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934257"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934258"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934259"></A>      character*16  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934260"></A>      character*14  SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934261"></A>      integer       X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934262"></A>      parameter    (FILE_NAME = ’SDSUNLIMITED.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934263"></A>     +              SDS_NAME = ’AppendableData’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934264"></A>     +              X_LENGTH = 10, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934265"></A>     +              Y_LENGTH = 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934266"></A>     +              RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934267"></A>      integer       DFACC_CREATE, DFACC_WRITE, SD_UNLIMITED,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934268"></A>     +              DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934269"></A>      parameter    (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934270"></A>     +              DFACC_WRITE  = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934271"></A>     +              SD_UNLIMITED = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934272"></A>     +              DFNT_INT32 =   24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934273"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934274"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934275"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934276"></A>      integer sfstart, sfcreate, sfwdata, sfselect </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934277"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934278"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934279"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934280"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934281"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934282"></A>      integer dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934283"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934284"></A>      integer i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934285"></A>      integer data (X_LENGTH, Y_LENGTH), append_data(X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934286"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934287"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934288"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934289"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934290"></A>C     Data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934291"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934292"></A>      do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934293"></A>         do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934294"></A>            data(i, j) = i + j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934295"></A>10      continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934296"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934297"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934298"></A>C     Create the file and initialize the SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934299"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934300"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934301"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934302"></A>C     Define dimensions of the array. Make the</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934303"></A>C     last dimension appendable by defining its length as unlimited.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934304"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934305"></A>      dim_sizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934306"></A>      dim_sizes(2) = SD_UNLIMITED</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934307"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934308"></A>C     Create the array data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934309"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934310"></A>     .                  dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934311"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934312"></A>C     Define the location and the size of the data to be written</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934313"></A>C     to the data set. Note that the elements of array stride are</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934314"></A>C     set to 1 for contiguous writing.    </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934315"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934316"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934317"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934318"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934319"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934320"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934321"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934322"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934323"></A>C     Write the data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934324"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934325"></A>      status = sfwdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934326"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934327"></A>C     Terminate access to the data set, terminate access</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934328"></A>C     to the SD interface, and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934329"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934330"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934331"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934332"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934333"></A>C     Store the array values to be appended to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934334"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934335"></A>      do 30 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934336"></A>         append_data(i) = 1000 + i - 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934337"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934338"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934339"></A>C     Reopen the file and initialize the SD. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934340"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934341"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934342"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934343"></A>C     Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934344"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934345"></A>      sds_index = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934346"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934347"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934348"></A>C     Define the location of the append to start at the 11th </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934349"></A>C     column of the 1st row and to stop at the end of the 10th row.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934350"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934351"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934352"></A>      start(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934353"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934354"></A>      edges(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934355"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934356"></A>C     Append the data to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934357"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934358"></A>      status = sfwdata(sds_id, start, stride, edges, append_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934359"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934360"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934361"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934362"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934363"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934364"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934365"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934366"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934367"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934368"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934369"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930295"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930316"></A><A NAME="50593897_42240"></A>compress_sds.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930426"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933201"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933202"></A>#define FILE_NAME      &quot;SDScompressed.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933203"></A>#define SDS_NAME       &quot;SDSgzip&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933204"></A>#define X_LENGTH       5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933205"></A>#define Y_LENGTH       16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933206"></A>#define RANK           2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933207"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933208"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933209"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933210"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933211"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933212"></A>   int32     sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933213"></A>   intn      status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933214"></A>   int32     comp_type;    /* Compression flag */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933215"></A>   comp_info c_info;   /* Compression structure */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933216"></A>   int32     start[2], edges[2], dim_sizes[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933217"></A>   int32     data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933218"></A>   int       i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933219"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933220"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933221"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933222"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933223"></A>   * Buffer array data and define array dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933224"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933225"></A>   for (j = 0; j &lt; Y_LENGTH; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933226"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933227"></A>	for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933228"></A>		data[j][i] = (i + j) + 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933229"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933230"></A>   dim_sizes[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933231"></A>   dim_sizes[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933232"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933233"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933234"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933235"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933236"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933237"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933238"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933239"></A>   * Create the data set with the name defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933240"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933241"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933242"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933243"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933244"></A>   * Ininitialize compression structure element and compression</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933245"></A>   * flag for GZIP compression and call SDsetcompress.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933246"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933247"></A>   *   To use the Skipping Huffman compression method, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933248"></A>   *          comp_type = COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933249"></A>   *          c_info.skphuff.skp_size = value</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933250"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933251"></A>   *   To use the RLE compression method, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933252"></A>   *          comp_type = COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933253"></A>   *   No structure element needs to be initialized.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933254"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933255"></A>   comp_type = COMP_CODE_DEFLATE;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933256"></A>   c_info.deflate.level = 6;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933257"></A>   status = SDsetcompress (sds_id, comp_type, &amp;c_info); </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933258"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933259"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933260"></A>   * Define the location and size of the data set</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933261"></A>   * to be written to the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933262"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933263"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933264"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933265"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933266"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933267"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933268"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933269"></A>   * Write the stored data to the data set. The last argument </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933270"></A>   * must be explicitly cast to a generic pointer since SDwritedata</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933271"></A>   * is designed to write generic data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933272"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933273"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933274"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933275"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933276"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933277"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933278"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933279"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933280"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933281"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933282"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933283"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933284"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933285"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933286"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930427"></A><A NAME="50593897_38244"></A>compress_sds.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930552"></A>      program  write_compressed_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933294"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933295"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933296"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933297"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933298"></A>      character*17  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933299"></A>      character*7   SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933300"></A>      integer       X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933301"></A>      parameter    (FILE_NAME = ’SDScompressed.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933302"></A>     +              SDS_NAME = ’SDSgzip’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933303"></A>     +              X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933304"></A>     +              Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933305"></A>     +              RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933306"></A>      integer       DFACC_CREATE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933307"></A>      parameter    (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933308"></A>     +              DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933309"></A>      integer       COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933310"></A>      parameter    (COMP_CODE_DEFLATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933311"></A>      integer       DEFLATE_LEVEL</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933312"></A>      parameter    (DEFLATE_LEVEL = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933313"></A>C     To use Skipping Huffman compression method, declare </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933314"></A>C            integer   COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933315"></A>C            parameter(COMP_CODE_SKPHUFF = 3) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933316"></A>C     To use RLE compression method, declare</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933317"></A>C            integer   COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933318"></A>C            parameter(COMP_CODE_RLE = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933319"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933320"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933321"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933322"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933323"></A>      integer sfstart, sfcreate, sfwdata, sfendacc, sfend,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933324"></A>     +        sfscompress</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933325"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933326"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933327"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933328"></A>      integer  sd_id, sds_id, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933329"></A>      integer  start(2), edges(2), stride(2), dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933330"></A>      integer  comp_type</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933331"></A>      integer  comp_prm(1)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933332"></A>      integer  data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933333"></A>      integer  i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933334"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933335"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933336"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933337"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933338"></A>C     Buffer array data and define array dimensions. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933339"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933340"></A>      do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933341"></A>         do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933342"></A>            data(i, j) = i + j - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933343"></A>10       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933344"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933345"></A>      dim_sizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933346"></A>      dim_sizes(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933347"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933348"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933349"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933350"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933351"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933352"></A>C     Create the data set with the name SDS_NAME.  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933353"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933354"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933355"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933356"></A>C     Initialize compression parameter (deflate level)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933357"></A>C     and call sfscompress function</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933358"></A>C     For Skipping Huffman compression, comp_prm(1) should be set</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933359"></A>C     to skipping sizes value (skp_size).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933360"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933361"></A>      comp_type   = COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933362"></A>      comp_prm(1) = deflate_level</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933363"></A>      status      = sfscompress(sds_id, comp_type, comp_prm(1))</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933364"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933365"></A>C     Define the location and size of the data that will be written to</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933366"></A>C     the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933367"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933368"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933369"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933370"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933371"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933372"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933373"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933374"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933375"></A>C     Write the stored data to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933376"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933377"></A>      status = sfwdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933378"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933379"></A>C     Terminate access to the  data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933380"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933381"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933382"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933383"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933384"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933385"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933386"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933387"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933388"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930895"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930896"></A><A NAME="50593897_36215"></A>mv_sds_to_external.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930680"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934380"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934381"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934382"></A>#define EXT_FILE_NAME &quot;ExternalSDS&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934383"></A>#define OFFSET        24</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934384"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934385"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934386"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934387"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934388"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934389"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934390"></A>   int32 sd_id, sds_id, sds_index, offset;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934391"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934392"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934393"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934394"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934395"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934396"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934397"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934398"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934399"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934400"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934401"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934402"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934403"></A>   sds_index = 0;   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934404"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934405"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934406"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934407"></A>   * Create a file with the name EXT_FILE_NAME and move the data set</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934408"></A>   * values into it, starting at byte location OFFSET.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934409"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934410"></A>   status = SDsetexternalfile (sds_id, EXT_FILE_NAME, OFFSET);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934411"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934412"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934413"></A>   * Terminate access to the data set, SD interface, and file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934414"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934415"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934416"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934417"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934418"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930681"></A><A NAME="50593897_30142"></A>mv_sds_to_external.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930806"></A>      program  write_extfile</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934427"></A>      implicit none </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934428"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934429"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934430"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934431"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934432"></A>      character*11 EXT_FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934433"></A>      integer      OFFSET</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934434"></A>      integer      DFACC_WRITE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934435"></A>      parameter   (FILE_NAME      = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934436"></A>     +             EXT_FILE_NAME  = ’ExternalSDS’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934437"></A>     +             OFFSET         = 24,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934438"></A>     +             DFACC_WRITE    = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934439"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934440"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934441"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934442"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934443"></A>      integer sfstart, sfselect, sfsextf, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934444"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934445"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934446"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934447"></A>      integer sd_id, sds_id, sds_index, offset</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934448"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934449"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934450"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934451"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934452"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934453"></A>C     Open the HDF file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934454"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934455"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934456"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934457"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934458"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934459"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934460"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934461"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934462"></A>C     Create a file with the name EXT_FILE_NAME and move the data set</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934463"></A>C     into it, starting at byte location OFFSET.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934464"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934465"></A>      status = sfsextf(sds_id, EXT_FILE_NAME, OFFSET)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934466"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934467"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934468"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934469"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934470"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934471"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934472"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934473"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934474"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934475"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934476"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-930904"></A><A NAME="50593897_23399"></A>read_from_sds.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931014"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934485"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934486"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934487"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934488"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934489"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934490"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934491"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934492"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934493"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934494"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934495"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934496"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934497"></A>   int32 data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934498"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934499"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934500"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934501"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934502"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934503"></A>   * Open the file for reading and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934504"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934505"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934506"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934507"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934508"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934509"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934510"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934511"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934512"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934513"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934514"></A>   * Set elements of array start to 0, elements of array edges </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934515"></A>   * to SDS dimensions,and use NULL for the argument stride in SDreaddata</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934516"></A>   * to read the entire data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934517"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934518"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934519"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934520"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934521"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934522"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934523"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934524"></A>   * Read entire data into data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934525"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934526"></A>   status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934527"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934528"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934529"></A>   * Print 10th row; the following numbers should be displayed.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934530"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934531"></A>   *         10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934532"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934533"></A>   for (j = 0; j &lt; X_LENGTH; j++) printf (&quot;%d &quot;, data[9][j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934534"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934535"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934536"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934537"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934538"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934539"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934540"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934541"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934542"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934543"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934544"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934545"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934546"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931015"></A><A NAME="50593897_39773"></A>read_from_sds.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931140"></A>      program  read_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934554"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934555"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934556"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934557"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934558"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934559"></A>      integer      X_LENGTH, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934560"></A>      parameter   (FILE_NAME  = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934561"></A>     +             X_LENGTH = 5, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934562"></A>     +             Y_LENGTH = 16)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934563"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934564"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934565"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934566"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934567"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934568"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934569"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934570"></A>      integer sfstart, sfselect, sfrdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934571"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934572"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934573"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934574"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934575"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934576"></A>      integer data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934577"></A>      integer j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934578"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934579"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934580"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934581"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934582"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934583"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934584"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934585"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934586"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934587"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934588"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934589"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934590"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934591"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934592"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934593"></A>C     Set elements of the array start to 0, elements of the array edges to </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934594"></A>C     SDS dimensions, and elements of the array stride to 1 to read the</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934595"></A>C     entire data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934596"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934597"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934598"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934599"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934600"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934601"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934602"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934603"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934604"></A>C     Read entire data into data array. Note that sfrdata is used</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934605"></A>C     to read the numeric data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934606"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934607"></A>      status = sfrdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934608"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934609"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934610"></A>C     Print 10th column; the following numbers are displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934611"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934612"></A>C           10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934613"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934614"></A>      write(*,*) (data(j,10), j = 1, X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934615"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934616"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934617"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934618"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934619"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934620"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934621"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934622"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934623"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934624"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934625"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931160"></A><A NAME="50593897_19077"></A>read_subsets.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931270"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934634"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934635"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934636"></A>#define SUB1_LENGTH   5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934637"></A>#define SUB2_LENGTH   4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934638"></A>#define SUB3_LENGTH1  2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934639"></A>#define SUB3_LENGTH2  3 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934640"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934641"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934642"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934643"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934644"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934645"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934646"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934647"></A>   int32 start[2], edges[2], stride[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934648"></A>   int32 sub1_data[SUB1_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934649"></A>   int32 sub2_data[SUB2_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934650"></A>   int32 sub3_data[SUB3_LENGTH2][SUB3_LENGTH1];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934651"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934652"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934653"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934654"></A>        </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934655"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934656"></A>   * Open the file for reading and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934657"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934658"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934659"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934660"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934661"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934662"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934663"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934664"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934665"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934666"></A>   *         Reading the first subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934667"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934668"></A>   * Set elements of start, edges, and stride arrays to read</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934669"></A>   * every 3rd element in the 2nd column starting at 4th row.   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934670"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934671"></A>   start[0] = 3;   /* 4th row */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934672"></A>   start[1] = 1;   /* 2nd column */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934673"></A>   edges[0] = SUB1_LENGTH; /* SUB1_LENGTH elements are read along 2nd column*/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934674"></A>   edges[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934675"></A>   stride[0] = 3;  /* every 3rd element is read along 2nd column */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934676"></A>   stride[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934677"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934678"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934679"></A>   * Read the data from the file into sub1_data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934680"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934681"></A>   status = SDreaddata (sds_id, start, stride, edges, (VOIDP)sub1_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934682"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934683"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934684"></A>   * Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934685"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934686"></A>   *             5 8 1000 14 17   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934687"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934688"></A>   for (j = 0; j &lt; SUB1_LENGTH; j++) printf (&quot;%d &quot;, sub1_data[j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934689"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934690"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934691"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934692"></A>   *         Reading the second subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934693"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934694"></A>   * Set elements of start and edges arrays to read</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934695"></A>   * first 4 elements of the 10th row. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934696"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934697"></A>   start[0] = 9;  /* 10th row  */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934698"></A>   start[1] = 0;  /* 1st column */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934699"></A>   edges[0] = 1; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934700"></A>   edges[1] = SUB2_LENGTH; /* SUB2_LENGTH elements are read along 10th row */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934701"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934702"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934703"></A>   * Read data from the file into sub2_data array. Note that the third</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934704"></A>   * parameter is set to NULL for contiguous reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934705"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934706"></A>   status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)sub2_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934707"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934708"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934709"></A>   * Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934710"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934711"></A>   *            10 1000 12 13 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934712"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934713"></A>   for (j = 0; j &lt; SUB2_LENGTH; j++) printf (&quot;%d &quot;, sub2_data[j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934714"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934715"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934716"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934717"></A>   *         Reading the third subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934718"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934719"></A>   * Set elements of the arrays start, edges, and stride to read</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934720"></A>   * every 6th element in the column and 4th element in the row</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934721"></A>   * starting at 1st column, 3d row.    </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934722"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934723"></A>   start[0] = 2;  /* 3d row */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934724"></A>   start[1] = 0;  /* 1st column */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934725"></A>   edges[0] = SUB3_LENGTH2; /* SUB3_LENGTH2 elements are read along</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934726"></A>                               each column */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934727"></A>   edges[1] = SUB3_LENGTH1; /* SUB3_LENGTH1 elements are read along  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934728"></A>                               each row */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934729"></A>   stride[0] = 6; /* read every 6th element along each column */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934730"></A>   stride[1] = 4; /* read every 4th element along each row */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934731"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934732"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934733"></A>   * Read the data from the file into sub3_data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934734"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934735"></A>   status = SDreaddata (sds_id, start, stride, edges, (VOIDP)sub3_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934736"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934737"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934738"></A>   * Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934739"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934740"></A>   *            3 7 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934741"></A>   *            9 13  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934742"></A>   *            15 19 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934743"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934744"></A>   for ( j = 0; j &lt; SUB3_LENGTH2; j++ ) {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934745"></A>       for (i = 0; i &lt; SUB3_LENGTH1; i++) printf (&quot;%d &quot;, sub3_data[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934746"></A>       printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934747"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934748"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934749"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934750"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934751"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934752"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934753"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934754"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934755"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934756"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934757"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934758"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931271"></A><A NAME="50593897_34795"></A>read_subsets.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931396"></A>      program  read_subsets</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934766"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934767"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934768"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934769"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934770"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934771"></A>      parameter   (FILE_NAME  = ’SDS.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934772"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934773"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934774"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934775"></A>      integer      SUB1_LENGTH, SUB2_LENGTH, SUB3_LENGTH1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934776"></A>     +             SUB3_LENGTH2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934777"></A>      parameter   (SUB1_LENGTH  = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934778"></A>     +             SUB2_LENGTH  = 4, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934779"></A>     +             SUB3_LENGTH1 = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934780"></A>     +             SUB3_LENGTH2 = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934781"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934782"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934783"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934784"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934785"></A>      integer sfstart, sfselect, sfrdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934786"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934787"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934788"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934789"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934790"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934791"></A>      integer sub1_data(SUB1_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934792"></A>      integer sub2_data(SUB2_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934793"></A>      integer sub3_data(SUB3_LENGTH1,SUB3_LENGTH2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934794"></A>      integer i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934795"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934796"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934797"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934798"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934799"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934800"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934801"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934802"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934803"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934804"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934805"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934806"></A>      sds_id =sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934807"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934808"></A>C            Reading the first subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934809"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934810"></A>C     Set elements of start, stride, and edges arrays to read </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934811"></A>C     every 3d element in in the 2nd row starting in the 4th column. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934812"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934813"></A>      start(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934814"></A>      start(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934815"></A>      edges(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934816"></A>      edges(2) = SUB1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934817"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934818"></A>      stride(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934819"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934820"></A>C     Read the data from sub1_data array. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934821"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934822"></A>      status = sfrdata(sds_id, start, stride, edges, sub1_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934823"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934824"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934825"></A>C     Print what we have just read, the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934826"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934827"></A>C           5 8 1000 14 17 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934828"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934829"></A>      write(*,*) (sub1_data(j), j = 1, SUB1_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934830"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934831"></A>C            Reading the second subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934832"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934833"></A>C     Set elements of start, stride, and edges arrays to read </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934834"></A>C     first 4 elements of 10th column. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934835"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934836"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934837"></A>      start(2) = 9 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934838"></A>      edges(1) = SUB2_LENGTH </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934839"></A>      edges(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934840"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934841"></A>      stride(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934842"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934843"></A>C     Read the data into sub2_data array. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934844"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934845"></A>      status = sfrdata(sds_id, start, stride, edges, sub2_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934846"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934847"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934848"></A>C     Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934849"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934850"></A>C          10 1000 12 13 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934851"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934852"></A>      write(*,*) (sub2_data(j), j = 1, SUB2_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934853"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934854"></A>C            Reading the third subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934855"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934856"></A>C     Set elements of start, stride and edges arrays to read </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934857"></A>C     every 6th element in the row and every 4th element in the column</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934858"></A>C     starting at 1st row, 3rd column.  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934859"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934860"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934861"></A>      start(2) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934862"></A>      edges(1) = SUB3_LENGTH1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934863"></A>      edges(2) = SUB3_LENGTH2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934864"></A>      stride(1) = 4 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934865"></A>      stride(2) = 6 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934866"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934867"></A>C     Read the data from the file into sub3_data array. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934868"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934869"></A>      status = sfrdata(sds_id, start, stride, edges, sub3_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934870"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934871"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934872"></A>C     Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934873"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934874"></A>C         3 9 15</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934875"></A>C         7 13 19 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934876"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934877"></A>      do 50 i = 1, SUB3_LENGTH1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934878"></A>         write(*,*) (sub3_data(i,j), j = 1, SUB3_LENGTH2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934879"></A>50    continue    </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934880"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934881"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934882"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934883"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934884"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934885"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934886"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934887"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934888"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934889"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934890"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931412"></A><A NAME="50593897_16273"></A>get_info.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931522"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934898"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934899"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934900"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934901"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934902"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934903"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934904"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934905"></A>   int32 sd_id, sds_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934906"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934907"></A>   int32 n_datasets, n_file_attrs, index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934908"></A>   int32 dim_sizes[MAX_VAR_DIMS];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934909"></A>   int32 rank, data_type, n_attrs;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934910"></A>   char  name[MAX_NC_NAME];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934911"></A>   int   i;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934912"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934913"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934914"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934915"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934916"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934917"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934918"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934919"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934920"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934921"></A>   * Determine the number of data sets in the file and the number</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934922"></A>   * of file attributes. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934923"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934924"></A>   status = SDfileinfo (sd_id, &amp;n_datasets, &amp;n_file_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934925"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934926"></A>   /*  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934927"></A>   * Access every data set and print its name, rank, dimension sizes,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934928"></A>   * data type, and number of attributes. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934929"></A>   * The following information should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934930"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934931"></A>   *               name = SDStemplate</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934932"></A>   *               rank = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934933"></A>   *               dimension sizes are : 16  5  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934934"></A>   *               data type is  24</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934935"></A>   *               number of attributes is  0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934936"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934937"></A>   for (index = 0; index &lt; n_datasets; index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934938"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934939"></A>       sds_id = SDselect (sd_id, index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934940"></A>       status = SDgetinfo (sds_id, name, &amp;rank, dim_sizes, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934941"></A>                           &amp;data_type, &amp;n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934942"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934943"></A>       printf (&quot;name = %s\n&quot;, name);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934944"></A>       printf (&quot;rank = %d\n&quot;, rank);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934945"></A>       printf (&quot;dimension sizes are : &quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934946"></A>       for (i=0; i&lt; rank; i++) printf (&quot;%d  &quot;, dim_sizes[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934947"></A>       printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934948"></A>       printf (&quot;data type is  %d\n&quot;, data_type);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934949"></A>       printf (&quot;number of attributes is  %d\n&quot;, n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934950"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934951"></A>       /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934952"></A>       * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934953"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934954"></A>       status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934955"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934956"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934957"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934958"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934959"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934960"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934961"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934962"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934963"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931523"></A><A NAME="50593897_32051"></A>get_info.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931648"></A>      program get_data_set_info </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934971"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934972"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934973"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934974"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934975"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934976"></A>      parameter   (FILE_NAME = ’SDS.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934977"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934978"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934979"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934980"></A>      integer      MAX_NC_NAME, MAX_VAR_DIMS</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934981"></A>      parameter   (MAX_NC_NAME  = 256,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934982"></A>     +             MAX_VAR_DIMS = 32)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934983"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934984"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934985"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934986"></A>      integer sfstart, sffinfo, sfselect, sfginfo</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934987"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934988"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934989"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934990"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934991"></A>      integer sd_id, sds_id</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934992"></A>      integer n_datasets, n_file_attrs, index</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934993"></A>      integer status, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934994"></A>      integer rank, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934995"></A>      integer dim_sizes(MAX_VAR_DIMS)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934996"></A>      character name *(MAX_NC_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934997"></A>      integer i</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934998"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-934999"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935000"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935001"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935002"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935003"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935004"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935005"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935006"></A>C     Determine the number of data sets in the file and the number of </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935007"></A>C     file attributes. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935008"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935009"></A>      status = sffinfo(sd_id, n_datasets, n_file_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935010"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935011"></A>C     Access every data set in the file and print its name, rank,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935012"></A>C     dimension sizes, data type, and number of attributes.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935013"></A>C     The following information should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935014"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935015"></A>C                name = SDStemplate    </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935016"></A>C                rank =   2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935017"></A>C                dimension sizes are :   5  16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935018"></A>C                data type is   24</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935019"></A>C                number of attributes is   0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935020"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935021"></A>      do 10 index = 0, n_datasets - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935022"></A>         sds_id = sfselect(sd_id, index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935023"></A>         status = sfginfo(sds_id, name, rank, dim_sizes, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935024"></A>     .                    n_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935025"></A>         write(*,*)  &quot;name = &quot;, name(1:15)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935026"></A>         write(*,*)  &quot;rank = &quot;, rank</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935027"></A>         write(*,*)  &quot;dimension sizes are : &quot;, (dim_sizes(i), i=1, rank)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935028"></A>         write(*,*)  &quot;data type is &quot;, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935029"></A>         write(*,*)  &quot;number of attributes is &quot;, n_attrs   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935030"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935031"></A>C     Terminate access to the current data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935032"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935033"></A>         status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935034"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935035"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935036"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935037"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935038"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935039"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935040"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935041"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931668"></A><A NAME="50593897_30430"></A>find_sds_by_name.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931778"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935050"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935051"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935052"></A>#define SDS_NAME      &quot;SDStemplate&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935053"></A>#define WRONG_NAME    &quot;WrongName&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935054"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935055"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935056"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935057"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935058"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935059"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935060"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935061"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935062"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935063"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935064"></A>   int32 data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935065"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935066"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935067"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935068"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935069"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935070"></A>   * Open the file for reading and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935071"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935072"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935073"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935074"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935075"></A>   * Find index of the data set with the name specified in WRONG_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935076"></A>   * Error condition occurs, since the data set with that name does not exist </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935077"></A>   * in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935078"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935079"></A>   sds_index = SDnametoindex (sd_id, WRONG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935080"></A>   if (sds_index == FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935081"></A>   printf (&quot;Data set with the name \&quot;WrongName\&quot; does not exist\n&quot;); </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935082"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935083"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935084"></A>   * Find index of the data set with the name specified in SDS_NAME and use </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935085"></A>   * the index to select the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935086"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935087"></A>   sds_index = SDnametoindex (sd_id, SDS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935088"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935089"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935090"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935091"></A>   * Set elements of the array start to 0, elements of the array edges to </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935092"></A>   * SDS dimensions, and use NULL for stride argument in SDreaddata to read</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935093"></A>   * the entire data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935094"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935095"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935096"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935097"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935098"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935099"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935100"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935101"></A>   * Read the entire data into the buffer named data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935102"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935103"></A>   status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935104"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935105"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935106"></A>   * Print 10th row; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935107"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935108"></A>   *             10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935109"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935110"></A>   for (j = 0; j &lt; X_LENGTH; j++) printf (&quot;%d &quot;, data[9][j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935111"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935112"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935113"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935114"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935115"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935116"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935117"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935118"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935119"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935120"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935121"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935122"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935123"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931779"></A><A NAME="50593897_22873"></A>find_sds_by_name.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-931904"></A>      program  locate_by_name</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935132"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935133"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935134"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935135"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935136"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935137"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935138"></A>      character*9  WRONG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935139"></A>      integer      X_LENGTH, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935140"></A>      parameter   (FILE_NAME  = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935141"></A>     +             SDS_NAME   = ’SDStemplate’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935142"></A>     +             WRONG_NAME = ’WrongName’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935143"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935144"></A>     +             Y_LENGTH = 16)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935145"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935146"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935147"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935148"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935149"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935150"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935151"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935152"></A>      integer sfstart, sfn2index, sfselect, sfrdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935153"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935154"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935155"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935156"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935157"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935158"></A>      integer data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935159"></A>      integer j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935160"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935161"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935162"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935163"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935164"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935165"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935166"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935167"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935168"></A>C     Find index of the data set with the name specified in WRONG_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935169"></A>C     Error condition occurs, since a data set with this name </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935170"></A>C     does not exist in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935171"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935172"></A>      sds_index = sfn2index(sd_id, WRONG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935173"></A>      if (sds_index .eq. -1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935174"></A>        write(*,*) &quot;Data set with the name &quot;, WRONG_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935175"></A>     +             &quot; does not exist&quot;        </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935176"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935177"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935178"></A>C     Find index of the data set with the name specified in SDS_NAME  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935179"></A>C     and use the index to attach to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935180"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935181"></A>      sds_index = sfn2index(sd_id, SDS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935182"></A>      sds_id    = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935183"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935184"></A>C     Set elements of start array to 0, elements of edges array </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935185"></A>C     to SDS dimensions, and elements of stride array to 1 to read entire data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935186"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935187"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935188"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935189"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935190"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935191"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935192"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935193"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935194"></A>C     Read entire data into array named data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935195"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935196"></A>      status = sfrdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935197"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935198"></A>C     Print 10th column; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935199"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935200"></A>C           10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935201"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935202"></A>      write(*,*) (data(j,10), j = 1, X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935203"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935204"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935205"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935206"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935207"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935208"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935209"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935210"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935211"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935212"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935213"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-931924"></A><A NAME="50593897_26351"></A>set_get_dim_info.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932034"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935221"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935222"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935223"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935224"></A>#define SDS_NAME      &quot;SDStemplate&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935225"></A>#define DIM_NAME_X     &quot;X_Axis&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935226"></A>#define DIM_NAME_Y     &quot;Y_Axis&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935227"></A>#define NAME_LENGTH   6</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935228"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935229"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935230"></A>#define RANK          2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935231"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935232"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935233"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935234"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935235"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935236"></A>   int32   sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935237"></A>   intn    status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935238"></A>   int32   dim_index, dim_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935239"></A>   int32   n_values, data_type, n_attrs;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935240"></A>   int16   data_X[X_LENGTH];    /* X dimension dimension scale */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935241"></A>   int16   data_X_out[X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935242"></A>   float64 data_Y[Y_LENGTH];  /* Y dimension dimension scale */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935243"></A>   float64 data_Y_out[Y_LENGTH]; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935244"></A>   char    dim_name[NAME_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935245"></A>   int     i, j, nrow;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935246"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935247"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935248"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935249"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935250"></A>   * Initialize dimension scales.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935251"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935252"></A>   for (i=0; i &lt; X_LENGTH; i++) data_X[i] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935253"></A>   for (i=0; i &lt; Y_LENGTH; i++) data_Y[i] = 0.1 * i;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935254"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935255"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935256"></A>   * Open the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935257"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935258"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935259"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935260"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935261"></A>   * Get the index of the data set specified in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935262"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935263"></A>   sds_index = SDnametoindex (sd_id, SDS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935264"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935265"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935266"></A>   * Select the data set corresponding to the returned index.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935267"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935268"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935269"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935270"></A>   /* For each dimension of the data set specified in SDS_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935271"></A>   *  get its dimension identifier and set dimension name</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935272"></A>   *  and dimension scale. Note that data type of dimension scale </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935273"></A>   *  can be different between dimensions and can be different from </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935274"></A>   *  SDS data type.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935275"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935276"></A>   for (dim_index = 0; dim_index &lt; RANK; dim_index++) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935277"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935278"></A>       /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935279"></A>       * Select the dimension at position dim_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935280"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935281"></A>       dim_id = SDgetdimid (sds_id, dim_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935282"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935283"></A>       /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935284"></A>       * Assign name and dimension scale to selected dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935285"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935286"></A>       switch (dim_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935287"></A>       {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935288"></A>	case 0:	status = SDsetdimname (dim_id, DIM_NAME_Y);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935289"></A>                n_values = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935290"></A>                status = SDsetdimscale (dim_id,n_values,DFNT_FLOAT64, \</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935291"></A>                                       (VOIDP)data_Y);  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935292"></A>		break;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935293"></A>	case 1:	status = SDsetdimname (dim_id, DIM_NAME_X);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935294"></A>                n_values = X_LENGTH; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935295"></A>                status = SDsetdimscale (dim_id,n_values,DFNT_INT16, \</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935296"></A>                                       (VOIDP)data_X);  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935297"></A>		break;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935298"></A>	default: break;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935299"></A>       }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935300"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935301"></A>       /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935302"></A>       * Get and display info about the dimension and its scale values.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935303"></A>       * The following information is displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935304"></A>       *                         </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935305"></A>       *         Information about 1 dimension:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935306"></A>       *         dimension name is Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935307"></A>       *         number of scale values is 16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935308"></A>       *         dimension scale data type is float64</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935309"></A>       *         number of dimension attributes is 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935310"></A>       *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935311"></A>       *         Scale values are :</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935312"></A>       *               0.000    0.100    0.200    0.300  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935313"></A>       *               0.400    0.500    0.600    0.700  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935314"></A>       *               0.800    0.900    1.000    1.100  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935315"></A>       *               1.200    1.300    1.400    1.500  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935316"></A>       *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935317"></A>       *         Information about 2 dimension:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935318"></A>       *         dimension name is X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935319"></A>       *         number of scale values is 5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935320"></A>       *         dimension scale data type is int16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935321"></A>       *         number of dimension attributes is 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935322"></A>       *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935323"></A>       *         Scale values are :</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935324"></A>       *               0  1  2  3  4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935325"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935326"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935327"></A>       status = SDdiminfo (dim_id, dim_name, &amp;n_values, &amp;data_type, &amp;n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935328"></A>       printf (&quot;Information about %d dimension:\n&quot;, dim_index+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935329"></A>       printf (&quot;dimension name is %s\n&quot;, dim_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935330"></A>       printf (&quot;number of scale values is %d\n&quot;, n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935331"></A>       if( data_type == DFNT_FLOAT64)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935332"></A>       printf (&quot;dimension scale data type is float64\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935333"></A>       if( data_type == DFNT_INT16)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935334"></A>       printf (&quot;dimension scale data type is int16\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935335"></A>       printf (&quot;number of dimension attributes is %d\n&quot;, n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935336"></A>       printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935337"></A>       printf (&quot;Scale values are :\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935338"></A>       switch (dim_index) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935339"></A>       {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935340"></A>         case 0:  status = SDgetdimscale (dim_id, (VOIDP)data_Y_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935341"></A>                  nrow = 4;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935342"></A>                  for (i=0; i&lt;n_values/nrow; i++ )</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935343"></A>                  {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935344"></A>                      for (j=0; j&lt;nrow; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935345"></A>                          printf (&quot;  %-6.3f&quot;, data_Y_out[i*nrow + j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935346"></A>                          printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935347"></A>                  }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935348"></A>                  break; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935349"></A>         case 1:  status = SDgetdimscale (dim_id, (VOIDP)data_X_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935350"></A>                  for (i=0; i&lt;n_values; i++) printf (&quot;  %d&quot;, data_X_out[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935351"></A>                  break; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935352"></A>         default: break;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935353"></A>        }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935354"></A>        printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935355"></A>   } /*for dim_index */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935356"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935357"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935358"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935359"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935360"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935361"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935362"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935363"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935364"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935365"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935366"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935367"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932035"></A><A NAME="50593897_22801"></A>set_get_dim_info.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932160"></A>      program  dimension_info </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935375"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935376"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935377"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935378"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935379"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935380"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935381"></A>      character*6  DIM_NAME_X</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935382"></A>      character*6  DIM_NAME_Y</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935383"></A>      integer      X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935384"></A>      parameter   (FILE_NAME  = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935385"></A>     +             SDS_NAME   = ’SDStemplate’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935386"></A>     +             DIM_NAME_X  = ’X_Axis’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935387"></A>     +             DIM_NAME_Y  = ’Y_Axis’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935388"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935389"></A>     +             Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935390"></A>     +             RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935391"></A>      integer      DFACC_WRITE, DFNT_INT16, DFNT_FLOAT64</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935392"></A>      parameter   (DFACC_WRITE   = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935393"></A>     +             DFNT_INT16   = 22,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935394"></A>     +             DFNT_FLOAT64 = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935395"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935396"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935397"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935398"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935399"></A>      integer sfstart, sfn2index, sfdimid, sfgdinfo</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935400"></A>      integer sfsdscale, sfgdscale, sfsdmname, sfendacc</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935401"></A>      integer sfend, sfselect</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935402"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935403"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935404"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935405"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935406"></A>      integer dim_index, dim_id</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935407"></A>      integer n_values, n_attrs, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935408"></A>      integer*2 data_X(X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935409"></A>      integer*2 data_X_out(X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935410"></A>      real*8    data_Y(Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935411"></A>      real*8    data_Y_out(Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935412"></A>      character*6 dim_name</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935413"></A>      integer   i</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935414"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935415"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935416"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935417"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935418"></A>C     Initialize dimension scales.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935419"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935420"></A>      do 10 i = 1, X_LENGTH  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935421"></A>         data_X(i) = i - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935422"></A>10     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935423"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935424"></A>      do 20 i = 1, Y_LENGTH  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935425"></A>         data_Y(i) = 0.1 * (i - 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935426"></A>20     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935427"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935428"></A>C     Open the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935429"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935430"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935431"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935432"></A>C     Get the index of the data set with the name specified in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935433"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935434"></A>      sds_index = sfn2index(sd_id, SDS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935435"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935436"></A>C     Select the data set corresponding to the returned index.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935437"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935438"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935439"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935440"></A>C     For each dimension of the data set,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935441"></A>C     get its dimension identifier and set dimension name</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935442"></A>C     and dimension scales. Note that data type of dimension scale can</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935443"></A>C     be different between dimensions and can be different from SDS data type.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935444"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935445"></A>      do 30 dim_index = 0, RANK - 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935446"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935447"></A>C        Select the dimension at position dim_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935448"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935449"></A>         dim_id = sfdimid(sds_id, dim_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935450"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935451"></A>C        Assign name and dimension scale to the dimension. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935452"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935453"></A>         if (dim_index .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935454"></A>            status = sfsdmname(dim_id, DIM_NAME_X) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935455"></A>            n_values = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935456"></A>            status = sfsdscale(dim_id, n_values, DFNT_INT16, data_X)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935457"></A>         end if</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935458"></A>         if (dim_index .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935459"></A>            status = sfsdmname(dim_id, DIM_NAME_Y)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935460"></A>            n_values = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935461"></A>            status = sfsdscale(dim_id, n_values, DFNT_FLOAT64, data_Y)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935462"></A>         end if</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935463"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935464"></A>C      Get and display information about dimension and its scale values.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935465"></A>C      The following information is displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935466"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935467"></A>C                    Information about 1 dimension :</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935468"></A>C                    dimension name is X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935469"></A>C                    number of scale values is  5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935470"></A>C                    dimension scale data type is int16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935471"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935472"></A>C                    number of dimension attributes is   0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935473"></A>C                    Scale values are:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935474"></A>C                        0  1  2  3  4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935475"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935476"></A>C                    Information about 2 dimension :</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935477"></A>C                    dimension name is Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935478"></A>C                    number of scale values is  16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935479"></A>C                    dimension scale data type is float64</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935480"></A>C                    number of dimension attributes is   0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935481"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935482"></A>C                    Scale values are:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935483"></A>C                        0.000      0.100      0.200      0.300</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935484"></A>C                        0.400      0.500      0.600      0.700</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935485"></A>C                        0.800      0.900      1.000      1.100</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935486"></A>C                        1.200      1.300      1.400      1.500</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935487"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935488"></A>       status = sfgdinfo(dim_id, dim_name, n_values, data_type, n_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935489"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935490"></A>       write(*,*) &quot;Information about &quot;, dim_index+1,&quot; dimension :&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935491"></A>       write(*,*) &quot;dimension name is &quot;, dim_name</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935492"></A>       write(*,*) &quot;number of scale values is&quot;, n_values</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935493"></A>       if (data_type. eq. 22) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935494"></A>           write(*,*) &quot;dimension scale data type is int16&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935495"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935496"></A>       if (data_type. eq. 6) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935497"></A>           write(*,*) &quot;dimension scale data type is float64&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935498"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935499"></A>       write(*,*) &quot;number of dimension attributes is &quot;, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935500"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935501"></A>       write(*,*) &quot;Scale values are:&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935502"></A>       if (dim_index .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935503"></A>          status = sfgdscale(dim_id, data_X_out)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935504"></A>          write(*,*) (data_X_out(i), i= 1, X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935505"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935506"></A>       if (dim_index .eq. 1)  then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935507"></A>          status = sfgdscale(dim_id, data_Y_out) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935508"></A>          write(*,100) (data_Y_out(i), i= 1, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935509"></A>100       format(4(1x,f10.3)/)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935510"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935511"></A>30      continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935512"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935513"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935514"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935515"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935516"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935517"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935518"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935519"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935520"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935521"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932176"></A><A NAME="50593897_16404"></A>dimscale_vs_sds.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932286"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935533"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935534"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935535"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935536"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935537"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935538"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935539"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935540"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935541"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935542"></A>   int32 rank, data_type, dim_sizes[MAX_VAR_DIMS];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935543"></A>   int32 n_datasets, n_file_attr, n_attrs; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935544"></A>   char  sds_name[MAX_NC_NAME];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935545"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935546"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935547"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935548"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935549"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935550"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935551"></A>   sd_id = SDstart(FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935552"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935553"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935554"></A>   * Obtain information about the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935555"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935556"></A>   status = SDfileinfo(sd_id, &amp;n_datasets, &amp;n_file_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935557"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935558"></A>   /* Get information about each SDS in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935559"></A>   *  Check whether it is a coordinate variable, then display retrieved </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935560"></A>   *  information.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935561"></A>   *  Output displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935562"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935563"></A>   *            SDS array with the name SDStemplate</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935564"></A>   *            Coordinate variable with the name Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935565"></A>   *            Coordinate variable with the name X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935566"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935567"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935568"></A>   for (sds_index=0; sds_index&lt; n_datasets; sds_index++) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935569"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935570"></A>       sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935571"></A>       status = SDgetinfo(sds_id, sds_name, &amp;rank, dim_sizes, &amp;data_type, &amp;n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935572"></A>       if (SDiscoordvar(sds_id)) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935573"></A>          printf(&quot; Coordinate variable with the name %s\n&quot;, sds_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935574"></A>       else</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935575"></A>          printf(&quot; SDS array with the name %s\n&quot;, sds_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935576"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935577"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935578"></A>   * Terminate access to the selected data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935579"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935580"></A>   status = SDendaccess(sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935581"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935582"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935583"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935584"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935585"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935586"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935587"></A>   status = SDend(sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935588"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935589"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932287"></A><A NAME="50593897_25723"></A>dimscale_vs_sds.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932412"></A>      program  sds_vrs_coordvar </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935598"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935599"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935600"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935601"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935602"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935603"></A>      parameter   (FILE_NAME = ’SDS.hdf’)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935604"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935605"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935606"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935607"></A>      integer      MAX_VAR_DIMS</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935608"></A>      parameter   (MAX_VAR_DIMS = 32)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935609"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935610"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935611"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935612"></A>      integer sfstart, sfselect, sfiscvar, sffinfo, sfginfo</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935613"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935614"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935615"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935616"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935617"></A>      integer       sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935618"></A>      integer       rank, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935619"></A>      integer       n_datasets, n_file_attrs, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935620"></A>      integer       dim_sizes(MAX_VAR_DIMS)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935621"></A>      character*256 sds_name</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935622"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935623"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935624"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935625"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935626"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935627"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935628"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935629"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935630"></A>C     Obtain information about the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935631"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935632"></A>      status = sffinfo(sd_id, n_datasets, n_file_attrs) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935633"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935634"></A>C     Get information about each SDS in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935635"></A>C     Check whether it is a coordinate variable, then display retrieved </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935636"></A>C     information. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935637"></A>C     Output displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935638"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935639"></A>C           SDS array with the name SDStemplate</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935640"></A>C           Coordinate variable with the name X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935641"></A>C           Coordinate variable with the name Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935642"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935643"></A>      do 10 sds_index = 0, n_datasets-1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935644"></A>         sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935645"></A>         status = sfginfo(sds_id, sds_name, rank, dim_sizes,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935646"></A>     +                    data_type, n_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935647"></A>         status = sfiscvar(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935648"></A>         if (status .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935649"></A>             write(*,*) &quot;Coordinate variable with the name &quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935650"></A>     +       sds_name(1:6) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935651"></A>         else</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935652"></A>             write(*,*) &quot;SDS array with the name &quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935653"></A>     +       sds_name(1:11) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935654"></A>         endif</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935655"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935656"></A>C        Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935657"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935658"></A>         status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935659"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935660"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935661"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935662"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935663"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935664"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935665"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932432"></A><A NAME="50593897_13612"></A>set_attr.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932542"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935674"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935675"></A>#define FILE_NAME      &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935676"></A>#define FILE_ATTR_NAME &quot;File_contents&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935677"></A>#define SDS_ATTR_NAME  &quot;Valid_range&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935678"></A>#define DIM_ATTR_NAME  &quot;Dim_metric&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935679"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935680"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935681"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935682"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935683"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935684"></A>   int32   sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935685"></A>   intn    status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935686"></A>   int32   dim_id, dim_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935687"></A>   int32   n_values;                /* number of values of the file, SDS or</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935688"></A>                                       dimension attribute         */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935689"></A>   char8   file_values[] = &quot;Storm_track_data&quot;; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935690"></A>                                   /* values of the file attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935691"></A>   float32 sds_values[2] = {2., 10.};</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935692"></A>                                   /* values of the SDS attribute  */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935693"></A>   char8   dim_values[]  = &quot;Seconds&quot;; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935694"></A>                                  /* values of the dimension attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935695"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935696"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935697"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935698"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935699"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935700"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935701"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935702"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935703"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935704"></A>   * Set an attribute that describes the file contents.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935705"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935706"></A>   n_values = 16;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935707"></A>   status = SDsetattr (sd_id, FILE_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935708"></A>                       (VOIDP)file_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935709"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935710"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935711"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935712"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935713"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935714"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935715"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935716"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935717"></A>   * Assign attribute to the first SDS. Note that attribute values</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935718"></A>   * may have different data type than SDS data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935719"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935720"></A>   n_values  = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935721"></A>   status = SDsetattr (sds_id, SDS_ATTR_NAME, DFNT_FLOAT32, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935722"></A>                       (VOIDP)sds_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935723"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935724"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935725"></A>   * Get the the second dimension identifier of the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935726"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935727"></A>   dim_index = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935728"></A>   dim_id = SDgetdimid (sds_id, dim_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935729"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935730"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935731"></A>   * Set an attribute of the dimension that specifies the dimension metric.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935732"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935733"></A>   n_values = 7;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935734"></A>   status = SDsetattr (dim_id, DIM_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935735"></A>                       (VOIDP)dim_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935736"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935737"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935738"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935739"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935740"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935741"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935742"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935743"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935744"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935745"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935746"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935747"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932543"></A><A NAME="50593897_41175"></A>set_attr.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932668"></A>      program  set_attribs</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935755"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935756"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935757"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935758"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935759"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935760"></A>      character*13 FILE_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935761"></A>      character*11 SDS_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935762"></A>      character*10 DIM_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935763"></A>      parameter   (FILE_NAME = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935764"></A>     +             FILE_ATTR_NAME = ’File_contents’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935765"></A>     +             SDS_ATTR_NAME  = ’Valid_range’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935766"></A>     +             DIM_ATTR_NAME  = ’Dim_metric’)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935767"></A>      integer      DFACC_WRITE, DFNT_CHAR8, DFNT_FLOAT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935768"></A>      parameter   (DFACC_WRITE = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935769"></A>     +             DFNT_CHAR8  = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935770"></A>     +             DFNT_FLOAT32 = 5)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935771"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935772"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935773"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935774"></A>      integer sfstart, sfscatt, sfsnatt, sfselect, sfdimid</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935775"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935776"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935777"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935778"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935779"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935780"></A>      integer dim_id, dim_index </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935781"></A>      integer n_values</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935782"></A>      character*16 file_values</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935783"></A>      real         sds_values(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935784"></A>      character*7  dim_values</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935785"></A>      file_values   = ’Storm_track_data’</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935786"></A>      sds_values(1) = 2.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935787"></A>      sds_values(2) = 10.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935788"></A>      dim_values    = ’Seconds’</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935789"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935790"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935791"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935792"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935793"></A>C     Open the file and initialize the SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935794"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935795"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935796"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935797"></A>C     Set an attribute that describes the file contents. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935798"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935799"></A>      n_values = 16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935800"></A>      status = sfscatt(sd_id, FILE_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935801"></A>     +                 file_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935802"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935803"></A>C     Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935804"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935805"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935806"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935807"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935808"></A>C     Assign attribute to the first SDS. Note that attribute values</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935809"></A>C     may have different data type than SDS data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935810"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935811"></A>      n_values = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935812"></A>      status = sfsnatt(sds_id, SDS_ATTR_NAME, DFNT_FLOAT32, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935813"></A>     +                 sds_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935814"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935815"></A>C     Get the identifier for the first dimension. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935816"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935817"></A>      dim_index = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935818"></A>      dim_id = sfdimid(sds_id, dim_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935819"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935820"></A>C     Set an attribute to the dimension that specifies the</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935821"></A>C     dimension metric. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935822"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935823"></A>      n_values = 7</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935824"></A>      status = sfscatt(dim_id, DIM_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935825"></A>     +                 dim_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935826"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935827"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935828"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935829"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935830"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935831"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935832"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935833"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935834"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935835"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935836"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932684"></A><A NAME="50593897_16175"></A>get_attr.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932794"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935845"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935846"></A>#define FILE_NAME      &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935847"></A>#define FILE_ATTR_NAME &quot;File_contents&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935848"></A>#define SDS_ATTR_NAME  &quot;Valid_range&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935849"></A>#define DIM_ATTR_NAME  &quot;Dim_metric&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935850"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935851"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935852"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935853"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935854"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935855"></A>   int32   sd_id, sds_id, dim_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935856"></A>   intn    status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935857"></A>   int32   attr_index, data_type, n_values; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935858"></A>   char    attr_name[MAX_NC_NAME];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935859"></A>   int8    *file_data;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935860"></A>   int8    *dim_data;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935861"></A>   float32 *sds_data;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935862"></A>   int     i;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935863"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935864"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935865"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935866"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935867"></A>   * Open the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935868"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935869"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935870"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935871"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935872"></A>   * Find the file attribute defined by FILE_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935873"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935874"></A>   attr_index = SDfindattr (sd_id, FILE_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935875"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935876"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935877"></A>   * Get information about the file attribute. Note that the first</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935878"></A>   * parameter is an SD interface identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935879"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935880"></A>   status = SDattrinfo (sd_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935881"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935882"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935883"></A>   * Allocate a buffer to hold the attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935884"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935885"></A>   file_data = (int8 *)malloc (n_values * sizeof (data_type));</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935886"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935887"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935888"></A>   * Read the file attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935889"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935890"></A>   status = SDreadattr (sd_id, attr_index, file_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935891"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935892"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935893"></A>   * Print out file attribute value. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935894"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935895"></A>   printf (&quot;File attribute value is : %s\n&quot;, file_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935896"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935897"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935898"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935899"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935900"></A>   sds_id = SDselect (sd_id, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935901"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935902"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935903"></A>   * Find the data set attribute defined by SDS_ATTR_NAME. Note that the</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935904"></A>   * first parameter is a data set identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935905"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935906"></A>   attr_index = SDfindattr (sds_id, SDS_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935907"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935908"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935909"></A>   * Get information about the data set attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935910"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935911"></A>   status = SDattrinfo (sds_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935912"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935913"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935914"></A>   * Allocate a buffer to hold the data set attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935915"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935916"></A>   sds_data = (float32 *)malloc (n_values * sizeof (data_type));</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935917"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935918"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935919"></A>   * Read the SDS attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935920"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935921"></A>   status = SDreadattr (sds_id, attr_index, sds_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935922"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935923"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935924"></A>   * Print out SDS attribute data type and values. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935925"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935926"></A>   if (data_type == DFNT_FLOAT32) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935927"></A>                 printf (&quot;SDS attribute data type is : float32\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935928"></A>   printf (&quot;SDS attribute values are :  &quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935929"></A>   for (i=0; i&lt;n_values; i++) printf (&quot; %f&quot;, sds_data[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935930"></A>   printf (&quot;\n&quot;); </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935931"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935932"></A>   /*    </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935933"></A>   * Get the identifier for the second dimension of the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935934"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935935"></A>   dim_id = SDgetdimid (sds_id, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935936"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935937"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935938"></A>   * Find dimension attribute defined by DIM_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935939"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935940"></A>   attr_index = SDfindattr (dim_id, DIM_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935941"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935942"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935943"></A>   * Get information about the dimension attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935944"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935945"></A>   status = SDattrinfo (dim_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935946"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935947"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935948"></A>   * Allocate a buffer to hold the dimension attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935949"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935950"></A>   dim_data = (int8 *)malloc (n_values * sizeof (data_type));</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935951"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935952"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935953"></A>   * Read the dimension attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935954"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935955"></A>   status = SDreadattr (dim_id, attr_index, dim_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935956"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935957"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935958"></A>   * Print out dimension attribute value. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935959"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935960"></A>   printf (&quot;Dimensional attribute values is : %s\n&quot;, dim_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935961"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935962"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935963"></A>   * Terminate access to the data set and to the SD interface and </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935964"></A>   * close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935965"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935966"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935967"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935968"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935969"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935970"></A>   * Free all buffers.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935971"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935972"></A>   free (dim_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935973"></A>   free (sds_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935974"></A>   free (file_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935975"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935976"></A>   /*   Output of this program is :</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935977"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935978"></A>   *    File attribute value is : Storm_track_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935979"></A>   *    SDS attribute data type is : float32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935980"></A>   *    SDS attribute values are :   2.000000 10.000000</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935981"></A>   *    Dimensional attribute values is : Seconds</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935982"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935983"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935984"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932795"></A><A NAME="50593897_12944"></A>get_attr.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-932920"></A>      program  attr_info</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935996"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935997"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935998"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-935999"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936000"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936001"></A>      character*13 FILE_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936002"></A>      character*11 SDS_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936003"></A>      character*10 DIM_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936004"></A>      parameter   (FILE_NAME = ’SDS.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936005"></A>     +             FILE_ATTR_NAME = ’File_contents’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936006"></A>     +             SDS_ATTR_NAME  = ’Valid_range’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936007"></A>     +             DIM_ATTR_NAME  = ’Dim_metric’)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936008"></A>      integer      DFACC_READ, DFNT_FLOAT32</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936009"></A>      parameter   (DFACC_READ   = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936010"></A>     +             DFNT_FLOAT32 = 5)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936011"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936012"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936013"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936014"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936015"></A>      integer sfstart, sffattr, sfgainfo, sfrattr, sfselect</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936016"></A>      integer sfdimid, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936017"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936018"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936019"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936020"></A>      integer      sd_id, sds_id, dim_id</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936021"></A>      integer      attr_index, data_type, n_values, status</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936022"></A>      real         sds_data(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936023"></A>      character*20 attr_name </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936024"></A>      character*16 file_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936025"></A>      character*7  dim_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936026"></A>      integer      i</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936027"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936028"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936029"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936030"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936031"></A>C     Open the file and initialize SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936032"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936033"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936034"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936035"></A>C     Find the file attribute defined by FILE_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936036"></A>C     Note that the first parameter is an SD interface identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936037"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936038"></A>      attr_index = sffattr(sd_id, FILE_ATTR_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936039"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936040"></A>C     Get information about the file attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936041"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936042"></A>      status = sfgainfo(sd_id, attr_index, attr_name, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936043"></A>     +			n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936044"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936045"></A>C     Read the file attribute data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936046"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936047"></A>      status = sfrattr(sd_id, attr_index, file_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936048"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936049"></A>C     Print file attribute value.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936050"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936051"></A>      write(*,*) &quot;File attribute value is : &quot;, file_data </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936052"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936053"></A>C     Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936054"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936055"></A>      sds_id = sfselect(sd_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936056"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936057"></A>C     Find the data set attribute defined by SDS_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936058"></A>C     Note that the first parameter is a data set identifier. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936059"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936060"></A>      attr_index = sffattr(sds_id, SDS_ATTR_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936061"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936062"></A>C     Get information about the data set attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936063"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936064"></A>      status = sfgainfo(sds_id, attr_index, attr_name, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936065"></A>     +			n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936066"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936067"></A>C     Read the SDS attribute data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936068"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936069"></A>      status = sfrattr(sds_id, attr_index, sds_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936070"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936071"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936072"></A>C     Print SDS attribute data type and values. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936073"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936074"></A>      if (data_type .eq. DFNT_FLOAT32)  then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936075"></A>         write(*,*) &quot;SDS attribute data type is : float32 &quot;  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936076"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936077"></A>      write(*,*) &quot;SDS attribute values are  : &quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936078"></A>      write(*,*)  (sds_data(i), i=1, n_values) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936079"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936080"></A>C     Get the identifier for the first dimension of the SDS. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936081"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936082"></A>      dim_id = sfdimid(sds_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936083"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936084"></A>C     Find the dimensional attribute defined by DIM_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936085"></A>C     Note that the first parameter is a dimension identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936086"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936087"></A>      attr_index = sffattr(dim_id, DIM_ATTR_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936088"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936089"></A>C     Get information about dimension attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936090"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936091"></A>      status = sfgainfo(dim_id, attr_index, attr_name, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936092"></A>     +			n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936093"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936094"></A>C     Read the dimension attribute data. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936095"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936096"></A>      status = sfrattr(dim_id, attr_index, dim_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936097"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936098"></A>C     Print dimension attribute value.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936099"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936100"></A>      write(*,*) &quot;Dimensional attribute value is : &quot;, dim_data </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936101"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936102"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936103"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936104"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936105"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936106"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936107"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936108"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936109"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936110"></A>C     Output of this program is :</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936111"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936112"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936113"></A>C     File attribute value is : Storm_track_data</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936114"></A>C     SDS attribute data type is : float32 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936115"></A>C     SDS attribute values are  : </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936116"></A>C         2.00000   10.00000</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936117"></A>C      Dimensional attribute value is : Seconds</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936118"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936119"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936120"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-932940"></A><A NAME="50593897_35450"></A>chunking_example.c</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933050"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936128"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936129"></A>#define FILE_NAME     &quot;SDSchunked.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936130"></A>#define SDS_NAME      &quot;ChunkedData&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936131"></A>#define RANK          2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936132"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936133"></A>main()</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936134"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936135"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936136"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936137"></A>   int32         sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936138"></A>   intn          status;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936139"></A>   int32         flag, maxcache, new_maxcache;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936140"></A>   int32         dim_sizes[2], origin[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936141"></A>   HDF_CHUNK_DEF c_def, c_def_out; /* Chunking definitions */ </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936142"></A>   int32         comp_flag, c_flags;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936143"></A>   int16         all_data[9][4];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936144"></A>   int32         start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936145"></A>   int16         chunk_out[3][2];</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936146"></A>   int16         row[2] = { 5, 5 };</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936147"></A>   int16         column[3] = { 4, 4, 4 };</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936148"></A>   int16         fill_value = 0;   /* Fill value */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936149"></A>   int           i,j;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936150"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936151"></A>   * Declare chunks data type and initialize some of them. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936152"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936153"></A>          int16 chunk1[3][2] = { 1, 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936154"></A>                                 1, 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936155"></A>                                 1, 1 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936156"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936157"></A>          int16 chunk2[3][2] = { 2, 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936158"></A>                                 2, 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936159"></A>                                 2, 2 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936160"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936161"></A>          int16 chunk3[3][2] = { 3, 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936162"></A>                                 3, 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936163"></A>                                 3, 3 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936164"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936165"></A>          int16 chunk6[3][2] = { 6, 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936166"></A>                                 6, 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936167"></A>                                 6, 6 };</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936168"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936169"></A>    /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936170"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936171"></A>    * Define chunk’s dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936172"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936173"></A>    *         In this example we do not use compression. </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936174"></A>    *         To use chunking with RLE, Skipping Huffman, and GZIP</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936175"></A>    *         compression, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936176"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936177"></A>    *                c_def.comp.chunk_lengths[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936178"></A>    *                c_def.comp.chunk_lengths[1] = 2; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936179"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936180"></A>    *         To use chunking with NBIT, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936181"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936182"></A>    *                c_def.nbit.chunk_lengths[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936183"></A>    *                c_def.nbit.chunk_lengths[1] = 2; </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936184"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936185"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936186"></A>    c_def.chunk_lengths[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936187"></A>    c_def.chunk_lengths[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936188"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936189"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936190"></A>    * Create the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936191"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936192"></A>    sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936193"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936194"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936195"></A>    * Create 9x4 SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936196"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936197"></A>    dim_sizes[0] = 9;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936198"></A>    dim_sizes[1] = 4;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936199"></A>    sds_id = SDcreate (sd_id, SDS_NAME,DFNT_INT16, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936200"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936201"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936202"></A>    * Fill the SDS array with the fill value.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936203"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936204"></A>    status = SDsetfillvalue (sds_id, (VOIDP)&amp;fill_value);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936205"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936206"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936207"></A>    * Create chunked SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936208"></A>    * In this example we do not use compression ( third</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936209"></A>    * parameter of SDsetchunk is set to HDF_CHUNK).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936210"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936211"></A>    * To use RLE compresssion, set compression type and flag</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936212"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936213"></A>    *            c_def.comp.comp_type = COMP_CODE_RLE;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936214"></A>    *            comp_flag = HDF_CHUNK | HDF_COMP;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936215"></A>    *          </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936216"></A>    * To use Skipping Huffman compression, set compression type, flag</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936217"></A>    * and skipping size skp_size</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936218"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936219"></A>    *            c_def.comp.comp_type = COMP_CODE_SKPHUFF;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936220"></A>    *            c_def.comp.cinfo.skphuff.skp_size = value;             </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936221"></A>    *            comp_flag = HDF_CHUNK | HDF_COMP;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936222"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936223"></A>    * To use GZIP compression, set compression type, flag and</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936224"></A>    * deflate level</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936225"></A>    * </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936226"></A>    *            c_def.comp.comp_type = COMP_CODE_DEFLATE;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936227"></A>    *            c_def.comp.cinfo.deflate.level = value;             </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936228"></A>    *            comp_flag = HDF_CHUNK | HDF_COMP;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936229"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936230"></A>    * To use NBIT compression, set compression flag and</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936231"></A>    * compression parameters</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936232"></A>    *          </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936233"></A>    *            comp_flag = HDF_CHUNK | HDF_NBIT;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936234"></A>    *            c_def.nbit.start_bit = value1;             </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936235"></A>    *            c_def.nbit.bit_len   = value2;             </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936236"></A>    *            c_def.nbit.sign_ext  = value3;             </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936237"></A>    *            c_def.nbit.fill_one  = value4;             </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936238"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936239"></A>    comp_flag = HDF_CHUNK;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936240"></A>    status = SDsetchunk (sds_id, c_def, comp_flag);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936241"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936242"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936243"></A>    * Set chunk cache to hold maximum of 3 chunks.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936244"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936245"></A>    maxcache = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936246"></A>    flag = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936247"></A>    new_maxcache = SDsetchunkcache (sds_id, maxcache, flag);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936248"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936249"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936250"></A>    * Write chunks using SDwritechunk function.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936251"></A>    * Chunks can be written in any order.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936252"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936253"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936254"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936255"></A>    * Write the chunk with the coordinates (0,0).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936256"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936257"></A>    origin[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936258"></A>    origin[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936259"></A>    status = SDwritechunk (sds_id, origin, (VOIDP) chunk1);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936260"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936261"></A>    /*   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936262"></A>    * Write the chunk with the coordinates (1,0).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936263"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936264"></A>    origin[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936265"></A>    origin[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936266"></A>    status = SDwritechunk (sds_id, origin, (VOIDP) chunk3);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936267"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936268"></A>    /*   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936269"></A>    * Write the chunk with the coordinates (0,1). </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936270"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936271"></A>    origin[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936272"></A>    origin[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936273"></A>    status = SDwritechunk (sds_id, origin, (VOIDP) chunk2);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936274"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936275"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936276"></A>    * Write chunk with the coordinates (1,2) using</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936277"></A>    * SDwritedata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936278"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936279"></A>    start[0] = 6;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936280"></A>    start[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936281"></A>    edges[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936282"></A>    edges[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936283"></A>    status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) chunk6); </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936284"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936285"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936286"></A>    * Fill second column in the chunk with the coordinates (1,1)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936287"></A>    * using SDwritedata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936288"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936289"></A>    start[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936290"></A>    start[1] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936291"></A>    edges[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936292"></A>    edges[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936293"></A>    status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) column); </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936294"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936295"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936296"></A>    * Fill second row in the chunk with the coordinates (0,2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936297"></A>    * using SDwritedata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936298"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936299"></A>    start[0] = 7;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936300"></A>    start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936301"></A>    edges[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936302"></A>    edges[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936303"></A>    status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) row); </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936304"></A>           </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936305"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936306"></A>    * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936307"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936308"></A>    status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936309"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936310"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936311"></A>    * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936312"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936313"></A>    status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936314"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936315"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936316"></A>    * Reopen the file and access the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936317"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936318"></A>    sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936319"></A>    sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936320"></A>    sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936321"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936322"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936323"></A>    * Get information about the SDS. Only chunk lengths and compression</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936324"></A>    * flag can be returned. Compression information is not available if</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936325"></A>    * NBIT, Skipping Huffman, or GZIP compression is used.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936326"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936327"></A>    status = SDgetchunkinfo (sds_id, &amp;c_def_out, &amp;c_flags);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936328"></A>    if (c_flags == HDF_CHUNK )</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936329"></A>       printf(&quot; SDS is chunked\nChunk’s dimensions %dx%d\n&quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936330"></A>              c_def_out.chunk_lengths[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936331"></A>              c_def_out.chunk_lengths[1]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936332"></A>    else if (c_flags == (HDF_CHUNK | HDF_COMP))</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936333"></A>         printf(&quot;SDS is chunked and compressed\nChunk’s dimensions %dx%d\n&quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936334"></A>                  c_def_out.comp.chunk_lengths[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936335"></A>                  c_def_out.comp.chunk_lengths[1]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936336"></A>    else if (c_flags == (HDF_CHUNK | HDF_NBIT))</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936337"></A>         printf (&quot;SDS is chunked (NBIT)\nChunk’s dimensions %dx%d\n&quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936338"></A>                  c_def_out.nbit.chunk_lengths[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936339"></A>                  c_def_out.nbit.chunk_lengths[1]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936340"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936341"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936342"></A>    * Read the entire data set using SDreaddata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936343"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936344"></A>    start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936345"></A>    start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936346"></A>    edges[0] = 9;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936347"></A>    edges[1] = 4;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936348"></A>    status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)all_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936349"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936350"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936351"></A>    * Print out what we have read.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936352"></A>    * The following information should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936353"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936354"></A>    * SDS is chunked </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936355"></A>    * Chunk’s dimensions 3x2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936356"></A>    *          1 1 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936357"></A>    *          1 1 2 2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936358"></A>    *          1 1 2 2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936359"></A>    *          3 3 0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936360"></A>    *          3 3 0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936361"></A>    *          3 3 0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936362"></A>    *          0 0 6 6</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936363"></A>    *          5 5 6 6</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936364"></A>    *          0 0 6 6</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936365"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936366"></A>    for (j=0; j&lt;9; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936367"></A>    {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936368"></A>         for (i=0; i&lt;4; i++) printf (&quot; %d&quot;, all_data[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936369"></A>         printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936370"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936371"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936372"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936373"></A>    * Read chunk with the coordinates (2,0) and display it.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936374"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936375"></A>    origin[0] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936376"></A>    origin[1] = 0;    	</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936377"></A>    status = SDreadchunk (sds_id, origin, chunk_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936378"></A>    printf (&quot; Chunk (2,0) \n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936379"></A>    for (j=0; j&lt;3; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936380"></A>    {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936381"></A>         for (i=0; i&lt;2; i++) printf (&quot; %d&quot;, chunk_out[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936382"></A>         printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936383"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936384"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936385"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936386"></A>    * Read chunk with the coordinates (1,1) and display it.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936387"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936388"></A>    origin[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936389"></A>    origin[1] = 1;    	</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936390"></A>    status = SDreadchunk (sds_id, origin, chunk_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936391"></A>    printf (&quot; Chunk (1,1) \n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936392"></A>    for (j=0; j&lt;3; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936393"></A>    {</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936394"></A>         for (i=0; i&lt;2; i++) printf (&quot; %d&quot;, chunk_out[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936395"></A>         printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936396"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936397"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936398"></A>    /*  The following information is displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936399"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936400"></A>    *   Chunk (2,0) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936401"></A>    *   0 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936402"></A>    *   5 5</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936403"></A>    *   0 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936404"></A>    *   Chunk (1,1) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936405"></A>    *   0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936406"></A>    *   0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936407"></A>    *   0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936408"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936409"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936410"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936411"></A>    * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936412"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936413"></A>    status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936414"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936415"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936416"></A>    * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936417"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936418"></A>    status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936419"></A>}            </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936420"></A>&nbsp;</P>
</DIV>
<DIV>
<H6 CLASS="ExamplePage">
<A NAME="50593897_pgfId-933051"></A><A NAME="50593897_32424"></A>chunking_example.f</H6>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-933176"></A>      program  chunk_examples</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936440"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936441"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936442"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936443"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936444"></A>      character*14 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936445"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936446"></A>      integer      RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936447"></A>      parameter   (FILE_NAME = ’SDSchunked.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936448"></A>     +             SDS_NAME  = ’ChunkedData’,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936449"></A>     +             RANK      = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936450"></A>      integer      DFACC_CREATE, DFACC_READ, DFNT_INT16</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936451"></A>      parameter   (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936452"></A>     +             DFACC_READ   = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936453"></A>     +             DFNT_INT16   = 22)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936454"></A>      integer      COMP_CODE_NONE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936455"></A>      parameter   (COMP_CODE_NONE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936456"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936457"></A>C     This example does not use compression.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936458"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936459"></A>C     To use RLE compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936460"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936461"></A>C     integer      COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936462"></A>C     parameter   (COMP_CODE_RLE = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936463"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936464"></A>C     To use NBIT compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936465"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936466"></A>C     integer      COMP_CODE_NBIT</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936467"></A>C     parameter   (COMP_CODE_NBIT = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936468"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936469"></A>C     To use Skipping Huffman compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936470"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936471"></A>C     integer      COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936472"></A>C     parameter   (COMP_CODE_SKPHUFF = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936473"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936474"></A>C     To use GZIP compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936475"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936476"></A>C     integer      COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936477"></A>C     parameter   (COMP_CODE_DEFLATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936478"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936479"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936480"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936481"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936482"></A>      integer sfstart, sfcreate, sfendacc, sfend,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936483"></A>     +        sfselect, sfsfill, sfschnk, sfwchnk,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936484"></A>     +        sfrchnk, sfgichnk, sfwdata, sfrdata,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936485"></A>     +        sfscchnk</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936486"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936487"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936488"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936489"></A>      integer   sd_id, sds_id, sds_index, status          </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936490"></A>      integer   dim_sizes(2), origin(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936491"></A>      integer   fill_value, maxcache, new_maxcache, flag</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936492"></A>      integer   start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936493"></A>      integer*2 all_data(4,9)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936494"></A>      integer*2 row(3), column(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936495"></A>      integer*2 chunk_out(2,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936496"></A>      integer*2 chunk1(2,3),</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936497"></A>     +          chunk2(2,3),</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936498"></A>     +          chunk3(2,3),</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936499"></A>     +          chunk6(2,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936500"></A>      integer   i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936501"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936502"></A>C     Compression flag and parameters.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936503"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936504"></A>      integer comp_type, comp_flag, comp_prm(4)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936505"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936506"></A>C     Chunk’s dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936507"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936508"></A>      integer dim_length(2), dim_length_out(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936509"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936510"></A>C     Initialize four chunks</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936511"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936512"></A>      data chunk1 /6*1/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936513"></A>      data chunk2 /6*2/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936514"></A>      data chunk3 /6*3/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936515"></A>      data chunk6 /6*6/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936516"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936517"></A>C     Initialize row and column arrays.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936518"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936519"></A>      data row /3*4/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936520"></A>      data column /2*5/</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936521"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936522"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936523"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936524"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936525"></A>C     Define chunk’s dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936526"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936527"></A>      dim_length(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936528"></A>      dim_length(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936529"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936530"></A>C     Create the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936531"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936532"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936533"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936534"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936535"></A>C     Create 4x9 SDS</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936536"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936537"></A>      dim_sizes(1) = 4 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936538"></A>      dim_sizes(2) = 9 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936539"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT16,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936540"></A>     +                  RANK, dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936541"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936542"></A>C     Fill SDS array with the fill value.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936543"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936544"></A>      fill_value = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936545"></A>      status = sfsfill( sds_id, fill_value)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936546"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936547"></A>C     Create chunked SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936548"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936549"></A>C     In this example we do not use compression.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936550"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936551"></A>C     To use RLE compression, initialize comp_type parameter</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936552"></A>C     before the call to sfschnk function.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936553"></A>C              comp_type = COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936554"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936555"></A>C     To use NBIT, Skipping Huffman, or GZIP compression,</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936556"></A>C     initialize comp_prm array and comp type parameter</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936557"></A>C     before call to sfschnk function</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936558"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936559"></A>C     NBIT:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936560"></A>C              comp_prm(1) = value_of(sign_ext)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936561"></A>C              comp_prm(2) = value_of(fill_one)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936562"></A>C              comp_prm(3) = value_of(start_bit)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936563"></A>C              comp_prm(4) = value_of(bit_len)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936564"></A>C              comp_type   = COMP_CODE_NBIT</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936565"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936566"></A>C     Skipping Huffman:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936567"></A>C              comp_prm(1) = value_of(skp_size)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936568"></A>C              comp_type   = COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936569"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936570"></A>C     GZIP:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936571"></A>C              comp_prm(1) = value_of(deflate_level) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936572"></A>C              comp_type   = COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936573"></A>C       </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936574"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936575"></A>      comp_type = COMP_CODE_NONE</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936576"></A>      status = sfschnk(sds_id, dim_length, comp_type, comp_prm)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936577"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936578"></A>C     Set chunk cache to hold maximum 2 chunks.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936579"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936580"></A>      flag = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936581"></A>      maxcache = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936582"></A>      new_maxcache = sfscchnk(sds_id, maxcache, flag) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936583"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936584"></A>C     Write chunks using SDwritechunk function.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936585"></A>C     Chunks can be written in any order.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936586"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936587"></A>C     Write chunk with the coordinates (1,1).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936588"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936589"></A>      origin(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936590"></A>      origin(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936591"></A>      status = sfwchnk(sds_id, origin, chunk1) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936592"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936593"></A>C     Write chunk with the coordinates (1,2).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936594"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936595"></A>      origin(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936596"></A>      origin(2) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936597"></A>      status = sfwchnk(sds_id, origin, chunk3) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936598"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936599"></A>C     Write chunk with the coordinates (2,1).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936600"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936601"></A>      origin(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936602"></A>      origin(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936603"></A>      status = sfwchnk(sds_id, origin, chunk2) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936604"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936605"></A>C     Write chunk with the coordinates (2,3).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936606"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936607"></A>      origin(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936608"></A>      origin(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936609"></A>      status = sfwchnk(sds_id, origin, chunk6) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936610"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936611"></A>C     Fill second row in the chunk with the coordinates (2,2).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936612"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936613"></A>      start(1) = 3</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936614"></A>      start(2) = 3</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936615"></A>      edges(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936616"></A>      edges(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936617"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936618"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936619"></A>      status = sfwdata(sds_id, start, stride, edges, row)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936620"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936621"></A>C     Fill second column in the chunk with the coordinates (1,3).</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936622"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936623"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936624"></A>      start(2) = 7 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936625"></A>      edges(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936626"></A>      edges(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936627"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936628"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936629"></A>      status = sfwdata(sds_id, start, stride, edges, column)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936630"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936631"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936632"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936633"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936634"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936635"></A>C     Terminate access to the SD interface and close the file.  </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936636"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936637"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936638"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936639"></A>C     Reopen the file and access the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936640"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936641"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936642"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936643"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936644"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936645"></A>C     Get information about the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936646"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936647"></A>      status = sfgichnk(sds_id, dim_length_out, comp_flag)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936648"></A>      if (comp_flag .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936649"></A>         write(*,*) ’SDS is chunked’</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936650"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936651"></A>      if (comp_flag .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936652"></A>         write(*,*) ’SDS is chunked and compressed’</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936653"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936654"></A>      if (comp_flag .eq. 2) then</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936655"></A>         write(*,*) ’SDS is chunked and NBIT compressed’</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936656"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936657"></A>      write(*,*) ’Chunks dimensions are ’, dim_length_out(1),</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936658"></A>     + ’  x’ ,dim_length_out(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936659"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936660"></A>C     Read the whole SDS using sfrdata function and display</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936661"></A>C     what we have read. The following information will be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936662"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936663"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936664"></A>C             SDS is chunked</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936665"></A>C             Chunks dimensions are   2  x  3</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936666"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936667"></A>C             1  1  1  3  3  3  0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936668"></A>C             1  1  1  3  3  3  0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936669"></A>C             2  2  2  0  0  0  6  6  6</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936670"></A>C             2  2  2  4  4  4  6  6  6</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936671"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936672"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936673"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936674"></A>      edges(1) = 4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936675"></A>      edges(2) = 9</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936676"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936677"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936678"></A>      status = sfrdata(sds_id, start, stride, edges, all_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936679"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936680"></A>C     Display the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936681"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936682"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936683"></A>      do 10 i = 1,4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936684"></A>         write(*,*) (all_data(i,j), j=1,9)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936685"></A>10    continue     </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936686"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936687"></A>C     Read chunks with the coordinates (2,2) and (1,3) and display.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936688"></A>C     The following information will be shown:</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936689"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936690"></A>C             Chunk (2,2)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936691"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936692"></A>C               0  0  0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936693"></A>C               4  4  4</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936694"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936695"></A>C             Chunk (1,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936696"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936697"></A>C               0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936698"></A>C               0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936699"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936700"></A>      origin(1) = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936701"></A>      origin(2) = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936702"></A>      status = sfrchnk(sds_id, origin, chunk_out)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936703"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936704"></A>      write(*,*) ’Chunk (2,2)’</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936705"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936706"></A>      do 20 i = 1,2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936707"></A>         write(*,*) (chunk_out(i,j), j=1,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936708"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936709"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936710"></A>      origin(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936711"></A>      origin(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936712"></A>      status = sfrchnk(sds_id, origin, chunk_out)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936713"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936714"></A>      write(*,*) ’Chunk (1,3)’</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936715"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936716"></A>      do 30 i = 1,2</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936717"></A>         write(*,*) (chunk_out(i,j), j=1,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936718"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936719"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936720"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936721"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936722"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936723"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936724"></A>C     Terminate access to the SD interface and close the file.   </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936725"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936726"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936727"></A>      end </P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-936728"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-930807"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593897_pgfId-929348"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-39588"></A>&nbsp;</P>
</DIV>
<DIV>
<H2 CLASS="AppendixTitle">
<A NAME="50593898_pgfId-39592"></A><A NAME="50593898_70883"></A>Appendices</H2>
<P CLASS="Body">
<A NAME="50593898_pgfId-37951"></A>&nbsp;</P>
<DIV>
<H4 CLASS="Appendix0">
<A NAME="50593898_pgfId-37538"></A><A NAME="50593898_20074"></A>Reserved HDF Tags<DIV>
<IMG SRC="UG_html-107.gif" ALT="">
</DIV>
</H4>
<DIV>
<H6 CLASS="Appendix2">
<A NAME="50593898_pgfId-33873"></A>Overview</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-24157"></A>This appendix includes tables containing brief descriptions of most of the tags that have been reserved for general use. This list will be expanded in future editions to include new tags as they are assigned. A more detailed description of the tags can be found in the HDF Specification and Developer’s Guide. Also see the HDF Specification and Developer’s Guide for a description of extended tags, which are not discussed in this appendix.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-3573"></A>Each table contains a list of tags within one category. The titles of the tables, with a functional description of each table, are:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-3079"></A>Table A: The HDF Utility Tags. Used by the HDF utilties.</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-3080"></A>Table B: The HDF General Raster Image Tags. Used to describe aspects of raster image data.</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-3081"></A>Table C: The HDF Composite Image Tags. Used to describe aspects of composite image data.</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-3091"></A>Table D: The HDF Scientific Data Set Tags: Used to describe aspects of scientific data set (SDS) data.</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-3092"></A>Table E: The HDF Vset Tags. Used to describe aspects of HDF Vset data.</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-3095"></A>Table F: The Obsolete HDF Tags: Used to describe aspects of HDF data elements that have been replaced by newer tags or discontinued.</LI>
</UL>
</DIV>
<DIV>
<H6 CLASS="Appendix2">
<A NAME="50593898_pgfId-4303"></A>Tag Types and Descriptions</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-1803"></A>The following tables have five columns: </P>
<P CLASS="BulletDefinition">
<A NAME="50593898_pgfId-24966"></A><EM CLASS="Bold">
Tag Name </EM>
contains the abbreviated symbolic names of tags that are often used in an augmented form in HDF programs.</P>
<P CLASS="BulletDefinition">
<A NAME="50593898_pgfId-29159"></A><EM CLASS="Bold">
Short Description </EM>
contains a brief (four word maximum) description of the tag that is commonly used to describe to the tag in HDF manuals and in-line code documentation.</P>
<P CLASS="BulletDefinition">
<A NAME="50593898_pgfId-33406"></A><EM CLASS="Bold">
Data Size </EM>
describes the type of data that is associated with the tag and, where possible, lists the data size.</P>
<P CLASS="BulletDefinition">
<A NAME="50593898_pgfId-33411"></A><EM CLASS="Bold">
Tag Value </EM>
lists the numeric value of the tag symbol in the<EM CLASS="VarName">
 hdf.h </EM>
header file.</P>
<P CLASS="BulletDefinition">
<A NAME="50593898_pgfId-33450"></A><EM CLASS="Bold">
Long Description</EM>
 contains a general description of the tag. </P>
<P CLASS="Body">
<A NAME="50593898_pgfId-1809"></A>In the tables, the term <EM CLASS="TextItalic">
String</EM>
 refers to a sequence of ASCII characters with the null byte possibly occurring at the end, but nowhere else. The term <EM CLASS="TextItalic">
Text</EM>
 also refers to a sequence of ASCII characters, but it may contain null characters anywhere in the sequence. An <EM CLASS="TextItalic">
n</EM>
 in the Data Size column describes a data unit of variable-length. For more detailed descriptions of these units of data, refer to the appropriate tag entry in the HDF Specification and Developer’s Guide.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593898_pgfId-1869"></A><DIV>
<IMG SRC="UG_html-108.gif" ALT="">
</DIV>
The HDF Uti<A NAME="50593898_marker-10473"></A>lity Tags</H6>
<TABLE>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10607"></A>Tag Name</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10609"></A>Short Description</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10611"></A>Data Size</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10613"></A>Tag Value</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10615"></A>Long Description</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10617"></A>DFTAG_NULL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10619"></A>No Data</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10621"></A>None </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10623"></A>001</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10625"></A>Used for place holding and filling up empty portions of the Data Descriptor Block.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10627"></A>DFTAG_VERSION</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10629"></A>Library Version Number</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10631"></A>4 bytes + string</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10633"></A>030</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10635"></A>Specifies the latest version of the HDF library used to write to the file.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10637"></A>DFTAG_NT</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10639"></A>Number Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10641"></A>4 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10643"></A>106</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10645"></A>Used by any other element in the file to specifically indicate what a numeric value looks like.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10647"></A>DFTAG_MT</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10649"></A>Machine Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10651"></A>0 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10653"></A>107</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10655"></A>Specifies that all unconstrained or partially constrained values in this HDF file are of the default type for that hardware.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10657"></A>DFTAG_FID</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10659"></A>File Identifier</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10661"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10663"></A>100</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10665"></A>Points to a string that the user wants to associate with this file. This supports the inclusion of a user-supplied title for the file.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10667"></A>DFTAG_FD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10669"></A>File Descriptor</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10671"></A>Text</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10673"></A>101</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10675"></A>Points to a block of text describing the overall file contents. It is intended to be user-supplied comments about the file.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10677"></A>DFTAG_TID</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10679"></A>Tag Identifier</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10681"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10683"></A>102</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10685"></A>Provides a way to determine the meaning of a tag stored in the file.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10687"></A>DFTAG_TD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10689"></A>Tag Descriptor</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10691"></A>Text</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10693"></A>103</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10695"></A>Similar to DFTAG_TD, but allows more text to be included.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10697"></A>DFTAG_DIL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10699"></A>Data Identifier Label</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10701"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10703"></A>104</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10705"></A>Associates the string with the Data Identifier as a label for whatever the identifier points to. By including DILs, any data element can be given a label for future reference. For example, this tag is often used to give titles to raster image data sets.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10707"></A>DFTAG_DIA</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10709"></A>Data Identifier Annotation</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10711"></A>Text</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10713"></A>105</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10715"></A>Associates the text block with the Data Identifier as an annotation for whatever that Data Identifier points to. With DIAs, and Data Identifier can have a lengthy, user-provided description of why that particular data element is in the file.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10717"></A>DFTAG_RLE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10719"></A>Run-length Encoding</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10721"></A>0 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10723"></A>011</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10725"></A>Specifies that run-length encoding (RLE) is used to compress a raster image.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10727"></A>DFTAG_IMC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10729"></A>IMCOMP</P>
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10730"></A>Compression</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10732"></A>0 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10734"></A>012</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10736"></A>Specifies that IMCOMP compression is used to compress a raster image.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10738"></A>DFTAG_JPEG</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10740"></A>24-bit JPEG </P>
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10741"></A>Compression</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10743"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10745"></A>013</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10747"></A>Provides header information for 24-bit JPEG-compressed raster images.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10749"></A>DFTAG_GREYPEG</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10751"></A>8-bit JPEG </P>
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10752"></A>Compression</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10754"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10756"></A>014</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10758"></A>Provides header information for 8-bit JPEG-compressed raster images.</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593898_pgfId-3411"></A><DIV>
<IMG SRC="UG_html-108.gif" ALT="">
</DIV>
The HDF General<A NAME="50593898_marker-10474"></A> Raster Image Tags</H6>
<TABLE>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10766"></A>Tag Name</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10768"></A>Short Description</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10770"></A>Data Size</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10772"></A>Tag Value</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10774"></A>Long Description</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10776"></A>DFTAG_RIG</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10778"></A>Raster Image Group</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10780"></A>n*4 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10782"></A>306</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10784"></A>Lists the Data Identifiers (tag/reference number pairs) that uniquely describe a raster image set.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10786"></A>DFTAG_ID</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10788"></A>Image Dimension</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10790"></A>20 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10792"></A>300</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10794"></A>Defines the dimensions of the two-dimensional array the corresponding RI tag refers to.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10796"></A>DFTAG_LD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10798"></A>LUT Dimension</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10800"></A>20 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10802"></A>307</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10804"></A>Defines the dimensions of the two-dimensional array the corresponding LUT tag refers to.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10806"></A>DFTAG_MD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10808"></A>Matte Dimension</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10810"></A>20 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10812"></A>308</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10814"></A>Defines the dimensions of the two-dimensional array the corresponding MA tag refers to.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10816"></A>DFTAG_RI</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10818"></A>Raster Image</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10820"></A>x*y bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10822"></A>302</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10824"></A>Points to a raster image data set.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10826"></A>DFTAG_CI</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10828"></A>Compressed Image</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10830"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10832"></A>303</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10834"></A>Points to a compressed raster image data set.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10836"></A>DFTAG_LUT</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10838"></A>Lookup Table</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10840"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10842"></A>301</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10844"></A>Table to be used by the hardware for the purpose of assigning RGB or HSV colors to data values.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10846"></A>DFTAG_MA</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10848"></A>Matte Data</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10850"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10852"></A>309</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10854"></A>Points to matte data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10856"></A>DFTAG_CCN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10858"></A>Color Correction</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10860"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10862"></A>310</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10864"></A>Specifies the gamma correction for the raster image and color primaries used in the generation of the image.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10866"></A>DFTAG_CFM</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10868"></A>Color Format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10870"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10872"></A>311</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10874"></A>Indicates the interpretation to be given to each element of each pixel in a raster image.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10876"></A>DFTAG_AR</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10878"></A>Aspect Ratio</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10880"></A>4 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10882"></A>312</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10884"></A>Indicates the aspect ratio of the image.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10886"></A>DFTAG_XYP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10888"></A>XY Position</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10890"></A>8 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10892"></A>500</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10894"></A>Specifies the screen X-Y coordinate for raster image sets. (Also used for composite image sets - See the entry for DFTAG_XYP in Table 12.6)</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593898_pgfId-3566"></A><DIV>
<IMG SRC="UG_html-108.gif" ALT="">
</DIV>
The HDF Comp<A NAME="50593898_marker-10475"></A>osite Image Tags</H6>
<TABLE>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10902"></A>Tag Name</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10904"></A>Short Description</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10906"></A>Data Size</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10908"></A>Tag Value</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10910"></A>Long Description</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10912"></A>DFTAG_DRAW</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10914"></A>Draw</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10916"></A>n*4 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10918"></A>400</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10920"></A>Specifies a list of Data Identifiers (tag/reference number pairs) which define a composite image.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10922"></A>DFTAG_XYP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10924"></A>XY Position</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10926"></A>8 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10928"></A>500</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10930"></A>Specifies the screen X-Y coordinate for composite image sets. (Also used for raster image sets - See the entry for DFTAG_XYP in Table 12.5)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10932"></A>DFTAG_RUN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10934"></A>Run</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10936"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10938"></A>401</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10940"></A>Identifies code that is to be executes as a program or script.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10942"></A>DFTAG_T14</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10944"></A>Tektronix 4014</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10946"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10948"></A>602</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10950"></A><EM CLASS="Figure7ptBold">
Used as a vector image tag</EM>
. Points to a Tektronix 4014 data. The bytes in the data field, when read and sent to a Tektronix 4014 terminal, will be displayed as a vector image.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10952"></A>DFTAG_T10S</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10954"></A>Tektronix 4015</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10956"></A>n bytes </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10958"></A>603</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10960"></A><EM CLASS="Figure7ptBold">
Used as a vector image tag.</EM>
 Points to a Tektronix 4015 data. The bytes in the data field, when read and sent to a Tektronix 4015 terminal, will be displayed as a vector image.</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593898_pgfId-4140"></A><DIV>
<IMG SRC="UG_html-108.gif" ALT="">
</DIV>
The HDF Scien<A NAME="50593898_marker-10476"></A>tific Data Set Tags<A NAME="50593898_39748"></A></H6>
<TABLE>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10969"></A>Tag Name</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10971"></A>Short Description</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10973"></A>Data Size</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10975"></A>Tag Value</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-10977"></A>Long Description</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10979"></A>DFTAG_NDG</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10981"></A>Numeric Data Group</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10983"></A>n*4 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10985"></A>720</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10987"></A>Lists the Data Identifiers (tag/reference number pairs) that describe a scientific data set. Supersedes DFTAG_SDG.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10989"></A>DFTAG_SDD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10991"></A>SDS Dimension Record</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10993"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-10995"></A>701</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-10997"></A>Defines the rank and dimensions of the array the corresponding SD refers to.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-10999"></A>DFTAG_SD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11001"></A>Scientific Data</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11003"></A>Real Number</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11005"></A>702</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11007"></A>Points to scientific data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11009"></A>DFTAG_SDS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11011"></A>SCales</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11013"></A>Real Number</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11015"></A>703</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11017"></A>Identifies the scales to be used when interpreting and displaying data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11019"></A>DFTAG_SDL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11021"></A>Labels</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11023"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11025"></A>704</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11027"></A>Labels all dimensions and data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11029"></A>DFTAG_SDU</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11031"></A>Units</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11033"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11035"></A>705</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11037"></A>Displays units for all dimensions and data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11039"></A>DFTAG_SDF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11041"></A>Formats</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11043"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11045"></A>706</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11047"></A>Displays formats for axes and data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11049"></A>DFTAG_SDM</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11051"></A>Maximum/minimum</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11053"></A>2 Real Numbers</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11055"></A>707</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11057"></A>Displays the maximum and minimum values for the data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11059"></A>DFTAG_SDC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11061"></A>Coordinate system</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11063"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11065"></A>708</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11067"></A>Displays the coordinate system to be used in interpreting data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11069"></A>DFTAG_SDLNK</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11071"></A>SDS Link</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11073"></A>8 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11075"></A>710</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11077"></A>Links and old-style DFTAG_SDG and a DFTAG_NDG in cases where the DFTAG_NDG meets all criteria for a DFTAG_SDG.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11079"></A>DFTAG_CAL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11081"></A>Calibration Information</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11083"></A>36 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11085"></A>731</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11087"></A>The calibration record for the corresponding DFTAG.SD.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11089"></A>DFTAG_FV</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11091"></A>Fill Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11093"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11095"></A>732</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11097"></A>The value which has been used to indicate unset values in the corresponding DFTAG_SD.</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593898_pgfId-3876"></A><DIV>
<IMG SRC="UG_html-108.gif" ALT="">
</DIV>
The HDF Vse<A NAME="50593898_marker-10477"></A>t Tags</H6>
<TABLE>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11105"></A>Tag Name</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11107"></A>Short Description</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11109"></A>Data Size</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11111"></A>Tag Value</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11113"></A>Long Description</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11115"></A>DFTAG_VG</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11117"></A>Vgroup</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11119"></A>14+n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11121"></A>1965</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11123"></A>Provides a general-purpose grouping structure.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11125"></A>DFTAG_VH</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11127"></A>Vdata Description</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11129"></A>22+n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11131"></A>1962</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11133"></A>Provides information necessary to process a DFTAG_VS.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11135"></A>DFTAG_VS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11137"></A>Vdata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11139"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11141"></A>1963</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11143"></A>Contains a block of data that is to be interpreted according to the information in the corresponding DFTAG_VH.</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593898_pgfId-4031"></A><DIV>
<IMG SRC="UG_html-108.gif" ALT="">
</DIV>
The Obsole<A NAME="50593898_marker-10478"></A>te HDF Tags</H6>
<TABLE>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11151"></A>Tag Name</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11153"></A>Short Description</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11155"></A>Data Size</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11157"></A>Tag Value</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-11159"></A>Long Description</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11161"></A>DFTAG_IDS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11163"></A>Image Dimension-8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11165"></A>4 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11167"></A>200</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11169"></A>Two 16-bit integers that represent the width and height of an 8-bit raster image in bytes.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11171"></A>DFTAG_IP8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11173"></A>Image Palette-8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11175"></A>768 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11177"></A>201</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11179"></A>A 256 x 3 byte array representing the red, green and blue elements of the 256-color palette respectively.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11181"></A>DFTAG_RI8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11183"></A>Raster Image-8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11185"></A>x*y bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11187"></A>202</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11189"></A>A row-oriented representation of the elementary 8-bit image data.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11191"></A>DFTAG_CI8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11193"></A>Compressed Image-8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11195"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11197"></A>203</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11199"></A>A row-oriented representation of the elementary 8-bit raster image data, with each row compressed using a form of run-length encoding.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11201"></A>DFTAG_II8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11203"></A>IMCOMP Image-8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11205"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11207"></A>204</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11209"></A>A 4:1 8-bit raster image, compressed using the IMCOMP algorithm.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11211"></A>DFTAG_SDG</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11213"></A>Scientific Data Group</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11215"></A>n*4 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11217"></A>700</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11219"></A>List the Data Identifiers (tag/reference number pairs) that uniquely describe a scientific data set.</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-11221"></A>DFTAG_SDT</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11223"></A>Transpose</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11225"></A>0 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-11227"></A>709</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-11229"></A>Indicates that data is transposed in the file.</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Appendix1">
<A NAME="50593898_pgfId-4225"></A>HDF Inst<A NAME="50593898_marker-10485"></A>allation Overview<DIV>
<IMG SRC="UG_html-107.gif" ALT="">
</DIV>
</H6>
<DIV>
<H6 CLASS="Appendix2">
<A NAME="50593898_pgfId-10540"></A>General HDF Installation Overview</H6>
<DIV>
<H6 CLASS="Appendix3">
<A NAME="50593898_pgfId-5564"></A>Acquiring the HDF Library Source</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-33891"></A>You may obtain the HDF source code and/or selected binaries at no charge from The HDF Group's server:</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-33893"></A>             <EM CLASS="URL">
http://www.hdfgroup.org/products/hdf4</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-33894"></A>             <EM CLASS="URL">
http://www.hdfgroup.org/release4/obtain.html</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-33896"></A>For reference, the unpacked HDF source code can be found at</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-33592"></A>         <EM CLASS="URLftp">
ftp://ftp.hdfgroup.org/HDF/HDF_Current/src/unpacked/</EM>
.</P>
</DIV>
<DIV>
<H6 CLASS="Appendix3">
<A NAME="50593898_pgfId-33594"></A>Building the HDF Library Source</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-5559"></A>For instructions on building HDF from the source code, please refer to the INSTALL file in the top directory of the unpacked HDF source tree.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Appendix1">
<A NAME="50593898_pgfId-37720"></A><A NAME="50593898_33465"></A>Attributes in HDF<DIV>
<IMG SRC="UG_html-107.gif" ALT="">
</DIV>
</H6>
<DIV>
<H6 CLASS="Appendix2">
<A NAME="50593898_pgfId-37721"></A>Attribute Overview</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-37857"></A><EM CLASS="Definition">
Attributes</EM>
 are optional components in the HDF data model.  They can be used to describe the nature and/or the intended usage of various HDF elements.  This type of information is sometimes called user-created <EM CLASS="Definition">
metadata</EM>
 because it is data about data.  The HDF elements that can be assigned with attributes include:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-37858"></A>File, data set, and dimension in SD API</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-37859"></A>File and raster image in GR API</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-37860"></A>Vgroup in V API</LI>
<LI CLASS="Bullet">
<A NAME="50593898_pgfId-37861"></A>Vdata and vdata field in VS API</LI>
</UL>
<P CLASS="Body">
<A NAME="50593898_pgfId-37862"></A>At the creation, an HDF attribute requires a name, data values, number type, and number of values. The attribute name is an ASCII string of any length from 1 to <EM CLASS="DefName">
H4_MAX_NC_NAME</EM>
 (or <EM CLASS="DefName">
256</EM>
).  The attribute data contains one or more values, in which case all the values must have the same number type as defined at the time the attribute is created.  Attributes take the form label=value, where label is the attribute’s name and value is the attribute’s data.   Number of values declares how many data entries the attribute has.  The number type can be any type supported by the HDF library. These number types are listed in <A HREF="../../RefMan/src/RM_Section_I.htm#13047" CLASS="XRef">Number Type Definitions</A> in Section I of the <EM CLASS="Citation">
HDF4 Reference Manual</EM>
.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37867"></A>For each attribute, an a<A NAME="50593898_marker-37866"></A>ttribute count is maintained that identifies the number of values in the attribute. Each attribute has a unique a<A NAME="50593898_marker-37868"></A>ttribute index, the value of which ranges from 0 to the total number of attributes minus 1. The attribute index is used to locate an attribute in the object which the attribute is attached to. Once the attribute is identified, its values and information can be retrieved.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37869"></A>There are two types of attributes in HDF: <EM CLASS="Definition">
predefined </EM>
attributes and <EM CLASS="Definition">
user-defined attributes</EM>
.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37871"></A> <EM CLASS="Definition">
Predefined attributes</EM>
<A NAME="50593898_marker-37870"></A> have reserved names and, in some cases, predefined number types and/or number of data entries. Predefined attributes are useful because they establish conventions that applications can depend on.  They were first introduced in DFSD interface and later in the SD interface.   They are further described in <A HREF="UG_html-3.htm#50593873_15566" CLASS="XRef">Predefined Attributes</A> of the <EM CLASS="Citation">
HDF User’s Guide</EM>
.  The GR interface was added in 1995 and has only one predefined attribute: <EM CLASS="DefName">
FILL_ATTR</EM>
, which is described in <A HREF="UG_html-8.htm#50593878_55039" CLASS="XRef">Predefined GR Attributes</A> of the <EM CLASS="Citation">
HDF User’s Guide</EM>
.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37879"></A><EM CLASS="Definition">
User-defined attributes</EM>
<A NAME="50593898_marker-37878"></A> are defined by the calling program and contain auxiliary information about the element to which the attributes attach.  HDF library provides in each interface of SD, GR, V, and VS a set of functions to add and access attributes.  They are fully described in the associated chapters.</P>
</DIV>
<DIV>
<H6 CLASS="Appendix2">
<A NAME="50593898_pgfId-37885"></A>Underlaying storage issues</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-37886"></A>In general, users should not need the details described in this section, unless one is working with older HDF files (circa prior to 1993) and with raw data which relies on the knowledge of data layout in the file. The inclusion of this section in this User’s Guide was prompted by the HDF4 File Content Map Project because various API functions being added to support this project require explanation that involves the layout of attributes in the file.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-39023"></A>In the early years of HDF, in addition to the predefined attributes such as label, unit, and format, annotations were used to attach metadata to an HDF element such as data set and raster image.  When the library was expanded to include user-defined attributes to SD and GR interfaces, metadata once stored as an annotation could be more conveniently stored as an attribute.  This expansion introduced the difference in the ways predefined attributes were stored in DFSD interface and in SD/GR interfaces. The user-defined attribute feature then extended into the V and VS interfaces.  Along the way, an incompatibility was  inadvertently produced in the storage of attributes and their information.  The next sections briefly explains these issues and their effects.</P>
<DIV>
<H6 CLASS="Appendix3">
<A NAME="50593898_pgfId-37810"></A>Predefined Attributes in DFSD API</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-38019"></A>Beginning in 1993, when the SD interface and user-created attribute were introduced, an attribute has been stored in a vdata of class <EM CLASS="DefName">
_HDF_ATTRIBUTE</EM>
 (or &quot;<EM CLASS="Code">
Attr0.0</EM>
&quot;,) regardless it is a predefined or user-created attribute.  However, prior to this period, there were only predefined attributes in DFSD API and they can be assigned to a data set or a dimension.  This early predefined attribute of the data set is stored using tag/ref approach, that is, a pair of tag and ref would point to a string containing the values of the data set’s attribute and the dimensions’ attributes. The dimension attributes are stored following the SDS attribute.  All attributes are separated by null characters.  For example, in file <EM CLASS="Code">
myfile</EM>
, there is a two-dimensional data set.  The SDS and its dimensions were assigned with pre-defined attributes as followed:</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38020"></A>Data set: <EM CLASS="Definition">
label </EM>
= &quot;<EM CLASS="Code">
SDS label</EM>
&quot;, <EM CLASS="Definition">
unit</EM>
 = &quot;<EM CLASS="Code">
SDS unit</EM>
&quot;, <EM CLASS="Definition">
format</EM>
 = &lt;no attribute assigned&gt;</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38024"></A>Dimension 1: <EM CLASS="Definition">
label</EM>
 = &quot;<EM CLASS="Code">
Dim1 label</EM>
&quot;, <EM CLASS="Definition">
unit</EM>
 = &lt;no attribute assigned&gt;, <EM CLASS="Definition">
format</EM>
 = &quot;<EM CLASS="Code">
Dim1 format</EM>
&quot;</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38028"></A>Dimension 2: <EM CLASS="Definition">
label</EM>
 = &quot;<EM CLASS="Code">
Dim2 label</EM>
&quot;, <EM CLASS="Definition">
unit</EM>
 = &quot;<EM CLASS="Code">
Dim2 unit</EM>
&quot;, <EM CLASS="Definition">
format</EM>
 = &quot;<EM CLASS="Code">
Dim2 format</EM>
&quot;</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38242"></A>In the file, the attributes’ values are stored as followed:</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38006"></A>Data set’s label attribute tag/ref <EM CLASS="Code">
(DFTAG_SDL/&lt;ref#&gt;)</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38007"></A>	| (point to)</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38008"></A>	--&gt; <EM CLASS="Code">
&quot;SDS label&lt;null&gt;Dim1 label&lt;null&gt;Dim2 label&lt;null&gt;&quot;</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38149"></A>Data set’s unit attribute tag/ref <EM CLASS="Code">
(DFTAG_SDU/&lt;ref#&gt;)</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38150"></A>	| (point to)</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38176"></A>	--&gt; <EM CLASS="Code">
&quot;SDS unit&lt;null&gt;&lt;null&gt;Dim2 unit&quot;</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38183"></A>Data set’s format attribute tag/ref <EM CLASS="Code">
(DFTAG_SDF/&lt;ref#&gt;)</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-38194"></A>	| (point to)</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-39180"></A>	--&gt; <EM CLASS="Code">
&quot;&lt;null&gt;Dim1 format&lt;null&gt;Dim2 format&quot;</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-39184"></A>A complete list of pre-defined attribute tags are provided in <A HREF="UG_html-20.htm#50593898_21007" CLASS="XRef">Table AG</A> below.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593898_pgfId-39257"></A><DIV>
<IMG SRC="UG_html-108.gif" ALT="">
</DIV>
Pre-defined Attributes in the DFSD and SD APIs<A NAME="50593898_21007"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-39402"></A>Tag Name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-39404"></A>Description</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-39406"></A>Data Size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593898_pgfId-39408"></A>Applicable to</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-39346"></A>DFTAG_SDL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39348"></A>Labels</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39350"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-39352"></A>SDS and dimensions</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-39354"></A>DFTAG_SDU</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39356"></A>Units</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39358"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-39360"></A>SDS and dimensions</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-39362"></A>DFTAG_SDF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39364"></A>Formats</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39366"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-39368"></A>SDS and dimensions</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-39370"></A>DFTAG_SDM</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39372"></A>Maximum/minimum</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39374"></A>2 Real Numbers</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-39376"></A>Only SDS</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-39378"></A>DFTAG_SDC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39380"></A>Coordinate system</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39382"></A>String</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-39384"></A>Only SDS</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-39386"></A>DFTAG_CAL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39388"></A>Calibration Information</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39390"></A>36 bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-39392"></A>Only SDS</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593898_pgfId-39394"></A>DFTAG_FV</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39396"></A>Fill Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593898_pgfId-39398"></A>n bytes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593898_pgfId-39400"></A>Only SDS</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593898_pgfId-39478"></A>The HDF library handles the situation properly, so the difference in storage approaches does not effect general applications, which simply read the values of these predefined attributes.  It would only become significant when an application needs to get access to the raw data.  The HDF4 File Content Map Project is an example.  The raw data of this type of attribute is not accessible by the function <EM CLASS="FunctionName">
SDgetattdatainfo</EM>
, which was added to support the HDF4 File Content Map Project.  Thus, when such an attribute is encountered, <EM CLASS="FunctionName">
SDgetattdatainfo</EM>
 will return the error code <EM CLASS="DefName">
DFE_NOVGREP</EM>
 to the caller, which will in turn call <EM CLASS="FunctionName">
SDgetoldattdatainfo</EM>
 to get the data information of that attribute.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Appendix3">
<A NAME="50593898_pgfId-37819"></A>Vgroup Attribute Without Vsetattr</H6>
<P CLASS="Body">
<A NAME="50593898_pgfId-37820"></A>HDF Version 4.0.2, July 19, 1996, and prior did not support attributes in Vgroup and Vdata as for SD and GR interfaces.  However, an application could simulate an attribute for a vgroup by creating and writing a vdata of class <EM CLASS="DefName">
_HDF_ATTRIBUTE</EM>
, and then adding that vdata to the vgroup via these calls:</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37821"></A><EM CLASS="Code">
vdata_ref = VHstoredatam(file_id, ATTR_FIELD_NAME, values, size, type, </EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37822"></A><EM CLASS="Code">
                           attr_name, _HDF_ATTRIBUTE, order);</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37823"></A><EM CLASS="Code">
ret_value = Vaddtagref (vgroup_id, DFTAG_VH, vdata2_ref);</EM>
</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37824"></A>For simplicity, this type of attributes is referred to as old-style attributes in this document.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37825"></A>A vgroup and vdata were having version number as <EM CLASS="DefName">
VSET_VERSION</EM>
 (<EM CLASS="DefName">
3</EM>
).  Starting in version 4.1.1, HDF began to support attributes in Vgroup and Vdata interfaces.  Applications were able to add and manipulate attributes via public functions such as <EM CLASS="FunctionName">
Vsetattr</EM>
/<EM CLASS="FunctionName">
VSsetatt</EM>
, <EM CLASS="FunctionName">
Vgetattr</EM>
/<EM CLASS="FunctionName">
VSgetattr</EM>
, <EM CLASS="FunctionName">
Vattrinfo</EM>
/<EM CLASS="FunctionName">
VSattrinfo</EM>
,…  This type of attributes is referred to as new-style attributes in this document.  The version number of a vgroup or a vdata that has new-style attributes got promoted from <EM CLASS="DefName">
VSET_VERSION</EM>
 (<EM CLASS="DefName">
3</EM>
) to <EM CLASS="DefName">
VSET_NEW_VERSION</EM>
 (<EM CLASS="DefName">
4</EM>
).</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37826"></A>In addition, the file format was changed for the vgroup/vdata header to store the number of attributes and the tag/reference number of each attribute.  The new attribute API functions use this new information to get access to the attributes, but they are not aware of the old-style attributes.  Thus, <EM CLASS="FunctionName">
Vnattrs</EM>
 misses counting them and other functions like <EM CLASS="FunctionName">
Vattrinfo</EM>
 and <EM CLASS="FunctionName">
Vgetattr</EM>
 are unable to get to them.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37827"></A>Starting in version 4.2.6, the library provides the updated functions <EM CLASS="FunctionName">
Vnattrs2</EM>
, <EM CLASS="FunctionName">
Vattrinfo2</EM>
, and <EM CLASS="FunctionName">
Vgetattr2</EM>
 for applications to get access to attributes that were not created by <EM CLASS="FunctionName">
Vsetattr</EM>
.  These functions access both types of attributes.  In addition, the HDF library provides the function <EM CLASS="FunctionName">
Vnoldattrs</EM>
 to get the number of old-style attributes in a vgroup.  The old-style attributes are likely to present in older files or files that were modified by older applications.  Please refer to <A HREF="UG_html-5.htm#50593875_83268" CLASS="XRef">Vgroup Attributes</A> of the <EM CLASS="Citation">
HDF User’s Guide</EM>
 for details on these functions.</P>
<P CLASS="Body">
<A NAME="50593898_pgfId-37831"></A>&nbsp;</P>
<P CLASS="FrontSection">
<A NAME="50593903_pgfId-17010"></A>Copyright Notice and License Terms for Hierarchical Data Format (HDF) Software Library and Utilities</P>
<DIV>
<H6 CLASS="FrontCopyright1">
<A NAME="50593903_pgfId-17011"></A>Hierarchical Data Format (HDF) Software Library and Utilities </H6>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17012"></A>Copyright 2006-2014 by The HDF Group.</P>
</DIV>
<DIV>
<H6 CLASS="FrontCopyright1">
<A NAME="50593903_pgfId-17013"></A>NCSA Hierarchical Data Format (HDF) Software Library and Utilities</H6>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17014"></A>Copyright 1988-2006 by the Board of Trustees of the University of Illinois.</P>
<P CLASS="FrontDocument">
<A NAME="50593903_pgfId-17015"></A><EM CLASS="Strong">
All rights reserved.</EM>
</P>
<P CLASS="FrontDocument">
<A NAME="50593903_pgfId-17016"></A>Contributors:   National Center for Supercomputing Applications (NCSA) at the University of Illinois, Fortner Software, Unidata Program Center (<A HREF="UG_html-20.htm#50593904_58862" CLASS="XRef">Unidata netCDF Version 2.3.2 Copyright and License Statement</A>), The Independent JPEG Group (JPEG), Jean-loup Gailly and Mark Adler (gzip), and Digital Equipment Corporation (DEC).</P>
<P CLASS="FrontDocument">
<A NAME="50593903_pgfId-17017"></A>Redistribution and use in source and binary forms, with or without modification, are permitted for any purpose (including commercial purposes) provided that the following conditions are met:</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-17018"></A>1. Redistributions of source code must retain the above copyright notice, this list of conditions, and the following disclaimer.</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-17019"></A>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions, and the following disclaimer in the documentation and/or materials provided with the distribution.</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-17020"></A>3. In addition, redistributions of modified forms of the source or binary code must carry prominent notices stating that the original code was changed and the date of the change. </P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-17021"></A>4. All publications or advertising materials mentioning features or use of this software are asked, but not required, to acknowledge that it was developed by The HDF Group and by the National Center for Supercomputing Applications at the University of Illinois at Urbana-Champaign and credit the contributors.</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-17022"></A>5. Neither the name of The HDF Group, the name of the University, nor the name of any Contributor may be used to endorse or promote products derived from this software without specific prior written permission from The HDF Group, the University, or the Contributor, respectively.</P>
<P CLASS="FrontSection">
<A NAME="50593903_pgfId-16575"></A>Disclaimer</P>
<P CLASS="FrontDocument">
<A NAME="50593903_pgfId-16576"></A>THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND THE CONTRIBUTORS &quot;AS IS&quot; WITH NO WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED.  In no event shall the University or the Contributors be liable for any damages suffered by the users arising out of the use of this software, even if advised of the possibility of such damage. </P>
<P CLASS="FrontSection">
<A NAME="50593903_pgfId-69"></A>Trademarks</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-16601"></A>Sun is a registered trademark, and Sun Workstation, Sun/OS and Solaris  are trademarks of Sun Microsystems Inc.</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17742"></A>UNIX is a registered trademark of X/Open.</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17745"></A>VAX and VMS are trademarks of Digital Equipment Corporation.</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17746"></A>Macintosh is a trademark of Apple Computer, Inc.</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17747"></A>CRAY and UNICOS are registered trademarks of Silicon Graphics , Inc.</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17748"></A>IBM PC is a registered trademark of International Business Machines Corporation.</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-17752"></A>MS-DOS is a registered trademark of Microsoft Corporation.</P>
<P CLASS="FrontCopyright2">
<A NAME="50593903_pgfId-16977"></A>The SZIP Science Data Lossless Compression Program is Copyright (C) 2001 Science &amp; Technology Corporation @ UNM.  All rights released.  Copyright (C) 2003 Lowell H. Miles and Jack A. Venbrux.  Licensed to ICs Corp. for distribution by the University of Illinois' National Center for Supercomputing Applications as a part of the HDF data storage and retrieval file format and software libraryproducts package.  All rights reserved.  Do not modify or use for other purposes. See for further information regarding terms of use.</P>
<P CLASS="FrontSection">
<A NAME="50593903_pgfId-17038"></A>The HDF Group and HDF Information and Contacts</P>
<P CLASS="FrontDocument">
<A NAME="50593903_pgfId-17039"></A>Information regarding The HDF Group and HDF products is available from The HDF Group’s website: http://www.hdfgroup.org</P>
<P CLASS="FrontDocument">
<A NAME="50593903_pgfId-17041"></A>HDF Help Desk assistance is available via email: help@hdfgroup.org</P>
<P CLASS="FrontDocument">
<A NAME="50593903_pgfId-17043"></A>Business queries and contacts can be made through the website or by mail:</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-17044"></A>http://www.hdfgroup.org/about/contact.html</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-18092"></A>The HDF Group</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-18093"></A>1800 South Oak Street</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-18094"></A>Suite 203</P>
<P CLASS="FrontDefnList">
<A NAME="50593903_pgfId-18095"></A>Champaign, IL 61820 USA</P>
<P CLASS="FrontCopyright">
<A NAME="50593904_pgfId-18065"></A>Unidata netCDF Version 2.3.2 is tightly integrated with HDF.  The netCDF copyright and license statement, as distributed with that netCDF release and in the mfhdf/ directory of the HDF the source code, appears below.</P>
<P CLASS="FrontCopyright">
<A NAME="50593904_pgfId-21772"></A>---------------------------------------------------------------------------------------------------------------------</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593904_pgfId-21773"></A><A NAME="50593904_58862"></A>Unidata netCDF Version 2.3.2 Copyright and License Statement</H6>
<P CLASS="FrontCopyright">
<A NAME="50593904_pgfId-21774"></A>----------------------------------------------------------------------------------------------------------------------</P>
<P CLASS="FrontCopyright">
<A NAME="50593904_pgfId-18073"></A>Copyright 1993 University Corporation for Atmospheric Research/Unidata Portions of this software were developed by the Unidata Program at the University Corporation for Atmospheric Research.</P>
<P CLASS="FrontCopyright">
<A NAME="50593904_pgfId-18078"></A>Access and use of this software shall impose the following obligations and understandings on the user. The user is granted the right, without any fee or cost, to use, copy, modify, alter, enhance and distribute this software, and any derivative works thereof, and its supporting documentation for any purpose whatsoever, provided that this entire notice appears in all copies of the software, derivative wor and supporting documentation.  Further, UCAR requests that the user credit UCAR/Unidata in any publications that result from the use of this software or in any product that includes this software, although this is not an obligation. The names UCAR and/or Unidata, however, may not be used in any advertising or publicity to endorse or promote any products or commercial entity unless specific written permission is obtained from UCAR/Unidata. The user also understands that UCAR/Unidata is not obligated to provide the user with any support, consulting, training or assistance of any kind with regard to the use, operation and performance of this software nor to provide the user with any updates, revisions, new versions or &quot;bug fixes.&quot;</P>
<P CLASS="FrontCopyright">
<A NAME="50593904_pgfId-21777"></A>THIS SOFTWARE IS PROVIDED BY UCAR/UNIDATA &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL UCAR/UNIDATA BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE ACCESS, USE OR PERFORMANCE OF THIS SOFTWARE.</P>
</DIV>
</DIV>
</DIV>
</DIV>
</DIV>
<HR><P><table id="Botofpage" border="0" width="850" cellspacing="0" cellpadding="0">      <tr>        <td align="left">        HDF 4.2.10 - February 2014<br/>        <a href="THG_Copyright.html">Copyright</a>        <td align="right">          <span style="font-size: 12px; font-weight: bold">            The HDF Group<br />          </span>          <span style="font-size: 12px">            <a href="http://www.hdfgroup.org">www.hdfgroup.org</a><br />            <img valign="bottom" border="0" src="images/help.jpg" height="12" alt="The HDF Group" valign="top" />          </span>        </td>      </tr>    </table></BODY>
</HTML>
