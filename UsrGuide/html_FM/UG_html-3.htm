<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 11.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="UG_html.css" CHARSET="UTF-8" TYPE="text/css">
<table id="Topofpage" border="0" width="850" cellspacing="0" cellpadding="0"><tr><td align="left"><a href="http://www.hdfgroup.org"><img id="THG_logo" border="0" src="images/hdf_logo.jpg" width="90" height="70" alt="The HDF Group" valign="top" /></a></td><td valign="middle" align="center"><H1>HDF Userâ€™s Guide</H1><span style="font-size: 14px; font-weight: bold"><b>4.2.12</b></td><td valign="middle" align="center"><a HREF=UG_html.htm> [Top]</a> <a HREF=UG_html-2.htm> [Prev]</a><a HREF=UG_html-4.htm> [Next]</a></td></tr></table><HR></HEAD>
<BODY>
<DIV>
<span style="font-size: 14px; font-weight: bold"><a href="UG_html-17.htm">Index</a>] [<a href="UG_html-20.htm">List of Examples</a>] [<a href="UG_html-19.htm">List of Tables</a>] [<a href="UG_html-18.htm">List of Figures</a>]</DIV>
<H1 CLASS="ChapterTitle">
<A NAME="50593873_pgfId-311694"></A>Chapter 3 --	<A NAME="50593873_marker-29378"></A><A NAME="50593873_13938"></A>Scientific Data Sets (SD API)</H1>
<DIV>
<H4 CLASS="Heading1">
<A NAME="50593873_pgfId-15476"></A>	3.1	Chapter Overview<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H4>
<P CLASS="Body">
<A NAME="50593873_pgfId-15477"></A>This chapter describes the scientific data model and the interface routines provided by HDF for creating and accessing the data structures included in the model.  This interface is known as the SD interface or the SD API.</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-47794"></A>	3.2	<A NAME="50593873_33327"></A>Th<A NAME="50593873_marker-47793"></A>e Scientific Data Set Data Model<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-47797"></A>The scientific data set, or SDS, is a group of data structures used to store and describe multidimensional arrays of scientific data. Refer to <A HREF="UG_html-3.htm#50593873_16676" CLASS="XRef">Figure 3a</A> for a graphical overview of the SD data set. Note that in this chapter the terms <EM CLASS="Definition">
SDS</EM>
, <EM CLASS="Definition">
SD data set</EM>
, and <EM CLASS="Definition">
data set</EM>
 are used interchangeably; the terms <EM CLASS="Definition">
SDS array</EM>
 and <EM CLASS="Definition">
array</EM>
 are also used interchangeably.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-134703"></A>A scientific data set consists of required and optional components, which will be discussed in the following subsections.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593873_pgfId-48894"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
FIGURE 3a	<A NAME="50593873_16676"></A>The Co<A NAME="50593873_marker-48868"></A>ntents of a Scientific Data Set</H6>
<DIV>
<IMG SRC="UG_html-14.gif" ALT="">
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-145772"></A>	3.2.1	<A NAME="50593873_10424"></A>Required SDS Components</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-145774"></A><A NAME="50593873_marker-145773"></A>Every SDS must contain the following components: an <EM CLASS="Definition">
SDS array</EM>
, a <EM CLASS="Definition">
name</EM>
, a <EM CLASS="Definition">
data type</EM>
, and the <EM CLASS="Definition">
dimensions</EM>
 of the SDS, which are actually the dimensions of the SDS array.</P>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-48771"></A>SDS Array</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-312370"></A><A NAME="50593873_marker-312369"></A>An <EM CLASS="Definition">
SDS array</EM>
 is a multidimensional data structure that serves as the core structure of an SDS. This is the primary data component of the SDS model and can be compressed (refer to <EM CLASS="Body">
<A HREF="UG_html-3.htm#50593873_22986" CLASS="XRef">Compressing SDS Data: SDsetcompress</A></EM>
 for a description of SDS compression) and/or stored in external files (refer the <EM CLASS="Body">
<A HREF="UG_html-3.htm#50593873_17173" CLASS="XRef">Creating a Data Set with Data Stored in an External File: SDsetexternalfile</A></EM>
 for a description of external SDS storage). Users of netCDF should note that SDS arrays are conceptually equivalent to <EM CLASS="Definition">
variables</EM>
 in the netCDF data model<A HREF="#pgfId-312379" CLASS="footnote">1</A>. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141554"></A>An SDS has an index and a reference number associated with it. The <EM CLASS="Definition">
index</EM>
 is a non-negative integer that describes the relative position of the data set in the file. A valid index ranges from 0 to the total number of data sets in the file minus 1. The <EM CLASS="Definition">
reference number</EM>
 is a unique positive integer assigned to the data set by the SD interface when the data set is created. Various SD interface routines can be used to obtain an SDS index or reference number depending on the available information about the SDS. The index can also be determined if the sequence in which the data sets are created in the file is known.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-134753"></A>In the SD interface, an <A NAME="50593873_marker-145874"></A><EM CLASS="Definition">
SDS identifier</EM>
 uniquely identifies a data set within the file. The identifier is created by the SD interface access routines when a new SDS is created or an existing one is selected. The identifier is then used by other SD interface routines to access the SDS until the access to this SDS is terminated. For an existing data set, the index of the data set can be used to obtain the identifier. Refer to <A HREF="UG_html-3.htm#50593873_13485" CLASS="XRef">Establishing Access to Files and Data Sets: SDstart, SDcreate, and SDselect</A> for a description of the SD interface routine that creates SDSs and assigns identifiers to them.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-48330"></A>SDS Name</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-145817"></A><A NAME="50593873_marker-145816"></A>The <EM CLASS="Definition">
name</EM>
 of an SDS can be provided by the calling program, or is set to &quot;DataSet&quot; by the HDF library at the creation of the SDS. The name consists of case-sensitive alphanumeric characters, is assigned only when the data set is created, and cannot be changed. SDS names do not have to be unique within a file, but their uniqueness makes it easy to semantically distinguish among data sets in the file.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-48338"></A>Data Type</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-47854"></A>The data contained in an SDS array has a <EM CLASS="Definition">
data type</EM>
 associated with it. <A NAME="50593873_marker-47857"></A>The standard data types supported by the SD interface include 32- and 64-bit floating-point numbers, 8-, 16- and 32-bit signed integers, 8-, 16- and 32-bit unsigned integers, and 8-bit characters. The SD interface also allows the creation of SD data sets consisting of data elements of non-standard lengths (1 to 32 bits). See <A HREF="UG_html-3.htm#50593873_36561" CLASS="XRef">Creating SDS Arrays Containing Non-standard Length Data: SDsetnbitdataset</A> for more information.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-47838"></A><A NAME="50593873_28978"></A>Dimensions</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-47841"></A><A NAME="50593873_marker-47839"></A>SDS <EM CLASS="Definition">
dimensions</EM>
 specify the shape and size of an SDS array.<A NAME="50593873_marker-47840"></A> The number of dimensions of an array is referred to as the <EM CLASS="Definition">
rank</EM>
 of the array. Each dimension has an index and an identifier assigned to it. A dimension also has a size and may have a name associated with it.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301265"></A>A dimension <EM CLASS="Definition">
identifier</EM>
 is a positive number uniquely assigned to the dimension by the library. This dimension identifier can be retrieved via an SD interface routine. Refer to <A HREF="UG_html-3.htm#50593873_32761" CLASS="XRef">Selecting a Dimension: SDgetdimid</A> for a description of how to obtain dimension identifiers.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301270"></A><A NAME="50593873_marker-301269"></A>A dimension <EM CLASS="Definition">
index</EM>
 is a non-negative number that describes the ordinal location of a dimension among others in a data set. In other words, when an SDS dimension is created, an index number is associated with it and is one greater than the index associated with the last created dimension that belongs to the same data set. The dimension index is convenient in a sequential search or when the position of the dimension among other dimensions in the SDS is known.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301283"></A>The <EM CLASS="Definition">
size</EM>
 of a dimension is a positive integer. <A NAME="50593873_marker-301282"></A>Also, one dimension of an SDS array can be assigned the predefined size <EM CLASS="DefName">
SD_UNLIMITED</EM>
 (or <EM CLASS="DefName">
0</EM>
). This dimension is referred to as an <EM CLASS="Definition">
unlimited dimension</EM>
, which, as the name suggests, can grow to any length. Refer to <A HREF="UG_html-3.htm#50593873_32191" CLASS="XRef">Appending Data to an SDS Array along an Unlimited Dimension</A> for more information on unlimited dimensions.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-143002"></A><EM CLASS="Definition">
Names</EM>
<A NAME="50593873_marker-143001"></A> can optionally be assigned to dimensions, however, dimension names are not treated in the same way as SDS array names. For example, if a name assigned to a dimension was previously assigned to another dimension the SD interface treats both dimensions as the same data component and any changes made to one will be reflected in the other.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301274"></A><EM CLASS="Strong">
Important Note:</EM>
<A NAME="50593873_Same name"></A></P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301275"></A>HDF4 allows a dimension and a one-dimensional SDS to be given the same name.  The library also stores a dimension and a data set the same way internally. Prior to HDF 4.2.2, however, the library did not adequately distinguish these two types of objects.  Thus, when a dimension and a one-dimensional SDS shared a name, writing to the SDS or the dimension could cause data corruption to the other. The corrupted data was unrecoverable.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301264"></A>This problem was fixed in Release 4.2.2 and such data corruption will not occur in files created with a 4.2.2 or later library. Note, however, that the fix is effective only in new files; a dimension and a one-dimensional SDS of the same name that were created with a pre-4.2.2 HDF4 Library remain vulnerable to data corruption if an application is unaware of the potential conflict. To safely handle pre-4.2.2 files, the library now provides two functions, <EM CLASS="FunctionName">
SDgetnumvars_byname</EM>
 and <EM CLASS="FunctionName">
SDnametoindices</EM>
. <EM CLASS="FunctionName">
SDgetnumvars_byname</EM>
 can be used to determine whether a name is unique. If the function reports one ('1') variable by that name, the name is unique and no further precaution needs to be taken. If the name is not unique, i.e., the number of variables by that name is greater than one, <EM CLASS="FunctionName">
SDnametoindices</EM>
 must then be used to retrieve the index and the type of each variable with that name. The desired variable can then be safely selected via its index. These functions are described in detail in this User's Guide and the HDF4 Reference Manual.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301295"></A>A similar problem is possible when a multi-dimensional SDS and a dimension are created with the same name by a pre-4.2.2 library. The HDF Group has not seen such a failure, however, and it is thought to be very unlikely. Note that the fix introduced in Release 4.2.2 also prevents data corruption from happening for this situation even though the data was created with libraries prior to 4.2.2, assuming no corruption had yet occurred.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-134804"></A>	3.2.2	<A NAME="50593873_17668"></A>Optional SDS Components</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-44140"></A><A NAME="50593873_marker-44139"></A>There are three types of optional SDS components: <EM CLASS="Definition">
user-defined attributes</EM>
, <EM CLASS="Definition">
predefined</EM>
 attributes, and <EM CLASS="Definition">
dimension scales</EM>
. These optional components are only created when specifically requested by the calling program. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-162632"></A><EM CLASS="Definition">
Attributes</EM>
<A NAME="50593873_marker-162631"></A> describe the nature and/or the intended usage of the file, data set, or dimension they are attached to. Attributes have a name and value which contains one or more data entries of the same data type. Thus, in addition to name and value, the data type and number of values are specified when the attribute is created.</P>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-6902"></A>User-Defined Attributes</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-6888"></A><EM CLASS="Definition">
User-defined attributes</EM>
<A NAME="50593873_marker-48381"></A> are defined by the calling program and contain auxiliary information about a file, SDS array, or dimension. They are more fully described in <A HREF="UG_html-3.htm#50593873_14370" CLASS="XRef">User-defined Attributes</A>.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-6882"></A>Predefined Attributes</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-6883"></A><EM CLASS="Definition">
Predefined attributes</EM>
<A NAME="50593873_marker-26849"></A> have reserved names and, in some cases, predefined data types and/or number of data entries. Predefined attributes are useful because they establish conventions that applications can depend on. They are further described in <A HREF="UG_html-3.htm#50593873_15566" CLASS="XRef">Predefined Attributes</A>.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-47924"></A>Dimension Scales</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-47926"></A><A NAME="50593873_marker-47925"></A>A dimension scale is a sequence of numbers placed along a dimension to demarcate intervals along it. Dimension scales are described in <A HREF="UG_html-3.htm#50593873_17621" CLASS="XRef">Dimension Scales</A>.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-145841"></A>	3.2.3	<A NAME="50593873_32739"></A>Annotations and the SD Data Model</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-301223"></A><A NAME="50593873_marker-301222"></A>In the past, annotations were supported in the SD interface to allow the HDF user to attach descriptive information (called <EM CLASS="Definition">
metadata</EM>
) to a data set. With the expansion of the SD interface to include user-defined attributes, the use of annotations to describe metadata should be eliminated. Metadata once stored as an annotation is now more conveniently stored as an attribute. However, to ensure backward compatibility with scientific data sets and applications relying on annotations, the AN annotation interface, described in <EM CLASS="Chapter-Reference">
<A HREF="UG_html-10.htm#50593880_10210" CLASS="XRef">Annotations (AN API)</A></EM>
 can be used to annotate SDSs.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-44148"></A>There is no cross-compatibility between attributes and annotations; creating one does not automatically create the other.</P>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-134865"></A>	3.3	The SD Interface<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-312087"></A><A NAME="50593873_marker-312086"></A>The SD interface provides routines that store, retrieve, and manipulate scientific data using the SD data model. The SD interface supports simultaneous access to more than one SDS in more than one HDF file. In addition, the SD interface is designed to support a general scientific data model which is very similar to the netCDF data model developed by the Unidata Program Center<A HREF="#pgfId-312090" CLASS="footnote">2</A>.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-312091"></A>For those users who have been using the DFSD interface, the SD interface provide a model compatible with that supported by the DFSD interface. It is recommended that DFSD users apply the SD model and interface to their applications since the DFSD interface is less flexible and less powerful than the SD interface and will eventually be removed from the HDF library.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-304060"></A>This section specifies the header file to be used with the SD interface and lists all available SD interface routines, each of which is accompanied by its purpose and the section where the routine is discussed.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-304061"></A>	3.3.1	Header Files Required by the SD Interface</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-304062"></A>The <EM CLASS="Code">
mfhdf.h</EM>
 header file must be included in programs that invoke SD interface routines. FORTRAN-77 users should refer to <A HREF="UG_html-2.htm#50593872_70184" CLASS="XRef">FORTRAN-77 and C Language Issues</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-15878"></A>	3.3.2	SD Interface Routines</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-15880"></A><A NAME="50593873_marker-26852"></A>All C routines in the SD interface begin with the prefix &quot;SD&quot;<A NAME="50593873_marker-15879"></A>. The equivalent FORTRAN-77 routines use the prefix &quot;sf&quot;. These routines are categorized as follows:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-15881"></A><EM CLASS="Definition">
Access routines</EM>
 initialize and terminate access to HDF files and data sets.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-15882"></A><EM CLASS="Definition">
Read and write routines</EM>
 read and write data sets.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-15883"></A><EM CLASS="Definition">
General inquiry routines</EM>
 return information about the location, contents, and description of the scientific data sets in an HDF file.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-40087"></A><EM CLASS="Definition">
Dimension routines</EM>
 access and define characteristics of dimensions within a data set.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-304082"></A><EM CLASS="Definition">
Dimension scale routines</EM>
 define and access dimension scales within a data set.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-304083"></A><EM CLASS="Definition">
User-defined attribute routines</EM>
 create and access user-defined attributes of an HDF file, data set, or dimension. </LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-15886"></A><EM CLASS="Definition">
Predefined attribute routines</EM>
 access previously-defined attributes of an HDF file, data set, or dimension.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-27211"></A><EM CLASS="Definition">
Compression routines</EM>
 compress SDS data and retrieves compresion information.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-28599"></A><EM CLASS="Definition">
Chunking/tiling routines</EM>
 manage chunked data sets.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-146494"></A><EM CLASS="Definition">
Miscellaneous routines</EM>
 provide other operations such as external file, n-bit data set, and compatibility operations.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-310866"></A><EM CLASS="Definition">
Raw Data Information routines</EM>
 provide information that allows applications to read raw data from HDF files without the use of HDF library.  These functions are described in <A HREF="UG_html-16.htm#50593829_32374" CLASS="XRef">Raw Data Information</A> of this document, together with the same type of routines that belong to other interfaces.</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-146496"></A>The SD routines are listed in the following table and are discussed in the following sections of this chapter.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-147045"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-224699"></A>SD Interface Routines</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-307536"></A>Category</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-307538"></A>Routine Name</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-307542"></A>Description and Reference</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-307546"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-307548"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-307552"></A>Access</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307554"></A>SDstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307556"></A>sfstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307560"></A>Opens the HDF file and initializes the SD interface (<A HREF="UG_html-3.htm#50593873_13485" CLASS="XRef">Establishing Access to Files and Data Sets: SDstart, SDcreate, and SDselect</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307565"></A>SDcreate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307567"></A>sfcreate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307572"></A>Creates a new data set (<A HREF="UG_html-3.htm#50593873_13485" CLASS="XRef">Establishing Access to Files and Data Sets: SDstart, SDcreate, and SDselect</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307576"></A>SDselect</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307578"></A>sfselect</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307583"></A>Selects an existing SDS given its index (<A HREF="UG_html-3.htm#50593873_13485" CLASS="XRef">Establishing Access to Files and Data Sets: SDstart, SDcreate, and SDselect</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307587"></A>SDendaccess</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307589"></A>sfendacc</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307594"></A>Terminates access to an SDS (<A HREF="UG_html-3.htm#50593873_11405" CLASS="XRef">Terminating Access to Files and Data Sets: SDendaccess and SDend</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307598"></A>SDend</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307600"></A>sfend</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307602"></A>Terminates access to the SD interface and closes the file (<A HREF="UG_html-3.htm#50593873_11405" CLASS="XRef">Terminating Access to Files and Data Sets: SDendaccess and SDend</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-307607"></A>Read and Write</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307609"></A>SDreaddata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307611"></A>sfrdata/</P>
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307612"></A>sfrcdata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307617"></A>Reads data from a data set (<A HREF="UG_html-3.htm#50593873_13107" CLASS="XRef">Reading Data from an SDS Array: SDreaddata</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307621"></A>SDwritedata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307623"></A>sfwdata/</P>
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307624"></A>sfwcdata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307629"></A>Writes data to a data set (<A HREF="UG_html-3.htm#50593873_20018" CLASS="XRef">Writing Data to an SDS Array: SDwritedata</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="21" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-307631"></A>General Inquiry</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307633"></A>SDcheckempty</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307635"></A>sfchempty</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307637"></A>Determines whether a scientific dataset (an SDS) is empty (<A HREF="UG_html-3.htm#50593873_39481" CLASS="XRef">Determining whether an SDS is empty: SDcheckempty</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307644"></A>SDfileinfo</P>
</TD>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307646"></A>sffinfo</P>
</TD>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307650"></A>Retrieves information about the contents of a file (<A HREF="UG_html-3.htm#50593873_29038" CLASS="XRef">Obtaining Information about the Contents of a File: SDfileinfo</A>)</P>
</TD>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307671"></A>SDgetfilename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307673"></A>sfgetfname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307677"></A>Given a file identifier, retrieves the name of the file (<A HREF="UG_html-3.htm#50593873_41612" CLASS="XRef">Obtaining the Name of a File: SDgetfilename</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307682"></A>SDgetinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307684"></A>sfginfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307689"></A>Retrieves information about a data set (<A HREF="UG_html-3.htm#50593873_18053" CLASS="XRef">Obtaining Information about a Specific SDS: SDgetinfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307693"></A>SDget_maxopenfiles</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307695"></A>sfgmaxopenf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307697"></A>Retrieves current and maximum number of open files (<A HREF="UG_html-3.htm#50593873_66374" CLASS="XRef">Obtaining Current Limits on Opened Files: SDget_maxopenfiles</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307704"></A>SDgetnamelen</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307706"></A>sfgetnamelen</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307708"></A>Retrieves the length of the name of a file, a dataset, or a dimension (<A HREF="UG_html-3.htm#50593873_69218" CLASS="XRef">Obtaining the Length of an HDF4 Objectâ€™s Name: SDgetnamelen</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307715"></A>SDget_numopenfiles</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307717"></A>sfgnumopenf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307721"></A>Returns the number of files currently open (<A HREF="UG_html-3.htm#50593873_75346" CLASS="XRef">Obtaining Number of Opened Files: SDget_numopenfiles</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307726"></A>SDgetnumvars_byname</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307728"></A>sfgnvars_byname</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307730"></A>Retrieves the number of data sets having the same name (<A HREF="UG_html-3.htm#50593873_98959" CLASS="XRef">Getting Number of Data Sets Given a Name: SDgetnumvars_byname</A>)</P>
</TD>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307745"></A>SDidtoref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307747"></A>sfid2ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307751"></A>Returns the reference number of a data set (<A HREF="UG_html-3.htm#50593873_41630" CLASS="XRef">Obtaining the Reference Number Assigned to the Specified SDS: SDidtoref</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307756"></A>SDidtype</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307758"></A>sfidtype</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307760"></A>Given an identifier, returns the type of object the identifier represents (<A HREF="UG_html-3.htm#50593873_47562" CLASS="XRef">Obtaining the Type of an HDF4 Object: SDidtype</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307767"></A>SDiscoordvar</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307769"></A>sfiscvar</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307773"></A>Distinguishes data sets from dimension scales (<A HREF="UG_html-3.htm#50593873_25183" CLASS="XRef">Distinguishing SDS Arrays from Dimension Scales: SDiscoordvar</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307778"></A>SDisrecord</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307780"></A>sfisrcrd</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307782"></A>Determines whether a data set is appendable, i.e., having unlimited dimension (<A HREF="UG_html-3.htm#50593873_10708" CLASS="XRef">Determining whether an SDS Array is Appendable: SDisrecord</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307789"></A>SDnametoindex</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307791"></A>sfn2index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307795"></A>Returns the index of a data set specified by its name (<A HREF="UG_html-3.htm#50593873_39206" CLASS="XRef">Locating an SDS by Name: SDnametoindex</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307800"></A>SDnametoindices</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307802"></A>sfn2indices</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307804"></A>Retrieves a list of indices of data sets having the same given name (<A HREF="UG_html-3.htm#50593873_57014" CLASS="XRef">Locating More Than One SDS by the Same Name: SDnametoindices</A>)</P>
</TD>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307819"></A>SDreftoindex</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307821"></A>sfref2index</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307823"></A>Returns the index of a data set specified by its reference number (<A HREF="UG_html-3.htm#50593873_11606" CLASS="XRef">Locating an SDS by Reference Number: SDreftoindex</A>)</P>
</TD>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307838"></A>SDreset_maxopenfiles</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307840"></A>sfrmaxopenf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307842"></A>Resets the maximum number of files that can be open at the same time (<A HREF="UG_html-3.htm#50593873_88484" CLASS="XRef">Resetting the Allowed Number of Opened Files: SDreset_maxopenfiles</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-307847"></A>Dimensions</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307849"></A>SDdiminfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307851"></A>sfgdinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307856"></A>Gets information about a dimension (<A HREF="UG_html-3.htm#50593873_10800" CLASS="XRef">Obtaining Dimension Scale and Other Dimension Information: SDdiminfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307860"></A>SDgetdimid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307862"></A>sfdimid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307867"></A>Returns the identifier of a dimension (<A HREF="UG_html-3.htm#50593873_32761" CLASS="XRef">Selecting a Dimension: SDgetdimid</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307871"></A>SDsetdimname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307873"></A>sfsdimname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307878"></A>Associates a name with a dimension (<A HREF="UG_html-3.htm#50593873_17640" CLASS="XRef">Naming a Dimension: SDsetdimname</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-307880"></A>Dimension Scales</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307882"></A>SDgetdimscale</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307884"></A>sfgdscale</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307888"></A>Retrieves the scale values for a dimension (<A HREF="UG_html-3.htm#50593873_23247" CLASS="XRef">Reading Dimension Scales: SDgetdimscale</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307893"></A>SDsetdimscale</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307895"></A>sfsdscale</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307900"></A>Stores the scale values of a dimension (<A HREF="UG_html-3.htm#50593873_12233" CLASS="XRef">Writing Dimension Scales: SDsetdimscale</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-307902"></A>User-defined Attributes </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307904"></A>SDattrinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307906"></A>sfgainfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307911"></A>Gets information about an attribute (<A HREF="UG_html-3.htm#50593873_30191" CLASS="XRef">Querying User-defined Attributes: SDfindattr and SDattrinfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307915"></A>SDfindattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307917"></A>sffattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307919"></A>Returns the index of an attribute specified by its name (<A HREF="UG_html-3.htm#50593873_30191" CLASS="XRef">Querying User-defined Attributes: SDfindattr and SDattrinfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307926"></A>SDreadattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307928"></A>sfrnatt/sfrcatt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307930"></A>Reads the values of an attribute specified by its index (<A HREF="UG_html-3.htm#50593873_14343" CLASS="XRef">Reading User-defined Attributes: SDreadattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307937"></A>SDsetattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307939"></A>sfsnatt/sfscatt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307943"></A>Creates a new attribute and stores its values (<A HREF="UG_html-3.htm#50593873_36061" CLASS="XRef">Creating or Writing User-defined Attributes: SDsetattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="11" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-307946"></A>Predefined Attributes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307948"></A>SDgetcal</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307950"></A>sfgcal</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307955"></A>Retrieves calibration information (<A HREF="UG_html-3.htm#50593873_11605" CLASS="XRef">Reading Calibrated Data: SDgetcal</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307959"></A>SDgetdatastrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307961"></A>sfgdtstr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307963"></A>Returns the predefined-attribute strings of a data set (<A HREF="UG_html-3.htm#50593873_29839" CLASS="XRef">Reading String Attributes of an SDS: SDgetdatastrs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307970"></A>SDgetdimstrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307972"></A>sfgdmstr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307974"></A>Returns the predefined-attribute strings of a dimension (<A HREF="UG_html-3.htm#50593873_33604" CLASS="XRef">Reading a String Attribute of a Dimension: SDgetdimstrs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307981"></A>SDgetfillvalue</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307983"></A>sfgfill/sfgcfill</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307988"></A>Reads the fill value if it exists (<A HREF="UG_html-3.htm#50593873_31868" CLASS="XRef">Reading a Fill Value Attribute: SDgetfillvalue</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307992"></A>SDgetrange</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-307994"></A>sfgrange</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307996"></A>Retrieves the range of values in the specified data set (<A HREF="UG_html-3.htm#50593873_36056" CLASS="XRef">Reading a Range Attribute: SDgetrange</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308003"></A>SDsetcal</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308005"></A>sfscal</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308010"></A>Defines the calibration information (<A HREF="UG_html-3.htm#50593873_25997" CLASS="XRef">Setting Calibration Information: SDsetcal</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308014"></A>SDsetdatastrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308016"></A>sfsdtstr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308018"></A>Sets predefined attributes of the specified data set (<A HREF="UG_html-3.htm#50593873_28052" CLASS="XRef">Writing String Attributes of an SDS: SDsetdatastrs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308025"></A>SDsetdimstrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308027"></A>sfsdmstr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308029"></A>Sets predefined attributes of the specified dimension (<A HREF="UG_html-3.htm#50593873_34270" CLASS="XRef">Writing a String Attribute of a Dimension: SDsetdimstrs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308036"></A>SDsetfillvalue</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308038"></A>sfsfill/sfscfill</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308042"></A>Defines the fill value for the specified data set (<A HREF="UG_html-3.htm#50593873_19314" CLASS="XRef">Writing a Fill Value Attribute: SDsetfillvalue</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308047"></A>SDsetfillmode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308049"></A>sfsflmd</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308051"></A>Sets the fill mode to be applied to all data sets in the specified file (<A HREF="UG_html-3.htm#50593873_12863" CLASS="XRef">Setting the Fill Mode for all SDSs in the Specified File: SDsetfillmode</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308058"></A>SDsetrange</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308060"></A>sfsrange </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308062"></A>Defines the maximum and minimum values of the specified data set (<A HREF="UG_html-3.htm#50593873_28522" CLASS="XRef">Writing a Range Attribute: SDsetrange</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-308067"></A>Compression</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308069"></A>SDsetcompress</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308071"></A>sfscompress</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308073"></A>Compresses a data set using a specified compression method (<A HREF="UG_html-3.htm#50593873_22986" CLASS="XRef">Compressing SDS Data: SDsetcompress</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308080"></A>SDsetnbitdataset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308082"></A>sfsnbit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308084"></A>Defines the non-standard bit length of the data set data (<A HREF="UG_html-3.htm#50593873_36561" CLASS="XRef">Creating SDS Arrays Containing Non-standard Length Data: SDsetnbitdataset</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308091"></A>SDgetcompinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308093"></A>sfgcompress</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308095"></A>Retrieves data set compression type and compression information.  (<A HREF="UG_html-3.htm#50593873_24971" CLASS="XRef">Obtaining Data Set Compression Information: SDgetcompinfo</A><EM CLASS="Cite">
)</EM>
</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-308097"></A>Chunking/</P>
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-308098"></A>Tiling</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308100"></A>SDgetchunkinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308102"></A>sfgichnk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308106"></A>Obtains information about a chunked data set (<A HREF="UG_html-3.htm#50593873_10144" CLASS="XRef">Obtaining Information about a Chunked SDS: SDgetchunkinfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308111"></A>SDreadchunk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308113"></A>sfrchnk/sfrcchnk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308118"></A>Reads data from a chunked data set (<A HREF="UG_html-3.htm#50593873_27905" CLASS="XRef">Reading Data from Chunked SDSs: SDreadchunk and SDreaddata</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308122"></A>SDsetchunk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308124"></A>sfschnk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308128"></A>Makes a non-chunked data set a chunked data set (<A HREF="UG_html-3.htm#50593873_32968" CLASS="XRef">Making an SDS a Chunked SDS: SDsetchunk</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308133"></A>SDsetchunkcache</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308135"></A>sfcchnk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308140"></A>Sets the size of the chunk cache (<A HREF="UG_html-3.htm#50593873_30563" CLASS="XRef">Setting the Maximum Number of Chunks in the Cache: SDsetchunkcache</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308144"></A>SDwritechunk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308146"></A>sfwchnk/sfwcchnk</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308151"></A>Writes data to a chunked data set (<A HREF="UG_html-3.htm#50593873_12520" CLASS="XRef">Writing Data to Chunked SDSs: SDwritechunk and SDwritedata</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="7" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-308153"></A>Raw Data</P>
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-308154"></A>Information</P>
</TD>
<TD ROWSPAN="1" COLSPAN="3">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-313986"></A>The functions in this category are covered in <A HREF="UG_html-16.htm#50593829_32374" CLASS="XRef">Raw Data Information</A></P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308156"></A>SDgetanndatainfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308158"></A>&lt;Unavailable&gt; </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308160"></A>Retrieves data information of an annotation in SD API (<A HREF="UG_html-16.htm#50593829_79851" CLASS="XRef">Retrieving Data Information of an Annotation in SD API: SDgetanndatainfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308164"></A>SDgetattdatainfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308166"></A>&lt;Unavailable&gt; </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308171"></A>Retrieves data information of an attribute (<A HREF="UG_html-16.htm#50593829_45823" CLASS="XRef">Retrieving Data Information of an Attribute: SDgetattdatainfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308175"></A>SDgetdatainfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308177"></A>&lt;Unavailable&gt; </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308182"></A>Retrieves data information of a data set (<A HREF="UG_html-16.htm#50593829_37366" CLASS="XRef">Retrieving Data Information of an SDS: SDgetdatainfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308186"></A>SDgetoldattdatainfo</P>
</TD>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308188"></A>&lt;Unavailable&gt; </P>
</TD>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308193"></A>Retrieves data information of an attribute created in DFSD API (<A HREF="UG_html-16.htm#50593829_67198" CLASS="XRef">Retrieving Data Information of a DFSD API Attribute: SDgetoldattdatainfo</A>)</P>
</TD>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-308211"></A>Miscellaneous</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308213"></A>SDgetexternalinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308215"></A>unvailable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308219"></A>Gets information about external file of a data set (<A HREF="UG_html-3.htm#50593873_15961" CLASS="XRef">Getting External File Information of a Data Set: SDgetexternalinfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308224"></A>SDsetblocksize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308226"></A>sfsblsz</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308228"></A>Sets the block size used for storing data sets with unlimited dimension (<A HREF="UG_html-3.htm#50593873_22293" CLASS="XRef">Setting the Block Size: SDsetblocksize</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308235"></A>SDsetexternalfile</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308237"></A>sfsextf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308239"></A>Specifies that a data set is to be stored in an external file (<A HREF="UG_html-3.htm#50593873_17173" CLASS="XRef">Creating a Data Set with Data Stored in an External File: SDsetexternalfile</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308246"></A>SDisdimval_bwcomp</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308248"></A>sfisdmvc</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308250"></A>Determines the current compatibility mode of a dimension (<A HREF="UG_html-3.htm#50593873_19357" CLASS="XRef">Determining the Current Compatibility Mode of a Dimension: SDisdimval_bwcomp</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308257"></A>SDsetdimval_comp</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308259"></A>sfsdmvc</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308263"></A>Sets the future compatibility mode of a dimension (<A HREF="UG_html-3.htm#50593873_26116" CLASS="XRef">Setting the Future Compatibility Mode of a Dimension: SDsetdimval_comp</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308268"></A>SDsetaccesstype</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-308270"></A>sdfsacct</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-308275"></A>Sets the I/O access type for an SDS (<A HREF="UG_html-3.htm#50593873_37572" CLASS="XRef">Setting the I/O Access Type of an SDS: SDsetaccesstype</A>)</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-6816"></A>	3.3.3	Tags in the SD Interface</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-6827"></A><A NAME="50593873_marker-26857"></A>A complete list of SDS tags and their descriptions appears in <A HREF="UG_html-20.htm#50593898_39748" CLASS="XRef">Table AD</A> in Appendix A. Refer to <A HREF="UG_html-2.htm#50593872_30011" CLASS="XRef">Data Descriptor</A> for a description of tags.</P>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-16275"></A>	3.4	<A NAME="50593873_marker-46320"></A>Programming Model for the SD Interface<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-156145"></A>This section describes the routines used to initialize the SD interface, create a new SDS or access an existing one, terminate access to that SDS, and shut down the SD interface. Writing to existing scientific data sets will be described in <A HREF="UG_html-3.htm#50593873_20804" CLASS="XRef">Writing Data to an SDS</A>.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-156149"></A>To support multifile access, the SD interface relies on the calling program to initiate and terminate access to files and data sets. The SD programming model for creating and accessing an SDS in an HDF file is as follows:</P>
<OL>
<LI CLASS="Step">
<A NAME="50593873_pgfId-139658"></A>1.	Open a file and initialize the SD interface.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-139659"></A>2.	Create a new data set or open an existing one using its index.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-139660"></A>3.	Perform desired operations on this data set.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-139661"></A>4.	Terminate access to the data set.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-139662"></A>5.	Terminate access to the SD interface and close the file.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593873_pgfId-221277"></A>To access a single SDS in an HDF file, the calling program must contain the following calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-221278"></A><EM CLASS="syntaxLang">
C:</EM>
		sd_id = SDstart(filename, access_mode);</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-221279"></A>		sds_id = SDcreate(sd_id, sds_name, data_type, rank, dim_sizes);	</P>
<P CLASS="syntax-or-bot">
<A NAME="50593873_pgfId-139747"></A>	<EM CLASS="syntaxLang">
OR</EM>
	sds_id = SDselect(sd_id, sds_index);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139749"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139667"></A>		status = SDendaccess(sds_id);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-221282"></A>		status = SDend(sd_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-221283"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sd_id = sfstart(filename, access_mode)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-221284"></A>		sds_id = sfcreate(sd_id, sds_name, data_type, rank, dim_sizes)	</P>
<P CLASS="syntax-or-bot">
<A NAME="50593873_pgfId-150889"></A>	<EM CLASS="syntaxLang">
OR</EM>
	sds_id = sfselect(sd_id, sds_index)	</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-224869"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-224870"></A>		status = sfendacc(sds_id)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-224871"></A>		status = sfend(sd_id)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-139675"></A>If the file contains non-SD-API objects, such as vdatas or raster images, the application must use <EM CLASS="FunctionName">
Hopen</EM>
/<EM CLASS="FunctionName">
Hclose</EM>
 to access these objects while <EM CLASS="FunctionName">
SDstart</EM>
/<EM CLASS="FunctionName">
SDend</EM>
 the SD-API objects.  The non-SD API functions access the file via the identifier returned by <EM CLASS="FunctionName">
Hopen</EM>
 and the SD API functions use the identifier returned by <EM CLASS="FunctionName">
SDstart</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-312137"></A>To access several files at the same time, a program must obtain a separate SD file identifier (<EM CLASS="VarName">
sd_id</EM>
) for each file to be opened. Likewise, to access more than one SDS, a calling program must obtain a separate SDS identifier (<EM CLASS="VarName">
sds_id</EM>
) for each SDS. For example, to open two SDSs stored in two files a program would execute the following series of function calls.</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-139676"></A><EM CLASS="syntaxLang">
C:</EM>
		sd_id_1 = SDstart(filename_1, access_mode);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139677"></A>		sds_id_1 = SDselect(sd_id_1, sds_index_1);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139678"></A>		sd_id_2 = SDstart(filename_2, access_mode);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139679"></A>		sds_id_2 = SDselect(sd_id_2, sds_index_2);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139680"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139681"></A>		status = SDendaccess(sds_id_1);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139682"></A>		status = SDend(sd_id_1);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139683"></A>		status = SDendaccess(sds_id_2);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139684"></A>		status = SDend(sd_id_2);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-139686"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sd_id_1 = sfstart(filename_1, access_mode)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139687"></A>		sds_id_1 = sfselect(sd_id_1, sds_index_1)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139688"></A>		sd_id_2 = sfstart(filename_2, access_mode)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139689"></A>		sds_id_2 = sfselect(sd_id_2, sds_index_2)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139690"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139691"></A>		status = sfendacc(sds_id_1)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139692"></A>		status = sfend(sd_id_1)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139693"></A>		status = sfendacc(sds_id_2)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-139694"></A>		status = sfend(sd_id_2)</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-139624"></A>	3.4.1	<A NAME="50593873_13485"></A>Establishing Access to Files and Data Sets: SDstart, SDcreate, and SDselect</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-139646"></A><A NAME="50593873_marker-139645"></A>In the SD interface, <EM CLASS="FunctionName">
SDstart</EM>
 is used to open files rather than <EM CLASS="FunctionName">
Hopen</EM>
. <EM CLASS="FunctionName">
SDstart</EM>
 takes two arguments, <EM CLASS="VarName">
filename</EM>
 and <EM CLASS="VarName">
access_mode</EM>
, and returns the SD interface identifier, <EM CLASS="VarName">
sd_id</EM>
. Note that the SD interface identifier, <EM CLASS="VarName">
sd_id</EM>
, is not interchangeable with the file identifier, <EM CLASS="VarName">
file_id</EM>
, created by Hopen and used in other HDF APIs.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-139647"></A>The argument <EM CLASS="VarName">
filename</EM>
 is the name of an HDF or netCDF file.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-139648"></A>The argument <EM CLASS="VarName">
access_mode</EM>
 specifies the type of access required for operations on the file. All the valid values for <EM CLASS="VarName">
access_mode</EM>
 are listed in <A HREF="UG_html-3.htm#50593873_36076" CLASS="XRef">Table 3B</A>. If the file does not exist, specifying <EM CLASS="DefName">
DFACC_READ</EM>
 or <EM CLASS="DefName">
DFACC_WRITE </EM>
will cause <EM CLASS="FunctionName">
SDstart</EM>
 to return a <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Specifying <EM CLASS="DefName">
DFACC_CREATE</EM>
 creates a new file with read and write access. If <EM CLASS="DefName">
DFACC_CREATE</EM>
 is specified and the file already exists, the contents of this file will be replaced.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-226223"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_36076"></A>File Access Code Flags</H6>
<TABLE>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-226200"></A>File Access Flag</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-226202"></A>Flag Value</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-226204"></A>Description</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-226206"></A>DFACC_READ</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-226208"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-226210"></A>Read only access</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-226212"></A>DFACC_WRITE</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-226214"></A>2</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-226216"></A>Read and write access</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-226218"></A>DFACC_CREATE</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-226220"></A>4</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-226222"></A>Create with read and write access</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-41108"></A>The SD interface identifiers can be obtained and discarded in any order and all SD interface identifiers must be individually discarded, by <EM CLASS="FunctionName">
SDend</EM>
, before the termination of the calling program.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-19539"></A>Although it is possible to open a file more than once, it is recommended that the appropriate access mode be specified and <EM CLASS="FunctionName">
SDstart</EM>
 called only once per file. Repeatedly calling <EM CLASS="FunctionName">
SDstart</EM>
 on the same file and with different access modes may cause unexpected results.  Note that it has been reported that opening/closing file in loops is very slow; thus, it is not recommended to perform such operations too many times, particularly, when data is being added to the file between opening/closing.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250425"></A>Prior to HDF 4.2.2, the maximum number of open files was limited to 32; but, it now can be up to what the system allowed.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147677"></A><EM CLASS="FunctionName">
SDstart</EM>
 returns an SD identifier or a value of <EM CLASS="DefName">
FAIL </EM>
(or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDstart</EM>
 are defined in <EM CLASS="Body">
<A HREF="UG_html-3.htm#50593873_35635" CLASS="XRef">SDstart, SDcreate, SDselect, SDendaccess, and SDend Parameter Lists</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-140056"></A><EM CLASS="FunctionName">
SDcreate</EM>
 defines a new SDS using the arguments <EM CLASS="VarName">
sd_id</EM>
, <EM CLASS="VarName">
sds_name</EM>
, <EM CLASS="VarName">
data_type</EM>
, <EM CLASS="VarName">
rank</EM>
, and <EM CLASS="VarName">
dim_sizes</EM>
 and returns the data set identifier, <EM CLASS="VarName">
sds_id</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250471"></A>The parameter <EM CLASS="VarName">
sds_name</EM>
 is a character string containing the name to be assigned to the SDS. The SD interface will generate a default name, &quot;<EM CLASS="Code">
DataSet</EM>
&quot;, for the SDS, if one is not provided, i.e., when the parameter <EM CLASS="VarName">
sds_name</EM>
 is set to <EM CLASS="DefName">
NULL</EM>
 in C, or an empty string in FORTRAN-77. The maximum length of an SDS name is no longer limited to 64 characters, starting in HDF 4.2.2.  Applications should use the API <EM CLASS="FunctionName">
SDgetnamelen</EM>
 in order to allocate sufficient space when reading the name.  Note that when an older version of the library reads a data set, which was created by a library of version 4.2.2 or later and has the name that is longer than 64 characters, the retrieved name will contain some garbage after 64 characters.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-314070"></A>The parameter <EM CLASS="VarName">
data_type</EM>
 is a defined name, prefaced by <EM CLASS="DefName">
DFNT</EM>
, and specifies the type of the data to be stored in the data set. The header file &quot;hntdefs.h&quot; contains the definitions of all valid data types, which are described in <EM CLASS="Chapter-Reference">
<A HREF="UG_html-2.htm#50593872_13138" CLASS="XRef">HDF Fundamentals</A></EM>
, and listed in <EM CLASS="Body">
<A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301246"></A>The parameter <EM CLASS="VarName">
rank</EM>
 is a positive integer specifying the number of dimensions of the SDS array. The maximum rank of an SDS array is defined by <EM CLASS="DefName">
H4_MAX_VAR_DIMS</EM>
 (or <EM CLASS="DefName">
32</EM>
), which is defined in the header file &quot;hlimits.h&quot;.  Note that, in order for HDF4 and NetCDF models to work together, HDF allows SDS to have rank 0.  However, there is no intention for data to be written to this type of SDS, but only to store attribute as part of the data description.  Consequently, setting compression and setting chunk are disallowed.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147662"></A>Each element of the one-dimensional array <EM CLASS="VarName">
dim_sizes</EM>
 specifies the length of the corresponding dimension of the SDS array. The size of <EM CLASS="VarName">
dim_sizes</EM>
 must be the value of the parameter <EM CLASS="VarName">
rank</EM>
. To create a data set with an unlimited dimension, assign the value of <EM CLASS="DefName">
SD_UNLIMITED</EM>
 (or <EM CLASS="DefName">
0</EM>
) to <EM CLASS="VarName">
dim_sizes[0]</EM>
 in C, and to <EM CLASS="VarName">
dim_sizes(rank)</EM>
 in FORTRAN-77. See the notes regarding the potential performance impact of unlimited dimension data sets in <A HREF="UG_html-14.htm#50593884_97527" CLASS="XRef">Unlimited Dimension Data Sets (SDSs and Vdatas) and Performance</A>.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147637"></A>Once an SDS is created, you cannot change its name, data type, size, or shape. However, it is possible to modify the data setâ€™s data or to create an empty data set and later add values. To add data or modify an existing data set, use <EM CLASS="FunctionName">
SDselect</EM>
 to get the data set identifier instead of <EM CLASS="FunctionName">
SDcreate</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147567"></A>Note that the SD interface retains no definitions about the size, contents, or rank of an SDS from one SDS to the next, or from one file to the next.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145619"></A><EM CLASS="FunctionName">
SDselect</EM>
 initiates access to an existing data set. The routine takes two arguments: <EM CLASS="VarName">
sd_id</EM>
 and <EM CLASS="VarName">
sds_index</EM>
 and returns the SDS identifier <EM CLASS="VarName">
sds_id</EM>
. The argument <EM CLASS="VarName">
sd_id</EM>
 is the SD interface identifier returned by <EM CLASS="FunctionName">
SDstart</EM>
, and <EM CLASS="VarName">
sds_index</EM>
 is the position of the data set in the file. The argument <EM CLASS="VarName">
sds_index</EM>
 is zero-based, meaning that the index of first SDS in the file is 0.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145703"></A>Similar to SD interface identifiers, SDS identifiers can be obtained and discarded in any order as long as they are discarded properly. Each SDS identifier must be individually disposed of, by <EM CLASS="FunctionName">
SDendaccess</EM>
, before the disposal of the identifier of the interface in which the SDS is opened.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145620"></A><EM CLASS="FunctionName">
SDcreate</EM>
 and <EM CLASS="FunctionName">
SDselect</EM>
 each returns an SDS identifier or a value of <EM CLASS="DefName">
FAIL</EM>
<EM CLASS="VarName">
 </EM>
(or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDstart, SDcreate, </EM>
and <EM CLASS="FunctionName">
SDselect</EM>
 are further described in <EM CLASS="Body">
<A HREF="UG_html-3.htm#50593873_35635" CLASS="XRef">Table 3C</A></EM>
.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-19555"></A>	3.4.2	<A NAME="50593873_marker-26861"></A><A NAME="50593873_11405"></A>Terminating Access to Files and Data Sets: SDendaccess and SDend</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-16320"></A><EM CLASS="FunctionName">
SDendaccess</EM>
<A NAME="50593873_marker-26862"></A> terminates access to the data set and disposes of the data set identifier <EM CLASS="VarName">
sds_id</EM>
. The calling program must make one <EM CLASS="FunctionName">
SDendaccess</EM>
 call for every <EM CLASS="FunctionName">
SDselect </EM>
or <EM CLASS="FunctionName">
SDcreate</EM>
 call made during its execution. Failing to call <EM CLASS="FunctionName">
SDendaccess</EM>
 for each call to <EM CLASS="FunctionName">
SDselect</EM>
 or <EM CLASS="FunctionName">
SDcreate</EM>
 may result in a loss of data. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-16321"></A><EM CLASS="FunctionName">
SDend</EM>
<A NAME="50593873_marker-26863"></A> terminates access to the file and the SD interface and disposes of the file identifier <EM CLASS="VarName">
sd_id</EM>
. The calling program must make one <EM CLASS="FunctionName">
SDend</EM>
 call for every <EM CLASS="FunctionName">
SDstart</EM>
 call made during its execution. Failing to call <EM CLASS="FunctionName">
SDend</EM>
 for each <EM CLASS="FunctionName">
SDstart</EM>
 may result in a loss of data. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-187279"></A><EM CLASS="FunctionName">
SDendaccess</EM>
 and <EM CLASS="FunctionName">
SDend</EM>
 each returns either a value of <EM CLASS="DefName">
SUCCEED </EM>
(or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDendaccess</EM>
 and <EM CLASS="FunctionName">
SDend</EM>
 are further described in <EM CLASS="Body">
<A HREF="UG_html-3.htm#50593873_35635" CLASS="XRef">Table 3C</A></EM>
. </P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-227271"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_35635"></A><A NAME="50593873_SDstart"></A>SDstart, SDcreate, <A NAME="50593873_marker-227124"></A>SDselect<A NAME="50593873_SDend"></A>, <A NAME="50593873_marker-227126"></A>SDendaccess, a<A NAME="50593873_marker-227127"></A>nd SDend Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-227130"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-227131"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-227132"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-227134"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-227136"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-227140"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-227146"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-227148"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227152"></A>SDstart</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-227153"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227154"></A>(sfstart)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227156"></A>filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227158"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227160"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227162"></A>Name of the HDF or netCDF file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227166"></A>access_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227168"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227170"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227172"></A>Type of access</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227174"></A>SDcreate</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-227175"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227176"></A>(sfcreate)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227178"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227180"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227182"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227184"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227188"></A>sds_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227190"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227192"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227194"></A>ASCII string containing the name of the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227198"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227200"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227202"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227204"></A>Data type of the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227208"></A>rank</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227210"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227212"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227214"></A>Number of dimensions in the array</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227218"></A>dim_sizes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227220"></A>int32[]</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227222"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227224"></A>Array defining the size of each dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227226"></A>SDselect</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-227227"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227228"></A>(sfselect)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227230"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227232"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227234"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227236"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227240"></A>sds_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227242"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227244"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227246"></A>Position of the data set within the file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227248"></A>SDendaccess</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-227249"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227250"></A>(sfendacc)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227252"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227254"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227256"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227258"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227260"></A>SDend</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-227261"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-227262"></A>(sfend)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227264"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227266"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-227268"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-227270"></A>SD interface identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-227272"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Creating an HDF file and an Empty SDS.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-227273"></A>This example illustrates the use of <EM CLASS="FunctionName">
SDstart/sfstart</EM>
, <EM CLASS="FunctionName">
SDcreate/sfcreate</EM>
, <EM CLASS="FunctionName">
SDendaccess/sfendacc</EM>
, and <EM CLASS="FunctionName">
SDend/sfend</EM>
 to create the HDF file named SDS.hdf, and an empty data set with the name SDStemplate in the file.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-212731"></A>Note that the Fortran program uses a transformed array to reflect the difference between C and Fortran internal data storages. When the actual data is written to the data set, SDS.hdf will contain the same data regardless of the language being used.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-216470"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216473"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216474"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216475"></A>#define FILE_NAME     &quot;SDS.hdf&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216476"></A>#define SDS_NAME      &quot;SDStemplate&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216477"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216478"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216479"></A>#define RANK          2  /* Number of dimensions of the SDS */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216480"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216481"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216482"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216483"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216484"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216485"></A>   int32 sd_id, sds_id;     /* SD interface and data set identifiers */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216486"></A>   int32 dim_sizes[2];      /* sizes of the SDS dimensions */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216487"></A>   intn  status;            /* status returned by some routines; has value</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216488"></A>                               SUCCEED or FAIL */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216489"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216490"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216491"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216492"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216493"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216494"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216495"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216496"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216497"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216498"></A>   * Define the dimensions of the array to be created.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216499"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216500"></A>   dim_sizes[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216501"></A>   dim_sizes[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216502"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216503"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216504"></A>   * Create the data set with the name defined in SDS_NAME. Note that </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216505"></A>   * DFNT_INT32 indicates that the SDS data is of type int32. Refer to</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216506"></A>   * Table 2E for definitions of other types. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216507"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216508"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216509"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216510"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216511"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216512"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216513"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216514"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216515"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216516"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216517"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216518"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216519"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-199871"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-216526"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216529"></A>      program  create_SDS </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216530"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216531"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216532"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216533"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216534"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216535"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216536"></A>      integer      X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216537"></A>      parameter   (FILE_NAME = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216538"></A>     +             SDS_NAME = â€™SDStemplateâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216539"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216540"></A>     +             Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216541"></A>     +             RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216542"></A>      integer      DFACC_CREATE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216543"></A>      parameter   (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216544"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216545"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216546"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216547"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216548"></A>      integer sfstart, sfcreate, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216549"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216550"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216551"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216552"></A>      integer sd_id, sds_id, dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216553"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216554"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216555"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216556"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216557"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216558"></A>C     Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216559"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216560"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216561"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216562"></A>C     Define dimensions of the array to be created.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216563"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216564"></A>      dim_sizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216565"></A>      dim_sizes(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216566"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216567"></A>C     Create the array with the name defined in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216568"></A>C     Note that DFNT_INT32 indicates that the SDS data is of type</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216569"></A>C     integer. Refer to Tables 2E and 2I for the definition of other types.  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216570"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216571"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216572"></A>     .                  dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216573"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216574"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216575"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216576"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216577"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216578"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216579"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216580"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216581"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216582"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-200790"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-200241"></A>	3.5	<A NAME="50593873_20804"></A>Writing Data to an SDS<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-198990"></A>An SDS can be written partially or entirely. Partial writing includes writing to a contiguous region of the SDS and writing to selected locations in the SDS according to patterns defined by the user. This section describes the routine <EM CLASS="FunctionName">
SDwritedata</EM>
 and how it can write data to part of an SDS or to an entire SDS. The section also illustrates the concepts of compressing SDSs and using external files to store scientific data.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-198993"></A>	3.5.1	<A NAME="50593873_20018"></A>W<A NAME="50593873_marker-198992"></A>riting Data to an SDS Array: SDwritedata</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-198995"></A><EM CLASS="FunctionName">
SDwritedata</EM>
<A NAME="50593873_marker-198994"></A> can completely or partially fill an SDS array or append data along the dimension that is defined to be of unlimited length (see <A HREF="UG_html-3.htm#50593873_32191" CLASS="XRef">Appending Data to an SDS Array along an Unlimited Dimension</A> for a discussion of unlimited-length dimensions). It can also skip a specified number of SDS array elements between write operations along each dimension.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-16622"></A>To write to an existing SDS, the calling program must contain the following sequence of routine calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-16623"></A><EM CLASS="syntaxLang">
C:</EM>
		sds_id = SDselect(sd_id, sds_index);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-16625"></A>		status = SDwritedata(sds_id, start, stride, edges, data);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-19963"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-145664"></A>		status = sfwdata(sds_id, start, stride, edges, data)	</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-145422"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfwcdata(sds_id, start, stride, edges, data)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147149"></A>To write to a new SDS, simply replace the call <EM CLASS="FunctionName">
SDselect</EM>
 with the call <EM CLASS="FunctionName">
SDcreate</EM>
, which is described in <A HREF="UG_html-3.htm#50593873_13485" CLASS="XRef">Establishing Access to Files and Data Sets: SDstart, SDcreate, and SDselect</A>.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147153"></A><EM CLASS="FunctionName">
SDwritedata</EM>
 takes five arguments: <EM CLASS="VarName">
sds_id</EM>
, <EM CLASS="VarName">
start</EM>
, <EM CLASS="VarName">
stride</EM>
, <EM CLASS="VarName">
edges</EM>
, and <EM CLASS="VarName">
data</EM>
. The argument <EM CLASS="VarName">
sds_id</EM>
 is the data set identifier returned by <EM CLASS="FunctionName">
SDcreate</EM>
 or <EM CLASS="FunctionName">
SDselect</EM>
. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-46572"></A>Before proceeding with the description of the remaining arguments, an explanation of the term <EM CLASS="Definition">
hyperslab</EM>
 (or <EM CLASS="Definition">
slab</EM>
, as it will be used in this chapter) is in order. <A NAME="50593873_marker-46573"></A>A <EM CLASS="Definition">
slab</EM>
 is a group of SDS array elements that are stored in consecutive locations. It can be of any size and dimensionality as long as it is a subset of the array, which means that a single array element and the entire array can both be considered slabs. A slab is defined by the multidimensional coordinate of its initial vertex and the lengths of each dimension. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-46537"></A>Given this description of the slab concept, the usage of the remaining arguments should become apparent. The argument <EM CLASS="VarName">
start</EM>
 is a one-dimensional array specifying the location in the SDS array at which the write operation will begin. The values of each element of the array <EM CLASS="VarName">
start</EM>
 are relative to 0 in both the C and FORTRAN-77 interfaces. The size of <EM CLASS="VarName">
start</EM>
 must be the same as the number of dimensions in the SDS array. In addition, each value in <EM CLASS="VarName">
start</EM>
 must be smaller than its corresponding SDS array dimension unless the dimension is unlimited. Violating any of these conditions causes <EM CLASS="FunctionName">
SDwritedata</EM>
 to return <EM CLASS="DefName">
FAIL</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-156833"></A>The<A NAME="50593873_marker-227108"></A> argument <EM CLASS="VarName">
stride</EM>
 is a one-dimensional array specifying, for each dimension, the interval between values to be written. For example, setting the first element of the array <EM CLASS="VarName">
stride</EM>
 equal to 1 writes data to every location along the first dimension. Setting the first element of the array <EM CLASS="VarName">
stride</EM>
 to 2 writes data to every other location along the first dimension. <A HREF="UG_html-3.htm#50593873_20123" CLASS="XRef">Figure 3b</A> illustrates this example, where the shading elements are written and the white elements are skipped. If the argument <EM CLASS="VarName">
stride</EM>
 is set to <EM CLASS="DefName">
NULL</EM>
 in C (or either <EM CLASS="DefName">
0</EM>
 or <EM CLASS="DefName">
1</EM>
 in FORTRAN-77), <EM CLASS="FunctionName">
SDwritedata</EM>
 operates as if every element of <EM CLASS="VarName">
stride</EM>
 contains a value of 1, and a contiguous write is performed. For better performance, it is recommended that the value of <EM CLASS="VarName">
stride</EM>
 be defined as <EM CLASS="DefName">
NULL</EM>
 (i.e., <EM CLASS="DefName">
0</EM>
 or <EM CLASS="DefName">
1</EM>
 in FORTRAN-77) rather than being set to 1.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-226339"></A>The size of the array <EM CLASS="VarName">
stride</EM>
 must be the same as the number of dimensions in the SDS array. Also, each value in <EM CLASS="VarName">
stride</EM>
 must be smaller than or equal to its corresponding SDS array dimension unless the dimension is unlimited. Violating any of these conditions causes <EM CLASS="FunctionName">
SDwritedata</EM>
 to return <EM CLASS="DefName">
FAIL</EM>
.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593873_pgfId-226372"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
FIGURE 3b	<A NAME="50593873_20123"></A>An Example of Access Pattern (&quot;Strides&quot;)</H6>
<DIV>
<IMG SRC="UG_html-16.gif" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593873_pgfId-226373"></A>The argument <EM CLASS="VarName">
edges</EM>
 is a one-dimensional array specifying the length of each dimension of the slab to be written. If the slab has fewer dimensions than the SDS data set has, the size of <EM CLASS="VarName">
edges</EM>
 must still be equal to the number of dimensions in the SDS array and all the elements corresponding to the additional dimensions must be set to 1.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147225"></A>Each value in the array <EM CLASS="VarName">
edges</EM>
 must not be larger than the length of the corresponding dimension in the SDS data set unless the dimension is unlimited. Attempting to write slabs larger than the size of the SDS data set will result in an error condition. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250511"></A>In addition, the sum of each value in the array <EM CLASS="VarName">
edges</EM>
 and the corresponding value in the <EM CLASS="VarName">
start</EM>
 array must be smaller than or equal to its corresponding SDS array dimension unless the dimension is unlimited. Violating any of these conditions causes <EM CLASS="FunctionName">
SDwritedata</EM>
 to return <EM CLASS="DefName">
FAIL</EM>
.  When SDreaddata returns FAIL (or -1) due to any invalid argements, the error code <EM CLASS="DefName">
DFE_ARGS</EM>
 will be pushed on the stack.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250512"></A>The parameter <EM CLASS="VarName">
data</EM>
 contains the SDS data to be written. If the SDS array is smaller than the buffer <EM CLASS="VarName">
data</EM>
, the amount of data written will be limited to the maximum size of the SDS array.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-16682"></A>Be aware that the mapping between the dimensions of a slab and the order in which the slab values are stored in memory is different between C and FORTRAN-77. In C, the values are stored with the assumption that the last dimension of the slab varies fastest (or &quot;row-major order&quot; storage), but in FORTRAN-77 the first dimension varies fastest (or &quot;column-major order&quot; storage). These storage order conventions can cause some confusion when data written by a C program is read by a FORTRAN-77 program or vice versa.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-27389"></A>There are two FORTRAN-77 versions of this routine: <EM CLASS="FunctionName">
sfwdata</EM>
<A NAME="50593873_marker-27435"></A> and <EM CLASS="FunctionName">
sfwcdata</EM>
<A NAME="50593873_marker-27436"></A>. The routine <EM CLASS="FunctionName">
sfwdata</EM>
 writes numeric scientific data and <EM CLASS="FunctionName">
sfwcdata</EM>
 writes character scientific data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-16683"></A><EM CLASS="FunctionName">
SDwritedata</EM>
 returns either a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are described in <A HREF="UG_html-3.htm#50593873_19628" CLASS="XRef">Table 3D</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-16757"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_19628"></A>S<A NAME="50593873_marker-26878"></A>Dwritedata Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20053"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132397"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20054"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20056"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20060"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20062"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20068"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20070"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-20074"></A>SDwritedata</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132396"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-20075"></A>(sfwdata/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-27419"></A>sfwcdata)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20077"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20079"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20081"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-20083"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20087"></A>start</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20089"></A>int32 []</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20091"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-20093"></A>Array containing the position at which the write will start for each dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20097"></A>stride</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20099"></A>int32 []</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20101"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-20103"></A>Array specifying the interval between the values that will be read along each dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20107"></A>edges</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20109"></A>int32 []</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20111"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-20113"></A>Array containing the number of data elements that will be written along each dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20117"></A>data</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20119"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-27422"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-156202"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-20123"></A>Buffer for the data to be written</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-16758"></A>	3.5.1.1	Filling an Entire Array</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-16759"></A>Filling an array is a simple slab operation where the slab begins at the origin of the SDS array and fills every location in the array. <EM CLASS="FunctionName">
SDwritedata</EM>
 fills an entire SDS array with data when all elements of the array <EM CLASS="VarName">
start</EM>
 are set to <EM CLASS="DefName">
0</EM>
, the argument <EM CLASS="VarName">
stride </EM>
is set equal to <EM CLASS="DefName">
NULL</EM>
 in C or each element of the array <EM CLASS="VarName">
stride</EM>
 is set to <EM CLASS="DefName">
1</EM>
 in both C and FORTRAN-77, and each element of the array <EM CLASS="VarName">
edges</EM>
 is equal to the length of each dimension.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-16760"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Writing to an SDS.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-151794"></A>This example illustrates the use of the routines <EM CLASS="FunctionName">
SDselect/sfselect</EM>
 and <EM CLASS="FunctionName">
SDwritedata/sfwrite</EM>
 to select the first SDS in the file SDS.hdf created in Example 1 and to write actual data to it.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-216589"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216592"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216593"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216594"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216595"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216596"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216597"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216598"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216599"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216600"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216601"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216602"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216603"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216604"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216605"></A>   int32 data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216606"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216607"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216608"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216609"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216610"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216611"></A>   * Data set data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216612"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216613"></A>   for (j = 0; j &lt; Y_LENGTH; j++) {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216614"></A>       for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216615"></A>            data[j][i] = (i + j) + 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216616"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216617"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216618"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216619"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216620"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216621"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216622"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216623"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216624"></A>   * Attach to the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216625"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216626"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216627"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216628"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216629"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216630"></A>   * Define the location and size of the data to be written to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216631"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216632"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216633"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216634"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216635"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216636"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216637"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216638"></A>   * Write the stored data to the data set. The third argument is set to NULL</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216639"></A>   * to specify contiguous data elements. The last argument must</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216640"></A>   * be explicitly cast to a generic pointer since SDwritedata is designed</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216641"></A>   * to write generic data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216642"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216643"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216644"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216645"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216646"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216647"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216648"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216649"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216650"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216651"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216652"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216653"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216654"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-200676"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-216661"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216664"></A>      program  write_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216665"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216666"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216667"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216668"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216669"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216670"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216671"></A>      integer      X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216672"></A>      parameter   (FILE_NAME = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216673"></A>     +             SDS_NAME = â€™SDStemplateâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216674"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216675"></A>     +             Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216676"></A>     +             RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216677"></A>      integer      DFACC_WRITE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216678"></A>      parameter   (DFACC_WRITE = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216679"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216680"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216681"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216682"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216683"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216684"></A>      integer sfstart, sfselect, sfwdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216685"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216686"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216687"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216688"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216689"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216690"></A>      integer i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216691"></A>      integer data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216692"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216693"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216694"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216695"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216696"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216697"></A>C     Data set data initialization. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216698"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216699"></A>      do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216700"></A>         do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216701"></A>            data(i, j) = i + j - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216702"></A>10         continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216703"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216704"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216705"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216706"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216707"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216708"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216709"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216710"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216711"></A>C     Attach to the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216712"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216713"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216714"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216715"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216716"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216717"></A>C     Define the location and size of the data to be written</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216718"></A>C     to the data set. Note that setting values of the array stride to 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216719"></A>C     specifies the contiguous writing of data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216720"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216721"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216722"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216723"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216724"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216725"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216726"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216727"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216728"></A>C     Write the stored data to the data set named in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216729"></A>C     Note that the routine sfwdata is used instead of sfwcdata </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216730"></A>C     to write the numeric data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216731"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216732"></A>      status = sfwdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216733"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216734"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216735"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216736"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216737"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216738"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216739"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216740"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216741"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216742"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-195819"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-152027"></A>	3.5.1.2	Writing Slabs to an SDS Array</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-16841"></A>To allow preexisting data to be modified, the HDF library does not prevent <EM CLASS="FunctionName">
SDwritedata</EM>
 from overwriting one slab with another. As a result, the calling program is responsible for managing any overlap when writing slabs. The HDF library will issue an error if a slab extends past the valid boundaries of the SDS array. However, appending data along an unlimited dimension is allowed.</P>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-169243"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Writing a Slab of Data to an SDS.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-169244"></A>This example shows how to fill a 3-dimensional SDS array with data by writing series of 2-dimensional slabs to it.</P>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-216749"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216752"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216753"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216754"></A>#define FILE_NAME     &quot;SLABS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216755"></A>#define SDS_NAME      &quot;FilledBySlabs&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216756"></A>#define X_LENGTH      4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216757"></A>#define Y_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216758"></A>#define Z_LENGTH      6</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216759"></A>#define RANK          3  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216760"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216761"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216762"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216763"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216764"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216765"></A>   int32 sd_id, sds_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216766"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216767"></A>   int32 dim_sizes[3], start[3], edges[3];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216768"></A>   int32 data[Z_LENGTH][Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216769"></A>   int32 zx_data[Z_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216770"></A>   int   i, j, k;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216771"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216772"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216773"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216774"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216775"></A>   * Data initialization. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216776"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216777"></A>   for (k = 0; k &lt; Z_LENGTH; k++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216778"></A>       for (j = 0; j &lt; Y_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216779"></A>           for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216780"></A>               data[k][j][i] = (i + 1) + (j + 1) + (k + 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216781"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216782"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216783"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216784"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216785"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216786"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216787"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216788"></A>   * Define dimensions of the array to be created.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216789"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216790"></A>   dim_sizes[0] = Z_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216791"></A>   dim_sizes[1] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216792"></A>   dim_sizes[2] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216793"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216794"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216795"></A>   * Create the array with the name defined in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216796"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216797"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216798"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216799"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216800"></A>   * Set the parameters start and edges to write  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216801"></A>   * a 6x4 element slab of data to the data set; note</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216802"></A>   * that edges[1] is set to 1 to define a 2-dimensional slab</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216803"></A>   * parallel to the ZX plane.  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216804"></A>   * start[1] (slab position in the array) is initialized inside</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216805"></A>   * the for loop.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216806"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216807"></A>   edges[0] = Z_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216808"></A>   edges[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216809"></A>   edges[2] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216810"></A>   start[0] = start[2] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216811"></A>   for (j = 0; j &lt; Y_LENGTH; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216812"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216813"></A>       start[1] = j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216814"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216815"></A>       /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216816"></A>       * Initialize zx_data buffer (data slab).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216817"></A>       */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216818"></A>       for ( k = 0; k &lt; Z_LENGTH; k++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216819"></A>       {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216820"></A>           for ( i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216821"></A>           {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216822"></A>                 zx_data[k][i] = data[k][j][i];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216823"></A>           }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216824"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216825"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216826"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216827"></A>   * Write the data slab into the SDS array defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216828"></A>   * Note that the 3rd parameter is NULL which indicates that consecutive</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216829"></A>   * slabs in the Y direction are written.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216830"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216831"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)zx_data); </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216832"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216833"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216834"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216835"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216836"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216837"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216838"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216839"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216840"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216841"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216842"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216843"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-195918"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-216850"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216853"></A>      program  write_slab</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216854"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216855"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216856"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216857"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216858"></A>      character*9  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216859"></A>      character*13 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216860"></A>      integer      X_LENGTH, Y_LENGTH, Z_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216861"></A>      parameter   (FILE_NAME = â€™SLABS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216862"></A>     +             SDS_NAME = â€™FilledBySlabsâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216863"></A>     +             X_LENGTH = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216864"></A>     +             Y_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216865"></A>     +             Z_LENGTH = 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216866"></A>     +             RANK     = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216867"></A>      integer      DFACC_CREATE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216868"></A>      parameter   (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216869"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216870"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216871"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216872"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216873"></A>      integer sfstart, sfcreate, sfwdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216874"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216875"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216876"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216877"></A>      integer sd_id, sds_id</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216878"></A>      integer dim_sizes(3), start(3), edges(3), stride(3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216879"></A>      integer i, j, k, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216880"></A>      integer data(X_LENGTH, Y_LENGTH, Z_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216881"></A>      integer xz_data(X_LENGTH, Z_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216882"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216883"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216884"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216885"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216886"></A>C     Data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216887"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216888"></A>      do 30 k = 1, Z_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216889"></A>         do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216890"></A>            do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216891"></A>               data(i, j, k) = i + j + k </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216892"></A>10            continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216893"></A>20         continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216894"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216895"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216896"></A>C     Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216897"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216898"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216899"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216900"></A>C     Define dimensions of the array to be created. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216901"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216902"></A>      dim_sizes(1) = X_LENGTH   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216903"></A>      dim_sizes(2) = Y_LENGTH   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216904"></A>      dim_sizes(3) = Z_LENGTH   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216905"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216906"></A>C     Create the data set with the name defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216907"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216908"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216909"></A>     .                  dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216910"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216911"></A>C     Set the parameters start and edges to write </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216912"></A>C     a 4x6 element slab of data to the data set;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216913"></A>C     note that edges(2) is set to 1 to define a 2 dimensional slab</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216914"></A>C     parallel to the XZ plane;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216915"></A>C     start(2) (slab position in the array) is initialized inside the</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216916"></A>C     for loop.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216917"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216918"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216919"></A>      edges(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216920"></A>      edges(3) = Z_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216921"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216922"></A>      start(3) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216923"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216924"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216925"></A>      stride(3) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216926"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216927"></A>      do 60 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216928"></A>       start(2) = j - 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216929"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216930"></A>C     Initialize the buffer xz_data (data slab).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216931"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216932"></A>       do 50 k = 1, Z_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216933"></A>        do 40 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216934"></A>         xz_data(i, k) = data(i, j, k)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216935"></A>40      continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216936"></A>50     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216937"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216938"></A>C     Write the data slab into SDS array defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216939"></A>C     Note that the elements of array stride are set to 1 to</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216940"></A>C     specify that the consecutive slabs in the Y direction are written.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216941"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216942"></A>         status = sfwdata(sds_id, start, stride, edges, xz_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216943"></A>60    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216944"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216945"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216946"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216947"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216948"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216949"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216950"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216951"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216952"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216953"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-227340"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-227341"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Altering Values within an SDS Array.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-227342"></A>This example demonstrates how the routine <EM CLASS="FunctionName">
SDwritedata</EM>
 can be used to alter the values of the elements in the 10th and 11th rows, at the 2nd column, in the SDS array created in the Example 1 and written in Example 2. FORTRAN-77 routine <EM CLASS="FunctionName">
sfwdata</EM>
 is used to alter the elements in the 2nd row, 10th and 11th columns, to reflect the difference between C and Fortran internal storage.</P>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-216960"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216963"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216964"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216965"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216966"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216967"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216968"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216969"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216970"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216971"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216972"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216973"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216974"></A>   int32 new_data[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216975"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216976"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216977"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216978"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216979"></A>   * Open the file and initialize the SD interface with write access.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216980"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216981"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216982"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216983"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216984"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216985"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216986"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216987"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216988"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216989"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216990"></A>   * Set up the start and edge parameters to write new element values</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216991"></A>   * into 10th row, 2nd column place, and 11th row, 2nd column place. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216992"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216993"></A>   start[0] = 9;     /* starting at 10th row   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216994"></A>   start[1] = 1;     /* starting at 2nd column */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216995"></A>   edges[0] = 2;     /* rows 10th and 11th     */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216996"></A>   edges[1] = 1;     /* column 2nd only        */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216997"></A>       </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216998"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-216999"></A>   * Initialize buffer with the new values to be written.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217000"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217001"></A>   new_data[0] = new_data[1] = 1000; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217002"></A>        </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217003"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217004"></A>   * Write the new values. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217005"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217006"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)new_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217007"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217008"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217009"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217010"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217011"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217012"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217013"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217014"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217015"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217016"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217017"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196088"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-217024"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217027"></A>      program  alter_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217028"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217029"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217030"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217031"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217032"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217033"></A>      integer      DFACC_WRITE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217034"></A>      parameter   (FILE_NAME = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217035"></A>     +             DFACC_WRITE = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217036"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217037"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217038"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217039"></A>      integer sfstart, sfselect, sfwdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217040"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217041"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217042"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217043"></A>      integer sd_id, sds_id, sds_index</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217044"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217045"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217046"></A>      integer new_data(2) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217047"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217048"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217049"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217050"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217051"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217052"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217053"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217054"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217055"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217056"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217057"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217058"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217059"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217060"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217061"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217062"></A>C     Initialize the start, edge, and stride parameters to write </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217063"></A>C     two elements into 2nd row, 10th column and 11th column places.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217064"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217065"></A>C     Specify 2nd row.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217066"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217067"></A>      start(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217068"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217069"></A>C     Specify 10th column.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217070"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217071"></A>      start(2) = 9 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217072"></A>      edges(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217073"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217074"></A>C     Two elements are written along 2nd row.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217075"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217076"></A>      edges(2) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217077"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217078"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217079"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217080"></A>C     Initialize the new values to be written.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217081"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217082"></A>      new_data(1) = 1000</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217083"></A>      new_data(2) = 1000</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217084"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217085"></A>C     Write the new values. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217086"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217087"></A>      status = sfwdata(sds_id, start, stride, edges, new_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217088"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217089"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217090"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217091"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217092"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217093"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217094"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217095"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217096"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217097"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196166"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-32356"></A>	3.5.1.3	<A NAME="50593873_32191"></A>Appending Data to an SDS Array along an Unlimited Dimension</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-160544"></A><A NAME="50593873_marker-160543"></A>An SDS array can be made appendable, however, only along one dimension. This dimension must be specified as an <EM CLASS="Definition">
appendable dimension</EM>
 when it is created.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-160545"></A>In C, only the first element of the <EM CLASS="FunctionName">
SDcreate </EM>
parameter <EM CLASS="VarName">
dim_sizes</EM>
 (i.e., the dimension of the lowest rank or the slowest-changing dimension) can be assigned the value <EM CLASS="DefName">
SD_UNLIMITED</EM>
 (or <EM CLASS="DefName">
0</EM>
) to make the first dimension unlimited. In FORTRAN-77, only the <EM CLASS="VarName">
last </EM>
dimension (i.e., the dimension of the highest rank or the slowest-changing dimension) can be unlimited. In other words, in FORTRAN-77 <EM CLASS="VarName">
dim_sizes(rank)</EM>
 must be set to the value <EM CLASS="DefName">
SD_UNLIMITED</EM>
 to make the last dimension appendable. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-17053"></A>To append data to a data set without overwriting previously-written data, the user must specify the appropriate coordinates in the <EM CLASS="VarName">
start</EM>
 parameter of the <EM CLASS="FunctionName">
SDwritedata</EM>
 routine. For example, if 15 data elements have been written to an unlimited dimension, appending data to the array requires a <EM CLASS="VarName">
start</EM>
 coordinate of 15. Specifying a starting coordinate less than the current number of elements written to the unlimited dimension will result in data being overwritten. In either case, all of the coordinates in the array except the one corresponding to the unlimited dimension must be equal to or less than the lengths of their corresponding dimensions.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144686"></A>Any time an unlimited dimension is appended to, the HDF library will automatically adjust the dimension record to the new length. If the newly-appended data begins beyond the previous length of the dimension, the locations between the old data and the beginning of the newly-appended data are initialized to the assigned fill value if there is one defined by the user, or the default fill value if none is defined. Refer to <A HREF="UG_html-3.htm#50593873_14160" CLASS="XRef">Fill Values and Fill Mode</A> for a discussion of fill value.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-158162"></A>	3.5.1.4	<A NAME="50593873_10708"></A>Determining whether an SDS Array is Appendable: SDisrecord</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-158164"></A><EM CLASS="FunctionName">
SDisrec</EM>
<A NAME="50593873_marker-158163"></A><A NAME="50593873_marker-162733"></A><EM CLASS="FunctionName">
ord </EM>
determines whether the data set identified by the parameter <EM CLASS="VarName">
sds_id</EM>
 is appendable, which means that the slowest-changing dimension of the SDS array is declared unlimited when the data set is created. The syntax of <EM CLASS="FunctionName">
SDisrecord</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-158165"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDisrecord(sds_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-158166"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfisrcrd(sds_id)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-158170"></A><EM CLASS="FunctionName">
SDisrecord</EM>
 returns <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) when the data set specified by <EM CLASS="VarName">
sds_id</EM>
 is appendable and <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
) otherwise. The parameter of this routine is defined in <A HREF="UG_html-3.htm#50593873_10314" CLASS="XRef">Table 3E</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-158277"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_10314"></A>SDisrecord Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158232"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158233"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158234"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158236"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158238"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158242"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158248"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158250"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158266"></A>SDisrecord</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158267"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158268"></A>(sfisrcrd)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158270"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158272"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158274"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158276"></A>Data set identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-144761"></A>	3.5.1.5	<A NAME="50593873_22293"></A>Setting the Block Size<A NAME="50593873_marker-144760"></A>: SDsetblocksize</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-145486"></A><EM CLASS="FunctionName">
SDsetblocksize </EM>
<A NAME="50593873_marker-145485"></A>sets the size of the blocks used for storing the data for unlimited dimension data sets. This is used only when creating new data sets; it does not have any affect on existing data sets. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145487"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetblocksize(sds_id, block_size);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145489"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsblsz(sds_id, block_size)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145490"></A><EM CLASS="FunctionName">
SDsetblocksize</EM>
 must be called after <EM CLASS="FunctionName">
SDcreate</EM>
 or <EM CLASS="FunctionName">
SDselect</EM>
 and before <EM CLASS="FunctionName">
SDwritedata</EM>
. The parameter <EM CLASS="VarName">
block_size</EM>
 should be set to a multiple of the desired buffer size.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-303300"></A><EM CLASS="FunctionName">
SDsetblocksize</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_14444" CLASS="XRef">Table 3F</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-303315"></A>	3.5.1.6	<A NAME="50593873_37572"></A>Setting the I/O Access Type of an SDS<A NAME="50593873_marker-303314"></A>: SDsetaccesstype</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-303317"></A><EM CLASS="FunctionName">
SDsetaccesstype </EM>
<A NAME="50593873_marker-303316"></A>sets the type of I/O (serial, parallel,...) for accessing the data of the data set identified by <EM CLASS="VarName">
sds_id</EM>
.  Valid values of <EM CLASS="VarName">
access_types</EM>
 are <EM CLASS="DefName">
DFACC_SERIAL</EM>
 (or <EM CLASS="DefName">
1</EM>
), <EM CLASS="DefName">
DFACC_PARALLEL</EM>
 (or <EM CLASS="DefName">
11</EM>
), and <EM CLASS="DefName">
DFACC_DEFAULT</EM>
 (or <EM CLASS="DefName">
0</EM>
.)  The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-303273"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetaccesstype(sds_id, accesstype);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-303274"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sdfsacct(sds_id, accesstype)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-303276"></A><EM CLASS="FunctionName">
SDsetaccesstype</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if the SDS data can be accessed via accesstype or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. Its parameters are further described in <A HREF="UG_html-3.htm#50593873_14444" CLASS="XRef">Table 3F</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-144814"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_14444"></A>SD<A NAME="50593873_marker-144768"></A>setblocksize and SDs<A NAME="50593873_marker-303487"></A>etaccesstype Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-144771"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-144772"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-144773"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-144775"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-144777"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-144781"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-144787"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-144789"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-144793"></A>SDsetblocksize</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-144794"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-144795"></A>(sfsblsz)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-144797"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-144799"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-144801"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-144803"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-144807"></A>block_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-144809"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-144811"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-144813"></A>Block size</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-303381"></A>SDsetaccesstype</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-303382"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-303383"></A>(sdfsacct)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303385"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303387"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303389"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-303391"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303373"></A>accesstype</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303375"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303377"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-303379"></A>I/O access type</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-144687"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Appending Data to an SDS Array with an Unlimited Dimension.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-169064"></A>This example creates a 10x10 SDS array with one unlimited dimension and writes data to it. The file is reopened and the routine <EM CLASS="FunctionName">
SDisrecord/sfisrcrd</EM>
 is used to determine whether the selected SDS array is appendable. Then new data is appended, starting at the 11th row.</P>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-217104"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217107"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217108"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217109"></A>#define FILE_NAME     &quot;SDSUNLIMITED.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217110"></A>#define SDS_NAME      &quot;AppendableData&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217111"></A>#define X_LENGTH      10</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217112"></A>#define Y_LENGTH      10</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217113"></A>#define RANK          2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217114"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217115"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217116"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217117"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217118"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217119"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217120"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217121"></A>   int32 dim_sizes[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217122"></A>   int32 data[Y_LENGTH][X_LENGTH], append_data[X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217123"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217124"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217125"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217126"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217127"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217128"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217129"></A>   * Data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217130"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217131"></A>   for (j = 0; j &lt; Y_LENGTH; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217132"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217133"></A>       for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217134"></A>           data[j][i] = (i + 1) + (j + 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217135"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217136"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217137"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217138"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217139"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217140"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217141"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217142"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217143"></A>   * Define dimensions of the array. Make the first dimension </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217144"></A>   * appendable by defining its length to be unlimited.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217145"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217146"></A>   dim_sizes[0] = SD_UNLIMITED;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217147"></A>   dim_sizes[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217148"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217149"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217150"></A>   * Create the array data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217151"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217152"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217153"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217154"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217155"></A>   * Define the location and the size of the data to be written </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217156"></A>   * to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217157"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217158"></A>   start[0] = start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217159"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217160"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217161"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217162"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217163"></A>   * Write the data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217164"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217165"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217166"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217167"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217168"></A>   * Terminate access to the array data set, terminate access </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217169"></A>   * to the SD interface, and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217170"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217171"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217172"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217173"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217174"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217175"></A>   * Store the array values to be appended to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217176"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217177"></A>   for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217178"></A>       append_data[i] = 1000 + i;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217179"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217180"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217181"></A>   * Reopen the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217182"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217183"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217184"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217185"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217186"></A>   * Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217187"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217188"></A>   sds_index = 0; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217189"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217190"></A> &nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217191"></A>   /*  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217192"></A>   * Check if selected SDS is unlimited. If it is not, then terminate access</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217193"></A>   * to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217194"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217195"></A>   if ( SDisrecord (sds_id) ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217196"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217197"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217198"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217199"></A>   * Define the location of the append to start at the first column </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217200"></A>   * of the 11th row of the data set and to stop at the end of the</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217201"></A>   * eleventh row.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217202"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217203"></A>   start[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217204"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217205"></A>   edges[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217206"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217207"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217208"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217209"></A>   * Append data to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217210"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217211"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)append_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217212"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217213"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217214"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217215"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217216"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217217"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217218"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217219"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217220"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217221"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217222"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217223"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196290"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-217230"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217233"></A>      program append_sds</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217234"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217235"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217236"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217237"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217238"></A>      character*16  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217239"></A>      character*14  SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217240"></A>      integer       X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217241"></A>      parameter    (FILE_NAME = â€™SDSUNLIMITED.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217242"></A>     +              SDS_NAME = â€™AppendableDataâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217243"></A>     +              X_LENGTH = 10, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217244"></A>     +              Y_LENGTH = 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217245"></A>     +              RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217246"></A>      integer       DFACC_CREATE, DFACC_WRITE, SD_UNLIMITED,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217247"></A>     +              DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217248"></A>      parameter    (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217249"></A>     +              DFACC_WRITE  = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217250"></A>     +              SD_UNLIMITED = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217251"></A>     +              DFNT_INT32 =   24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217252"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217253"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217254"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217255"></A>      integer sfstart, sfcreate, sfwdata, sfselect </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217256"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217257"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217258"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217259"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217260"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217261"></A>      integer dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217262"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217263"></A>      integer i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217264"></A>      integer data (X_LENGTH, Y_LENGTH), append_data(X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217265"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217266"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217267"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217268"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217269"></A>C     Data initialization.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217270"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217271"></A>      do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217272"></A>         do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217273"></A>            data(i, j) = i + j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217274"></A>10      continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217275"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217276"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217277"></A>C     Create the file and initialize the SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217278"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217279"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217280"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217281"></A>C     Define dimensions of the array. Make the</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217282"></A>C     last dimension appendable by defining its length as unlimited.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217283"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217284"></A>      dim_sizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217285"></A>      dim_sizes(2) = SD_UNLIMITED</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217286"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217287"></A>C     Create the array data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217288"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217289"></A>     .                  dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217290"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217291"></A>C     Define the location and the size of the data to be written</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217292"></A>C     to the data set. Note that the elements of array stride are</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217293"></A>C     set to 1 for contiguous writing.    </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217294"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217295"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217296"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217297"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217298"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217299"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217300"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217301"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217302"></A>C     Write the data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217303"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217304"></A>      status = sfwdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217305"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217306"></A>C     Terminate access to the data set, terminate access</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217307"></A>C     to the SD interface, and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217308"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217309"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217310"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217311"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217312"></A>C     Store the array values to be appended to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217313"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217314"></A>      do 30 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217315"></A>         append_data(i) = 1000 + i - 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217316"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217317"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217318"></A>C     Reopen the file and initialize the SD. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217319"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217320"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217321"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217322"></A>C     Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217323"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217324"></A>      sds_index = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217325"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217326"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217327"></A>C     Define the location of the append to start at the 11th </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217328"></A>C     column of the 1st row and to stop at the end of the 10th row.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217329"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217330"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217331"></A>      start(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217332"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217333"></A>      edges(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217334"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217335"></A>C     Append the data to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217336"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217337"></A>      status = sfwdata(sds_id, start, stride, edges, append_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217338"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217339"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217340"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217341"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217342"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217343"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217344"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217345"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217346"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217347"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-199481"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-256775"></A>	3.5.2	<A NAME="50593873_22986"></A>Compressing SDS Data: SDsetcompress</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-256779"></A><A NAME="50593873_marker-256776"></A>The <A NAME="50593873_marker-256777"></A><A NAME="50593873_marker-256778"></A><EM CLASS="FunctionName">
SDsetcompress</EM>
 routine compresses an existing data set or creates a new compressed data set. It is a simplified interface to the <EM CLASS="FunctionName">
HCcreate</EM>
 routine, and should be used instead of <EM CLASS="FunctionName">
HCcreate</EM>
 unless the user is familiar with the lower-level routines. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-46751"></A>The compression algorithms currently supported by <EM CLASS="FunctionName">
SDsetcompress</EM>
 are:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-27738"></A>Adaptive Huffman</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-27739"></A>GZIP &quot;deflation&quot; (Lempel/Ziv-77 dictionary coder)</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-27741"></A>Run-length encoding</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-313972"></A>NBIT</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-256788"></A>Szip</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-221733"></A>The syntax of the routine <EM CLASS="FunctionName">
SDsetcompress</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-221734"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetcompress(sds_id, comp_type, &amp;c_info);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-221735"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfscompress(sds_id, comp_type, comp_prm)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-319369"></A>The parameter <EM CLASS="VarName">
comp_type</EM>
 specifies the compression type definition and is set to</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-319377"></A><EM CLASS="DefName">
COMP_CODE_NONE</EM>
 (or 0) for no encoding</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-319405"></A><EM CLASS="DefName">
COMP_CODE_RLE</EM>
 (or 1) for run-length encoding (RLE)</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-319370"></A><EM CLASS="DefName">
COMP_CODE_NBIT</EM>
 (or 2) for N-bit encoding (NBIT)</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-319371"></A><EM CLASS="DefName">
COMP_CODE_SKPHUFF</EM>
 (or 3) for Skipping Huffman compression</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-256871"></A><EM CLASS="DefName">
COMP_CODE_DEFLATE</EM>
 (or 4) for GZIP compression</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-256872"></A><EM CLASS="DefName">
COMP_CODE_SZIP</EM>
 (or 5) for Szip compression</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147457"></A>Compression information is specified by the parameter <EM CLASS="VarName">
c_info</EM>
 in C, and by the parameter <EM CLASS="VarName">
comp_prm</EM>
 in FORTRAN-77. The parameter <EM CLASS="VarName">
c_info</EM>
 is a pointer to a union structure of type <EM CLASS="VarName">
comp_info.  </EM>
Refer to the <EM CLASS="FunctionName">
SDsetcompress</EM>
 entry in the <EM CLASS="Citation">
HDF Reference Manual</EM>
 for the description of the <EM CLASS="VarName">
comp_info</EM>
 structure.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271558"></A>If <EM CLASS="VarName">
comp_type</EM>
 is set to <EM CLASS="DefName">
COMP_CODE_RLE</EM>
, the parameters <EM CLASS="VarName">
c_info</EM>
 and <EM CLASS="VarName">
comp_prm</EM>
 are not used; <EM CLASS="VarName">
c_info</EM>
 can be set to <EM CLASS="DefName">
NULL</EM>
 and <EM CLASS="VarName">
comp_prm</EM>
 can be undefined.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271559"></A>If <EM CLASS="VarName">
comp_type</EM>
 is set to <EM CLASS="DefName">
COMP_CODE_SKPHUFF</EM>
, then the structure <EM CLASS="VarName">
skphuff</EM>
 in the union <EM CLASS="VarName">
comp_info</EM>
 in C (<EM CLASS="VarName">
comp_prm(1)</EM>
 in FORTRAN-77) must be provided with the size, in bytes, of the data elements.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271560"></A>If <EM CLASS="VarName">
comp_type</EM>
 is set to <EM CLASS="DefName">
COMP_CODE_DEFLATE</EM>
, the deflate structure in the union <EM CLASS="VarName">
comp_info</EM>
 in C (<EM CLASS="VarName">
comp_prm(1)</EM>
 in FORTRAN-77) must be provided with the information about the compression effort.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271566"></A>If <EM CLASS="VarName">
comp_type</EM>
 is set to <EM CLASS="DefName">
COMP_CODE_SZIP</EM>
, the Szip options mask and the number of pixels per block in a chunked and Szip-compressed dataset must be specified in <EM CLASS="Code">
c_info.szip.options_mask</EM>
 and <EM CLASS="Code">
c_info.szip.pixels_per_block</EM>
 in C, and <EM CLASS="VarName">
comp_prm(1)</EM>
 and <EM CLASS="VarName">
comp_prm(2)</EM>
 in Fortran, respectively.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271567"></A>For example, to compress signed 16-bit integer data using the adaptive Huffman algorithm, the following definition and <EM CLASS="FunctionName">
SDsetcompress</EM>
 call are used.</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-221409"></A><EM CLASS="syntaxLang">
C:</EM>
		comp_info c_info;</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-221414"></A>		c_info.skphuff.skp_size = sizeof(int16);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-221415"></A>		status = SDsetcompress(sds_id, COMP_CODE_SKPHUFF, &amp;c_info);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-221424"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	comp_prm(1) = 2</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-221425"></A>		COMP_CODE_SKPHUFF = 3</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-221426"></A>		status = sfscompress(sds_id, COMP_CODE_SKPHUFF, comp_prm)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-221421"></A>To compress a data set using the gzip deflation algorithm with the maximum effort specified, the following definition and <EM CLASS="FunctionName">
SDsetcompress</EM>
 call are used.</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-140831"></A><EM CLASS="syntaxLang">
C:</EM>
		comp_info c_info;</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-140832"></A>		c_info.deflate.level = 9;</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-140833"></A>		status = SDsetcompress(sds_id, COMP_CODE_DEFLATE, &amp;c_info);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-140834"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	comp_prm(1) = 9</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-140835"></A>		COMP_CODE_DEFLATE = 4</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-140836"></A>		status = sfscompress(sds_id, COMP_CODE_DEFLATE, comp_prm)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-140855"></A><EM CLASS="FunctionName">
SDsetcompress</EM>
 functionality is currently limited to the following:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-140856"></A>Write the compressed data, in its entirety, to the data set. The data set is built in-core then written in a single write operation.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-303550"></A>Compression is not supported on an SDS with unlimited dimension. <EM CLASS="FunctionName">
SDsetcompress</EM>
 will return FAIL for such SDS and any subsequent writing to this SDS will write uncompressed data.</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-140884"></A>The existing compression algorithms supported by HDF do not allow partial modification to a compressed datastream.  In addition, compressed data sets cannot be stored in external files (see <A HREF="UG_html-3.htm#50593873_88578" CLASS="XRef">External File Operations</A>.)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-303749"></A><EM CLASS="FunctionName">
SDsetcompress</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The C version parameters are further described in <A HREF="UG_html-3.htm#50593873_22051" CLASS="XRef">Table 3G</A> and the FORTRAN-77 version parameters are further described in <A HREF="UG_html-3.htm#50593873_36738" CLASS="XRef">Table 3H</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-303806"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_22051"></A>S<A NAME="50593873_marker-303760"></A>Dsetcompress Parameter List<A NAME="50593873_marker-303805"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-303763"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-303764"></A>[Return Type]</H6>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-303766"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-303768"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-303770"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-303776"></A>C</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-303780"></A>SDsetcompress</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-303781"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-303782"></A>&nbsp;</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303784"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303786"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-303788"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303792"></A>comp_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303794"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-303796"></A>Compression method</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303800"></A>c_info</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-303802"></A>comp_info*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-303804"></A>Pointer to compression information structure</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-162895"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_36738"></A>sfscompress Parameter List<A NAME="50593873_marker-162894"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-162845"></A>Routine Name</P>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-162846"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-162848"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-162850"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-162852"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-162858"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-162862"></A>sfscompress</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-162863"></A>&nbsp;</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-162865"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-162867"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-162869"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-162873"></A>comp_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-162875"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-162877"></A>Compression method</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-162881"></A>comp_prm</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-162883"></A>integer(*)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-162885"></A>Compression parameters array</P>
</TD>
</TR>
<TR>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-162896"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Compressing SDS Data.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-169186"></A>This example uses the routine <EM CLASS="FunctionName">
SDsetcompress/sfscompress</EM>
 to compress SDS data with the GZIP compression method. See comments in the program regarding the use of the Skipping Huffman or RLE compression methods.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-217354"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217357"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217358"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217359"></A>#define FILE_NAME      &quot;SDScompressed.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217360"></A>#define SDS_NAME       &quot;SDSgzip&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217361"></A>#define X_LENGTH       5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217362"></A>#define Y_LENGTH       16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217363"></A>#define RANK           2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217364"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217365"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217366"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217367"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217368"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217369"></A>   int32     sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217370"></A>   intn      status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217371"></A>   int32     comp_type;    /* Compression flag */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217372"></A>   comp_info c_info;   /* Compression structure */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217373"></A>   int32     start[2], edges[2], dim_sizes[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217374"></A>   int32     data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217375"></A>   int       i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217376"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217377"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217378"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217379"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217380"></A>   * Buffer array data and define array dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217381"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217382"></A>   for (j = 0; j &lt; Y_LENGTH; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217383"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217384"></A>	for (i = 0; i &lt; X_LENGTH; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217385"></A>		data[j][i] = (i + j) + 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217386"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217387"></A>   dim_sizes[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217388"></A>   dim_sizes[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217389"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217390"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217391"></A>   * Create the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217392"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217393"></A>   sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217394"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217395"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217396"></A>   * Create the data set with the name defined in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217397"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217398"></A>   sds_id = SDcreate (sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217399"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217400"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217401"></A>   * Ininitialize compression structure element and compression</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217402"></A>   * flag for GZIP compression and call SDsetcompress.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217403"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217404"></A>   *   To use the Skipping Huffman compression method, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217405"></A>   *          comp_type = COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217406"></A>   *          c_info.skphuff.skp_size = value</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217407"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217408"></A>   *   To use the RLE compression method, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217409"></A>   *          comp_type = COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217410"></A>   *   No structure element needs to be initialized.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217411"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217412"></A>   comp_type = COMP_CODE_DEFLATE;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217413"></A>   c_info.deflate.level = 6;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217414"></A>   status = SDsetcompress (sds_id, comp_type, &amp;c_info); </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217415"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217416"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217417"></A>   * Define the location and size of the data set</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217418"></A>   * to be written to the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217419"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217420"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217421"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217422"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217423"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217424"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217425"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217426"></A>   * Write the stored data to the data set. The last argument </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217427"></A>   * must be explicitly cast to a generic pointer since SDwritedata</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217428"></A>   * is designed to write generic data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217429"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217430"></A>   status = SDwritedata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217431"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217432"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217433"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217434"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217435"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217436"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217437"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217438"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217439"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217440"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217441"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217442"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196505"></A>&nbsp;</P>
<P CLASS="codeExample">
<A NAME="50593873_pgfId-249896"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-217449"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217452"></A>      program  write_compressed_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217453"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217454"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217455"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217456"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217457"></A>      character*17  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217458"></A>      character*7   SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217459"></A>      integer       X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217460"></A>      parameter    (FILE_NAME = â€™SDScompressed.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217461"></A>     +              SDS_NAME = â€™SDSgzipâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217462"></A>     +              X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217463"></A>     +              Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217464"></A>     +              RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217465"></A>      integer       DFACC_CREATE, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217466"></A>      parameter    (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217467"></A>     +              DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217468"></A>      integer       COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217469"></A>      parameter    (COMP_CODE_DEFLATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217470"></A>      integer       DEFLATE_LEVEL</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217471"></A>      parameter    (DEFLATE_LEVEL = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217472"></A>C     To use Skipping Huffman compression method, declare </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217473"></A>C            integer   COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217474"></A>C            parameter(COMP_CODE_SKPHUFF = 3) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217475"></A>C     To use RLE compression method, declare</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217476"></A>C            integer   COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217477"></A>C            parameter(COMP_CODE_RLE = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217478"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217479"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217480"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217481"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217482"></A>      integer sfstart, sfcreate, sfwdata, sfendacc, sfend,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217483"></A>     +        sfscompress</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217484"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217485"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217486"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217487"></A>      integer  sd_id, sds_id, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217488"></A>      integer  start(2), edges(2), stride(2), dim_sizes(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217489"></A>      integer  comp_type</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217490"></A>      integer  comp_prm(1)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217491"></A>      integer  data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217492"></A>      integer  i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217493"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217494"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217495"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217496"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217497"></A>C     Buffer array data and define array dimensions. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217498"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217499"></A>      do 20 j = 1, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217500"></A>         do 10 i = 1, X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217501"></A>            data(i, j) = i + j - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217502"></A>10       continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217503"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217504"></A>      dim_sizes(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217505"></A>      dim_sizes(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217506"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217507"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217508"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217509"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217510"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217511"></A>C     Create the data set with the name SDS_NAME.  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217512"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217513"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT32, RANK, dim_sizes) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217514"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217515"></A>C     Initialize compression parameter (deflate level)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217516"></A>C     and call sfscompress function</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217517"></A>C     For Skipping Huffman compression, comp_prm(1) should be set</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217518"></A>C     to skipping sizes value (skp_size).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217519"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217520"></A>      comp_type   = COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217521"></A>      comp_prm(1) = deflate_level</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217522"></A>      status      = sfscompress(sds_id, comp_type, comp_prm(1))</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217523"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217524"></A>C     Define the location and size of the data that will be written to</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217525"></A>C     the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217526"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217527"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217528"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217529"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217530"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217531"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217532"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217533"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217534"></A>C     Write the stored data to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217535"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217536"></A>      status = sfwdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217537"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217538"></A>C     Terminate access to the  data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217539"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217540"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217541"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217542"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217543"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217544"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217545"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217546"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196607"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-158038"></A>	3.5.3	<A NAME="50593873_88578"></A>External File Operations</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-158035"></A>The <A NAME="50593873_marker-158034"></A>HDF library provides routines to store SDS arrays in an <EM CLASS="Definition">
external file</EM>
<A NAME="50593873_marker-162919"></A> that is separate from the <EM CLASS="Definition">
primary file</EM>
 containing the metadata for the array. Such an SDS array is called an <EM CLASS="Definition">
external SDS array</EM>
<A NAME="50593873_marker-162926"></A>. With external arrays, it is possible to link data sets in the same HDF file to multiple external files or data sets in different HDF files to the same external file. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-140922"></A>External arrays are functionally identical to arrays in the primary data file. The HDF library keeps track of the beginning of the data set and adds data at the appropriate position in the external file. When data is written or appended along a specified dimension, the HDF library writes along that dimension in the external file and updates the appropriate dimension record in the primary file.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-17188"></A><A NAME="50593873_marker-26886"></A>There are two methods for creating external SDS arrays. The user can create a new data set in an external file or move data from an existing internal data set to an external file. In either case, only the array values are stored externally, all metadata remains in the primary HDF file. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-46792"></A>When an external array is created, a sufficient amount of space is reserved in the external file for the entire data set. The data set will begin at the specified byte offset and extend the length of the data set. The write operation will overwrite the target locations in the external file. The external file may be of any format, provided the data types, byte ordering, and dimension ordering are supported by HDF. However, the primary file must be an HDF file.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-46787"></A>Routines for manipulating external SDS arrays can only be used with HDF files. Unidata-formatted netCDF files are not supported by these routines.</P>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="NoteBox">
<A NAME="50593873_pgfId-249851"></A>Note:  Compressed data sets (see <A HREF="UG_html-3.htm#50593873_22986" CLASS="XRef">Compressing SDS Data: SDsetcompress</A>) cannot be stored in external files.</H6>
</TD>
</TR>
</TABLE>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-20348"></A>	3.5.3.1	Specifying the Directory Search Path of an External File: HXsetdir</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-20352"></A><A NAME="50593873_marker-26887"></A>There are three filesystem locations the HDF external file routines check when determining the location of an external file. They are, in order of search precedence:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593873_pgfId-20364"></A>The directory path specified by the last call to the <EM CLASS="FunctionName">
HXsetdir</EM>
 routine.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593873_pgfId-20368"></A>2.	The directory path specified by the $HDFEXTDIR shell environment variable.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-145526"></A>3.	The file system locations searched by the standard open(3) routine.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593873_pgfId-145532"></A>The syntax of <EM CLASS="FunctionName">
HXsetdir</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-170315"></A><EM CLASS="syntaxLang">
C:</EM>
		status = HXsetdir(dir_list);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-170316"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = hxisdir(dir_list, dir_length)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-170317"></A><EM CLASS="FunctionName">
HXsetdir</EM>
 has one argument, a string specifying the directory list to be searched. This list can consist of one directory name or a set of directory names separated by colons. The FORTRAN-77 version of this routine takes an additional argument, <EM CLASS="VarName">
dir_length</EM>
, which specifies the length of the directory list string.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-46801"></A>If an error condition is encountered, <EM CLASS="FunctionName">
HXsetdir</EM>
 leaves the directory search path unchanged. The directory search path specified by <EM CLASS="FunctionName">
HXsetdir</EM>
 remains in effect throughout the scope of the calling program.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-20393"></A><EM CLASS="FunctionName">
HXsetdir</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
HXsetdir</EM>
 are described in <A HREF="UG_html-3.htm#50593873_29925" CLASS="XRef">HXsetdir and HXsetcreatedir Parameter Lists</A>.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-26927"></A>	3.5.3.2	<A NAME="50593873_marker-26930"></A>Specifying the Location of the Next External File to be Created: HXsetcreatedir</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-26928"></A><EM CLASS="FunctionName">
HXsetcreatedir</EM>
<A NAME="50593873_marker-26929"></A> specifies the directory location of the next external file to be created. It overrides the directory location specified by $HDFEXTCREATEDIR and the locations searched by the open(3) call in the same manner as <EM CLASS="FunctionName">
HXsetdir</EM>
. Specifically, the search precedence is:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593873_pgfId-20624"></A>The directory specified by the last call to the <EM CLASS="FunctionName">
HXsetcreatedir</EM>
 routine.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593873_pgfId-20625"></A>2.	The directory specified by the $HDFEXTCREATEDIR shell environment variable.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-20626"></A>3.	The locations searched by the standard open(3) routine.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593873_pgfId-20617"></A>The syntax of <EM CLASS="FunctionName">
HXsetcreatedir</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145500"></A><EM CLASS="syntaxLang">
C:</EM>
		status = HXsetcreatedir(dir);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145502"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = hxiscdir(dir, dir_length)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145480"></A><EM CLASS="FunctionName">
HXsetcreatedir</EM>
 has one argument, the directory location of the next external file to be created. The FORTRAN-77 version of this routine takes an additional argument, <EM CLASS="VarName">
dir_length</EM>
, which specifies the length of the directory list string. If an error is encountered, the directory location is left unchanged.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-20611"></A><EM CLASS="FunctionName">
HXsetcreatedir</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
HXsetcreatedir</EM>
 are described in <A HREF="UG_html-3.htm#50593873_29925" CLASS="XRef">Table 3I</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-20603"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-26931"></A><A NAME="50593873_29925"></A>HXsetdir and HXsetcreatedir Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-141022"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-141023"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-141024"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-141026"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-141028"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-141032"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-141038"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-141040"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-141086"></A>HXsetdir</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-141087"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-141088"></A>(hxisdir)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141090"></A>dir_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141092"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141094"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-141096"></A>Directory list to be searched</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141100"></A>dir_length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141102"></A>Not applicable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141104"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-141106"></A>Length of the <EM CLASS="Code">
dir_list</EM>
 string</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-141054"></A>HXsetcreatedir</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-141055"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-141056"></A>(hxiscdir)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141058"></A>dir</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141060"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141062"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-141064"></A>Directory location of the next external file to be created</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141068"></A>dir_length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141070"></A>Not applicable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-141072"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-141074"></A>Length of the <EM CLASS="Code">
dir</EM>
 string</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-17189"></A>	3.5.3.3	<A NAME="50593873_17173"></A>Creating a Data Set with Data Stored in an External File: SDsetexternalfile</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-17190"></A><A NAME="50593873_marker-26932"></A>Creating a data set in an external file involves the following steps:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593873_pgfId-17191"></A>Create the data set.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593873_pgfId-17192"></A>2.	Specify that an external data file is to be used.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-17193"></A>3.	Write data to the data set.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-17194"></A>4.	Terminate access to the data set. </LI>
</OL>
<P CLASS="Body">
<A NAME="50593873_pgfId-17195"></A>To create a data set with data stored in an external file, the calling program must make the following calls. </P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-17196"></A><EM CLASS="syntaxLang">
C:</EM>
		sds_id = SDcreate(sd_id, name, data_type, rank, dim_sizes);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-17197"></A>		status = SDsetexternalfile(sds_id, filename, offset);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-17198"></A>		status = SDwritedata(sds_id, start, stride, edges, data);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-17199"></A>		status = SDendaccess(sds_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-26535"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sds_id = sfcreate(sd_id, name, data_type, rank, dim_sizes)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-26530"></A>		status = sfsextf(sds_id, filename, offset)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-26540"></A>		status = sfwdata(sds_id, start, stride, edges, data)</P>
<P CLASS="syntax-or-bot">
<A NAME="50593873_pgfId-156212"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfwcdata(sds_id, start, stride, edges, data)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-26531"></A>		status = sfendacc(sds_id)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-17200"></A><A NAME="50593873_marker-26933"></A>For a newly-created data set, <EM CLASS="FunctionName">
SDsetexternalfile</EM>
 marks the SDS identified by <EM CLASS="VarName">
sds_id</EM>
 as one whose data is to be written to an external file. It does not actually write data to an external file; it marks the data set as an external data set for all subsequent <EM CLASS="FunctionName">
SDwritedata</EM>
 operations.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145562"></A>Note that data can only be moved once for any given data set, i.e., <EM CLASS="FunctionName">
SDsetexternalfile</EM>
 can only be called once after a data set has been created.  It is the user's responsibility to make sure that the external data file is kept with the primary HDF file.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-45147"></A>The parameter <EM CLASS="VarName">
filename</EM>
 is the name of the external data file and <EM CLASS="VarName">
offset</EM>
 is the number of bytes from the beginning of the external file to the location where the first byte of data should be written. If a file with the name specified by <EM CLASS="VarName">
filename</EM>
 exists in the current directory search path, HDF will access it as the external file. If the file does not exist, HDF will create one in the directory named in the last call to <EM CLASS="FunctionName">
HXsetcreatefile</EM>
. If an absolute pathname is specified, the external file will be created at the location specified by the pathname, overriding the location specified by the last call to <EM CLASS="FunctionName">
HXsetcreatefile</EM>
. Use caution when writing to existing external or primary files since the HDF library starts the write operation at the specified offset without determining whether data is being overwritten.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-20643"></A>Once the name of an external file is established, it cannot be changed without breaking the association between the data setâ€™s metadata and the data it describes.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-310886"></A><EM CLASS="FunctionName">
SDsetexternalfile</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDsetexternalfile</EM>
 are described in <A HREF="UG_html-3.htm#50593873_40436" CLASS="XRef">Table 3J</A>.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-310891"></A>	3.5.3.4	<A NAME="50593873_15961"></A>Getting External File Information of a Data Set: SDgetexternalinfo</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-310922"></A><EM CLASS="FunctionName">
SDgetexternalinfo</EM>
<A NAME="50593873_marker-310921"></A> retrieves external file information of a data set, when the data set has external element.  The information includes the external fileâ€™s name, the position, where the data setâ€™s data had been written in the external file, and the length of the external data.  <EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 will return <EM CLASS="DefName">
0</EM>
 if the data set does not have external element.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-310923"></A>The syntax of <EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-307236"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetexternalinfo(sds_id, buf_size, filename, &amp;offset, &amp;length);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-307237"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Currently unavailable</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-307172"></A><A NAME="50593873_marker-307171"></A>The application must provide sufficient buffer for the external file name.  When the external file name is available and <EM CLASS="VarName">
buf_size</EM>
 is 0, <EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 simply returns the length of the external file name.  Thus, application can call <EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 passing in 0 for <EM CLASS="VarName">
buf_size</EM>
 first, then allocate the buffer sufficiently before calling <EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 again passing in the proper length for <EM CLASS="VarName">
buf_size </EM>
and appropriately allocated buffer <EM CLASS="VarName">
filename</EM>
.  <EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 stores the external file name in the buffer <EM CLASS="VarName">
filename</EM>
 up to the nameâ€™s length or the value in <EM CLASS="VarName">
buf_size</EM>
, whichever smaller.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-307174"></A><EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 stores in the parameter <EM CLASS="VarName">
offset</EM>
 the number of bytes from the beginning of the external file to the location where the first byte of data had been written and in the parameter <EM CLASS="VarName">
length</EM>
 the length of the data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-307176"></A><EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 returns one of the following values:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-310948"></A>the actual length of the external file name or the length of the retrieved file name, if there is external element</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-310976"></A><EM CLASS="DefName">
0</EM>
, if there is no external element</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-310977"></A><EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
), if failure occurs</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-310981"></A>The parameters of <EM CLASS="FunctionName">
SDgetexternalinfo</EM>
 are described in <A HREF="UG_html-3.htm#50593873_40436" CLASS="XRef">SDsetexternalfile Parameter List</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-17239"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_40436"></A>S<A NAME="50593873_marker-26934"></A>Dsetexternalfile Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-17207"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132410"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20253"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-17209"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-17211"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-17213"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20268"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-20270"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-17215"></A>SDsetexternalfile</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132411"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-20254"></A>(sfsextf)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-17218"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-17220"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20258"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-17222"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-17226"></A>filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-17228"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20260"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-17230"></A>Name of the file to contain the external data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-17234"></A>offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-17236"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-20262"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-17238"></A>Offset in bytes from the beginning of the external file to where the SDS data will be written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-307464"></A>SDgetexternalinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-307465"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-307466"></A>(unvailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307468"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307470"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307472"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307474"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307507"></A>buf_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307509"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-311070"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307513"></A>Size of buffer for external file name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307490"></A>filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307492"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307494"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307496"></A>Buffer for external file name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307480"></A>offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307482"></A>*int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-307484"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-307486"></A>Offset in bytes from the beginning of the external file to where the SDS data had been written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-310988"></A>length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-310990"></A>*int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-310992"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-310994"></A>Length of the data written in the external file</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-17240"></A>	3.5.3.5	Moving Existing Data to an External File</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-17241"></A><A NAME="50593873_marker-26935"></A>Data can be moved from a primary file to an external file. The following steps perform this task:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593873_pgfId-17242"></A>Select the data set.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593873_pgfId-17243"></A>2.	Specify the external data file.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-163032"></A>3.	Terminate access to the data set. </LI>
</OL>
<P CLASS="Body">
<A NAME="50593873_pgfId-163033"></A>To move data set data to an external file, the calling program must make the following calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-163034"></A><EM CLASS="syntaxLang">
C:</EM>
		sds_id = SDselect(sd_id, sds_index);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-32797"></A>		status = SDsetexternalfile(sds_id, filename, offset);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-163002"></A>		status = SDendaccess(sds_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-26552"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-163020"></A>		status = sfsextf(sds_id, filename, offset)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-162966"></A>		status = sfendacc(sds_id)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-162950"></A>For an existing data set, <EM CLASS="FunctionName">
SDsetexternalfile</EM>
 moves the data to the external file. Any data in the external file that occupies the space reserved for the external array will be overwritten as a result of this operation. Data of an existing data set in the primary file can only be moved to the external file once. During the operation, the data is written to the external file as a contiguous stream regardless of how it is stored in the primary file. Because data is moved as is, any unwritten locations in the data set are preserved in the external file. Subsequent read and write operations performed on the data set will access the external file.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-17250"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Moving Data to the External File.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-173454"></A>This example illustrates the use of the routine <EM CLASS="FunctionName">
SDsetexternalfile/sfsextf</EM>
 to move the SDS data written in Example 2 to the external file.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-217553"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217556"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217557"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217558"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217559"></A>#define EXT_FILE_NAME &quot;ExternalSDS&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217560"></A>#define OFFSET        24</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217561"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217562"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217563"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217564"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217565"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217566"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217567"></A>   int32 sd_id, sds_id, sds_index, offset;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217568"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217569"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217570"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217571"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217572"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217573"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217574"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217575"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217576"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217577"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217578"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217579"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217580"></A>   sds_index = 0;   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217581"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217582"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217583"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217584"></A>   * Create a file with the name EXT_FILE_NAME and move the data set</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217585"></A>   * values into it, starting at byte location OFFSET.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217586"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217587"></A>   status = SDsetexternalfile (sds_id, EXT_FILE_NAME, OFFSET);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217588"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217589"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217590"></A>   * Terminate access to the data set, SD interface, and file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217591"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217592"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217593"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217594"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196653"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-217601"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217604"></A>      program  write_extfile</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217605"></A>      implicit none </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217606"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217607"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217608"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217609"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217610"></A>      character*11 EXT_FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217611"></A>      integer      OFFSET</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217612"></A>      integer      DFACC_WRITE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217613"></A>      parameter   (FILE_NAME      = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217614"></A>     +             EXT_FILE_NAME  = â€™ExternalSDSâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217615"></A>     +             OFFSET         = 24,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217616"></A>     +             DFACC_WRITE    = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217617"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217618"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217619"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217620"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217621"></A>      integer sfstart, sfselect, sfsextf, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217622"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217623"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217624"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217625"></A>      integer sd_id, sds_id, sds_index, offset</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217626"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217627"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217628"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217629"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217630"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217631"></A>C     Open the HDF file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217632"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217633"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217634"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217635"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217636"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217637"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217638"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217639"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217640"></A>C     Create a file with the name EXT_FILE_NAME and move the data set</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217641"></A>C     into it, starting at byte location OFFSET.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217642"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217643"></A>      status = sfsextf(sds_id, EXT_FILE_NAME, OFFSET)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217644"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217645"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217646"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217647"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217648"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217649"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217650"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217651"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217652"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217653"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196710"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-17271"></A>	3.6	<A NAME="50593873_13107"></A>Reading Data from an SDS Array: SDreaddata<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-156939"></A><A NAME="50593873_marker-26936"></A>Data of an SDS array can be read as an entire array, a subset of the array, or a set of samples of the array. <A NAME="50593873_marker-156938"></A>SDS data is read from an external file in the same way that it is read from a primary file; whether the SDS array is stored in an external file is transparent to the user. Reading data from an SDS array involves the following steps:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593873_pgfId-17275"></A>Select the data set.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593873_pgfId-141162"></A>2.	Define the portion of the data to be read.</LI>
<LI CLASS="Step">
<A NAME="50593873_pgfId-17276"></A>3.	Read data portion as defined.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593873_pgfId-17279"></A>To read data from an SDS array, the calling program must contain the following function calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-17280"></A><EM CLASS="syntaxLang">
C:</EM>
		sds_id = SDselect(sd_id, sds_index);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-17282"></A>		status = SDreaddata(sds_id, start, stride, edges, data);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-156223"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-156224"></A>		status = sfrdata(sds_id, start, stride, edges, data)					</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-156225"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfrcdata(sds_id, start, stride, edges, data)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141168"></A>Note that step 2 is not illustrated in the function call syntax; it is carried out by assigning values to the parameters <EM CLASS="VarName">
start</EM>
, <EM CLASS="VarName">
stride</EM>
, and <EM CLASS="VarName">
edges</EM>
 before the routine <EM CLASS="FunctionName">
SDreaddata</EM>
 is called in step 3.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141170"></A><EM CLASS="FunctionName">
SDreaddata</EM>
<A NAME="50593873_marker-141169"></A> reads the data according to the definition specified by the parameters <EM CLASS="VarName">
start</EM>
, <EM CLASS="VarName">
stride</EM>
, and <EM CLASS="VarName">
edges</EM>
 and stores the data into the buffer provided, <EM CLASS="VarName">
data</EM>
. The argument <EM CLASS="VarName">
sds_id</EM>
 is the SDS identifier returned by <EM CLASS="FunctionName">
SDcreate</EM>
 or <EM CLASS="FunctionName">
SDselect</EM>
. As with <EM CLASS="FunctionName">
SDwritedata</EM>
, the arguments <EM CLASS="VarName">
start</EM>
, <EM CLASS="VarName">
stride</EM>
, and <EM CLASS="VarName">
edges</EM>
 describe the starting location, the number of elements to skip after each read, and the number of elements to be read, respectively, for each dimension. For additional information on the parameters <EM CLASS="VarName">
start</EM>
, <EM CLASS="VarName">
stride</EM>
, and <EM CLASS="VarName">
edges</EM>
, refer to <A HREF="UG_html-3.htm#50593873_20018" CLASS="XRef">Writing Data to an SDS Array: SDwritedata</A>.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-27473"></A>There are two FORTRAN-77 versions of this routine: <EM CLASS="FunctionName">
sfrdata</EM>
 reads numeric data and <EM CLASS="FunctionName">
sfrcdata</EM>
 reads character data. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145584"></A><EM CLASS="FunctionName">
SDreaddata</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
), including the situation when the data set does not contain data, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDreaddata</EM>
 are further described in <A HREF="UG_html-3.htm#50593873_33783" CLASS="XRef">Table 3K</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-17383"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_33783"></A>S<A NAME="50593873_marker-26938"></A>Dreaddata Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-157021"></A>Routine Name </P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-157022"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-157023"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-157025"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-157027"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-157031"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-157037"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-157039"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-157043"></A>SDreaddata</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-157044"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-157045"></A>(sfrdata/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-157046"></A>sfrcdata)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157048"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157050"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157052"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-157054"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157058"></A>start</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157060"></A>int32[]</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157062"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-157064"></A>Array containing the position at which the read will start for each dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157068"></A>stride</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157070"></A>int32[]</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157072"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-157074"></A>Array containing the number of data locations the current location is to be moved forward before the next read</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157078"></A>edges</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157080"></A>int32[]</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157082"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-157084"></A>Array containing the number of data elements to be read along each dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157088"></A>data</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157090"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-157092"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158735"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-157095"></A>Buffer the data will be read into</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-17384"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Reading from an SDS.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-168956"></A>This example uses the routine <EM CLASS="FunctionName">
SDreaddata/sfrdata</EM>
 to read the data that has been written in Example 2, modified in Example 4, and moved to the external file in the Example 7. Note that the original file SDS.hdf that contains the SDS metadata and the external file ExternalSDS that contains the SDS raw data should reside in the same directory. The fact that raw data is in the external file is transparent to the userâ€™s program.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-217660"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217663"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217664"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217665"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217666"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217667"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217668"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217669"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217670"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217671"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217672"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217673"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217674"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217675"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217676"></A>   int32 data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217677"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217678"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217679"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217680"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217681"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217682"></A>   * Open the file for reading and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217683"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217684"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217685"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217686"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217687"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217688"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217689"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217690"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217691"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217692"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217693"></A>   * Set elements of array start to 0, elements of array edges </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217694"></A>   * to SDS dimensions,and use NULL for the argument stride in SDreaddata</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217695"></A>   * to read the entire data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217696"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217697"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217698"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217699"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217700"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217701"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217702"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217703"></A>   * Read entire data into data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217704"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217705"></A>   status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217706"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217707"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217708"></A>   * Print 10th row; the following numbers should be displayed.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217709"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217710"></A>   *         10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217711"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217712"></A>   for (j = 0; j &lt; X_LENGTH; j++) printf (&quot;%d &quot;, data[9][j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217713"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217714"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217715"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217716"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217717"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217718"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217719"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217720"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217721"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217722"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217723"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217724"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196779"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-217731"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
      FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217734"></A>      program  read_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217735"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217736"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217737"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217738"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217739"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217740"></A>      integer      X_LENGTH, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217741"></A>      parameter   (FILE_NAME  = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217742"></A>     +             X_LENGTH = 5, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217743"></A>     +             Y_LENGTH = 16)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217744"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217745"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217746"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217747"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217748"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217749"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217750"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217751"></A>      integer sfstart, sfselect, sfrdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217752"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217753"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217754"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217755"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217756"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217757"></A>      integer data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217758"></A>      integer j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217759"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217760"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217761"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217762"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217763"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217764"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217765"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217766"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217767"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217768"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217769"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217770"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217771"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217772"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217773"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217774"></A>C     Set elements of the array start to 0, elements of the array edges to </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217775"></A>C     SDS dimensions, and elements of the array stride to 1 to read the</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217776"></A>C     entire data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217777"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217778"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217779"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217780"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217781"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217782"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217783"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217784"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217785"></A>C     Read entire data into data array. Note that sfrdata is used</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217786"></A>C     to read the numeric data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217787"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217788"></A>      status = sfrdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217789"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217790"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217791"></A>C     Print 10th column; the following numbers are displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217792"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217793"></A>C           10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217794"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217795"></A>      write(*,*) (data(j,10), j = 1, X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217796"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217797"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217798"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217799"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217800"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217801"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217802"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217803"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217804"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217805"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-227366"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-227367"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Reading Subsets of an SDS.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-227368"></A>This example shows how parameters <EM CLASS="VarName">
start</EM>
, <EM CLASS="VarName">
stride</EM>
, and <EM CLASS="VarName">
edges</EM>
 of the routine <EM CLASS="FunctionName">
SDreadata/sfrdata</EM>
 can be used to read three subsets of an SDS array.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-169139"></A><EM CLASS="syntaxLang">
C:</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-169140"></A>For the first subset, the program reads every 3rd element of the 2nd column starting at the 4th row of the data set created in Example 2 and modified in Examples 4 and 7.</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-169344"></A>For the second subset the program reads the first 4 elements of the 10th row.</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-169345"></A>For the third subset, the program reads from the same data set every 6th element of each column and 4th element of each row starting at 1st column, 3d row.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-173551"></A><EM CLASS="syntaxLang">
FORTRAN-77:</EM>
 </P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-173552"></A>Fortran program reads transposed data to reflect the difference in C and Fortran internal storage.</P>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-217812"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217815"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217816"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217817"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217818"></A>#define SUB1_LENGTH   5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217819"></A>#define SUB2_LENGTH   4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217820"></A>#define SUB3_LENGTH1  2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217821"></A>#define SUB3_LENGTH2  3 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217822"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217823"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217824"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217825"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217826"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217827"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217828"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217829"></A>   int32 start[2], edges[2], stride[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217830"></A>   int32 sub1_data[SUB1_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217831"></A>   int32 sub2_data[SUB2_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217832"></A>   int32 sub3_data[SUB3_LENGTH2][SUB3_LENGTH1];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217833"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217834"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217835"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217836"></A>        </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217837"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217838"></A>   * Open the file for reading and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217839"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217840"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217841"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217842"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217843"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217844"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217845"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217846"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217847"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217848"></A>   *         Reading the first subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217849"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217850"></A>   * Set elements of start, edges, and stride arrays to read</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217851"></A>   * every 3rd element in the 2nd column starting at 4th row.   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217852"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217853"></A>   start[0] = 3;   /* 4th row */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217854"></A>   start[1] = 1;   /* 2nd column */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217855"></A>   edges[0] = SUB1_LENGTH; /* SUB1_LENGTH elements are read along 2nd column*/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217856"></A>   edges[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217857"></A>   stride[0] = 3;  /* every 3rd element is read along 2nd column */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217858"></A>   stride[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217859"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217860"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217861"></A>   * Read the data from the file into sub1_data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217862"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217863"></A>   status = SDreaddata (sds_id, start, stride, edges, (VOIDP)sub1_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217864"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217865"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217866"></A>   * Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217867"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217868"></A>   *             5 8 1000 14 17   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217869"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217870"></A>   for (j = 0; j &lt; SUB1_LENGTH; j++) printf (&quot;%d &quot;, sub1_data[j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217871"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217872"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217873"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217874"></A>   *         Reading the second subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217875"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217876"></A>   * Set elements of start and edges arrays to read</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217877"></A>   * first 4 elements of the 10th row. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217878"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217879"></A>   start[0] = 9;  /* 10th row  */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217880"></A>   start[1] = 0;  /* 1st column */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217881"></A>   edges[0] = 1; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217882"></A>   edges[1] = SUB2_LENGTH; /* SUB2_LENGTH elements are read along 10th row */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217883"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217884"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217885"></A>   * Read data from the file into sub2_data array. Note that the third</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217886"></A>   * parameter is set to NULL for contiguous reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217887"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217888"></A>   status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)sub2_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217889"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217890"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217891"></A>   * Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217892"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217893"></A>   *            10 1000 12 13 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217894"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217895"></A>   for (j = 0; j &lt; SUB2_LENGTH; j++) printf (&quot;%d &quot;, sub2_data[j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217896"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217897"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217898"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217899"></A>   *         Reading the third subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217900"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217901"></A>   * Set elements of the arrays start, edges, and stride to read</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217902"></A>   * every 6th element in the column and 4th element in the row</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217903"></A>   * starting at 1st column, 3d row.    </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217904"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217905"></A>   start[0] = 2;  /* 3d row */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217906"></A>   start[1] = 0;  /* 1st column */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217907"></A>   edges[0] = SUB3_LENGTH2; /* SUB3_LENGTH2 elements are read along</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217908"></A>                               each column */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217909"></A>   edges[1] = SUB3_LENGTH1; /* SUB3_LENGTH1 elements are read along  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217910"></A>                               each row */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217911"></A>   stride[0] = 6; /* read every 6th element along each column */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217912"></A>   stride[1] = 4; /* read every 4th element along each row */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217913"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217914"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217915"></A>   * Read the data from the file into sub3_data array.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217916"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217917"></A>   status = SDreaddata (sds_id, start, stride, edges, (VOIDP)sub3_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217918"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217919"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217920"></A>   * Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217921"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217922"></A>   *            3 7 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217923"></A>   *            9 13  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217924"></A>   *            15 19 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217925"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217926"></A>   for ( j = 0; j &lt; SUB3_LENGTH2; j++ ) {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217927"></A>       for (i = 0; i &lt; SUB3_LENGTH1; i++) printf (&quot;%d &quot;, sub3_data[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217928"></A>       printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217929"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217930"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217931"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217932"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217933"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217934"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217935"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217936"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217937"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217938"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217939"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-196990"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-217946"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217949"></A>      program  read_subsets</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217950"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217951"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217952"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217953"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217954"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217955"></A>      parameter   (FILE_NAME  = â€™SDS.hdfâ€™)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217956"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217957"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217958"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217959"></A>      integer      SUB1_LENGTH, SUB2_LENGTH, SUB3_LENGTH1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217960"></A>     +             SUB3_LENGTH2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217961"></A>      parameter   (SUB1_LENGTH  = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217962"></A>     +             SUB2_LENGTH  = 4, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217963"></A>     +             SUB3_LENGTH1 = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217964"></A>     +             SUB3_LENGTH2 = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217965"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217966"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217967"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217968"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217969"></A>      integer sfstart, sfselect, sfrdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217970"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217971"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217972"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217973"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217974"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217975"></A>      integer sub1_data(SUB1_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217976"></A>      integer sub2_data(SUB2_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217977"></A>      integer sub3_data(SUB3_LENGTH1,SUB3_LENGTH2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217978"></A>      integer i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217979"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217980"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217981"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217982"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217983"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217984"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217985"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217986"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217987"></A>C     Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217988"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217989"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217990"></A>      sds_id =sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217991"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217992"></A>C            Reading the first subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217993"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217994"></A>C     Set elements of start, stride, and edges arrays to read </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217995"></A>C     every 3d element in in the 2nd row starting in the 4th column. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217996"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217997"></A>      start(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217998"></A>      start(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-217999"></A>      edges(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218000"></A>      edges(2) = SUB1_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218001"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218002"></A>      stride(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218003"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218004"></A>C     Read the data from sub1_data array. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218005"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218006"></A>      status = sfrdata(sds_id, start, stride, edges, sub1_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218007"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218008"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218009"></A>C     Print what we have just read, the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218010"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218011"></A>C           5 8 1000 14 17 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218012"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218013"></A>      write(*,*) (sub1_data(j), j = 1, SUB1_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218014"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218015"></A>C            Reading the second subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218016"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218017"></A>C     Set elements of start, stride, and edges arrays to read </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218018"></A>C     first 4 elements of 10th column. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218019"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218020"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218021"></A>      start(2) = 9 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218022"></A>      edges(1) = SUB2_LENGTH </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218023"></A>      edges(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218024"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218025"></A>      stride(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218026"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218027"></A>C     Read the data into sub2_data array. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218028"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218029"></A>      status = sfrdata(sds_id, start, stride, edges, sub2_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218030"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218031"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218032"></A>C     Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218033"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218034"></A>C          10 1000 12 13 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218035"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218036"></A>      write(*,*) (sub2_data(j), j = 1, SUB2_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218037"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218038"></A>C            Reading the third subset.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218039"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218040"></A>C     Set elements of start, stride and edges arrays to read </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218041"></A>C     every 6th element in the row and every 4th element in the column</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218042"></A>C     starting at 1st row, 3rd column.  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218043"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218044"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218045"></A>      start(2) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218046"></A>      edges(1) = SUB3_LENGTH1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218047"></A>      edges(2) = SUB3_LENGTH2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218048"></A>      stride(1) = 4 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218049"></A>      stride(2) = 6 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218050"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218051"></A>C     Read the data from the file into sub3_data array. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218052"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218053"></A>      status = sfrdata(sds_id, start, stride, edges, sub3_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218054"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218055"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218056"></A>C     Print what we have just read; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218057"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218058"></A>C         3 9 15</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218059"></A>C         7 13 19 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218060"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218061"></A>      do 50 i = 1, SUB3_LENGTH1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218062"></A>         write(*,*) (sub3_data(i,j), j = 1, SUB3_LENGTH2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218063"></A>50    continue    </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218064"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218065"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218066"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218067"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218068"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218069"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218070"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218071"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218072"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218073"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-251571"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-251572"></A>	3.7	Obtaining Information about SD Data Sets<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-251574"></A><A NAME="50593873_marker-251573"></A>The routines covered in this section provide methods for obtaining information about all scientific data sets in a file, for identifying the data sets that meet certain criteria, and for obtaining information about specific data sets. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141207"></A><EM CLASS="FunctionName">
SDfileinfo</EM>
 obtains the numbers of data sets and file attributes, set by SD interface routines, in a file. <EM CLASS="FunctionName">
SDgetinfo</EM>
 provides information about an individual SDS. To retrieve information about all data sets in a file, a calling program can use <EM CLASS="FunctionName">
SDfileinfo</EM>
 to determine the number of data sets, followed by repeated calls to <EM CLASS="FunctionName">
SDgetinfo</EM>
 to obtain the information about a particular data set.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141211"></A><EM CLASS="FunctionName">
SDnametoindex, SDnametoindices,</EM>
 or <EM CLASS="FunctionName">
SDreftoindex</EM>
 can be used to obtain the index of an SDS in a file knowing its name or reference number. Refer to <EM CLASS="Body">
<A HREF="UG_html-3.htm#50593873_10424" CLASS="XRef">Required SDS Components</A></EM>
 for a description of the data set index and reference number. <EM CLASS="FunctionName">
SDidtoref</EM>
 is used when the reference number of an SDS is required by another routine and the SDS identifier is available.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141293"></A>These routines are described individually in the following subsections.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-17641"></A>	3.7.1	<A NAME="50593873_marker-26942"></A><A NAME="50593873_29038"></A>Obtaining Information about the Contents of a File: SDfileinfo</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-141297"></A><EM CLASS="FunctionName">
SDfileinfo </EM>
<A NAME="50593873_marker-141296"></A>determines the number of scientific data sets and the number of file attributes contained in a file. This information is often useful in index validation or sequential searches. The syntax of <EM CLASS="FunctionName">
SDfileinfo</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-141298"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDfileinfo(sd_id, &amp;n_datasets, &amp;n_file_attrs);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-141300"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sffinfo(sd_id, n_datasets, n_file_attrs)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141301"></A><EM CLASS="FunctionName">
SDfileinfo</EM>
 stores the numbers of scientific data sets and file attributes in the parameters <EM CLASS="VarName">
n_datasets</EM>
 and <EM CLASS="VarName">
n_file_attrs</EM>
, respectively. Note that the value returned by <EM CLASS="VarName">
n_datasets</EM>
 will include the number of SDS arrays and the number of dimension scales. Refer to <A HREF="UG_html-3.htm#50593873_17621" CLASS="XRef">Dimension Scales</A> and <A HREF="UG_html-3.htm#50593873_25183" CLASS="XRef">Distinguishing SDS Arrays from Dimension Scales: SDiscoordvar</A> for the description of dimension scales and its association with SDS arrays as well as how to distinguish between SDS arrays and dimension scales. The file attributes are those that are created by <EM CLASS="FunctionName">
SDsetattr</EM>
 for an SD interface identifier instead of an SDS identifier. Refer to <A HREF="UG_html-3.htm#50593873_36061" CLASS="XRef">Creating or Writing User-defined Attributes: SDsetattr</A> for the discussion of <EM CLASS="FunctionName">
SDsetattr</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-50135"></A><EM CLASS="FunctionName">
SDfileinfo</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDfileinfo</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_21669" CLASS="XRef">SDfileinfo, SDgetinfo, and SDgetcompinfo Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-17650"></A>	3.7.2	<A NAME="50593873_marker-26943"></A><A NAME="50593873_18053"></A>Obtaining Information about a Specific SDS: SDgetinfo</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-141601"></A><EM CLASS="FunctionName">
SDgetinfo </EM>
<A NAME="50593873_marker-141600"></A>provides basic information about an SDS array. Often information about an SDS array is needed before reading and working with the array. For instance, the rank, dimension sizes, and/or data type of an array are needed to allocate the proper amount of memory to work with the array. <EM CLASS="FunctionName">
SDgetinfo</EM>
 takes an SDS identifier as input, and retrieves the name, rank, dimension sizes, data type, and number of attributes for the corresponding SDS. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-141602"></A><EM CLASS="syntaxLang">
C:</EM>
			status = SDgetinfo(sds_id, sds_name, &amp;rank, dim_sizes, &amp;data_type, &amp;n_attrs);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-141518"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfginfo(sds_id, sds_name, rank, dim_sizes, data_type, n_attrs)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141616"></A><EM CLASS="FunctionName">
SDgetinfo</EM>
 stores the name, rank, dimension sizes, data type, and number of attributes of the specified data set into the parameters <EM CLASS="VarName">
sds_name</EM>
, <EM CLASS="VarName">
rank</EM>
, <EM CLASS="VarName">
dim_sizes</EM>
, <EM CLASS="VarName">
data_type</EM>
, and <EM CLASS="VarName">
n_attrs</EM>
, respectively. The parameter <EM CLASS="VarName">
sds_name</EM>
 is a character string. Note that, starting in HDF 4.2.2, the name of the SDS is no longer limited to <EM CLASS="DefName">
64</EM>
 characters.  Thus, it is recommended that the application use <EM CLASS="FunctionName">
SDgetnamlen</EM>
 to obtain the length of the data setâ€™s name so that it can sufficiently allocate space for the name prior to calling <EM CLASS="FunctionName">
SDgetinfo</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141632"></A>If the data set is created with an unlimited dimension, then in the C interface, the first element of the <EM CLASS="VarName">
dim_sizes</EM>
 array (corresponding to the slowest-changing dimension) contains the number of records in the unlimited dimension; in the FORTRAN-77 interface, the last element of the array <EM CLASS="VarName">
dim_sizes</EM>
 (corresponding to the slowest-changing dimension) contains this information.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141641"></A>The parameter <EM CLASS="VarName">
data_type</EM>
 contains any type that HDF supports for the scientific data. Refer to <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A>, for the list of supported data types and their corresponding defined values. The parameter <EM CLASS="VarName">
n_attrs</EM>
 only reflects the number of attributes assigned to the data set specified by <EM CLASS="VarName">
sds_id</EM>
; file attributes are not included. Use <EM CLASS="FunctionName">
SDfileinfo</EM>
 to get the number of file attributes.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-50131"></A><EM CLASS="FunctionName">
SDgetinfo</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDgetinfo</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_21669" CLASS="XRef">SDfileinfo, SDgetinfo, and SDgetcompinfo Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-250109"></A>	3.7.3	<A NAME="50593873_24971"></A>Obtaining Data Set Compression Information: SDgetcompinfo</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-250113"></A><EM CLASS="FunctionName">
SDgetcompinfo </EM>
retrieves the compression information used to create or write an SDS data set.  <EM CLASS="FunctionName">
SDgetcompinfo</EM>
 replaces <EM CLASS="FunctionName">
SDgetcompress</EM>
 because this function has flaws, causing failure for some chunked and chunked/compressed data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250145"></A>The possible compression algorithms used in SDS include:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-250146"></A>Adaptive Huffman</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-250147"></A>GZIP &quot;deflation&quot; (Lempel/Ziv-77 dictionary coder)</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-250148"></A>Run-length encoding</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-312254"></A>NBIT</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-250535"></A>Szip</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-256843"></A><EM CLASS="FunctionName">
SDgetcompinfo</EM>
 takes one input parameter, <EM CLASS="VarName">
sds_id</EM>
, a data set identifier, and two return parameters, <EM CLASS="VarName">
comp_type</EM>
, identifying the type of compression used, and either <EM CLASS="VarName">
c_info</EM>
 (in C) or <EM CLASS="VarName">
comp_prm</EM>
 (in FORTRAN-77), containing further compression information.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250150"></A>The syntax of <EM CLASS="FunctionName">
SDgetcompinfo</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-250151"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetcompinfo(sds_id, comp_type, c_info);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-250152"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgcompress(sds_id, comp_type, comp_prm)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271585"></A>See <A HREF="UG_html-3.htm#50593873_22986" CLASS="XRef">Compressing SDS Data: SDsetcompress</A> for a discussion of <EM CLASS="VarName">
comp_type</EM>
, <EM CLASS="VarName">
c_info</EM>
, ane <EM CLASS="VarName">
comp_prm</EM>
, and a list of supported compression modes.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271603"></A>The parameter <EM CLASS="VarName">
comp_type</EM>
 specifies the compression type definition and is set to</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-271604"></A><EM CLASS="DefName">
COMP_CODE_NONE</EM>
 (or 0) for no compression</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-312263"></A><EM CLASS="DefName">
COMP_CODE_RLE</EM>
 (or 1) for run-length encoding (RLE) </P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-312264"></A><EM CLASS="DefName">
COMP_CODE_NBIT</EM>
 (or 2) for NBIT compression</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-312268"></A><EM CLASS="DefName">
COMP_CODE_SKPHUFF</EM>
 (or 3) for Skipping Huffman </P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-312265"></A><EM CLASS="DefName">
COMP_CODE_DEFLATE</EM>
 (or 4) for GZIP compression </P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-271608"></A><EM CLASS="DefName">
COMP_CODE_SZIP</EM>
 (or 5) for Szip compression</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271609"></A>Compression information is returned by the parameter <EM CLASS="VarName">
c_info</EM>
 in C, and by the parameter <EM CLASS="VarName">
comp_prm</EM>
 in FORTRAN-77. The parameter <EM CLASS="VarName">
c_info</EM>
 is a pointer to a union structure of type <EM CLASS="VarName">
comp_info.  </EM>
Refer to the <EM CLASS="FunctionName">
SDsetcompress</EM>
 entry in the HDF Reference Manual for the description of the <EM CLASS="VarName">
comp_info</EM>
 structure.)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-271610"></A>When <EM CLASS="VarName">
comp_type</EM>
 is <EM CLASS="DefName">
COMP_CODE_NONE</EM>
 or <EM CLASS="DefName">
COMP_CODE_RLE</EM>
, the parameters <EM CLASS="VarName">
c_info</EM>
 and <EM CLASS="VarName">
comp_prm</EM>
 are unchanged.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296773"></A>When <EM CLASS="VarName">
comp_type</EM>
 is <EM CLASS="DefName">
COMP_CODE_SKPHUFF</EM>
, then the structure <EM CLASS="VarName">
skphuff</EM>
 in the union <EM CLASS="VarName">
comp_info</EM>
 in C (<EM CLASS="VarName">
comp_prm(1)</EM>
 in FORTRAN-77) will store the size, in bytes, of the data elements.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296774"></A>When <EM CLASS="VarName">
comp_type</EM>
 is <EM CLASS="DefName">
COMP_CODE_DEFLATE</EM>
, then the deflate structure in the union <EM CLASS="VarName">
comp_info</EM>
 in C (<EM CLASS="VarName">
comp_prm(1)</EM>
 in FORTRAN-77) will store the information about the compression effort.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296743"></A>When <EM CLASS="VarName">
comp_type</EM>
 is <EM CLASS="DefName">
COMP_CODE_SZIP</EM>
, then the Szip options mask and the number of pixels per block in a chunked and Szip-compressed dataset will be specified in <EM CLASS="Code">
c_info.szip.options_mask</EM>
 and <EM CLASS="Code">
c_info.szip.pixels_per_block</EM>
 in C, and <EM CLASS="VarName">
comp_prm(1)</EM>
 and <EM CLASS="VarName">
comp_prm(2)</EM>
 in Fortran, respectively.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296747"></A><EM CLASS="FunctionName">
SDgetcompinfo</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDgetcompinfo</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_21669" CLASS="XRef">Table 3L</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-297931"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_21669"></A>S<A NAME="50593873_marker-297770"></A>Dfileinfo,  <A NAME="50593873_marker-297771"></A>SDgetinfo, and SDgetcompinfo Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-297774"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-297775"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-297776"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-297778"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-297780"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-297784"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-297790"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-297792"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-297796"></A>SDfileinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-297797"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-297798"></A>(sffinfo)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297800"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297802"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297804"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297806"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297810"></A>n_datasets</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297812"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297814"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297816"></A>Number of data sets in the file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297820"></A>n_file_attrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297822"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297824"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297826"></A>Number of global attributes in the file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-297828"></A>SDgetinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-297829"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-297830"></A>(sfginfo)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297832"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297834"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297836"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297838"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297842"></A>sds_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297844"></A>char*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297846"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297848"></A>Name of the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297852"></A>rank</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297854"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297856"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297858"></A>Number of dimensions in the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297862"></A>dim_sizes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297864"></A>int32 []</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297866"></A>integer (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297868"></A>Size of each dimension in the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297872"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297874"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297876"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297878"></A>Data type of the data in the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297882"></A>n_attrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297884"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297886"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297888"></A>Number of attributes in the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-297890"></A>SDgetcompinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-297891"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-297892"></A>(sfgcompress)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297894"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297896"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297898"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297900"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297904"></A>comp_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297906"></A>comp_coder_t</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297908"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297910"></A>Type of compression</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297914"></A>c_info</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297916"></A>comp_info</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297918"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297920"></A>Pointer to compression information structure</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297924"></A>comp_prm(1)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297926"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-297928"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-297930"></A>Compression parameter in array format</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-297933"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Getting Information about a File and an SDSs.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-169007"></A>This example illustrates the use of the routine <EM CLASS="FunctionName">
SDfileinfo/sffinfo</EM>
 to obtain the number of data sets in the file SDS.hdf and the routine <EM CLASS="FunctionName">
SDgetinfo/sfginfo</EM>
 to retrieve the name, rank, dimension sizes, data type and number of attributes of the selected data set.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-218080"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218083"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218084"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218085"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218086"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218087"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218088"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218089"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218090"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218091"></A>   int32 sd_id, sds_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218092"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218093"></A>   int32 n_datasets, n_file_attrs, index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218094"></A>   int32 dim_sizes[MAX_VAR_DIMS];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218095"></A>   int32 rank, data_type, n_attrs;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218096"></A>   char  name[MAX_NC_NAME];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218097"></A>   int   i;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218098"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218099"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218100"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218101"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218102"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218103"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218104"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218105"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218106"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218107"></A>   * Determine the number of data sets in the file and the number</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218108"></A>   * of file attributes. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218109"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218110"></A>   status = SDfileinfo (sd_id, &amp;n_datasets, &amp;n_file_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218111"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218112"></A>   /*  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218113"></A>   * Access every data set and print its name, rank, dimension sizes,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218114"></A>   * data type, and number of attributes. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218115"></A>   * The following information should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218116"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218117"></A>   *               name = SDStemplate</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218118"></A>   *               rank = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218119"></A>   *               dimension sizes are : 16  5  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218120"></A>   *               data type is  24</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218121"></A>   *               number of attributes is  0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218122"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218123"></A>   for (index = 0; index &lt; n_datasets; index++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218124"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218125"></A>       sds_id = SDselect (sd_id, index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218126"></A>       status = SDgetinfo (sds_id, name, &amp;rank, dim_sizes, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218127"></A>                           &amp;data_type, &amp;n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218128"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218129"></A>       printf (&quot;name = %s\n&quot;, name);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218130"></A>       printf (&quot;rank = %d\n&quot;, rank);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218131"></A>       printf (&quot;dimension sizes are : &quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218132"></A>       for (i=0; i&lt; rank; i++) printf (&quot;%d  &quot;, dim_sizes[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218133"></A>       printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218134"></A>       printf (&quot;data type is  %d\n&quot;, data_type);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218135"></A>       printf (&quot;number of attributes is  %d\n&quot;, n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218136"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218137"></A>       /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218138"></A>       * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218139"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218140"></A>       status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218141"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218142"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218143"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218144"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218145"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218146"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218147"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218148"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197197"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-218155"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218158"></A>      program get_data_set_info </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218159"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218160"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218161"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218162"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218163"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218164"></A>      parameter   (FILE_NAME = â€™SDS.hdfâ€™)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218165"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218166"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218167"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218168"></A>      integer      MAX_NC_NAME, MAX_VAR_DIMS</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218169"></A>      parameter   (MAX_NC_NAME  = 256,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218170"></A>     +             MAX_VAR_DIMS = 32)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218171"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218172"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218173"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218174"></A>      integer sfstart, sffinfo, sfselect, sfginfo</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218175"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218176"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218177"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218178"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218179"></A>      integer sd_id, sds_id</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218180"></A>      integer n_datasets, n_file_attrs, index</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218181"></A>      integer status, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218182"></A>      integer rank, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218183"></A>      integer dim_sizes(MAX_VAR_DIMS)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218184"></A>      character name *(MAX_NC_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218185"></A>      integer i</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218186"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218187"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218188"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218189"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218190"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218191"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218192"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218193"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218194"></A>C     Determine the number of data sets in the file and the number of </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218195"></A>C     file attributes. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218196"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218197"></A>      status = sffinfo(sd_id, n_datasets, n_file_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218198"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218199"></A>C     Access every data set in the file and print its name, rank,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218200"></A>C     dimension sizes, data type, and number of attributes.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218201"></A>C     The following information should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218202"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218203"></A>C                name = SDStemplate    </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218204"></A>C                rank =   2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218205"></A>C                dimension sizes are :   5  16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218206"></A>C                data type is   24</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218207"></A>C                number of attributes is   0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218208"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218209"></A>      do 10 index = 0, n_datasets - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218210"></A>         sds_id = sfselect(sd_id, index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218211"></A>         status = sfginfo(sds_id, name, rank, dim_sizes, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218212"></A>     .                    n_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218213"></A>         write(*,*)  &quot;name = &quot;, name(1:15)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218214"></A>         write(*,*)  &quot;rank = &quot;, rank</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218215"></A>         write(*,*)  &quot;dimension sizes are : &quot;, (dim_sizes(i), i=1, rank)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218216"></A>         write(*,*)  &quot;data type is &quot;, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218217"></A>         write(*,*)  &quot;number of attributes is &quot;, n_attrs   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218218"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218219"></A>C     Terminate access to the current data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218220"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218221"></A>         status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218222"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218223"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218224"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218225"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218226"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218227"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218228"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197275"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-40269"></A>	3.7.4	<A NAME="50593873_39206"></A>Locating an SDS by Name: SDnametoindex</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-17932"></A><A NAME="50593873_marker-141560"></A><EM CLASS="FunctionName">
SDnametoindex</EM>
 determines and returns the index of a data set in a file given the data setâ€™s name. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-17937"></A><EM CLASS="syntaxLang">
C:</EM>
		sds_index = SDnametoindex(sd_id, sds_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-17941"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sds_index = sfn2index(sd_id, sds_name)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-312418"></A>The parameter <EM CLASS="VarName">
sds_name</EM>
 is a character string.  Note that, starting in HDF 4.2.2, the name of the SDS is no longer limited to <EM CLASS="DefName">
64</EM>
 characters, which was the limit prior to 4.2.2.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-312425"></A>If more than one data set has the name specified by <EM CLASS="VarName">
sds_name</EM>
, <EM CLASS="FunctionName">
SDnametoindex</EM>
 will return the index of the first data set, which could be an SDS or a coordinate variable (also called dimension scale.)  Note that if there are more than one data set with the same name in the file, writing to a data set returned by this function without verifying that it is the desired data set could cause data corruption.  Refer to the <EM CLASS="Citation">
<A HREF="UG_html-3.htm#50593873_Same name" CLASS="XRef">Important Note:</A></EM>
 for more details regarding the problem and how to handle it.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301749"></A><EM CLASS="FunctionName">
SDgetnumvars_byname</EM>
 can be used to get the number of data sets (or variables, which includes both data sets and coordinate variables) with the same name.  <EM CLASS="FunctionName">
SDnametoindices</EM>
 can be used to get a list of structures containing the indices and the types of all the variables of that same name.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296798"></A>An index obtained by <EM CLASS="FunctionName">
SDnametoindex</EM>
 or <EM CLASS="FunctionName">
SDnametoindices</EM>
 can then be used by <EM CLASS="FunctionName">
SDselect</EM>
<A NAME="50593873_marker-156244"></A> to obtain an SDS identifier for the specified data set.  The <EM CLASS="FunctionName">
SDnametoindex</EM>
 routine is case-sensitive to the name specified by <EM CLASS="VarName">
sds_name</EM>
 and does not accept wildcards as part of that name. The name must exactly match the name of the SDS being searched for.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-297945"></A><EM CLASS="FunctionName">
SDnametoindex</EM>
 returns the index of a data set or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDnametoindex</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_15332" CLASS="XRef">SDnametoindex, SDnametoindices, and SDgetnumvars_byname Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-297949"></A>	3.7.5	<A NAME="50593873_57014"></A>Locating More Than One SDS by the Same Name: SDnametoindices</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-296891"></A><A NAME="50593873_marker-296890"></A><EM CLASS="FunctionName">
SDnametoindices</EM>
 returns indices of all data sets having the same name.  The data sets can be either SDSs or coordinate variables. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-296831"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDnametoindices(sd_id, sds_name, var_list);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-296832"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfn2indices(sd_id, sds_name, var_list, type_list, n_vars)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-312429"></A>The parameter <EM CLASS="VarName">
sds_name</EM>
 is a character string.  Note that, starting in HDF 4.2.2, the name of the SDS is no longer limited to <EM CLASS="DefName">
64</EM>
 characters, which was the limit prior to 4.2.2.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296933"></A><EM CLASS="FunctionName">
SDnametoindices</EM>
 retrieves a list of structures <EM CLASS="Code">
varlist_t</EM>
, containing the indices and the types of all variables of the same name <EM CLASS="VarName">
sds_name</EM>
.  The structure <EM CLASS="Code">
varlist_t</EM>
 is defined as:</P>
<UL>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-296906"></A><EM CLASS="Code">
typedef struct varlist</EM>
</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-296907"></A><EM CLASS="Code">
{</EM>
</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-296908"></A><EM CLASS="Code">
    int32 var_index;    /* index of a variable */</EM>
</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-296909"></A><EM CLASS="Code">
    vartype_t var_type; /* type of a variable */</EM>
</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-296910"></A><EM CLASS="Code">
} varlist_t;</EM>
</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-296912"></A>The type of a variable <EM CLASS="Code">
vartype_t</EM>
  is defined as:</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-296914"></A><EM CLASS="Code">
IS_SDSVAR=0 : variable is an actual SDS</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-296915"></A><EM CLASS="Code">
IS_CRDVAR=1 : variable is a coordinate variable</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-296916"></A><EM CLASS="Code">
UNKNOWN=2 : variable is created before HDF 4.2.2, unknown type</EM>
</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296834"></A>Prior to calling <EM CLASS="FunctionName">
SDnametoindices</EM>
, <EM CLASS="FunctionName">
SDgetnumvars_byname</EM>
 can be used to get the number of data sets, with which the application can allocate <EM CLASS="VarName">
var_list</EM>
 appropriately.  Also, when the number of data sets returned is 1, the application can call <EM CLASS="FunctionName">
SDnametoindex</EM>
 instead of <EM CLASS="FunctionName">
SDnametoindices</EM>
 for simplicity.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-297015"></A>An index obtained by <EM CLASS="FunctionName">
SDnametoindex</EM>
 or <EM CLASS="FunctionName">
SDnametoindices</EM>
 can then be used by <EM CLASS="FunctionName">
SDselect</EM>
<A NAME="50593873_marker-297014"></A> to obtain an SDS identifier for the specified data set.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-297016"></A>The <EM CLASS="FunctionName">
SDnametoindices</EM>
 routine is case-sensitive to the name specified by <EM CLASS="VarName">
sds_name</EM>
 and does not accept wildcards as part of that name. The name must match exactly the name of the SDS being searched for.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296838"></A><EM CLASS="FunctionName">
SDnametoindices</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDnametoindices</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_15332" CLASS="XRef">SDnametoindex, SDnametoindices, and SDgetnumvars_byname Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-296853"></A>	3.7.6	<A NAME="50593873_98959"></A>Getting Number of Data Sets Given a Name: SDgetnumvars_byname</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-296855"></A><A NAME="50593873_marker-296854"></A><EM CLASS="FunctionName">
SDgetnumvars_byname</EM>
 determines and returns the number of variables in a file having the same  name.  The variables may include both data sets and coordinate variables.  The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-296856"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetnumvars_byname(sd_id, sds_name, n_vars);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-296857"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgnvars_byname(sd_id, sds_name, n_vars);</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-312435"></A>The parameter <EM CLASS="VarName">
sds_name</EM>
 is a character string.  Note that, starting in HDF 4.2.2, the name of the SDS is no longer limited to <EM CLASS="DefName">
64</EM>
 characters, which was the limit prior to 4.2.2.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-296863"></A><EM CLASS="FunctionName">
SDgetnumvars_byname</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDgetnumvars_byname</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_15332" CLASS="XRef">SDnametoindex, SDnametoindices, and SDgetnumvars_byname Parameter Lists</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-297717"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_15332"></A>S<A NAME="50593873_marker-297623"></A>Dnametoindex, S<A NAME="50593873_marker-297624"></A>Dnametoindices, and SDgetnumvars_byname Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298074"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298075"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298076"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298078"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298080"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298084"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298090"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298092"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298096"></A>SDnametoindex</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298097"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298098"></A>(sfn2index)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298100"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298102"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298104"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298106"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298110"></A>sds_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298112"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298114"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298116"></A>Name of the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298118"></A>SDnametoindices</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298119"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298120"></A>(sfn2indices</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298122"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298124"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298126"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298128"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298132"></A>sds_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298134"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298136"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298138"></A>Name of the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298142"></A>var_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298144"></A>varlist_t *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298146"></A>integer*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298148"></A>List of variables having name sds_name; Fortran: list of ?</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301502"></A>type_list</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301509"></A>(only Fortran)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301504"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301506"></A>integer*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-301508"></A>Fortran: list of types of variables</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301492"></A>n_vars</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301516"></A>(only Fortran)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301494"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-301496"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-301498"></A>Fortran: number of variables found</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298150"></A>SDgetnumvars_byname</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298151"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298152"></A>(sfgnvars_byname)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298154"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298156"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298158"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298160"></A>SDS identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298182"></A>sds_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298184"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298186"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298188"></A>Name of the data set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298164"></A>n_vars</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298166"></A>unsigned*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298168"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298170"></A>Number of variables having name sds_name</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-297617"></A>	3.7.7	<A NAME="50593873_11606"></A>Locating an SDS by Reference Number: SDreftoindex</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-17948"></A><EM CLASS="FunctionName">
SDreftoindex</EM>
<A NAME="50593873_marker-26950"></A><A NAME="50593873_marker-187524"></A> determines and returns the index of a data set in a file given the data setâ€™s reference number. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-17953"></A><EM CLASS="syntaxLang">
C:</EM>
		sds_index = SDreftoindex(sd_id, ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-301551"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sds_index = sfref2index(sd_id, ref)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301553"></A>The reference number can be obtained using <EM CLASS="FunctionName">
SDidtoref</EM>
 if the SDS identifier is available. Remember that reference numbers do not necessarily adhere to any ordering scheme.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141736"></A><EM CLASS="FunctionName">
SDreftoindex</EM>
 returns either the index of an SDS or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are specified in <A HREF="UG_html-3.htm#50593873_29608" CLASS="XRef">SDreftoindex, SDidtoref, SDidtype, and SDcheckempty Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-141728"></A>	3.7.8	<A NAME="50593873_41630"></A>Obtaining the Reference Number Assigned to the Specified SDS: SDidtoref</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-187554"></A><EM CLASS="FunctionName">
SDidtoref</EM>
<A NAME="50593873_marker-187553"></A> returns the reference number of the data set identified by the parameter <EM CLASS="VarName">
sds_id</EM>
 if the data set is found, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-187555"></A><EM CLASS="syntaxLang">
C:</EM>
		sds_ref = SDidtoref(sds_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-41499"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	sds_ref = sfid2ref(sds_id)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-41607"></A>This reference number is often used by <EM CLASS="FunctionName">
Vaddtagref</EM>
 to add the data set to a vgroup. Refer to  <EM CLASS="Chapter-Reference">
<A HREF="UG_html-5.htm#50593875_34180" CLASS="XRef">Vgroups (V API)</A></EM>
, for more information.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-187563"></A>The parameter of <EM CLASS="FunctionName">
SDidtoref </EM>
is specified in <A HREF="UG_html-3.htm#50593873_29608" CLASS="XRef">SDreftoindex, SDidtoref, SDidtype, and SDcheckempty Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-255009"></A>	3.7.9	<A NAME="50593873_47562"></A>Obtaining the Type of an HDF4 Object: SDidtype</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-255011"></A><EM CLASS="FunctionName">
SDidtype</EM>
<A NAME="50593873_marker-255010"></A> returns the type of an object, given the objectâ€™s identifier, <EM CLASS="VarName">
obj_id</EM>
. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-301316"></A><EM CLASS="syntaxLang">
C:</EM>
		obj_type = SDidtype(obj_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-301317"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	obj_type = sfidtype(obj_id, obj_type)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301335"></A><EM CLASS="FunctionName">
SDidtype</EM>
 returns a value of type <EM CLASS="VarName">
hdf_idtype_t</EM>
, which can be one of the following:</P>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301320"></A><EM CLASS="DefName">
NOT_SDAPI_ID</EM>
 (or <EM CLASS="Code">
-1</EM>
)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301322"></A>not an SD API identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301324"></A><EM CLASS="DefName">
SD_ID</EM>
  (or <EM CLASS="Code">
0</EM>
)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301326"></A>SD identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301328"></A><EM CLASS="DefName">
SDS_ID</EM>
 (or <EM CLASS="Code">
1</EM>
)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301330"></A>SDS identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301332"></A><EM CLASS="DefName">
DIM_ID</EM>
 (or <EM CLASS="Code">
2</EM>
)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-301334"></A>Dimension identifier</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-255025"></A><EM CLASS="FunctionName">
SDidtype</EM>
 returns <EM CLASS="DefName">
NOT_SDAPI_ID</EM>
 for either when <EM CLASS="VarName">
obj_id</EM>
 is not a valid HDF identifier, or is a valid HDF identifier, but not one of the identifier types in the SD interface, which are SD identifier, SDS identifier, and dimension identifier.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-254799"></A>The parameter of <EM CLASS="FunctionName">
SDidtype </EM>
is specified in <A HREF="UG_html-3.htm#50593873_29608" CLASS="XRef">Table 3N</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-297493"></A>	3.7.10	<A NAME="50593873_39481"></A>Determining whether an SDS is empty: SDcheckempty</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-297494"></A><EM CLASS="FunctionName">
SDcheckempty</EM>
 takes an SDS identifier, <EM CLASS="VarName">
sds_id</EM>
,  as input, and returns a single parameter indicating whether the SDS is empty. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-297495"></A><EM CLASS="syntaxLang">
C:</EM>
			status = SDcheckempty(sds_id, emptySDS);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-297496"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfchempty(sds_id, emptySDS)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-297497"></A>The output parameter, <EM CLASS="VarName">
emptySDS</EM>
, indicates whether the SDS is empty or non-empty.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-298208"></A><EM CLASS="FunctionName">
SDcheckempty</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDcheckempty</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_29608" CLASS="XRef">Table 3N</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-298272"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
SDreftoindex, SDidtoref, <A NAME="50593873_marker-298279"></A>SDidtype, and <A NAME="50593873_29608"></A>S<A NAME="50593873_marker-298213"></A>Dcheckempty Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298217"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298218"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298219"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298221"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298223"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298227"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298233"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-298235"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298316"></A>SDreftoindex</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298317"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298318"></A>(sfref2index)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298320"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298322"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298324"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298326"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298330"></A>sds_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298332"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298334"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298336"></A>SDS reference number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298384"></A>SDidtoref</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298385"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298386"></A>(sfid2ref)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298388"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298390"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298392"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298394"></A>SDS identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298239"></A>SDidtype</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298240"></A>[hdf_idtype_t]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298241"></A>(sfidtype)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298243"></A>obj_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298245"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298247"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298249"></A>An object identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298251"></A>SDcheckempty</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-298252"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-298253"></A>(sfchempty)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298255"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298257"></A>int32 </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298259"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298261"></A>SDS identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298265"></A>emptySDS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298267"></A>intn *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-298269"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-298271"></A>SDS status indicator (empty, not empty)</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-18032"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Locating an SDS by Its Name.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-169098"></A>This example uses the routine <EM CLASS="FunctionName">
SDnametoindex/sfn2index</EM>
 to locate the SDS with the specified name and then reads the data from it.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-218235"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218238"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218239"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218240"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218241"></A>#define SDS_NAME      &quot;SDStemplate&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218242"></A>#define WRONG_NAME    &quot;WrongName&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218243"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218244"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218245"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218246"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218247"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218248"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218249"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218250"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218251"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218252"></A>   int32 start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218253"></A>   int32 data[Y_LENGTH][X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218254"></A>   int   i, j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218255"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218256"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218257"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218258"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218259"></A>   * Open the file for reading and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218260"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218261"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218262"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218263"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218264"></A>   * Find index of the data set with the name specified in WRONG_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218265"></A>   * Error condition occurs, since the data set with that name does not exist </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218266"></A>   * in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218267"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218268"></A>   sds_index = SDnametoindex (sd_id, WRONG_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218269"></A>   if (sds_index == FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218270"></A>   printf (&quot;Data set with the name \&quot;WrongName\&quot; does not exist\n&quot;); </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218271"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218272"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218273"></A>   * Find index of the data set with the name specified in SDS_NAME and use </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218274"></A>   * the index to select the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218275"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218276"></A>   sds_index = SDnametoindex (sd_id, SDS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218277"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218278"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218279"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218280"></A>   * Set elements of the array start to 0, elements of the array edges to </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218281"></A>   * SDS dimensions, and use NULL for stride argument in SDreaddata to read</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218282"></A>   * the entire data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218283"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218284"></A>   start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218285"></A>   start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218286"></A>   edges[0] = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218287"></A>   edges[1] = X_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218288"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218289"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218290"></A>   * Read the entire data into the buffer named data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218291"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218292"></A>   status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218293"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218294"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218295"></A>   * Print 10th row; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218296"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218297"></A>   *             10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218298"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218299"></A>   for (j = 0; j &lt; X_LENGTH; j++) printf (&quot;%d &quot;, data[9][j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218300"></A>   printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218301"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218302"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218303"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218304"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218305"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218306"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218307"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218308"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218309"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218310"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218311"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197356"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-218318"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218321"></A>      program  locate_by_name</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218322"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218323"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218324"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218325"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218326"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218327"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218328"></A>      character*9  WRONG_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218329"></A>      integer      X_LENGTH, Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218330"></A>      parameter   (FILE_NAME  = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218331"></A>     +             SDS_NAME   = â€™SDStemplateâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218332"></A>     +             WRONG_NAME = â€™WrongNameâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218333"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218334"></A>     +             Y_LENGTH = 16)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218335"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218336"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218337"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218338"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218339"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218340"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218341"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218342"></A>      integer sfstart, sfn2index, sfselect, sfrdata, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218343"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218344"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218345"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218346"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218347"></A>      integer start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218348"></A>      integer data(X_LENGTH, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218349"></A>      integer j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218350"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218351"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218352"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218353"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218354"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218355"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218356"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218357"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218358"></A>C     Find index of the data set with the name specified in WRONG_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218359"></A>C     Error condition occurs, since a data set with this name </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218360"></A>C     does not exist in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218361"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218362"></A>      sds_index = sfn2index(sd_id, WRONG_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218363"></A>      if (sds_index .eq. -1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218364"></A>        write(*,*) &quot;Data set with the name &quot;, WRONG_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218365"></A>     +             &quot; does not exist&quot;        </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218366"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218367"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218368"></A>C     Find index of the data set with the name specified in SDS_NAME  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218369"></A>C     and use the index to attach to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218370"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218371"></A>      sds_index = sfn2index(sd_id, SDS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218372"></A>      sds_id    = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218373"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218374"></A>C     Set elements of start array to 0, elements of edges array </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218375"></A>C     to SDS dimensions, and elements of stride array to 1 to read entire data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218376"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218377"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218378"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218379"></A>      edges(1) = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218380"></A>      edges(2) = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218381"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218382"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218383"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218384"></A>C     Read entire data into array named data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218385"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218386"></A>      status = sfrdata(sds_id, start, stride, edges, data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218387"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218388"></A>C     Print 10th column; the following numbers should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218389"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218390"></A>C           10 1000 12 13 14</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218391"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218392"></A>      write(*,*) (data(j,10), j = 1, X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218393"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218394"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218395"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218396"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218397"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218398"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218399"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218400"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218401"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218402"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197445"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-312148"></A>	3.7.11	<A NAME="50593873_36561"></A>C<A NAME="50593873_marker-312147"></A>reating SDS Arrays Containing Non-standard Length Data: SDsetnbitdataset</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-312150"></A>Starting with version 4.0r1, HDF provides the routine <EM CLASS="FunctionName">
SDsetnbitdataset</EM>
, <A NAME="50593873_marker-312149"></A>allowing the HDF user to specify that a particular SDS array contains data of a non-standard length. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141911"></A><EM CLASS="FunctionName">
SDsetnbitdataset</EM>
 specifies that the data set identified by the parameter <EM CLASS="VarName">
sds_id</EM>
 will contain data of a non-standard length defined by the parameters <EM CLASS="VarName">
start_bit</EM>
 and <EM CLASS="VarName">
bit_len</EM>
.  Additional information about the non-standard bit length decoding are specified in the parameters <EM CLASS="VarName">
sign_ext</EM>
 and <EM CLASS="VarName">
fill_one</EM>
. The syntax of <EM CLASS="FunctionName">
SDsetnbitdataset</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-25802"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetnbitdataset(sds_id, start_bit, bit_len, sign_ext, fill_one);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-25804"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsnbit(sds_id, start_bit, bit_len, sign_ext, fill_one)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141921"></A>Any length between 1 and 32 bits can be specified. After <EM CLASS="FunctionName">
SDsetnbitdataset</EM>
 has been called for an SDS array, any read or write operations will convert between the new data length of the SDS array and the data length of the read or write buffer.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-25826"></A>Bit lengths of all data types are counted from the right of the bit field starting with 0. In a bit field containing the values <EM CLASS="DefName">
01111011</EM>
, bits 2 and 7 are set to <EM CLASS="DefName">
0</EM>
 and all the other bits are set to <EM CLASS="DefName">
1</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141882"></A>The parameter <EM CLASS="VarName">
start_bit</EM>
 specifies the left-most position of the variable-length bit field to be written. For example, in the bit field described in the preceding paragraph a parameter <EM CLASS="VarName">
start_bit</EM>
 set to <EM CLASS="DefName">
4</EM>
 would correspond to the fourth bit value of <EM CLASS="DefName">
1</EM>
 from the right.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141866"></A>The parameter <EM CLASS="VarName">
bit_len</EM>
 specifies the number of bits of the variable-length bit field to be written. This number includes the starting bit and the count proceeds toward the right end of the bit field - toward the lower-bit numbers. For example, starting at bit 5 and writing 4 bits of the bit field described in the preceding paragraph would result in the bit field <EM CLASS="DefName">
1110</EM>
 being written to the data set. This would correspond to a <EM CLASS="VarName">
start_bit</EM>
 value of <EM CLASS="DefName">
5</EM>
 and a <EM CLASS="VarName">
bit_len</EM>
 value of <EM CLASS="DefName">
4</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-25838"></A>The parameter <EM CLASS="VarName">
sign_ext</EM>
 specifies whether to use the left-most bit of the variable-length bit field to sign-extend to the left-most bit of the data set data. For example, if 9-bit signed integer data is extracted from bits 17-25 and the bit in position 25 is <EM CLASS="DefName">
1</EM>
, then when the data is read back from disk, bits 26-31 will be set to <EM CLASS="DefName">
1</EM>
. Otherwise bit 25 will be <EM CLASS="DefName">
0</EM>
 and bits 26-31 will be set to <EM CLASS="DefName">
0</EM>
. The <EM CLASS="VarName">
sign_ext</EM>
 parameter can be set to <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) or <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
); specify <EM CLASS="DefName">
TRUE</EM>
 to sign-extend.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-25848"></A>The parameter <EM CLASS="VarName">
fill_one</EM>
 specifies whether to fill the &quot;background&quot; bits with the value <EM CLASS="DefName">
1</EM>
 or <EM CLASS="DefName">
0</EM>
. This parameter is also set to either <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) or <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
).</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-163141"></A>The &quot;background&quot; bits of a non-standard length data set are the bits that fall outside of the non-standard length bit field stored on disk. For example, if five bits of an unsigned 16-bit integer data set located in bits 5 to 9 are written to disk with the parameter <EM CLASS="VarName">
fill_one</EM>
 set to <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
), then when the data is reread into memory bits 0 to 4 and 10 to 15 would be set to <EM CLASS="DefName">
1</EM>
. If the same 5-bit data was written with a <EM CLASS="VarName">
fill_one</EM>
 value of <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
), then bits 0 to 4 and 10 to 15 would be set to <EM CLASS="DefName">
0</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-163142"></A>The operation on <EM CLASS="VarName">
fill_one</EM>
 is performed before the operation on <EM CLASS="VarName">
sign_ext</EM>
. For example, using the <EM CLASS="VarName">
sign_ext</EM>
 example above, bits 0 to 16 and 26 to 31 will first be set to the background bit value, and then bits 26 to 31 will be set to <EM CLASS="DefName">
1</EM>
 or <EM CLASS="DefName">
0</EM>
 based on the value of the 25th bit.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-141955"></A><EM CLASS="FunctionName">
SDsetnbitdataset</EM>
 returns a positive value or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
SDsetnbitdataset</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_29359" CLASS="XRef">Table 3O</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-50163"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-26956"></A><A NAME="50593873_29359"></A>SDsetnbitdataset Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-26367"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132429"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-26368"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-26370"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-26372"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-26376"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-26382"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-26384"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-26388"></A>SDsetnbitdataset</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132430"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-26389"></A>(sfsnbit)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26391"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26393"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26395"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-26397"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26401"></A>start_bit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26403"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26405"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-26407"></A>Leftmost bit of the field to be written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26435"></A>bit_len</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26437"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26439"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-26441"></A>Length of the bit field to be written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26425"></A>sign_ext</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26427"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26429"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-26431"></A>Sign-extend specifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26458"></A>fill_one</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26460"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-26462"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-26464"></A>Background bit specifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-27799"></A>	3.8	SDS Dimension and Dimension Scale Operations<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-24655"></A>The concept of dimensions is introduced in <A HREF="UG_html-3.htm#50593873_10424" CLASS="XRef">Required SDS Components</A>. This section describes SD interface routines which store and retrieve information on dimensions and dimension scales. When a dimension scale is set for a dimension, the library stores the dimension and its associated information as an SDS array. In the following discussion, we will refer to that array (recall NetCDF) as a <EM CLASS="Definition">
coordinate variable</EM>
 or <EM CLASS="Definition">
dimension record</EM>
. The section concludes with consideration of related data sets and sharable dimensions.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-7061"></A>	3.8.1	<A NAME="50593873_32761"></A>S<A NAME="50593873_marker-26957"></A>electing a Dimension: SDgetdimid</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13096"></A>SDS dimensions are uniquely identified by <EM CLASS="Definition">
dimension identifiers</EM>
, which are assigned when a dimension is created. These dimension identifiers are used within a program to refer to a particular dimension, its scale, and its attributes. Before working with a dimension, a program must first obtain a dimension identifier by calling the <EM CLASS="FunctionName">
SDgetdimid</EM>
 routine as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13098"></A><EM CLASS="syntaxLang">
C:</EM>
		dim_id = SDgetdimid(sds_id, dim_index);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13108"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	dim_id = sfdimid(sds_id, dim_index)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13116"></A><EM CLASS="FunctionName">
SDgetdimid</EM>
<A NAME="50593873_marker-26958"></A> takes two arguments, <EM CLASS="VarName">
sds_id</EM>
 and <EM CLASS="VarName">
dim_index</EM>
, and returns a dimension identifier, <EM CLASS="VarName">
dim_id</EM>
. The argument <EM CLASS="VarName">
dim_index</EM>
 is an integer from 0 to the number of dimensions minus 1. The number of dimensions in a data set is specified at the time the data set is created. Specifying a dimension index equal to or larger than the number of dimensions in the data set causes <EM CLASS="FunctionName">
SDgetdimid</EM>
 to return a value of <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250319"></A><EM CLASS="FunctionName">
SDgetdimid</EM>
 returns a dimension identifier or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDgetdimid</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_11992" CLASS="XRef">SDgetdimid and SDsetdimname Parameter Lists</A>.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250323"></A>Unlike file and data set identifiers, dimension identifiers cannot be explicitly closed. </P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-142020"></A>	3.8.2	<A NAME="50593873_marker-142018"></A><A NAME="50593873_17640"></A>Naming a Dimension: SDsetdimname</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13122"></A><EM CLASS="FunctionName">
SDsetdimname</EM>
<A NAME="50593873_marker-26960"></A> assigns a name to a dimension. If two dimensions have the same name, they will be represented in the file by only one SDS. Therefore changes to one dimension will be reflected in the other. Naming dimensions is optional but encouraged. Dimensions that are not explicitly named by the user will have names generated by the HDF library. Use <EM CLASS="FunctionName">
SDdiminfo</EM>
 to read existing dimension names. The syntax of <EM CLASS="FunctionName">
SDsetdimname</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13126"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetdimname(dim_id, dim_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13132"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsdmname(dim_id, dim_name)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13138"></A>The argument <EM CLASS="VarName">
dim_id </EM>
in <EM CLASS="FunctionName">
SDsetdimname</EM>
 is the dimension identifier returned by <EM CLASS="FunctionName">
SDgetdimid</EM>
. The parameter <EM CLASS="VarName">
dim_name</EM>
 is a string of alphanumeric characters representing the name for the selected dimension. An attempt to rename a dimension using <EM CLASS="FunctionName">
SDsetdimname</EM>
 will cause the old name to be deleted and a new one to be assigned.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-26759"></A>Note that when naming dimensions the name of a particular dimension must be set before attributes are assigned; once the attributes have been set, the name must not be changed. In other words, <EM CLASS="FunctionName">
SDsetdimname</EM>
 must only be called before any calls to <EM CLASS="FunctionName">
SDsetdimscale</EM>
 (described in <A HREF="UG_html-3.htm#50593873_12233" CLASS="XRef">Writing Dimension Scales: SDsetdimscale</A>), <EM CLASS="FunctionName">
SDsetattr</EM>
 (described in <A HREF="UG_html-3.htm#50593873_36061" CLASS="XRef">Creating or Writing User-defined Attributes: SDsetattr</A>) or <EM CLASS="FunctionName">
SDsetdimstrs</EM>
 (described in <A HREF="UG_html-3.htm#50593873_28052" CLASS="XRef">Writing String Attributes of an SDS: SDsetdatastrs</A>).</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301812"></A>If the file being worked on was created by a pre-4.2.2 version of HDF, please refer to the <EM CLASS="Citation">
<A HREF="UG_html-3.htm#50593873_Same name" CLASS="XRef">Important Note:</A></EM>
 for information regarding a data corruption which might occur when a dimension is named the same as a one-dimensional data set.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-169609"></A><EM CLASS="FunctionName">
SDsetdimname</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDsetdimname</EM>
 are described in <A HREF="UG_html-3.htm#50593873_11992" CLASS="XRef">Table 3P</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-169683"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_11992"></A>SDg<A NAME="50593873_marker-169613"></A>etdimid and SDsetdimn<A NAME="50593873_marker-169614"></A>ame Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-169618"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-169619"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-169620"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-169622"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-169624"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-169628"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-169634"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-169636"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-169640"></A>SDgetdimid</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-169641"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-169642"></A>(sfdimid)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169644"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169646"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169648"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-169650"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169654"></A>dim_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169656"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169658"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-169660"></A>Dimension index</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-169662"></A>SDsetdimname</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-169663"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-169664"></A>(sfsdmname)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169666"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169668"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169670"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-169672"></A>Dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169676"></A>dim_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169678"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-169680"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-169682"></A>Dimension name</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-163721"></A>	3.8.3	Old and New Dimension Implementations</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-293616"></A><A NAME="50593873_marker-293612"></A>Up to and including HDF version 4.0 beta1, dimensions were vgroup objects (described in  <EM CLASS="Chapter-Reference">
<A HREF="UG_html-5.htm#50593875_34180" CLASS="XRef">Vgroups (V API)</A></EM>
, containing a single field vdata (described in <EM CLASS="Chapter-Reference">
<A HREF="UG_html-4.htm#50593874_41304" CLASS="XRef">Vdatas (VS API)</A></EM>
, with a class name of <EM CLASS="VarName">
DimVal0.0</EM>
. The vdata had the same number of records as the size of the dimension, which consisted of the values 0, 1, 2, . . . n - 1, where n is the size of the dimension. These values were not strictly necessary. Consider the case of applications that create large one dimensional data sets: the disk space taken by these unnecessary values nearly doubles the size of the HDF file. To avoid these situations, a new representation of dimensions was implemented for HDF version 4.0 beta 2 and later versions.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-25257"></A>Dimensions are still vgroups in the new representation, but the vdata has only one record with a value of <EM CLASS="VarName">
&lt;dimension size&gt; </EM>
and the class name of the vdata has been changed to <EM CLASS="VarName">
DimVal0.1</EM>
 to distinguish it from the old version.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-43128"></A>B<A NAME="50593873_marker-163189"></A>etween HDF versions 4.0 beta1 and 4.1, the old and new dimension representations were written by default for each dimension created, and both representations were recognized by routines that operate on dimensions. From HDF version 4.1 forward, SD interface routines recognize only the new representation. Two compatibility mode routines, <EM CLASS="FunctionName">
SDsetdimval_comp</EM>
 and <EM CLASS="FunctionName">
SDisdimval_bwcomp</EM>
, are provided to allow HDF programs to distinguish between the two dimension representations, or <EM CLASS="TextItalic">
compatibility modes</EM>
.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-43132"></A>	3.8.3.1	<A NAME="50593873_marker-43130"></A><A NAME="50593873_26116"></A>Setting the Future Compatibility Mode of a Dimension: SDsetdimval_comp</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-156267"></A><EM CLASS="FunctionName">
SDsetdimval_comp</EM>
<A NAME="50593873_marker-156266"></A> sets the compatibility mode for the dimension identified by the parameter <EM CLASS="VarName">
dim_id</EM>
. This operation determines whether the dimension will have the old and new representations or the new representation only. The syntax of <EM CLASS="FunctionName">
SDsetdimval_comp</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-156268"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetdimval_comp(dim_id, comp_mode);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-25263"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsdmvc(dim_id, comp_mode)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-25264"></A>The parameter <EM CLASS="VarName">
comp_mode</EM>
 specifies the compatibility mode. It can be set to either <EM CLASS="DefName">
SD_DIMVAL_BW_COMP</EM>
 (or <EM CLASS="DefName">
1</EM>
), which specifies compatible mode and that the old and new dimension representations will be written to the file, or <EM CLASS="DefName">
SD_DIMVAL_BW_INCOMP </EM>
(or <EM CLASS="DefName">
0</EM>
), which specifies incompatible mode and that only the new dimension representation will be written to file. As of HDF version 4.1r1, the default mode is backward-incompatible. Subsequent calls to <EM CLASS="FunctionName">
SDsetdimval_comp</EM>
 will override the settings established in previous calls to the routine.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-29167"></A>Unlimited dimensions are always backward compatible. Therefore <EM CLASS="FunctionName">
SDsetdimval_comp</EM>
 takes no action when the dimension identified by <EM CLASS="VarName">
dim_id</EM>
 is unlimited.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-29102"></A><EM CLASS="FunctionName">
SDsetdimval_comp</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDsetdimval_comp</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_11660" CLASS="XRef">SDsetdimval_comp and SDisdimval_bwcomp Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-25310"></A>	3.8.3.2	<A NAME="50593873_marker-27042"></A><A NAME="50593873_19357"></A>Determining the Current Compatibility Mode of a Dimension: SDisdimval_bwcomp</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-25311"></A><EM CLASS="FunctionName">
SDisdimval_bwcomp</EM>
<A NAME="50593873_marker-27043"></A> determines whether the specified dimension has the old and new representations or the new representation only. The syntax of <EM CLASS="FunctionName">
SDisdimval_bwcomp</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-25312"></A><EM CLASS="syntaxLang">
C:</EM>
		comp_mode = SDisdimval_bwcomp(dim_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-25314"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	comp_mode = sfisdmvc(dim_id)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-25315"></A><EM CLASS="FunctionName">
SDisdimval_bwcomp</EM>
 returns one of the three values: <EM CLASS="DefName">
SD_DIMVAL_BW_COMP</EM>
 (or <EM CLASS="DefName">
1</EM>
), <EM CLASS="DefName">
SD_DIMVAL_BW_INCOMP</EM>
 (or <EM CLASS="DefName">
0</EM>
), and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The interpretation of <EM CLASS="DefName">
SD_DIMVAL_BW_COMP</EM>
 and <EM CLASS="DefName">
SD_DIMVAL_BW_INCOMP</EM>
 are as that in the routine <EM CLASS="FunctionName">
SDsetdimval_comp</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-50174"></A>The parameters of <EM CLASS="FunctionName">
SDisdimval_bwcomp</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_11660" CLASS="XRef">Table 3Q</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-29159"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-29115"></A><A NAME="50593873_11660"></A>SDsetdimval_comp and SDisdimval_bwcomp Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-29118"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132441"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-29119"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-29121"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-29123"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-29127"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-29133"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-29135"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-142261"></A>SDsetdimval_comp</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-142262"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-142263"></A>(sfsdmvc)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-142265"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-142267"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-142269"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-142271"></A>Dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-142275"></A>comp_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-142277"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-142279"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-142281"></A>Compatibility mode</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-29139"></A>SDisdimval_bwcomp</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132442"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-29140"></A>(sfisdmvc)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-29142"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-29144"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-29146"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-29148"></A>Dimension identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-40381"></A>	3.8.4	<A NAME="50593873_17621"></A>Dimension Scales</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-25447"></A><A NAME="50593873_marker-27045"></A>A <EM CLASS="Definition">
dimension scale</EM>
 can be thought of as a series of numbers demarcating intervals along a dimension. One scale is assigned per dimension. Users of netCDF can think of them as analogous to <EM CLASS="Definition">
coordinate variables</EM>
. In the SDS data model, each dimension scale is a one-dimensional array with name and size equal to its assigned dimension name and size.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-163245"></A>For example, if a dimension of length 6 named &quot;depth&quot; is assigned a dimension scale, its scale is a one-dimensional array of length 6 and is also assigned the name &quot;depth&quot;. The name of the dimension will also appear as the name of the dimension scale.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-25450"></A>Recall that when dimension scale is assigned to a dimension, the dimension is implemented as an SDS array with data being the data scale. Although dimension scales are conceptually different from SDS arrays, they are implemented as SDS arrays by the SDS interface and are treated similarly by the routines in the interface. For example, when the <EM CLASS="FunctionName">
SDfileinfo</EM>
 routine returns the number of data sets in a file, it includes dimension scales in that number. The <EM CLASS="FunctionName">
SDiscoordvar</EM>
 routine (described in <A HREF="UG_html-3.htm#50593873_25183" CLASS="XRef">Distinguishing SDS Arrays from Dimension Scales: SDiscoordvar</A>) distinguishes SDS data sets from dimension scales.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-187593"></A>	3.8.4.1	<A NAME="50593873_12233"></A>W<A NAME="50593873_marker-187592"></A>riting Dimension Scales: SDsetdimscale</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-187594"></A><EM CLASS="FunctionName">
SDsetdimscale</EM>
 stores scale information for the dimension identified by the parameter <EM CLASS="VarName">
dim_id</EM>
. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13146"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetdimscale(dim_id, n_values, data_type, data);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13156"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsdscale(dim_id, n_values, data_type, data)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142346"></A>The argument <EM CLASS="VarName">
n_values</EM>
 specifies the number of scale values along the specified dimension. For a fixed size dimension, <EM CLASS="VarName">
n_values</EM>
 must be equal to the size of the dimension. The parameter <EM CLASS="VarName">
data_type</EM>
 specifies the data type for the scale values and <EM CLASS="VarName">
data</EM>
 is an array containing the scale values.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301768"></A>If the file being worked on was created by a pre-4.2.2 version of HDF, please refer to the <EM CLASS="Citation">
<A HREF="UG_html-3.htm#50593873_Same name" CLASS="XRef">Important Note:</A></EM>
 for information regarding a data corruption which might occur when a dimension is named the same as a one-dimensional data set.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-226855"></A><EM CLASS="FunctionName">
SDsetdimscale</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are specified in <A HREF="UG_html-3.htm#50593873_14105" CLASS="XRef">SDsetdimscale, SDdiminfo, and SDgetdimscale Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-226861"></A>	3.8.4.2	<A NAME="50593873_marker-226859"></A><A NAME="50593873_10800"></A>Obtaining Dimension Scale and Other Dimension Information: SDdiminfo</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13170"></A>Before working with an existing dimension scale, it is often necessary to determine its characteristics. For instance, to allocate the proper amount of memory for a scale requires knowledge of its size and data type. <A NAME="50593873_marker-27053"></A><EM CLASS="FunctionName">
SDdiminfo </EM>
provides this basic information, as well as the name and the number of attributes for a specified dimension.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142388"></A>The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-156284"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDdiminfo(dim_id, dim_name, &amp;dim_size, &amp;data_type, &amp;n_attrs);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-156285"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgdinfo(dim_id, dim_name, dim_size, data_type, n_attrs)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13190"></A><EM CLASS="FunctionName">
SDdiminfo</EM>
 retrieves and stores the dimensionâ€™s name, size, data type, and number of attributes into the parameters <EM CLASS="VarName">
dim_name</EM>
, <EM CLASS="VarName">
dim_size</EM>
, <EM CLASS="VarName">
data_type</EM>
, and <EM CLASS="VarName">
n_attrs</EM>
, respectively.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142436"></A>The parameter <EM CLASS="VarName">
dim_name</EM>
 will contain the dimension name set by <EM CLASS="FunctionName">
SDsetdimname</EM>
 or the default dimension name, <EM CLASS="VarName">
fakeDim[x]</EM>
, if <EM CLASS="FunctionName">
SDsetdimname</EM>
 has not been called, where [<EM CLASS="VarName">
x</EM>
] denotes the dimension index. If the name is not desired, the parameter <EM CLASS="VarName">
dim_name</EM>
 can be set to <EM CLASS="DefName">
NULL</EM>
 in C or an empty string in FORTRAN-77.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142463"></A>An output value of 0 for the parameter <EM CLASS="VarName">
dim_size</EM>
 indicates that the dimension specified by the parameter <EM CLASS="VarName">
dim_id</EM>
 is unlimited. Use <EM CLASS="FunctionName">
SDgetinfo</EM>
 to get the number of elements of the unlimited dimension.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13192"></A>If scale information is available for the specified dimension, i.e., <EM CLASS="FunctionName">
SDsetdimscale</EM>
 has been called, the parameter <EM CLASS="VarName">
data_type</EM>
 will contain the data type of the scale values; otherwise, <EM CLASS="VarName">
data_type</EM>
 will contain <EM CLASS="DefName">
0</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142521"></A><EM CLASS="FunctionName">
SDdiminfo</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are specified in <A HREF="UG_html-3.htm#50593873_14105" CLASS="XRef">Table 3R</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-13194"></A>	3.8.4.3	<A NAME="50593873_23247"></A>Reading Dimension Scales: SDgetdimscale</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-21833"></A><EM CLASS="FunctionName">
SDgetdimscale</EM>
 retrieves the scale values of a dimension. These values have previously been stored by <EM CLASS="FunctionName">
SDsetdimscale</EM>
. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13198"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetdimscale(dim_id, data);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13208"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgdscale(dim_id, data)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-227075"></A><EM CLASS="FunctionName">
SDgetdimscale</EM>
<A NAME="50593873_SDgetdimscale"></A> reads all the scale values and stores them in the buffer <EM CLASS="VarName">
data</EM>
 which is assumed to be sufficiently allocated to hold all the values. <EM CLASS="FunctionName">
SDdiminfo</EM>
 should be used to determine whether the scale has been set for the dimension and to obtain the data type and the number of scale values for space allocation before calling <EM CLASS="FunctionName">
SDgetdimscale</EM>
. Refer to <A HREF="UG_html-3.htm#50593873_10800" CLASS="XRef">Obtaining Dimension Scale and Other Dimension Information: SDdiminfo</A> for a discussion of <EM CLASS="FunctionName">
SDdiminfo</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142487"></A>Note that it is not possible to read a subset of the scale values. <EM CLASS="FunctionName">
SDgetdimscale</EM>
 returns all of the scale values stored with the given dimension.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-249833"></A>The fact that <EM CLASS="FunctionName">
SDgetdimscale</EM>
 returns <EM CLASS="Code">
SUCCEED</EM>
 should not be interpreted as meaning that scale values have been defined for the data set.  This function should always be used with <EM CLASS="FunctionName">
SDdiminfo</EM>
, which is used first to determine whether a scale has been set, the number of scale values, their data type, etc.  If <EM CLASS="FunctionName">
SDdiminfo</EM>
 indicates that no scale values have been set, the values returned by <EM CLASS="FunctionName">
SDgetdimscale</EM>
 in <EM CLASS="VarName">
data</EM>
 should be ignored.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-170448"></A><EM CLASS="FunctionName">
SDgetdimscale</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are specified in <A HREF="UG_html-3.htm#50593873_14105" CLASS="XRef">Table 3R</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-170595"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_14105"></A>SDsetdimscale, SDdiminfo, and SDgetdimscale Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170458"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-170459"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170460"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170462"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170464"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170468"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170474"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170476"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170480"></A>SDsetdimscale</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-170481"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170482"></A>(sfsdscale)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170484"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170486"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170488"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170490"></A>Dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170494"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170496"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170498"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170500"></A>Number of scale values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170504"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170506"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170508"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170510"></A>Data type to be set for the scale values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170514"></A>data</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170516"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170518"></A>&lt;valid data type&gt;(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170520"></A>Buffer containing the scale values to be set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170522"></A>SDdiminfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-170523"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170524"></A>(sfgdinfo)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170526"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170528"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170530"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170532"></A>Dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170536"></A>dim_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170538"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170540"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170542"></A>Buffer for the dimension name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170546"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170548"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170550"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170552"></A>Buffer for the dimension size</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170556"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170558"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170560"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170562"></A>Buffer for the scale data type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170566"></A>n_attrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170568"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170570"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170572"></A>Buffer for the attribute count</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170574"></A>SDgetdimscale</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-170575"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170576"></A>(sfgdscale)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170578"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170580"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170582"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170584"></A>Dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170588"></A>data</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170590"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170592"></A>&lt;valid data type&gt;(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170594"></A>Buffer for the scale values</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-170596"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Setting and Retrieving Dimension Information.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-199811"></A>This example illustrates the use of the routines <EM CLASS="FunctionName">
SDgetdimid/sfdimid</EM>
, <EM CLASS="FunctionName">
SDsetdimname/sfsdmname</EM>
, <EM CLASS="FunctionName">
SDsetdimscale/sfsdscale</EM>
, <EM CLASS="FunctionName">
SDdiminfo/sfgdinfo</EM>
, and <EM CLASS="FunctionName">
SDgetdimscale/sfgdscale</EM>
 to set and retrieve the dimensions names and dimension scales of the SDS created in Example 2 and modified in Examples 4 and 7.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-218409"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218412"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218413"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218414"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218415"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218416"></A>#define SDS_NAME      &quot;SDStemplate&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218417"></A>#define DIM_NAME_X     &quot;X_Axis&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218418"></A>#define DIM_NAME_Y     &quot;Y_Axis&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218419"></A>#define NAME_LENGTH   6</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218420"></A>#define X_LENGTH      5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218421"></A>#define Y_LENGTH      16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218422"></A>#define RANK          2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218423"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218424"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218425"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218426"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218427"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218428"></A>   int32   sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218429"></A>   intn    status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218430"></A>   int32   dim_index, dim_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218431"></A>   int32   n_values, data_type, n_attrs;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218432"></A>   int16   data_X[X_LENGTH];    /* X dimension dimension scale */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218433"></A>   int16   data_X_out[X_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218434"></A>   float64 data_Y[Y_LENGTH];  /* Y dimension dimension scale */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218435"></A>   float64 data_Y_out[Y_LENGTH]; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218436"></A>   char    dim_name[NAME_LENGTH];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218437"></A>   int     i, j, nrow;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218438"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218439"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218440"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218441"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218442"></A>   * Initialize dimension scales.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218443"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218444"></A>   for (i=0; i &lt; X_LENGTH; i++) data_X[i] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218445"></A>   for (i=0; i &lt; Y_LENGTH; i++) data_Y[i] = 0.1 * i;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218446"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218447"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218448"></A>   * Open the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218449"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218450"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218451"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218452"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218453"></A>   * Get the index of the data set specified in SDS_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218454"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218455"></A>   sds_index = SDnametoindex (sd_id, SDS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218456"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218457"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218458"></A>   * Select the data set corresponding to the returned index.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218459"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218460"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218461"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218462"></A>   /* For each dimension of the data set specified in SDS_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218463"></A>   *  get its dimension identifier and set dimension name</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218464"></A>   *  and dimension scale. Note that data type of dimension scale </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218465"></A>   *  can be different between dimensions and can be different from </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218466"></A>   *  SDS data type.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218467"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218468"></A>   for (dim_index = 0; dim_index &lt; RANK; dim_index++) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218469"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218470"></A>       /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218471"></A>       * Select the dimension at position dim_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218472"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218473"></A>       dim_id = SDgetdimid (sds_id, dim_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218474"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218475"></A>       /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218476"></A>       * Assign name and dimension scale to selected dimension.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218477"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218478"></A>       switch (dim_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218479"></A>       {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218480"></A>	case 0:	status = SDsetdimname (dim_id, DIM_NAME_Y);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218481"></A>                n_values = Y_LENGTH;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218482"></A>                status = SDsetdimscale (dim_id,n_values,DFNT_FLOAT64, \</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218483"></A>                                       (VOIDP)data_Y);  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218484"></A>		break;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218485"></A>	case 1:	status = SDsetdimname (dim_id, DIM_NAME_X);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218486"></A>                n_values = X_LENGTH; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218487"></A>                status = SDsetdimscale (dim_id,n_values,DFNT_INT16, \</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218488"></A>                                       (VOIDP)data_X);  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218489"></A>		break;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218490"></A>	default: break;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218491"></A>       }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218492"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218493"></A>       /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218494"></A>       * Get and display info about the dimension and its scale values.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218495"></A>       * The following information is displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218496"></A>       *                         </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218497"></A>       *         Information about 1 dimension:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218498"></A>       *         dimension name is Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218499"></A>       *         number of scale values is 16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218500"></A>       *         dimension scale data type is float64</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218501"></A>       *         number of dimension attributes is 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218502"></A>       *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218503"></A>       *         Scale values are :</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218504"></A>       *               0.000    0.100    0.200    0.300  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218505"></A>       *               0.400    0.500    0.600    0.700  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218506"></A>       *               0.800    0.900    1.000    1.100  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218507"></A>       *               1.200    1.300    1.400    1.500  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218508"></A>       *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218509"></A>       *         Information about 2 dimension:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218510"></A>       *         dimension name is X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218511"></A>       *         number of scale values is 5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218512"></A>       *         dimension scale data type is int16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218513"></A>       *         number of dimension attributes is 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218514"></A>       *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218515"></A>       *         Scale values are :</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218516"></A>       *               0  1  2  3  4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218517"></A>       */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218518"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218519"></A>       status = SDdiminfo (dim_id, dim_name, &amp;n_values, &amp;data_type, &amp;n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218520"></A>       printf (&quot;Information about %d dimension:\n&quot;, dim_index+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218521"></A>       printf (&quot;dimension name is %s\n&quot;, dim_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218522"></A>       printf (&quot;number of scale values is %d\n&quot;, n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218523"></A>       if( data_type == DFNT_FLOAT64)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218524"></A>       printf (&quot;dimension scale data type is float64\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218525"></A>       if( data_type == DFNT_INT16)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218526"></A>       printf (&quot;dimension scale data type is int16\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218527"></A>       printf (&quot;number of dimension attributes is %d\n&quot;, n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218528"></A>       printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218529"></A>       printf (&quot;Scale values are :\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218530"></A>       switch (dim_index) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218531"></A>       {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218532"></A>         case 0:  status = SDgetdimscale (dim_id, (VOIDP)data_Y_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218533"></A>                  nrow = 4;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218534"></A>                  for (i=0; i&lt;n_values/nrow; i++ )</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218535"></A>                  {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218536"></A>                      for (j=0; j&lt;nrow; j++)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218537"></A>                          printf (&quot;  %-6.3f&quot;, data_Y_out[i*nrow + j]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218538"></A>                          printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218539"></A>                  }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218540"></A>                  break; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218541"></A>         case 1:  status = SDgetdimscale (dim_id, (VOIDP)data_X_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218542"></A>                  for (i=0; i&lt;n_values; i++) printf (&quot;  %d&quot;, data_X_out[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218543"></A>                  break; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218544"></A>         default: break;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218545"></A>        }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218546"></A>        printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218547"></A>   } /*for dim_index */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218548"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218549"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218550"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218551"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218552"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218553"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218554"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218555"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218556"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218557"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218558"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197599"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-218565"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218568"></A>      program  dimension_info </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218569"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218570"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218571"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218572"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218573"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218574"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218575"></A>      character*6  DIM_NAME_X</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218576"></A>      character*6  DIM_NAME_Y</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218577"></A>      integer      X_LENGTH, Y_LENGTH, RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218578"></A>      parameter   (FILE_NAME  = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218579"></A>     +             SDS_NAME   = â€™SDStemplateâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218580"></A>     +             DIM_NAME_X  = â€™X_Axisâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218581"></A>     +             DIM_NAME_Y  = â€™Y_Axisâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218582"></A>     +             X_LENGTH = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218583"></A>     +             Y_LENGTH = 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218584"></A>     +             RANK     = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218585"></A>      integer      DFACC_WRITE, DFNT_INT16, DFNT_FLOAT64</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218586"></A>      parameter   (DFACC_WRITE   = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218587"></A>     +             DFNT_INT16   = 22,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218588"></A>     +             DFNT_FLOAT64 = 6)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218589"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218590"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218591"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218592"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218593"></A>      integer sfstart, sfn2index, sfdimid, sfgdinfo</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218594"></A>      integer sfsdscale, sfgdscale, sfsdmname, sfendacc</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218595"></A>      integer sfend, sfselect</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218596"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218597"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218598"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218599"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218600"></A>      integer dim_index, dim_id</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218601"></A>      integer n_values, n_attrs, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218602"></A>      integer*2 data_X(X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218603"></A>      integer*2 data_X_out(X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218604"></A>      real*8    data_Y(Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218605"></A>      real*8    data_Y_out(Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218606"></A>      character*6 dim_name</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218607"></A>      integer   i</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218608"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218609"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218610"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218611"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218612"></A>C     Initialize dimension scales.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218613"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218614"></A>      do 10 i = 1, X_LENGTH  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218615"></A>         data_X(i) = i - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218616"></A>10     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218617"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218618"></A>      do 20 i = 1, Y_LENGTH  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218619"></A>         data_Y(i) = 0.1 * (i - 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218620"></A>20     continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218621"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218622"></A>C     Open the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218623"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218624"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218625"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218626"></A>C     Get the index of the data set with the name specified in SDS_NAME. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218627"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218628"></A>      sds_index = sfn2index(sd_id, SDS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218629"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218630"></A>C     Select the data set corresponding to the returned index.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218631"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218632"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218633"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218634"></A>C     For each dimension of the data set,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218635"></A>C     get its dimension identifier and set dimension name</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218636"></A>C     and dimension scales. Note that data type of dimension scale can</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218637"></A>C     be different between dimensions and can be different from SDS data type.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218638"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218639"></A>      do 30 dim_index = 0, RANK - 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218640"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218641"></A>C        Select the dimension at position dim_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218642"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218643"></A>         dim_id = sfdimid(sds_id, dim_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218644"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218645"></A>C        Assign name and dimension scale to the dimension. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218646"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218647"></A>         if (dim_index .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218648"></A>            status = sfsdmname(dim_id, DIM_NAME_X) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218649"></A>            n_values = X_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218650"></A>            status = sfsdscale(dim_id, n_values, DFNT_INT16, data_X)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218651"></A>         end if</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218652"></A>         if (dim_index .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218653"></A>            status = sfsdmname(dim_id, DIM_NAME_Y)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218654"></A>            n_values = Y_LENGTH</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218655"></A>            status = sfsdscale(dim_id, n_values, DFNT_FLOAT64, data_Y)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218656"></A>         end if</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218657"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218658"></A>C      Get and display information about dimension and its scale values.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218659"></A>C      The following information is displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218660"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218661"></A>C                    Information about 1 dimension :</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218662"></A>C                    dimension name is X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218663"></A>C                    number of scale values is  5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218664"></A>C                    dimension scale data type is int16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218665"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218666"></A>C                    number of dimension attributes is   0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218667"></A>C                    Scale values are:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218668"></A>C                        0  1  2  3  4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218669"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218670"></A>C                    Information about 2 dimension :</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218671"></A>C                    dimension name is Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218672"></A>C                    number of scale values is  16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218673"></A>C                    dimension scale data type is float64</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218674"></A>C                    number of dimension attributes is   0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218675"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218676"></A>C                    Scale values are:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218677"></A>C                        0.000      0.100      0.200      0.300</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218678"></A>C                        0.400      0.500      0.600      0.700</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218679"></A>C                        0.800      0.900      1.000      1.100</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218680"></A>C                        1.200      1.300      1.400      1.500</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218681"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218682"></A>       status = sfgdinfo(dim_id, dim_name, n_values, data_type, n_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218683"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218684"></A>       write(*,*) &quot;Information about &quot;, dim_index+1,&quot; dimension :&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218685"></A>       write(*,*) &quot;dimension name is &quot;, dim_name</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218686"></A>       write(*,*) &quot;number of scale values is&quot;, n_values</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218687"></A>       if (data_type. eq. 22) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218688"></A>           write(*,*) &quot;dimension scale data type is int16&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218689"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218690"></A>       if (data_type. eq. 6) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218691"></A>           write(*,*) &quot;dimension scale data type is float64&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218692"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218693"></A>       write(*,*) &quot;number of dimension attributes is &quot;, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218694"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218695"></A>       write(*,*) &quot;Scale values are:&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218696"></A>       if (dim_index .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218697"></A>          status = sfgdscale(dim_id, data_X_out)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218698"></A>          write(*,*) (data_X_out(i), i= 1, X_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218699"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218700"></A>       if (dim_index .eq. 1)  then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218701"></A>          status = sfgdscale(dim_id, data_Y_out) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218702"></A>          write(*,100) (data_Y_out(i), i= 1, Y_LENGTH)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218703"></A>100       format(4(1x,f10.3)/)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218704"></A>       endif </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218705"></A>30      continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218706"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218707"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218708"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218709"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218710"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218711"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218712"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218713"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218714"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197753"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-187619"></A>	3.8.4.4	<A NAME="50593873_25183"></A>D<A NAME="50593873_marker-187618"></A>istinguishing SDS Arrays from Dimension Scales: SDiscoordvar</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-187628"></A>The HDF library stores SDS dimensions as data sets. HDF therefore provides the routine <EM CLASS="FunctionName">
SDiscoordvar</EM>
<A NAME="50593873_marker-187627"></A> to determine whether a particular data set contains the data of an SDS or an SDS dimension with dimension scale or attribute assigned to it. The syntax of <EM CLASS="FunctionName">
SDiscoordvar</EM>
 this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-142543"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDiscoordvar(sds_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-142545"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfiscvar(sds_id)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142629"></A>If the data set, identified by the parameter <EM CLASS="VarName">
sds_id</EM>
, contains the dimension data, a subsequent call to <EM CLASS="FunctionName">
SDgetinfo</EM>
 will fill the specified arguments with information about a dimension, rather than a data set.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-301822"></A>If the file being worked on was created by a pre-4.2.2 version of HDF, please refer to the <EM CLASS="Citation">
<A HREF="UG_html-3.htm#50593873_Same name" CLASS="XRef">Important Note:</A></EM>
 for information regarding a data corruption which might occur when a dimension is named the same as a one-dimensional SDS.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-187654"></A><EM CLASS="FunctionName">
SDiscoordvar</EM>
 returns <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) if the specified data set represents a dimension scale and <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
), otherwise. This routine is further defined in <A HREF="UG_html-3.htm#50593873_23776" CLASS="XRef">Table 3S</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-142605"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_23776"></A>SDiscoordvar Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158183"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158184"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158185"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158187"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158189"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158193"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158199"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158201"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158205"></A>SDiscoordvar</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158206"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158207"></A>(sfiscvar)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158209"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158211"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158213"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158215"></A>Data set identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-21522"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Distinguishing a Dimension Scale from a Data Set in a File.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-169171"></A>This example illustrates the use of the routine <EM CLASS="FunctionName">
SDiscoordvar/sfiscvar</EM>
 to determine whether the selected SDS array is a data set or a dimension stored as an SDS array (coordinate variable) (see discussion in Section 3.8.4) and displays the name of the data set or dimension.</P>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-218721"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218726"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218727"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218728"></A>#define FILE_NAME     &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218729"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218730"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218731"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218732"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218733"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218734"></A>   int32 sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218735"></A>   intn  status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218736"></A>   int32 rank, data_type, dim_sizes[MAX_VAR_DIMS];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218737"></A>   int32 n_datasets, n_file_attr, n_attrs; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218738"></A>   char  sds_name[MAX_NC_NAME];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218739"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218740"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218741"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218742"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218743"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218744"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218745"></A>   sd_id = SDstart(FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218746"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218747"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218748"></A>   * Obtain information about the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218749"></A>   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218750"></A>   status = SDfileinfo(sd_id, &amp;n_datasets, &amp;n_file_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218751"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218752"></A>   /* Get information about each SDS in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218753"></A>   *  Check whether it is a coordinate variable, then display retrieved </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218754"></A>   *  information.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218755"></A>   *  Output displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218756"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218757"></A>   *            SDS array with the name SDStemplate</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218758"></A>   *            Coordinate variable with the name Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218759"></A>   *            Coordinate variable with the name X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218760"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218761"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218762"></A>   for (sds_index=0; sds_index&lt; n_datasets; sds_index++) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218763"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218764"></A>       sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218765"></A>       status = SDgetinfo(sds_id, sds_name, &amp;rank, dim_sizes, &amp;data_type, &amp;n_attrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218766"></A>       if (SDiscoordvar(sds_id)) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218767"></A>          printf(&quot; Coordinate variable with the name %s\n&quot;, sds_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218768"></A>       else</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218769"></A>          printf(&quot; SDS array with the name %s\n&quot;, sds_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218770"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218771"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218772"></A>   * Terminate access to the selected data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218773"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218774"></A>   status = SDendaccess(sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218775"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218776"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218777"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218778"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218779"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218780"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218781"></A>   status = SDend(sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218782"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-202995"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-218787"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218790"></A>      program  sds_vrs_coordvar </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218791"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218792"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218793"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218794"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218795"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218796"></A>      parameter   (FILE_NAME = â€™SDS.hdfâ€™)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218797"></A>      integer      DFACC_READ, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218798"></A>      parameter   (DFACC_READ = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218799"></A>     +             DFNT_INT32 = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218800"></A>      integer      MAX_VAR_DIMS</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218801"></A>      parameter   (MAX_VAR_DIMS = 32)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218802"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218803"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218804"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218805"></A>      integer sfstart, sfselect, sfiscvar, sffinfo, sfginfo</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218806"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218807"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218808"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218809"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218810"></A>      integer       sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218811"></A>      integer       rank, data_type</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218812"></A>      integer       n_datasets, n_file_attrs, n_attrs</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218813"></A>      integer       dim_sizes(MAX_VAR_DIMS)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218814"></A>      character*256 sds_name</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218815"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218816"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218817"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218818"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218819"></A>C     Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218820"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218821"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218822"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218823"></A>C     Obtain information about the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218824"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218825"></A>      status = sffinfo(sd_id, n_datasets, n_file_attrs) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218826"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218827"></A>C     Get information about each SDS in the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218828"></A>C     Check whether it is a coordinate variable, then display retrieved </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218829"></A>C     information. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218830"></A>C     Output displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218831"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218832"></A>C           SDS array with the name SDStemplate</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218833"></A>C           Coordinate variable with the name X_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218834"></A>C           Coordinate variable with the name Y_Axis</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218835"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218836"></A>      do 10 sds_index = 0, n_datasets-1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218837"></A>         sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218838"></A>         status = sfginfo(sds_id, sds_name, rank, dim_sizes,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218839"></A>     +                    data_type, n_attrs)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218840"></A>         status = sfiscvar(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218841"></A>         if (status .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218842"></A>             write(*,*) &quot;Coordinate variable with the name &quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218843"></A>     +       sds_name(1:6) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218844"></A>         else</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218845"></A>             write(*,*) &quot;SDS array with the name &quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218846"></A>     +       sds_name(1:11) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218847"></A>         endif</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218848"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218849"></A>C        Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218850"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218851"></A>         status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218852"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218853"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218854"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218855"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218856"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218857"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197892"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-142642"></A>	3.8.5	<A NAME="50593873_marker-142641"></A>Related Data Sets</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-142644"></A><A NAME="50593873_marker-142643"></A>SD data sets with one or more dimensions with the same name and size are considered to be related. Examples of related data sets are cross-sections from the same simulation, frames in an animation, or images collected from the same apparatus. HDF attempts to preserve this relationship by unifying their dimension scales and attributes. To understand how related data sets are handled, it is necessary to understand what dimension records are and how they are created.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13421"></A><A NAME="50593873_marker-27066"></A>In the SD interface, dimension records are only created for dimensions of a unique name and size. To illustrate this, consider a case where there are three scientific data sets, each representing a unique variable, in an HDF file. <A HREF="UG_html-3.htm#50593873_31617" CLASS="XRef">(See Figure 3c)</A> The first two data sets have two dimensions each and the third data set has three dimensions. There are a total of four dimensions in the file and the name mapping between the data sets and the dimensions are shown in the figure. Note that if, for example, the creation of a second dimension named &quot;Altitude&quot; is attempted and the size of the dimension is different from the existing dimension named &quot;Altitude&quot;, an error condition will be generated.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-14436"></A>As expected, assigning a dimension attribute to dimension 1 of either data set will create the required dimension scale and assign the appropriate attribute. However, because related data sets share dimension records, they also share dimension attributes. Therefore, it is impossible to assign an attribute to a dimension without assigning the same attribute to all dimensions of identical name and size, either within one data set or related data sets.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593873_pgfId-13426"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
FIGURE 3c	<A NAME="50593873_31617"></A>Dimension Records and Attributes Shared Between Related Data Sets</H6>
<DIV>
<IMG SRC="UG_html-17.gif" ALT="">
</DIV>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-13428"></A>	3.9	<A NAME="50593873_14370"></A>U<A NAME="50593873_marker-27068"></A>ser-defined Attributes<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-6807"></A><EM CLASS="Definition">
User-defined attributes</EM>
<A NAME="50593873_marker-27070"></A> are defined by the calling program and contain auxiliary information about a file, SDS array, or dimension. This auxiliary information is sometimes called <EM CLASS="Definition">
metadata</EM>
 because it is data about data. There are two ways to store metadata: as user-defined attributes or as predefined attributes. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-6803"></A>Attributes take the form <EM CLASS="VarName">
label=value</EM>
, where <EM CLASS="VarName">
label</EM>
 is a character string containing <EM CLASS="DefName">
H4_MAX_NC_NAME</EM>
 (or <EM CLASS="DefName">
256</EM>
) or fewer characters and <EM CLASS="VarName">
value</EM>
 contains one or more entries of the same data type as defined at the time the attribute is created. Attributes can be attached to files, data sets, and dimensions. These are referred to, respectively, as <EM CLASS="Definition">
file attributes</EM>
, <EM CLASS="Definition">
data set attributes</EM>
, and <EM CLASS="Definition">
dimension attributes</EM>
:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-163773"></A><EM CLASS="Definition">
File attributes</EM>
<A NAME="50593873_marker-163772"></A> describe an entire file. They generally contain information pertinent to all HDF data sets in the file and are sometimes referred to as <EM CLASS="Definition">
global attributes</EM>
<A NAME="50593873_marker-163774"></A>. </LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-163776"></A><EM CLASS="Definition">
Data set attributes </EM>
<A NAME="50593873_marker-163775"></A>describe individual SDSs. Because their scope is limited to an individual SDS, data set attributes are sometimes referred to as <EM CLASS="Definition">
local attributes</EM>
<A NAME="50593873_marker-163777"></A>. </LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6825"></A><EM CLASS="Definition">
Dimension attributes</EM>
<A NAME="50593873_marker-27073"></A> provide information applicable to an individual SDS dimension. It is possible to assign a unit to one dimension in a data set without assigning a unit to the remaining dimensions. </LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-6842"></A>For each attribute, an <EM CLASS="Definition">
attribute count </EM>
<A NAME="50593873_marker-27074"></A>is maintained that identifies the number of values in the attribute. Each attribute has a unique <EM CLASS="Definition">
attribute index</EM>
<A NAME="50593873_marker-27075"></A>, the value of which ranges from 0 to the total number of attributes minus 1. The attribute index is used to locate an attribute in the object which the attribute is attached to. Once the attribute is identified, its values and information can be retrieved.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-6843"></A><A NAME="50593873_marker-27078"></A>The data types permitted for attributes are the same as those allowed for SDS arrays. SDS arrays with general attributes of the same name can have different data types. For example, the attribute <EM CLASS="VarName">
valid_range</EM>
 specifying the valid range of data values for an array of 16-bit integers might be of type 16-bit integer, whereas the attribute <EM CLASS="VarName">
valid_range</EM>
 for an array of 32-bit floats could be of type 32-bit floating-point integer. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-6844"></A><A NAME="50593873_marker-27079"></A>Attribute names follow the same rules as dimension names. Providing meaningful names for attributes is important, however using standardized names may be necessary if generic applications and utility programs are to be used. For example, every variable assigned a unit should have an attribute named &quot;<EM CLASS="VarName">
units</EM>
&quot; associated with it. Furthermore, if an HDF file is to be used with software that recognizes &quot;units&quot; attributes, the values of the &quot;units&quot; attributes should be expressed in a conventional form as a character string that can be interpreted by that software.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13432"></A>The SD interface uses the same functions to access all attributes regardless of the objects they are assigned to. The difference between accessing a file, array, or dimension attribute lies in the use of identifiers. File identifiers, SDS identifiers, and dimension identifiers are used to respectively access file attributes, SDS attributes, and dimension attributes. </P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-13434"></A>	3.9.1	<A NAME="50593873_36061"></A>Creating or W<A NAME="50593873_marker-27080"></A>riting User-defined Attributes: SDsetattr</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13436"></A><EM CLASS="FunctionName">
SDsetattr</EM>
 creates or modifies an attribute for one of the objects: the file, the data set, or the dimension. If the attribute with the specified name does not exist, <EM CLASS="FunctionName">
SDsetattr</EM>
 creates a new one. If the named attribute already exists, <EM CLASS="FunctionName">
SDsetattr</EM>
 resets all the values that are different from those provided in its argument list. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13456"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetattr(obj_id, attr_name, data_type, n_values, values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13462"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsnatt(obj_id, attr_name, data_type, n_values, values)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-147783"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfscatt(obj_id, attr_name, data_type, n_values, values)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142748"></A><A NAME="50593873_marker-142747"></A>The parameter <EM CLASS="VarName">
obj_id</EM>
 is the identifier of the HDF data object to which the attribute is assigned and can be a file identifier, SDS identifier, or dimension identifier. If <EM CLASS="VarName">
obj_id</EM>
 specifies an SD interface identifier (<EM CLASS="VarName">
sd_id</EM>
), a global attribute will be created which applies to all objects in the file. If <EM CLASS="VarName">
obj_id</EM>
 specifies a data set identifier (<EM CLASS="VarName">
sds_id</EM>
), an attribute will be attached only to the specified data set. If <EM CLASS="VarName">
obj_id</EM>
 specifies a dimension identifier (<EM CLASS="VarName">
dim_id</EM>
), an attribute will be attached only to the specified dimension.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142721"></A>The parameter <EM CLASS="VarName">
attr_name</EM>
 is an ASCII character string containing the name of the attribute. It represents the label in the <EM CLASS="VarName">
label = value</EM>
 equation and can be no more than <EM CLASS="DefName">
H4_MAX_NC_NAME</EM>
 (or <EM CLASS="DefName">
256</EM>
) characters. If this is set to the name of an existing attribute, the value portion of the attribute will be overwritten. Do not use <EM CLASS="FunctionName">
SDsetattr</EM>
 to assign a name to a dimension, use <EM CLASS="FunctionName">
SDsetdimname</EM>
 instead.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13474"></A>The arguments <EM CLASS="VarName">
data_type</EM>
, <EM CLASS="VarName">
n_values</EM>
, and <EM CLASS="VarName">
values</EM>
 describe the right side of the <EM CLASS="VarName">
label = value</EM>
 equation. The argument <EM CLASS="VarName">
values</EM>
 contains one or more values of the same data type. The argument <EM CLASS="VarName">
data_type</EM>
 contains any HDF supported data type (see <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A>). The parameter <EM CLASS="VarName">
n_values</EM>
 specifies the total number of values in the attribute.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142761"></A>There are two FORTRAN-77 versions of this routine: sfsnatt and sfscatt. The routine sfsnatt writes numeric attribute data and sfscatt writes character attribute data. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142765"></A><EM CLASS="FunctionName">
SDsetattr </EM>
returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDsetattr</EM>
 are further described in <A HREF="UG_html-3.htm#50593873_39363" CLASS="XRef">SDsetattr, SDfindattr, SDattrinfo, and SDreadattr Parameter Lists</A>.</P>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-169510"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Setting Attributes.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-202985"></A>This example shows how the routines <EM CLASS="FunctionName">
SDsetattr/sfscatt/sfsnatt</EM>
 are used to set the attributes of the file, data set, and data set dimension created in the Examples 2, 4, and 12.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-220717"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218867"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218868"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218869"></A>#define FILE_NAME      &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218870"></A>#define FILE_ATTR_NAME &quot;File_contents&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218871"></A>#define SDS_ATTR_NAME  &quot;Valid_range&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218872"></A>#define DIM_ATTR_NAME  &quot;Dim_metric&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218873"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218874"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218875"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218876"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218877"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218878"></A>   int32   sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218879"></A>   intn    status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218880"></A>   int32   dim_id, dim_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218881"></A>   int32   n_values;                /* number of values of the file, SDS or</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218882"></A>                                       dimension attribute         */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218883"></A>   char8   file_values[] = &quot;Storm_track_data&quot;; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218884"></A>                                   /* values of the file attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218885"></A>   float32 sds_values[2] = {2., 10.};</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218886"></A>                                   /* values of the SDS attribute  */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218887"></A>   char8   dim_values[]  = &quot;Seconds&quot;; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218888"></A>                                  /* values of the dimension attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218889"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218890"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218891"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218892"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218893"></A>   * Open the file and initialize the SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218894"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218895"></A>   sd_id = SDstart (FILE_NAME, DFACC_WRITE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218896"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218897"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218898"></A>   * Set an attribute that describes the file contents.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218899"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218900"></A>   n_values = 16;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218901"></A>   status = SDsetattr (sd_id, FILE_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218902"></A>                       (VOIDP)file_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218903"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218904"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218905"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218906"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218907"></A>   sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218908"></A>   sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218909"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218910"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218911"></A>   * Assign attribute to the first SDS. Note that attribute values</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218912"></A>   * may have different data type than SDS data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218913"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218914"></A>   n_values  = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218915"></A>   status = SDsetattr (sds_id, SDS_ATTR_NAME, DFNT_FLOAT32, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218916"></A>                       (VOIDP)sds_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218917"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218918"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218919"></A>   * Get the the second dimension identifier of the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218920"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218921"></A>   dim_index = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218922"></A>   dim_id = SDgetdimid (sds_id, dim_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218923"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218924"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218925"></A>   * Set an attribute of the dimension that specifies the dimension metric.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218926"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218927"></A>   n_values = 7;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218928"></A>   status = SDsetattr (dim_id, DIM_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218929"></A>                       (VOIDP)dim_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218930"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218931"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218932"></A>   * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218933"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218934"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218935"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218936"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218937"></A>   * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218938"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218939"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218940"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-197973"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-218947"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218950"></A>      program  set_attribs</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218951"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218952"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218953"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218954"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218955"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218956"></A>      character*13 FILE_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218957"></A>      character*11 SDS_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218958"></A>      character*10 DIM_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218959"></A>      parameter   (FILE_NAME = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218960"></A>     +             FILE_ATTR_NAME = â€™File_contentsâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218961"></A>     +             SDS_ATTR_NAME  = â€™Valid_rangeâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218962"></A>     +             DIM_ATTR_NAME  = â€™Dim_metricâ€™)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218963"></A>      integer      DFACC_WRITE, DFNT_CHAR8, DFNT_FLOAT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218964"></A>      parameter   (DFACC_WRITE = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218965"></A>     +             DFNT_CHAR8  = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218966"></A>     +             DFNT_FLOAT32 = 5)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218967"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218968"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218969"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218970"></A>      integer sfstart, sfscatt, sfsnatt, sfselect, sfdimid</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218971"></A>      integer sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218972"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218973"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218974"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218975"></A>      integer sd_id, sds_id, sds_index, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218976"></A>      integer dim_id, dim_index </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218977"></A>      integer n_values</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218978"></A>      character*16 file_values</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218979"></A>      real         sds_values(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218980"></A>      character*7  dim_values</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218981"></A>      file_values   = â€™Storm_track_dataâ€™</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218982"></A>      sds_values(1) = 2.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218983"></A>      sds_values(2) = 10.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218984"></A>      dim_values    = â€™Secondsâ€™</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218985"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218986"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218987"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218988"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218989"></A>C     Open the file and initialize the SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218990"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218991"></A>      sd_id = sfstart(FILE_NAME, DFACC_WRITE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218992"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218993"></A>C     Set an attribute that describes the file contents. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218994"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218995"></A>      n_values = 16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218996"></A>      status = sfscatt(sd_id, FILE_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218997"></A>     +                 file_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218998"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-218999"></A>C     Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219000"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219001"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219002"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219003"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219004"></A>C     Assign attribute to the first SDS. Note that attribute values</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219005"></A>C     may have different data type than SDS data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219006"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219007"></A>      n_values = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219008"></A>      status = sfsnatt(sds_id, SDS_ATTR_NAME, DFNT_FLOAT32, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219009"></A>     +                 sds_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219010"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219011"></A>C     Get the identifier for the first dimension. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219012"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219013"></A>      dim_index = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219014"></A>      dim_id = sfdimid(sds_id, dim_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219015"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219016"></A>C     Set an attribute to the dimension that specifies the</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219017"></A>C     dimension metric. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219018"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219019"></A>      n_values = 7</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219020"></A>      status = sfscatt(dim_id, DIM_ATTR_NAME, DFNT_CHAR8, n_values, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219021"></A>     +                 dim_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219022"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219023"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219024"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219025"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219026"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219027"></A>C     Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219028"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219029"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219030"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219031"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-198062"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-35674"></A>	3.9.2	<A NAME="50593873_30191"></A>Q<A NAME="50593873_marker-35673"></A>uerying User-defined Attributes: SDfindattr and SDattrinfo</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13602"></A>Given a file, SDS, or dimension identifier and an attribute name, <A NAME="50593873_marker-27083"></A><EM CLASS="FunctionName">
SDfindattr</EM>
 returns a valid attribute index if the corresponding attribute exists. The attribute index can then be used to retrieve information about the attribute or its values. <A NAME="50593873_marker-27084"></A>Given a file, SDS, or dimension identifier and a valid attribute index, <EM CLASS="FunctionName">
SDattrinfo </EM>
retrieves the information about the corresponding attribute if it exists. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13604"></A>The syntax for <EM CLASS="FunctionName">
SDfindattr</EM>
 and <EM CLASS="FunctionName">
SDattrinfo</EM>
 are as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13606"></A><EM CLASS="syntaxLang">
C:</EM>
		attr_index = SDfindattr(obj_id, attr_name);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-13608"></A>		status = SDattrinfo(obj_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13610"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	attr_index = sffattr(obj_id, attr_name)</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-13612"></A>		status = sfgainfo(obj_id, attr_index, attr_name, data_type, n_values)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-143034"></A><EM CLASS="FunctionName">
SDfindattr</EM>
 returns the index of the attribute, which belongs to the object identified by the parameter <EM CLASS="VarName">
obj_id</EM>
, and whose name is specified by the parameter <EM CLASS="VarName">
attr_name</EM>
. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-143037"></A>The parameter <EM CLASS="VarName">
obj_id</EM>
 can be either an SD interface identifier (<EM CLASS="VarName">
sd_id</EM>
), a data set identifier (<EM CLASS="VarName">
sds_id</EM>
), or a dimension identifier (<EM CLASS="VarName">
dim_id</EM>
). SDfindattr is case-sensitive in searching for the name specified by the parameter <EM CLASS="VarName">
attr_name</EM>
 and does not accept wildcards as part of that name.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-143042"></A><EM CLASS="FunctionName">
SDattrinfo</EM>
 retrieves the attributeâ€™s name, data type, and number of values into the parameters <EM CLASS="VarName">
attr_name</EM>
, <EM CLASS="VarName">
data_type</EM>
, and <EM CLASS="VarName">
n_values</EM>
, respectively.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142978"></A>The parameter <EM CLASS="VarName">
attr_index</EM>
 specifies the relative position of the attribute within the specified object. An attribute index may also be determined by either keeping track of the number and order of attributes as they are written or dumping the contents of the file using the HDF dumping utility, <EM CLASS="FunctionName">
hdp</EM>
, which is described in <EM CLASS="Chapter-Reference">
<A HREF="UG_html-15.htm#50593885_13872" CLASS="XRef">HDF Command-line Utilities</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-142991"></A><EM CLASS="FunctionName">
SDfindattr</EM>
 returns an attribute index or a value of <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). <EM CLASS="FunctionName">
SDattrinfo </EM>
returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDfindattr</EM>
 and <EM CLASS="FunctionName">
SDattrinfo</EM>
 are further described in <A HREF="UG_html-3.htm#50593873_39363" CLASS="XRef">SDsetattr, SDfindattr, SDattrinfo, and SDreadattr Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-13622"></A>	3.9.3	<A NAME="50593873_14343"></A>R<A NAME="50593873_marker-27085"></A>eading User-defined Attributes: SDreadattr</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13624"></A>Given a file, SDS, or dimension identifier and an attribute index, <EM CLASS="FunctionName">
SDreadattr</EM>
<A NAME="50593873_marker-27086"></A> reads the values of an attribute that belongs to either a file, an SDS, or a dimension. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13626"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDreadattr(obj_id, attr_index, values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-187665"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfrattr(obj_id, attr_index, values)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-187666"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfrnatt(obj_id, attr_index, values)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-187680"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfrcatt(obj_id, attr_index, values)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-187681"></A><EM CLASS="FunctionName">
SDreadattr</EM>
 stores the attribute values in the buffer <EM CLASS="VarName">
values</EM>
, which is assumed to be sufficiently allocated. The size of the buffer must be at least <EM CLASS="VarName">
n_values*sizeof (data_type)</EM>
 bytes long, where <EM CLASS="VarName">
n_values</EM>
 and <EM CLASS="VarName">
data_type</EM>
 are the number of attribute values and their type. The values of <EM CLASS="VarName">
n_values</EM>
 and <EM CLASS="VarName">
data_type</EM>
 can be retrieved using <EM CLASS="FunctionName">
SDattrinfo</EM>
. Note that the size of the data type must be determined at the local machine where the application is running. <EM CLASS="FunctionName">
SDreadattr</EM>
 will also read attributes and annotations created by the DFSD interface. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13636"></A>The parameter <EM CLASS="VarName">
obj_id</EM>
 can be either an SD interface identifier (<EM CLASS="VarName">
sd_id</EM>
), a data set identifier (<EM CLASS="VarName">
sds_id</EM>
), or a dimension identifier (<EM CLASS="VarName">
dim_id</EM>
).</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-195515"></A>The parameter <EM CLASS="VarName">
attr_index</EM>
 specifies the relative position of the attribute within the specified object. An attribute index may also be determined by either keeping track of the number and order of attributes as they are written or dumping the contents of the file using the HDF dumping utility, <EM CLASS="FunctionName">
hdp</EM>
, which is described in <EM CLASS="Chapter-Reference">
<A HREF="UG_html-15.htm#50593885_13872" CLASS="XRef">HDF Command-line Utilities</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-195524"></A>There are three FORTRAN-77 versions of this routine: <EM CLASS="FunctionName">
sfrattr</EM>
, <EM CLASS="FunctionName">
sfrnatt</EM>
<A NAME="50593873_marker-195522"></A>, and <EM CLASS="FunctionName">
sfrcatt</EM>
<A NAME="50593873_marker-195523"></A>. The routine <EM CLASS="FunctionName">
sfrattr</EM>
 reads data of all valid data types, <EM CLASS="FunctionName">
sfrnatt</EM>
 reads numeric attribute data and <EM CLASS="FunctionName">
sfrcatt</EM>
 reads character attribute data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-22425"></A><EM CLASS="FunctionName">
SDreadattr </EM>
returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDreadattr </EM>
are further described in <A HREF="UG_html-3.htm#50593873_39363" CLASS="XRef">Table 3T</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-13643"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_39363"></A>S<A NAME="50593873_marker-27087"></A>Dsetattr, S<A NAME="50593873_marker-27088"></A>Dfindattr, <A NAME="50593873_marker-27089"></A>SDattrinfo, and<A NAME="50593873_marker-27090"></A> SDreadattr Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-22499"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132457"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-22500"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-22502"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-22506"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-22508"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-22514"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-22516"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22520"></A>SDsetattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132458"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22521"></A>(sfsnatt/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-27502"></A>sfscatt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22523"></A>sd_id, sds_id or dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22525"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22527"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22529"></A>SD interface, data set, or </P>
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158695"></A>dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22533"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22535"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22537"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22539"></A>Name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22543"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22545"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22547"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22549"></A>Data type of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22561"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22563"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22565"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22567"></A>Number of values in the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22571"></A>values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22573"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-27505"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-156316"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22577"></A>Buffer containing the data to be written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22579"></A>SDfindattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132459"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22580"></A>(sffattr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22582"></A>sd_id, sds_id or dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22584"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22586"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22588"></A>SD interface, data set, or </P>
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158696"></A>dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22592"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22594"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22596"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22598"></A>Attribute name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22600"></A>SDattrinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132460"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22601"></A>(sfgainfo)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22603"></A>sd_id, sds_id or dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22605"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22607"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22609"></A>SD interface, data set, or </P>
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158694"></A>dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22613"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22615"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22617"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22619"></A>Index of the attribute to be read</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22623"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22625"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22627"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22629"></A>Buffer for the name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22633"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22635"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22637"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22639"></A>Buffer for the data type of the values in the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22643"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22645"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22647"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22649"></A>Buffer for the total number of values in the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22651"></A>SDreadattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132461"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-22652"></A>(sfrattr/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-187687"></A>sfrnatt/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-27552"></A>sfrcatt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22654"></A>sd_id, sds_id or dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22656"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22658"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22660"></A>SD interface, data set, or dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22664"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22666"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22668"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22670"></A>Index of the attribute to be read</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22674"></A>values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-22676"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-187689"></A>&lt;valid data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-27555"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-156317"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-22680"></A>Buffer for the attribute values</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-13645"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Reading Attributes.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-169055"></A>This example uses the routines <EM CLASS="FunctionName">
SDfindattr/sffattr</EM>
, <EM CLASS="FunctionName">
SDattrinfo/sfgainfo</EM>
, and <EM CLASS="FunctionName">
SDreadattr/sfrattr</EM>
 to find and read attributes of the file, data set, and data set dimension created in the Example 14.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-219038"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219041"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219042"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219043"></A>#define FILE_NAME      &quot;SDS.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219044"></A>#define FILE_ATTR_NAME &quot;File_contents&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219045"></A>#define SDS_ATTR_NAME  &quot;Valid_range&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219046"></A>#define DIM_ATTR_NAME  &quot;Dim_metric&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219047"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219048"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219049"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219050"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219051"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219052"></A>   int32   sd_id, sds_id, dim_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219053"></A>   intn    status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219054"></A>   int32   attr_index, data_type, n_values; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219055"></A>   char    attr_name[MAX_NC_NAME];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219056"></A>   int8    *file_data;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219057"></A>   int8    *dim_data;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219058"></A>   float32 *sds_data;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219059"></A>   int     i;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219060"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219061"></A>   /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219062"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219063"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219064"></A>   * Open the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219065"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219066"></A>   sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219067"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219068"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219069"></A>   * Find the file attribute defined by FILE_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219070"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219071"></A>   attr_index = SDfindattr (sd_id, FILE_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219072"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219073"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219074"></A>   * Get information about the file attribute. Note that the first</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219075"></A>   * parameter is an SD interface identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219076"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219077"></A>   status = SDattrinfo (sd_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219078"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219079"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219080"></A>   * Allocate a buffer to hold the attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219081"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219082"></A>   file_data = (int8 *)malloc (n_values * sizeof (data_type));</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219083"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219084"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219085"></A>   * Read the file attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219086"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219087"></A>   status = SDreadattr (sd_id, attr_index, file_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219088"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219089"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219090"></A>   * Print out file attribute value. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219091"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219092"></A>   printf (&quot;File attribute value is : %s\n&quot;, file_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219093"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219094"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219095"></A>   * Select the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219096"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219097"></A>   sds_id = SDselect (sd_id, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219098"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219099"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219100"></A>   * Find the data set attribute defined by SDS_ATTR_NAME. Note that the</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219101"></A>   * first parameter is a data set identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219102"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219103"></A>   attr_index = SDfindattr (sds_id, SDS_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219104"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219105"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219106"></A>   * Get information about the data set attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219107"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219108"></A>   status = SDattrinfo (sds_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219109"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219110"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219111"></A>   * Allocate a buffer to hold the data set attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219112"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219113"></A>   sds_data = (float32 *)malloc (n_values * sizeof (data_type));</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219114"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219115"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219116"></A>   * Read the SDS attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219117"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219118"></A>   status = SDreadattr (sds_id, attr_index, sds_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219119"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219120"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219121"></A>   * Print out SDS attribute data type and values. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219122"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219123"></A>   if (data_type == DFNT_FLOAT32) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219124"></A>                 printf (&quot;SDS attribute data type is : float32\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219125"></A>   printf (&quot;SDS attribute values are :  &quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219126"></A>   for (i=0; i&lt;n_values; i++) printf (&quot; %f&quot;, sds_data[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219127"></A>   printf (&quot;\n&quot;); </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219128"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219129"></A>   /*    </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219130"></A>   * Get the identifier for the second dimension of the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219131"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219132"></A>   dim_id = SDgetdimid (sds_id, 1);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219133"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219134"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219135"></A>   * Find dimension attribute defined by DIM_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219136"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219137"></A>   attr_index = SDfindattr (dim_id, DIM_ATTR_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219138"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219139"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219140"></A>   * Get information about the dimension attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219141"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219142"></A>   status = SDattrinfo (dim_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219143"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219144"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219145"></A>   * Allocate a buffer to hold the dimension attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219146"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219147"></A>   dim_data = (int8 *)malloc (n_values * sizeof (data_type));</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219148"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219149"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219150"></A>   * Read the dimension attribute data.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219151"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219152"></A>   status = SDreadattr (dim_id, attr_index, dim_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219153"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219154"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219155"></A>   * Print out dimension attribute value. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219156"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219157"></A>   printf (&quot;Dimensional attribute values is : %s\n&quot;, dim_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219158"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219159"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219160"></A>   * Terminate access to the data set and to the SD interface and </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219161"></A>   * close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219162"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219163"></A>   status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219164"></A>   status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219165"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219166"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219167"></A>   * Free all buffers.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219168"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219169"></A>   free (dim_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219170"></A>   free (sds_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219171"></A>   free (file_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219172"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219173"></A>   /*   Output of this program is :</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219174"></A>   *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219175"></A>   *    File attribute value is : Storm_track_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219176"></A>   *    SDS attribute data type is : float32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219177"></A>   *    SDS attribute values are :   2.000000 10.000000</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219178"></A>   *    Dimensional attribute values is : Seconds</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219179"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219180"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-198209"></A>&nbsp;</P>
<P CLASS="codeExample">
<A NAME="50593873_pgfId-249898"></A>&nbsp;</P>
<P CLASS="codeExample">
<A NAME="50593873_pgfId-249899"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-219187"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219190"></A>      program  attr_info</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219191"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219192"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219193"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219194"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219195"></A>      character*7  FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219196"></A>      character*13 FILE_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219197"></A>      character*11 SDS_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219198"></A>      character*10 DIM_ATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219199"></A>      parameter   (FILE_NAME = â€™SDS.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219200"></A>     +             FILE_ATTR_NAME = â€™File_contentsâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219201"></A>     +             SDS_ATTR_NAME  = â€™Valid_rangeâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219202"></A>     +             DIM_ATTR_NAME  = â€™Dim_metricâ€™)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219203"></A>      integer      DFACC_READ, DFNT_FLOAT32</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219204"></A>      parameter   (DFACC_READ   = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219205"></A>     +             DFNT_FLOAT32 = 5)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219206"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219207"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219208"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219209"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219210"></A>      integer sfstart, sffattr, sfgainfo, sfrattr, sfselect</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219211"></A>      integer sfdimid, sfendacc, sfend</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219212"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219213"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219214"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219215"></A>      integer      sd_id, sds_id, dim_id</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219216"></A>      integer      attr_index, data_type, n_values, status</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219217"></A>      real         sds_data(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219218"></A>      character*20 attr_name </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219219"></A>      character*16 file_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219220"></A>      character*7  dim_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219221"></A>      integer      i</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219222"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219223"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219224"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219225"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219226"></A>C     Open the file and initialize SD interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219227"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219228"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219229"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219230"></A>C     Find the file attribute defined by FILE_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219231"></A>C     Note that the first parameter is an SD interface identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219232"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219233"></A>      attr_index = sffattr(sd_id, FILE_ATTR_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219234"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219235"></A>C     Get information about the file attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219236"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219237"></A>      status = sfgainfo(sd_id, attr_index, attr_name, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219238"></A>     +			n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219239"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219240"></A>C     Read the file attribute data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219241"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219242"></A>      status = sfrattr(sd_id, attr_index, file_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219243"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219244"></A>C     Print file attribute value.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219245"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219246"></A>      write(*,*) &quot;File attribute value is : &quot;, file_data </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219247"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219248"></A>C     Select the first data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219249"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219250"></A>      sds_id = sfselect(sd_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219251"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219252"></A>C     Find the data set attribute defined by SDS_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219253"></A>C     Note that the first parameter is a data set identifier. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219254"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219255"></A>      attr_index = sffattr(sds_id, SDS_ATTR_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219256"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219257"></A>C     Get information about the data set attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219258"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219259"></A>      status = sfgainfo(sds_id, attr_index, attr_name, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219260"></A>     +			n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219261"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219262"></A>C     Read the SDS attribute data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219263"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219264"></A>      status = sfrattr(sds_id, attr_index, sds_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219265"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219266"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219267"></A>C     Print SDS attribute data type and values. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219268"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219269"></A>      if (data_type .eq. DFNT_FLOAT32)  then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219270"></A>         write(*,*) &quot;SDS attribute data type is : float32 &quot;  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219271"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219272"></A>      write(*,*) &quot;SDS attribute values are  : &quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219273"></A>      write(*,*)  (sds_data(i), i=1, n_values) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219274"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219275"></A>C     Get the identifier for the first dimension of the SDS. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219276"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219277"></A>      dim_id = sfdimid(sds_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219278"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219279"></A>C     Find the dimensional attribute defined by DIM_ATTR_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219280"></A>C     Note that the first parameter is a dimension identifier.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219281"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219282"></A>      attr_index = sffattr(dim_id, DIM_ATTR_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219283"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219284"></A>C     Get information about dimension attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219285"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219286"></A>      status = sfgainfo(dim_id, attr_index, attr_name, data_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219287"></A>     +			n_values)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219288"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219289"></A>C     Read the dimension attribute data. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219290"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219291"></A>      status = sfrattr(dim_id, attr_index, dim_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219292"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219293"></A>C     Print dimension attribute value.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219294"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219295"></A>      write(*,*) &quot;Dimensional attribute value is : &quot;, dim_data </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219296"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219297"></A>C     Terminate access to the data set. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219298"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219299"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219300"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219301"></A>C     Terminate access to the SD interface and close the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219302"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219303"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219304"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219305"></A>C     Output of this program is :</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219306"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219307"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219308"></A>C     File attribute value is : Storm_track_data</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219309"></A>C     SDS attribute data type is : float32 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219310"></A>C     SDS attribute values are  : </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219311"></A>C         2.00000   10.00000</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219312"></A>C      Dimensional attribute value is : Seconds</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219313"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219314"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-198341"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-35909"></A>	3.10	<A NAME="50593873_15566"></A>Predefined Attributes<A NAME="50593873_marker-123635"></A><DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-6853"></A><EM CLASS="Definition">
Predefined attributes</EM>
<A NAME="50593873_marker-27093"></A> use reserved names and in some cases predefined data type names. Predefined attributes are categorized as follows:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6854"></A><EM CLASS="Definition">
Labels</EM>
<A NAME="50593873_marker-27094"></A> can be thought of as variable names. They are often used as keys in searches to find a particular predefined attribute.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-312038"></A><EM CLASS="Definition">
Units</EM>
<A NAME="50593873_marker-312037"></A> are a means of declaring the units pertinent to a specific discipline. A freely-available library of routines is available to convert between character string and binary forms of unit specifications and to perform useful operations on the binary forms. This library is used in some netCDF applications and is recommended for use with HDF applications. For more information, refer to the <EM CLASS="TextItalic">
netCDF Userâ€™s Guide for C</EM>
 which can be obtained at <BR>
<EM CLASS="URL">
http://www.unidata.ucar.edu/software/netcdf/docs/netcdf/</EM>
.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-312040"></A><EM CLASS="Definition">
Formats</EM>
<A NAME="50593873_marker-312039"></A> describe the format in which numeric values will be printed and/or displayed. The recommended convention is to use standard FORTRAN-77 notation for describing the data format. For example, &quot;F7.2&quot; means to display seven digits with two digits to the right of the decimal point.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6857"></A><EM CLASS="Definition">
Coordinate systems</EM>
<A NAME="50593873_marker-27097"></A> contain information that should be used when interpreting or displaying the data. For example, the text strings &quot;cartesian&quot;, &quot;polar&quot; and &quot;spherical&quot; are recommended coordinate system descriptions.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6858"></A><EM CLASS="Definition">
Ranges</EM>
<A NAME="50593873_marker-27098"></A> define the maximum and minimum values of a selected valid range. The range may cover the entire data set, values outside the data set, or a subset of values within a data set. Because the HDF library does not check or update the range attribute as data is added or removed from the file, the calling program may assign any values deemed appropriate as long as they are of the same data type as the SDS array.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6925"></A><EM CLASS="Definition">
Fill value</EM>
<A NAME="50593873_marker-27099"></A> is the value used to fill the areas between non-contiguous writes to SDS arrays. For more information about fill values, refer to <A HREF="UG_html-3.htm#50593873_14160" CLASS="XRef">Fill Values and Fill Mode</A>.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6929"></A><EM CLASS="Definition">
Calibration</EM>
<A NAME="50593873_marker-27100"></A> stores scale and offset values used to create calibrated data in SDS arrays. When data are calibrated, they are typically reduced from floats, double, or large integers into 8-bit or 16-bit integers and &quot;packed&quot; into an appropriately sized array. After the scale and offset values are applied, the packed array will return to its original form. </LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-6851"></A>Predefined attributes are useful because they establish conventions that applications can depend on and because they are understood by the HDF library without users having to define them. Predefined attributes also ensure backward compatibility with earlier versions of the HDF library. They can be assigned only to data sets and dimensions. <A HREF="UG_html-3.htm#50593873_14668" CLASS="XRef">Table 3U</A> lists the predefined attributes and the types of object each attribute can be assigned to.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-13798"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_14668"></A>Predefi<A NAME="50593873_marker-27101"></A>ned Attributes List</H6>
<TABLE>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-10607"></A>HDF Data Object Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-10609"></A>Attribute Category</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-10611"></A>Attribute Name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-10613"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-10623"></A>SDS Array </P>
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-10625"></A>or </P>
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-10627"></A>Dimension</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10629"></A>Label</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10631"></A>long_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10633"></A>Name of the array</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10645"></A>Unit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10647"></A>units</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10649"></A>Units used for all dimensions and data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10661"></A>Format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10663"></A>format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10665"></A>Format for displaying dim scales and array values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="8" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-10675"></A>SDS Array Only</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10679"></A>Coordinate System</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10681"></A>coordsys</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10683"></A>Coordinate system used to interpret the SDS array</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10695"></A>Range</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10697"></A>valid_range</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10699"></A>Maximum and minimum values within a selected data range</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10711"></A>Fill Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10713"></A>__FillValue</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10715"></A>Value used to fill empty locations in an SDS array</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10727"></A>Calibration</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10729"></A>scale_factor</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10731"></A>Value by which each array value is to be multiplied</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10745"></A>scale_factor_err</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10747"></A>Error introduced by scaling SDS array data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10761"></A>add_offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10763"></A>Value to which each array value is to be added</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10777"></A>add_offset_err</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10779"></A>Error introduced by offsetting the SDS array data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-10793"></A>calibrated_nt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-10795"></A>Data type of the calibrated data</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-6893"></A><A NAME="50593873_marker-27102"></A>While the following netCDF naming conventions are not predefined in HDF, they are highly recommended to promote consistency of information-sharing among generic applications. Refer to the <EM CLASS="TextItalic">
netCDF Userâ€™s Guide for C</EM>
 for further information. </P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6894"></A><EM CLASS="Definition">
missing_value</EM>
<A NAME="50593873_marker-27103"></A>: An attribute containing a value used to fill areas of an array not intended to contain either valid data or a fill value. The scope of this attribute is local to the array. An example of this would be a region where information is unavailable, as in a geographical grid containing ocean data. The part of the grid where there is land might not have any data associated with it and in such a case the <EM CLASS="VarName">
missing_value</EM>
 value could be supplied. The <EM CLASS="VarName">
missing_value</EM>
 attribute is different from the <EM CLASS="VarName">
_FillValue</EM>
 attribute in that fill values are intended to indicate data that was expected but did not appear, whereas missing values are used to indicate data that were never expected.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6895"></A><EM CLASS="Definition">
title</EM>
<A NAME="50593873_marker-27104"></A>: A global file attribute containing a description of the contents of a file.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-6896"></A><EM CLASS="Definition">
history</EM>
<A NAME="50593873_marker-27105"></A>: A global file attribute containing the name of a program and the arguments used to derive the file. Well-behaved generic filters (programs that take HDF or netCDF files as input and produce HDF or netCDF files as output) would be expected to automatically append their name and the parameters with which they were invoked to the history attribute of an input file.</LI>
</UL>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-22798"></A>	3.10.1	<A NAME="50593873_marker-27106"></A><A NAME="50593873_36321"></A>Accessing Predefined Attributes</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-6891"></A>The SD interface provides two methods for accessing predefined attributes. The first method uses the general attribute routines for user-defined attributes described in <A HREF="UG_html-3.htm#50593873_14370" CLASS="XRef">User-defined Attributes</A>; the second employs routines specifically designed for each attribute and will be discussed in the following sections. Although the general attribute routines work well and are recommended in most cases, the specialized attribute routines are sometimes easier to use, especially when reading or writing related predefined attributes. This is true for two reasons. First, because predefined attributes are guaranteed unique names, the attribute index is unnecessary. Second, attributes with several components may be read as a group. For example, using the SD routine designed to read the predefined calibration attribute returns all five components with a single call, rather than five separate calls.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13802"></A>There is one exception: unlike predefined data set attributes, predefined dimension attributes should be read or written using the specialized attribute routines only.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-29529"></A>The predefined attribute parameters are described in <A HREF="UG_html-3.htm#50593873_18186" CLASS="XRef">Table 3V</A>. Creating a predefined attribute with parameters different from these will produce unpredictable results when the attribute is read using the corresponding predefined-attribute routine.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-29658"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_18186"></A>Predefined Attribute Definitions<A NAME="50593873_marker-36177"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-249954"></A>Category</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-249956"></A>Attribute Name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-249958"></A>Data Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-249960"></A>Number of Values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-249962"></A>Attribute Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-249964"></A>Label</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249966"></A>long_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249968"></A>DFNT_CHAR8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249970"></A>String length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-249972"></A>String</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-249974"></A>Unit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249976"></A>units</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249978"></A>DFNT_CHAR8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249980"></A>String length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-249982"></A>String</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-249984"></A>Format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249986"></A>format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249988"></A>DFNT_CHAR8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249990"></A>String length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-249992"></A>String</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-249994"></A>Coordinate <BR>
System</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249996"></A>coordsys</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-249998"></A>DFNT_CHAR8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250000"></A>String length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250002"></A>String</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-250004"></A>Range</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250006"></A>valid_range</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250008"></A>&lt;valid data type&gt;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250010"></A>2</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250012"></A>Minimum and maximum values <BR>
in 2-element array</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-250014"></A>Fill Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250016"></A>_FillValue</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250018"></A>&lt;valid data type&gt;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250020"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250022"></A>Fill value</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-250024"></A>Calibration</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250026"></A>scale_factor</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250028"></A>DFNT_FLOAT64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250030"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250032"></A>Scale</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250036"></A>scale_factor_err</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250038"></A>DFNT_FLOAT64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250040"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250042"></A>Scale error</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250046"></A>add_offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250048"></A>DFNT_FLOAT64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250050"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250052"></A>Offset</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250056"></A>add_offset_err</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250058"></A>DFNT_FLOAT64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250060"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250062"></A>Offset error</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250066"></A>calibrated_nt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250068"></A>DFNT_INT32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-250070"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-250072"></A>Data type</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-29659"></A>In addition to <EM CLASS="FunctionName">
SDreadattr</EM>
, <EM CLASS="FunctionName">
SDfindattr</EM>
 and <EM CLASS="FunctionName">
SDattrinfo </EM>
are also valid general attribute routines to use when reading a predefined attribute.<EM CLASS="FunctionName">
 SDattrinfo</EM>
 is always useful for determining the size of an attribute whose value contains a string. </P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-13833"></A>	3.10.2	<A NAME="50593873_36751"></A>SDS <A NAME="50593873_marker-27108"></A>String Attributes</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13835"></A>This section describes the predefined string attributes of the SDSs and the next section describes those of the dimensions. Predefined string attributes of an SDS include the <EM CLASS="Definition">
label</EM>
, <EM CLASS="Definition">
unit</EM>
, <EM CLASS="Definition">
format</EM>
, and <EM CLASS="Definition">
coordinate system</EM>
.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-143185"></A>	3.10.2.1	<A NAME="50593873_28052"></A>W<A NAME="50593873_marker-143184"></A>riting String Attributes of an SDS: SDsetdatastrs</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-143187"></A><EM CLASS="FunctionName">
SDsetdatastrs</EM>
<A NAME="50593873_marker-143186"></A> assigns the predefined string attributes label, unit, format, and coordinate system to an SDS array. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-143188"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetdatastrs(sds_id, label, unit, format, coord_system);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13845"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsdtstr(sds_id, label, unit, format, coord_system)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13851"></A>If you do not wish to set an attribute, set the corresponding parameter to <EM CLASS="DefName">
NULL</EM>
 in C and an empty string in FORTRAN-77. <EM CLASS="FunctionName">
SDsetdatastrs</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its arguments are further described in <A HREF="UG_html-3.htm#50593873_16855" CLASS="XRef">SDsetdatastrs and SDgetdatastrs Parameter Lists</A>. </P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-13853"></A>	3.10.2.2	<A NAME="50593873_29839"></A>Rea<A NAME="50593873_marker-27111"></A>ding String Attributes of an SDS: SDgetdatastrs</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13855"></A><EM CLASS="FunctionName">
SDgetdatastrs</EM>
<A NAME="50593873_marker-143218"></A> reads the predefined string attributes label, unit, format, and coordinate system from an SDS. These string attributes have previously been set by the routine <EM CLASS="FunctionName">
SDsetdatastrs</EM>
. The syntax of <EM CLASS="FunctionName">
SDgetdatastrs</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13857"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetdatastrs(sds_id, label, unit, format, coord_system, len);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-162468"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgdtstr(sds_id, label, unit, format, coord_system, len)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-162469"></A><EM CLASS="FunctionName">
SDgetdatastrs</EM>
 stores the predefined attributes into the parameters <EM CLASS="VarName">
label</EM>
, <EM CLASS="VarName">
unit</EM>
, <EM CLASS="VarName">
format</EM>
, and <EM CLASS="VarName">
coord_system</EM>
, which are character string buffers. If a particular attribute has not been set by <EM CLASS="FunctionName">
SDsetdatastrs</EM>
, the first character of the corresponding returned string will be <EM CLASS="DefName">
NULL</EM>
 for C and <EM CLASS="DefName">
0</EM>
 for FORTRAN-77. Each string buffer is assumed to be at least <EM CLASS="VarName">
len</EM>
 characters long, including the space to hold the <EM CLASS="DefName">
NULL</EM>
 termination character. If you do not wish to get a predefined attribute of this SDS, set the corresponding parameter to <EM CLASS="DefName">
NULL</EM>
 in C and an empty string in FORTRAN-77. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-143740"></A><EM CLASS="FunctionName">
SDgetdatastrs</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_16855" CLASS="XRef">Table 3W</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-143881"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_16855"></A>SDset<A NAME="50593873_marker-143742"></A>datastrs and SDgetdat<A NAME="50593873_marker-143743"></A>astrs Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-143746"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-143747"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-143748"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-143750"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-143752"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-143756"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-143762"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-143764"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-143768"></A>SDsetdatastrs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-143769"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-143770"></A>(sfsdtstr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143772"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143774"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143776"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143778"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143782"></A>label</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143784"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143786"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143788"></A>Label for the data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143792"></A>unit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143794"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143796"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143798"></A>Definition of the units</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143802"></A>format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143804"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143806"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143808"></A>Description of the data format</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143812"></A>coord_system</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143814"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143816"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143818"></A>Description of the coordinate system</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-143820"></A>SDgetdatastrs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-143821"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-143822"></A>(sfgdtstr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143824"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143826"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143828"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143830"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143834"></A>label</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143836"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143838"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143840"></A>Buffer for the label</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143844"></A>unit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143846"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143848"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143850"></A>Buffer for the description of the units</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143854"></A>format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143856"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143858"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143860"></A>Buffer for the description of the data format</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143864"></A>coord_system</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143866"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143868"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143870"></A>Buffer for the description of the coordinate system</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143874"></A>len</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143876"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-143878"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-143880"></A>Minimum length of the string buffers</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-13874"></A>	3.10.3	<A NAME="50593873_27706"></A>String Attributes of Dimen<A NAME="50593873_marker-27115"></A>sions</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-162481"></A>Predefined string attributes of a dimension include <EM CLASS="Definition">
label</EM>
, <EM CLASS="Definition">
unit</EM>
, and <EM CLASS="Definition">
format</EM>
. They adhere to the same definitions as those of the label, unit, and format strings for SDS attributes.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-162484"></A>	3.10.3.1	<A NAME="50593873_34270"></A>Wr<A NAME="50593873_marker-162483"></A>iting a String Attribute of a Dimension: SDsetdimstrs</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-144010"></A><EM CLASS="FunctionName">
SDsetdimstrs</EM>
 assigns the predefined string attributes label, unit, and format to an SDS dimension and its scales. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-144005"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetdimstrs(dim_id, label, unit, format);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13886"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsdmstr(dim_id, label, unit, format)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144130"></A>The argument <EM CLASS="VarName">
dim_id</EM>
 is the dimension identifier, returned by <EM CLASS="FunctionName">
SDgetdimid</EM>
, and identifies the dimension to which the attributes will be assigned. If you do not wish to set an attribute, set the corresponding parameter to <EM CLASS="DefName">
NULL</EM>
 in C and an empty string in FORTRAN-77.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144148"></A><EM CLASS="FunctionName">
SDsetdimstrs </EM>
returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_30855" CLASS="XRef">Table 3X</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-144063"></A>	3.10.3.2	<A NAME="50593873_33604"></A>Re<A NAME="50593873_marker-144062"></A>ading a String Attribute of a Dimension: SDgetdimstrs</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-144070"></A><EM CLASS="FunctionName">
SDgetdimstrs</EM>
<A NAME="50593873_marker-144077"></A> reads the predefined string attributes label, unit, and format from an SDS dimension. These string attributes have previously been set by the routine <EM CLASS="FunctionName">
SDsetdimstrs</EM>
. The syntax of <EM CLASS="FunctionName">
SDgetdimstrs</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-144064"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetdimstrs(dim_id, label, unit, format, len);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13900"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgdmstr(dim_id, label, unit, format, len)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-7017"></A><EM CLASS="FunctionName">
SDgetdimstrs</EM>
 stores the predefined attributes of the dimension into the arguments <EM CLASS="VarName">
label</EM>
, <EM CLASS="VarName">
unit</EM>
, and <EM CLASS="VarName">
format</EM>
, which are character string buffers. If a particular attribute has not been set by <EM CLASS="FunctionName">
SDsetdimstrs</EM>
, the first character of the corresponding returned string will be <EM CLASS="DefName">
NULL</EM>
 for C and <EM CLASS="DefName">
0</EM>
 for FORTRAN-77. Each string buffer is assumed to be at least <EM CLASS="VarName">
len</EM>
 characters long, including the space to hold the <EM CLASS="DefName">
NULL</EM>
 termination character. If you do not wish to get a predefined attribute of this dimension, set the corresponding parameter to <EM CLASS="DefName">
NULL</EM>
 in C and an empty string in FORTRAN-77.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-23379"></A><EM CLASS="FunctionName">
SDgetdimstrs</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_30855" CLASS="XRef">Table 3X</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-7136"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_30855"></A>SD<A NAME="50593873_marker-27121"></A>setdimstrs and S<A NAME="50593873_marker-27122"></A>Dgetdimstrs Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36322"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132471"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36323"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36325"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36327"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36331"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36337"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36339"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36343"></A>SDsetdimstrs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132472"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36344"></A>(sfsdmstr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36346"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36348"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36350"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36352"></A>Dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36356"></A>label</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36358"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36360"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36362"></A>Label describing the specified dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36366"></A>unit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36368"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36370"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36372"></A>Units to be used with the specified dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36376"></A>format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36378"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36380"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36382"></A>Format to use when displaying the scale values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36384"></A>SDgetdimstrs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132473"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36385"></A>(sfgdmstr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36387"></A>dim_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36389"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36391"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36393"></A>Dimension identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36397"></A>label</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36399"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36401"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36403"></A>Buffer for the dimension label</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36407"></A>unit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36409"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36411"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36413"></A>Buffer for the dimension unit</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36417"></A>format</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36419"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36421"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36423"></A>Buffer for the dimension format</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36427"></A>len</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36429"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36431"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36433"></A>Maximum length of the string attributes</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-13913"></A>	3.10.4	<A NAME="50593873_26381"></A>R<A NAME="50593873_marker-27123"></A>ange Attributes</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13915"></A>The attribute <EM CLASS="Definition">
range</EM>
 contains user-defined maximum and minimum values in a selected range. Since the HDF library does not check or update the range attribute as data is added or removed from the file, the calling program may assign any values deemed appropriate. Also, because the maximum and minimum values are supposed to relate to the data set, it is assumed that they are of the same data type as the data. </P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-13919"></A>	3.10.4.1	<A NAME="50593873_28522"></A>Writ<A NAME="50593873_marker-27125"></A>ing a Range Attribute: SDsetrange</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13921"></A><EM CLASS="FunctionName">
SDsetrange </EM>
<A NAME="50593873_marker-27126"></A>sets the maximum and minimum range values for the data set identified by <EM CLASS="VarName">
sds_id</EM>
 to the values provided by the parameters <EM CLASS="VarName">
max</EM>
 and <EM CLASS="VarName">
min</EM>
. The syntax of the routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13923"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetrange(sds_id, max, min);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13925"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsrange(sds_id, max, min)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-23575"></A><EM CLASS="FunctionName">
SDsetrange</EM>
 does not compute the maximum and minimum range values, it only stores the values as given. As a result, the maximum and minimum range values may not always reflect the actual maximum and minimum range values in the data set data. Recall that the type of max and min is assumed to be the same as that of the data set data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144179"></A><EM CLASS="FunctionName">
SDsetrange</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_27269" CLASS="XRef">Table 3Y</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-13933"></A>	3.10.4.2	<A NAME="50593873_36056"></A>Re<A NAME="50593873_marker-27127"></A>ading a Range Attribute: SDgetrange</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-35966"></A><EM CLASS="FunctionName">
SDgetrange </EM>
<A NAME="50593873_marker-35965"></A>reads the maximum and minimum valid values of a data set. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-35967"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetrange(sds_id, &amp;max, &amp;min);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13939"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgrange(sds_id, max, min)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-23726"></A>The maximum and minimum range values are stored in the parameters <EM CLASS="VarName">
max</EM>
 and <EM CLASS="VarName">
min</EM>
, respectively, and must have previously been set by <EM CLASS="FunctionName">
SDsetrange</EM>
. Recall that the type of <EM CLASS="VarName">
max</EM>
 and <EM CLASS="VarName">
min</EM>
 is assumed to be the same as that of the data set data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144221"></A><EM CLASS="FunctionName">
SDgetrange</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_27269" CLASS="XRef">Table 3Y</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-13946"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_27269"></A>SDse<A NAME="50593873_marker-27129"></A>trange and S<A NAME="50593873_marker-27130"></A>Dgetrange Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36440"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132476"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36441"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36443"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36445"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36449"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36455"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36457"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36461"></A>SDsetrange</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132477"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36462"></A>(sfsrange)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36464"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36466"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36468"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36470"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36474"></A>max</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36476"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36478"></A>&lt;valid data type&gt;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36480"></A>Maximum value to be stored</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36484"></A>min</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36486"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36488"></A>&lt;valid data type&gt;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36490"></A>Minimum value to be stored</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36492"></A>SDgetrange</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132478"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-36493"></A>(sfgrange)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36495"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36497"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36499"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36501"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36505"></A>max</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36507"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36509"></A>&lt;valid data type&gt;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36511"></A>Buffer for the maximum value</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36515"></A>min</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36517"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36519"></A>&lt;valid data type&gt;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-36522"></A>Buffer for the minimum value</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-13948"></A>	3.10.5	<A NAME="50593873_14160"></A>Fill V<A NAME="50593873_marker-27253"></A>alues and Fill Mode</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13950"></A><EM CLASS="Definition">
A fill value</EM>
<A NAME="50593873_marker-29946"></A> is the value used to fill the spaces between non-contiguous writes to SDS arrays; it can be set with <EM CLASS="FunctionName">
SDsetfillvalue</EM>
. If a fill value is set before writing data to an SDS, the entire array is initialized to the specified fill value. By default, any location not subsequently overwritten with SDS data will contain the fill value. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-13952"></A>A fill value must be of the same data type as the array to which it is written. To avoid conversion errors, use data-specific fill values instead of special architecture-specific values, such as infinity and <A NAME="50593873_marker-27131"></A><EM CLASS="Definition">
Not-a-Number </EM>
or <EM CLASS="Definition">
NaN</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-163992"></A>A <EM CLASS="Definition">
fill mode</EM>
<A NAME="50593873_marker-164002"></A> specifies whether the fill value is to be written to all the SDSs in the file; it can be set with <EM CLASS="FunctionName">
SDsetfillmode</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-163998"></A>Writing fill values to an SDS can involve more I/O overhead than is necessary, particularly in situations where the data set is to be contiguously filled with data before any read operation is made. In other words, writing fill values is only necessary when there is a possibility that the data set will be read before all gaps between writes are filled with data, i.e., before all elements in the array have been assigned values. Thus, for a file that has only data sets containing contiguous data, the fill mode should be set to <EM CLASS="DefName">
SD_NOFILL</EM>
 (or <EM CLASS="DefName">
256</EM>
). Avoiding unnecessary filling can substantially increase the application performance.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-164740"></A>For a non-contiguous data set, the array elements that have no actual data values must be filled with a fill value before the data set is read. Thus, for a file that has a non-contiguous data set, the fill mode should be set to <EM CLASS="DefName">
SD_FILL</EM>
 (or <EM CLASS="DefName">
0</EM>
) and a fill value will be written to the all data sets in the file.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-164741"></A>Note that, currently, <EM CLASS="FunctionName">
SDsetfillmode</EM>
 specifies the fill mode of all data sets in the file. Thus, either all data sets are in<EM CLASS="DefName">
 SD_FILL </EM>
mode or all data sets are in<EM CLASS="DefName">
 SD_NOFILL </EM>
mode. However, when a specific SDS needs to be written with a fill value while others in the file do not, the following procedure can be used: set the fill mode to <EM CLASS="DefName">
SD_FILL</EM>
, write data to the data set requiring fill values, then set the fill mode back to <EM CLASS="DefName">
SD_NOFILL</EM>
.  This procedure will produce one data set with fill values while the remaining data sets have no fill values.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-13956"></A>	3.10.5.1	<A NAME="50593873_19314"></A>Writ<A NAME="50593873_marker-27133"></A>ing a Fill Value Attribute: SDsetfillvalue</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-13958"></A><EM CLASS="FunctionName">
SDsetfillvalue </EM>
<A NAME="50593873_marker-27134"></A>assigns a new value to the fill value attribute for an SDS array. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13960"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetfillvalue(sds_id, fill_val);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-13964"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfsfill(sds_id, fill_val)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-147836"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfscfill(sds_id, fill_val)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-584008"></A>The argument <EM CLASS="VarName">
fill_val</EM>
 is the new fill value. It is recommended that you set the fill value before writing data to an SDS array, as calling <EM CLASS="FunctionName">
SDsetfillvalue</EM>
 after data is written to an SDS array only changes the fill value attribute â€” it does not update the existing fill values written in the file. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-588711"></A>The following are the default fill values for different number types:</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-616979"></A>&nbsp;</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-588712"></A>FILL_BYTE   (char)-127 /* Largest Negative value */</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-588713"></A>FILL_CHAR   (char)0</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-588714"></A>FILL_SHORT  (short)-32767</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-588715"></A>FILL_LONG   (long)-2147483647</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-588716"></A>FILL_FLOAT   9.9692099683868690e+36 /* near 15 * 2^119 */</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-588736"></A>FILL_DOUBLE  9.9692099683868690e+36</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-584010"></A>There are two FORTRAN-77 versions of this routine: <EM CLASS="FunctionName">
sfsfill</EM>
 and <EM CLASS="FunctionName">
sfscfill</EM>
. <EM CLASS="FunctionName">
sfsfill</EM>
 writes numeric fill value data and <EM CLASS="FunctionName">
sfscfill</EM>
 writes character fill value data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144254"></A><EM CLASS="FunctionName">
SDsetfillvalue</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_20926" CLASS="XRef">SDsetfillvalue, SDgetfillvalue, and SDsetfillmode Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-13974"></A>	3.10.5.2	<A NAME="50593873_31868"></A>Rea<A NAME="50593873_marker-27135"></A>ding a Fill Value Attribute: SDgetfillvalue</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-156335"></A><EM CLASS="FunctionName">
SDgetfillvalue</EM>
<A NAME="50593873_marker-156334"></A> reads in the fill value of an SDS array as specified by a <EM CLASS="FunctionName">
SDsetfillvalue</EM>
 call or its equivalent. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-156336"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetfillvalue(sds_id, &amp;fill_val);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-147864"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgfill(sds_id, fill_val)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-147865"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfgcfill(sds_id, fill_val)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147866"></A>The fill value is stored in the argument <EM CLASS="VarName">
fill_val</EM>
 which is previously allocated based on the data type of the SDS data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144276"></A>There are two FORTRAN-77 versions of this routine: <EM CLASS="FunctionName">
sfgfill</EM>
<A NAME="50593873_marker-144274"></A> and <EM CLASS="FunctionName">
sfgcfill</EM>
<A NAME="50593873_marker-144275"></A>. The <EM CLASS="FunctionName">
sfgfill</EM>
 routine reads numeric fill value data and <EM CLASS="FunctionName">
sfgcfill</EM>
 reads character fill value data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144277"></A><EM CLASS="FunctionName">
SDgetfillvalue</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if a fill value is retrieved successfully, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise, including when the fill value has not been set. The parameters of <EM CLASS="FunctionName">
SDgetfillvalue</EM>
 are further described in <A HREF="UG_html-3.htm#50593873_20926" CLASS="XRef">Table 3Z</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-29967"></A>	3.10.5.3	<A NAME="50593873_12863"></A>Setting the Fill Mode for all SDSs in the Specified File: SDsetfillmode</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-163930"></A><EM CLASS="FunctionName">
SDsetfillmode</EM>
 sets the fill mode for all data sets contained in the file identified by the parameter <EM CLASS="VarName">
sd_id</EM>
. The syntax of <EM CLASS="FunctionName">
SDsetfillmode</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-29970"></A><EM CLASS="syntaxLang">
C:</EM>
		old_fmode = SDsetfillmode(sd_id, fill_mode);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-29971"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	old_fmode = sfsflmd(sd_id, fill_mode)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-29972"></A>The argument <EM CLASS="VarName">
fill_mode</EM>
 is the fill mode to be applied and can be set to either <EM CLASS="DefName">
SD_FILL</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
SD_NOFILL</EM>
 (or <EM CLASS="DefName">
256</EM>
). <EM CLASS="DefName">
SD_FILL</EM>
 specifies that fill values will be written to all SDSs in the specified file by default. If <EM CLASS="FunctionName">
SDsetfillmode</EM>
 is never called before <EM CLASS="FunctionName">
SDsetfillvalue</EM>
, <EM CLASS="DefName">
SD_FILL</EM>
 is the default fill mode. <EM CLASS="DefName">
SD_NOFILL</EM>
 specifies that, by default, fill values will not be written to all SDSs in the specified file. This can be overridden for a specific SDS by calling <EM CLASS="FunctionName">
SDsetfillmode</EM>
 then writing data to this data set before closing the file.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-30091"></A>Note that whenever a file has been newly opened, or has been closed and then re-opened, the default <EM CLASS="DefName">
SD_FILL</EM>
 fill mode will be in effect until it is changed by a call to <EM CLASS="FunctionName">
SDsetfillmode</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-147875"></A><EM CLASS="FunctionName">
SDsetfillmode</EM>
 returns the fill mode value before it is reset or a value of <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of this routine are further described in <A HREF="UG_html-3.htm#50593873_20926" CLASS="XRef">Table 3Z</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-147975"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_20926"></A>SD<A NAME="50593873_marker-147880"></A>setfillvalue, SD<A NAME="50593873_marker-147881"></A>getfillvalue, and SDsetfillm<A NAME="50593873_marker-147882"></A>ode <A NAME="50593873_marker-147883"></A>Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-147886"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-147887"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-147888"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-147890"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-147892"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-147896"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-147902"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-147904"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147908"></A>SDsetfillvalue</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-147909"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147910"></A>(sfsfill/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147911"></A>sfscfill)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147913"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147915"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147917"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-147919"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147923"></A>fill_val</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147925"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147927"></A>&lt;valid numeric data type&gt;/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-156344"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-147929"></A>Fill value to be set</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147931"></A>SDgetfillvalue</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-147932"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147933"></A>(sfgfill/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147934"></A>sfgcfill)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147936"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147938"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147940"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-147942"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147946"></A>fill_val</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147948"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147950"></A>&lt;valid numeric data type&gt;/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-156345"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-147952"></A>Buffer for the fill value</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147954"></A>SDsetfillmode</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-147955"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-147956"></A>(sfsflmd)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147958"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147960"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147962"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-147964"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147968"></A>fill_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147970"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-147972"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-147974"></A>Fill mode to be set</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-13997"></A>	3.10.6	<A NAME="50593873_41622"></A>Ca<A NAME="50593873_marker-27139"></A>libration Attributes</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-144404"></A><A NAME="50593873_marker-144403"></A>The <EM CLASS="Definition">
calibration attributes</EM>
 are designed to store calibration information associated with data set data. When data is calibrated, the values in an array can be represented using a smaller data type than the original. For instance, an array containing data of type <EM CLASS="VarName">
float</EM>
 could be stored as an array containing data of type 8- or 16-bit integer. Note that neither function performs any operation on the data set.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-187705"></A>	3.10.6.1	<A NAME="50593873_marker-187704"></A><A NAME="50593873_25997"></A>Setting Calibration Information: SDsetcal</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-187707"></A><EM CLASS="FunctionName">
SDsetcal</EM>
<A NAME="50593873_marker-187706"></A> stores the scale factor, offset, scale factor error, offset error, and the data type of the uncalibrated data set for the specified data set. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-14007"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetcal(sds_id, cal, cal_error, offset, off_err, data_type);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-14009"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfscal(sds_id, cal, cal_error, offset, off_err, data_type)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-156348"></A><EM CLASS="FunctionName">
SDsetcal</EM>
 has six arguments; <EM CLASS="VarName">
sds_id</EM>
, <EM CLASS="VarName">
cal</EM>
, <EM CLASS="VarName">
cal_error</EM>
, <EM CLASS="VarName">
offset</EM>
, <EM CLASS="VarName">
off_err</EM>
, and <EM CLASS="VarName">
data_type</EM>
. The argument <EM CLASS="VarName">
cal</EM>
 represents a single value that when multiplied against every value in the calibrated data array reproduces the original data array (assuming an <EM CLASS="VarName">
offset</EM>
 of 0). The argument <EM CLASS="VarName">
offset</EM>
 represents a single value that when subtracted from every value in the calibrated array reproduces the original data (assuming a <EM CLASS="VarName">
cal </EM>
of 1). The values of the calibrated data array relate to the values of the original data array according to the following equation:</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-156349"></A>orig_value = cal * (cal_value - offset)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-156350"></A>In addition to <EM CLASS="VarName">
cal</EM>
 and <EM CLASS="VarName">
offset</EM>
, <EM CLASS="FunctionName">
SDsetcal</EM>
 also includes the scale and offset errors. The argument <EM CLASS="VarName">
cal_err</EM>
 contains the potential error of the calibrated data due to scaling; <EM CLASS="VarName">
offset_err</EM>
 contains the potential error for the calibrated data due to the offset. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-23935"></A><EM CLASS="FunctionName">
SDsetcal</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further described in <A HREF="UG_html-3.htm#50593873_12871" CLASS="XRef">Table 3AA</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-14023"></A>	3.10.6.2	<A NAME="50593873_11605"></A>Re<A NAME="50593873_marker-27144"></A>ading Calibrated Data: SDgetcal</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-147392"></A><EM CLASS="FunctionName">
SDgetcal</EM>
<A NAME="50593873_marker-147391"></A> reads calibration attributes for an SDS array as previously written by <EM CLASS="FunctionName">
SDsetcal</EM>
. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-147400"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetcal(sds_id, &amp;cal, &amp;cal_error, &amp;offset, &amp;offset_err, &amp;data_type);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-147429"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgcal(sds_id, cal, cal_error, offset, offset_err, data_type)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-14035"></A>Because the HDF library does not actually apply calibration information to the data, <EM CLASS="FunctionName">
SDgetcal</EM>
 can be called anytime before or after the data is read. If a calibration record does not exist, <EM CLASS="FunctionName">
SDgetcal</EM>
 returns <EM CLASS="DefName">
FAIL</EM>
. <EM CLASS="FunctionName">
SDgetcal</EM>
 takes six arguments: <EM CLASS="VarName">
sds_id</EM>
, <EM CLASS="VarName">
cal</EM>
, <EM CLASS="VarName">
cal_error</EM>
, <EM CLASS="VarName">
offset</EM>
, <EM CLASS="VarName">
offset_err</EM>
, and <EM CLASS="VarName">
data_type</EM>
. Refer to <A HREF="UG_html-3.htm#50593873_25997" CLASS="XRef">Setting Calibration Information: SDsetcal</A> for the description of these arguments.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144433"></A><EM CLASS="FunctionName">
SDgetcal</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDgetcal</EM>
 are described in <A HREF="UG_html-3.htm#50593873_12871" CLASS="XRef">Table 3AA</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-14040"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_12871"></A>SD<A NAME="50593873_marker-27146"></A>setcal and <A NAME="50593873_marker-27147"></A>SDgetcal Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-23993"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132489"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-23994"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-23996"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-24000"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-24002"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-24008"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-24010"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-24014"></A>SDsetcal</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132490"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-24015"></A>(sfscal)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24017"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24019"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24021"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24023"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24027"></A>cal</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24029"></A>float64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24031"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24033"></A>Calibration factor</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24037"></A>cal_error</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24039"></A>float64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24041"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24043"></A>Calibration error</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24047"></A>offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24049"></A>float64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24051"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24053"></A>Uncalibrated offset</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24057"></A>offset_err</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24059"></A>float64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24061"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24063"></A>Uncalibrated offset error</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24067"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24069"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24071"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24073"></A>Data type of uncalibrated data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-24075"></A>SDgetcal</H6>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-132491"></A>[intn]</P>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-24076"></A>(sfgcal)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24078"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24080"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24082"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24084"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24088"></A>cal</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24090"></A>float64 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24092"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24094"></A>Calibration factor</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24098"></A>cal_error</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24100"></A>float64 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24102"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24104"></A>Calibration error</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24108"></A>offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24110"></A>float64 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24112"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24114"></A>Uncalibrated offset</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24118"></A>offset_err</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24120"></A>float64 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24122"></A>real*8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24124"></A>Uncalibrated offset error</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24128"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24130"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-24132"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-24134"></A>Data type of uncalibrated data</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-14042"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Calibrating Data.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-14044"></A>Suppose the values in the calibrated array <EM CLASS="VarName">
cal_val</EM>
 are the following integers:</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-14046"></A>cal_val[6] = {2, 4, 5, 11, 26, 81}</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-14048"></A>By applying the calibration equation <EM CLASS="VarName">
orig = cal * (cal_val - offset)</EM>
 with <EM CLASS="VarName">
cal = 0.50</EM>
 and <EM CLASS="VarName">
offset = -2000.0</EM>
, the calibrated array <EM CLASS="VarName">
cal_val[]</EM>
 returns to its original floating-point form:</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-252463"></A>original_val[6] = {1001.0, 1002.0, 1002.5, 1005.5, 1013.0, 1040.<A NAME="50593873_marker-252461"></A>5}<A NAME="50593873_marker-252462"></A></P>
</DIV>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-252464"></A>	3.11	Convenient Operations Related to File and Environment<DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-274754"></A><A NAME="50593873_marker-274753"></A>The routines covered in this section provide methods for obtaining file name, objectâ€™s type, length of objectâ€™s name, and number of opened files allowed.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-274755"></A><EM CLASS="FunctionName">
SDgetfilename</EM>
 retrieves the name of the file.  <EM CLASS="FunctionName">
SDgetnamelen</EM>
 retrieves the length of an objectâ€™s name.  <EM CLASS="FunctionName">
SDreset_maxopenfiles</EM>
 resets the maximum number of files that can be opened at a time.  <EM CLASS="FunctionName">
SDget_maxopenfiles</EM>
 retrieves current limits on opened files.  <EM CLASS="FunctionName">
SDget_numopenfiles</EM>
 returns the number of files currently open.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-252498"></A>These routines are described individually in the following subsections.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-252569"></A>	3.11.1	<A NAME="50593873_marker-252568"></A><A NAME="50593873_41612"></A>Obtaining the Name of a File: SDgetfilename</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-252571"></A>Given an identifier to a file,<EM CLASS="FunctionName">
 SDgetfilename</EM>
<A NAME="50593873_marker-252570"></A> returns its name via parameter <EM CLASS="VarName">
filename</EM>
.  The user is repsonsible for allocating sufficient space to hold the file name.  It can be at most <EM CLASS="DefName">
H4_MAX_NC_NAME</EM>
 characters in length.  <EM CLASS="FunctionName">
SDgetnamelen</EM>
 can be used to obtain the actual length of the name.  The syntax of <EM CLASS="FunctionName">
SDgetfilename</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-251592"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetfilename(sd_id, filename);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-252608"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgetfname(sd_id, filename)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-252609"></A><EM CLASS="FunctionName">
SDgetfilename</EM>
 returns the length of the file name, without <EM CLASS="Code">
'\0'</EM>
, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDgetfilename</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_62006" CLASS="XRef">Table 3AB</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-254914"></A>	3.11.2	<A NAME="50593873_marker-254913"></A><A NAME="50593873_69218"></A>Obtaining the Length of an HDF4 Objectâ€™s Name: SDgetnamelen</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-254916"></A><EM CLASS="FunctionName">
SDgetnamelen </EM>
<A NAME="50593873_marker-254915"></A>retrieves the length of an objectâ€™s name, given the objectâ€™s identifier, <EM CLASS="VarName">
obj_id</EM>
.  The object can be a file, a dataset, or a dimension. SDgetnamelen stores the length in the parameter <EM CLASS="VarName">
name_len</EM>
.  The length does not include the '<EM CLASS="DefName">
\0</EM>
' character.  The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-251613"></A><EM CLASS="syntaxLang">
C:</EM>
			status = SDgetnamelen(obj_id, name_len);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-251614"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgetnamelen(obj_id, name_len)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-251621"></A><EM CLASS="FunctionName">
SDgetnamelen</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDgetnamelen</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_62006" CLASS="XRef">Table 3AB</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-313921"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_62006"></A>SDgetfilename and SDgetnamelen <A NAME="50593873_marker-313803"></A>Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-313806"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-313807"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-313808"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-313810"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-313812"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-313816"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-313822"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-313824"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313828"></A>SDgetfilename</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-313829"></A>[intn]</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-313830"></A>(sfgetfname)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313832"></A>sd_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313834"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313836"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313838"></A>SD interface identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313842"></A>filename</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313844"></A>char*</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313846"></A>character*(*)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313848"></A>Name of the file</P>
</TD>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313860"></A>SDgetnamelen</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-313861"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313862"></A>(sfgetnamelen)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313864"></A>obj_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313866"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313868"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313870"></A>HDF4 object identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313874"></A>name_len</P>
</TD>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313876"></A>uint16*</P>
</TD>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313878"></A>integer</P>
</TD>
<TD ROWSPAN="5" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313880"></A>Length of the name</P>
</TD>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-313922"></A>&nbsp;</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-313924"></A>	3.11.3	<A NAME="50593873_88484"></A>Resetting the Allowed Number of Opened Files: SDreset_maxopenfiles</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-251626"></A><EM CLASS="FunctionName">
SDreset_maxopenfiles </EM>
resets the maximum number of files can be opened at the same time.  The syntax of the routine <EM CLASS="FunctionName">
SDsetcompress</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-251634"></A><EM CLASS="syntaxLang">
C:</EM>
		curr_max = SDreset_maxopenfiles(req_max);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-251635"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	curr_max = sfrmaxopenf(req_max)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-254861"></A>Prior to release 4.2.2, the maximum number of files that can be opened at the same time was limited to 32.  In HDF 4.2.2 and later versions, when this limit is reached, the library will increase it to the system limit minus 3 to account for stdin, stdout, and stderr.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-254863"></A>This function can be called anytime to change the maximum number of open files allowed in HDF to <EM CLASS="VarName">
req_max</EM>
.  If <EM CLASS="VarName">
req_max</EM>
 is <EM CLASS="DefName">
0</EM>
, <EM CLASS="FunctionName">
SDreset_maxopenfiles</EM>
 will simply return the current maximum number of open files allowed.  If <EM CLASS="VarName">
req_max</EM>
 exceeds system limit, <EM CLASS="FunctionName">
SDreset_maxopenfiles</EM>
 will reset the maximum number of open files to the system limit, and return that value.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-254893"></A>Furthermore, if the system maximum limit is reached, the library will push the error code <EM CLASS="DefName">
DFE_TOOMANY</EM>
 onto the error stack.  User applications can detect this after an <EM CLASS="FunctionName">
SDstart</EM>
 fails.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-254894"></A><EM CLASS="FunctionName">
SDreset_maxopenfiles</EM>
 returns the current maximum number of opened files allowed, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).  The parameters of <EM CLASS="FunctionName">
SDreset_maxopenfiles</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_20129" CLASS="XRef">SDreset_maxopenfiles, SDget_maxopenfiles, andSDget_numopenfiles Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-254895"></A>	3.11.4	<A NAME="50593873_66374"></A>Obtaining Current Limits on Opened Files: SDget_maxopenfiles</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-254934"></A><EM CLASS="FunctionName">
SDget_maxopenfiles</EM>
 retrieves the current number of opened files allowed in HDF and the maximum number of opened files allowed on a system.  The two parameters, curr_max and sys_limit, contain the two values, respectively.  The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-251644"></A><EM CLASS="syntaxLang">
C:</EM>
			status = SDget_maxopenfiles(curr_max, sys_limit);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-251645"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgmaxopenf(cur_max, sys_limit)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-253567"></A><EM CLASS="FunctionName">
SDget_maxopenfiles</EM>
 returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDget_maxopenfiles</EM>
 are specified in <A HREF="UG_html-3.htm#50593873_20129" CLASS="XRef">SDreset_maxopenfiles, SDget_maxopenfiles, andSDget_numopenfiles Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-255503"></A>	3.11.5	<A NAME="50593873_75346"></A>Obtaining Number of Opened Files: SDget_numopenfiles</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-255505"></A><A NAME="50593873_marker-255504"></A><EM CLASS="FunctionName">
SDget_numopenfiles</EM>
 returns the number of files that are opened currently. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-255506"></A><EM CLASS="syntaxLang">
C:</EM>
		num_opened = SDget_numopenfiles();</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-255507"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_opened = sfgnumopenf(cur_num)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-255508"></A><EM CLASS="FunctionName">
SDget_numopenfiles</EM>
 returns the number of opened files or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDget_numopenfiles </EM>
 are specified in <A HREF="UG_html-3.htm#50593873_20129" CLASS="XRef">SDreset_maxopenfiles, SDget_maxopenfiles, andSDget_numopenfiles Parameter Lists</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-312952"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_20129"></A>SDreset_maxopenfiles, SDget_maxopenfiles, and<A NAME="50593873_marker-312953"></A>SDget_numopenfiles Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-312956"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-312957"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-312958"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-312960"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-312962"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-312966"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-312972"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-312974"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313072"></A>SDreset_maxopenfiles</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-313073"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313074"></A>(sfrmaxopenf)</H6>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313076"></A>req_max</P>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313078"></A>intn</P>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313080"></A>integer</P>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313082"></A>Requested maximum number of opened files</P>
</TD>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313114"></A>SDget_maxopenfiles</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-313115"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313116"></A>(sfgmaxopenf)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313118"></A>curr_max</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313120"></A>intn* </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313122"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313124"></A>Current number of open files allowed</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313128"></A>sys_limit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313130"></A>intn*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313132"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313134"></A>Maximum number of open files allowed on a system</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313136"></A>SDget_numopenfiles</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-313137"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-313138"></A>(sfgnumopenf)</H6>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313140"></A>curr_num</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313142"></A>N/A</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-313144"></A>integer</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-313146"></A>Current number of open files.  C function has no parameter</P>
</TD>
</TR>
<TR>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-313236"></A>	3.12	<A NAME="50593873_37811"></A>Chunked (or Tiled) Scientific Data Sets<A NAME="50593873_marker-313235"></A><DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-46907"></A>NOTE: It is strongly encouraged that HDF users who wish to use the SD chunking routines first read the section on SD chunking in <EM CLASS="Chapter-Reference">
<A HREF="UG_html-14.htm#50593884_34005" CLASS="XRef">HDF Performance Issues</A></EM>
. In that section the concepts of chunking are explained, as well as their use in relation to HDF. As the ability to work with chunked data has been added to HDF functionality for the purpose of addressing specific performance-related issues, you should first have the necessary background knowledge to correctly determine how chunking will positively or adversely affect your application.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-46908"></A>This section will refer to both &quot;tiled&quot; and &quot;chunked&quot; SDSs as simply <EM CLASS="Definition">
chunked SDSs</EM>
, as tiled SDSs are the two-dimensional case of chunked SDSs.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-46911"></A>	3.12.1	<A NAME="50593873_32968"></A>Making an SDS a Chunked SDS: SDsetchunk<A NAME="50593873_marker-123586"></A></H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-46912"></A>In HDF, an SDS must first be created as a generic SDS through the <EM CLASS="FunctionName">
SDcreate</EM>
 routine, then <EM CLASS="FunctionName">
SDsetchunk</EM>
 is called to make that generic SDS a chunked SDS. Note that there are two restrictions that apply to chunked SDSs. The maximum number of chunks in a single HDF file is 65,535 and a chunked SDS cannot contain an unlimited dimension. <A NAME="50593873_marker-148655"></A><EM CLASS="FunctionName">
SDsetchunk</EM>
 sets the chunk size and the compression method for a data set. The syntax of <EM CLASS="FunctionName">
SDsetchunk</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-158463"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetchunk(sds_id, c_def, flag);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-158475"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfschnk(sds_id, dim_length, comp_type, comp_prm)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-148441"></A>The chunking information is provided in the parameters <EM CLASS="VarName">
c_def</EM>
 and <EM CLASS="VarName">
flag</EM>
 in C, and the parameters <EM CLASS="VarName">
comp_type</EM>
 and <EM CLASS="VarName">
comp_prm</EM>
 in FORTRAN-77.</P>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-148605"></A>In C:</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-274177"></A>The parameter <EM CLASS="VarName">
c_def</EM>
 has type <EM CLASS="DefName">
HDF_CHUNK_DEF</EM>
 which is defined as follows:</P>
<UL>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-274179"></A>type<A NAME="50593873_marker-274178"></A>def union hdf_chunk_def_u {</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-274180"></A>	int32 chunk_lengths[MAX_VAR_DIMS]; </LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272103"></A>	struct {</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272104"></A>		int32 chunk_lengths[MAX_VAR_DIMS]; </LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272105"></A>		int32 comp_type;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272106"></A>		comp_info cinfo;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272107"></A>	} comp;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272108"></A>	struct {</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272109"></A>		int32 chunk_lengths[MAX_VAR_DIMS]; </LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272110"></A>		intn start_bit;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272111"></A>		intn bit_len;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272112"></A>		intn sign_ext;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272113"></A>		intn fill_one;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272114"></A>	} nbit;</LI>
<LI CLASS="codebodyUG">
<A NAME="50593873_pgfId-272115"></A>} HDF_CHUNK_DEF</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-148592"></A>Refer to the reference manual page for <EM CLASS="FunctionName">
SDsetcompress</EM>
 for the definition of the structure <EM CLASS="VarName">
comp_info</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-148597"></A>The parameter <EM CLASS="VarName">
flag</EM>
 specifies the type of the data set, i.e., if the data set is chunked or chunked and compressed with either RLE, Skipping Huffman, GZIP, Szip, or NBIT compression methods. Valid values of <EM CLASS="VarName">
flag</EM>
 are <EM CLASS="DefName">
HDF_CHUNK</EM>
 for a chunked data set, (<EM CLASS="DefName">
HDF_CHUNK | HDF_COMP</EM>
) for a chunked data set compressed with RLE, Skipping Huffman, GZIP, and Szip compression methods, and (<EM CLASS="DefName">
HDF_CHUNK | HDF_NBIT</EM>
) for a chunked NBIT-compressed data set.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-148606"></A>There are three pieces of chunking and compression information which should be specified: chunking dimensions, compression type, and, if needed, compression parameters.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-148611"></A>If the data set is chunked, i.e., <EM CLASS="VarName">
flag</EM>
 value is <EM CLASS="DefName">
HDF_CHUNK</EM>
, then the elements of the array <EM CLASS="VarName">
chunk_lengths</EM>
 in the union <EM CLASS="VarName">
c_def</EM>
 (<EM CLASS="VarName">
c_def.chunk_lengths[]</EM>
) have to be initialized to the chunk dimension sizes.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-164088"></A>If the data set is chunked and compressed using RLE, Skipping Huffman, GZIP, or Szip methods (i.e., <EM CLASS="VarName">
flag</EM>
 value is set up to (<EM CLASS="DefName">
HDF_CHUNK | HDF_COMP</EM>
)), then the elements of the array <EM CLASS="Code">
chunk_lengths</EM>
 of the structure <EM CLASS="VarName">
comp</EM>
 in the union <EM CLASS="VarName">
c_def</EM>
<EM CLASS="Code">
 (c_def.comp.chunk_lengths[]</EM>
) have to be initialized to the chunk dimension sizes.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-148638"></A>If the data set is chunked and NBIT compression is applied (i.e., <EM CLASS="VarName">
flag</EM>
 values is set up to (<EM CLASS="DefName">
HDF_CHUNK | HDF_NBIT</EM>
)), then the elements of the array <EM CLASS="Code">
chunk_lengths</EM>
 of the structure <EM CLASS="Code">
nbit</EM>
 in the union <EM CLASS="Code">
c_def</EM>
 (<EM CLASS="Code">
c_def.nbit.chunk_lengths[]</EM>
) have to be initialized to the chunk dimension sizes.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-164097"></A>The values of <EM CLASS="DefName">
HDF_CHUNK</EM>
, <EM CLASS="DefName">
HDF_COMP</EM>
, and <EM CLASS="DefName">
HDF_NBIT</EM>
 are defined in the header file <EM CLASS="Code">
hproto.h</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-274275"></A>Compression types are passed in the field <EM CLASS="VarName">
comp_type</EM>
 of the structure <EM CLASS="VarName">
cinfo</EM>
, which is an element of the structure <EM CLASS="Code">
comp</EM>
 in the union <EM CLASS="VarName">
c_def</EM>
 (<EM CLASS="Code">
c_def.comp.cinfo.comp_type</EM>
). Valid compression types are: <EM CLASS="DefName">
COMP_CODE_RLE</EM>
 for RLE, <EM CLASS="DefName">
COMP_CODE_SKPHUFF</EM>
 for Skipping Huffman, <EM CLASS="DefName">
COMP_CODE_DEFLATE</EM>
 for GZIP compression.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-274276"></A>For Skipping Huffman, GZIP, and Szip compression methods, parameters are passed in corresponding fields of the structure <EM CLASS="VarName">
cinfo</EM>
. Specify skipping size for Skipping Huffman compression in the field <EM CLASS="Code">
c_def.comp.cinfo.skphuff.skp_size</EM>
; this value cannot be less than 1. Specify deflate level for GZIP compression in the field <EM CLASS="Code">
c_def.comp.cinfo.deflate_level</EM>
. Valid values of deflate levels are integers from 0 to 9 inclusive.  Specify the Szip options mask and the number of pixels per block in a chunked and Szip-compressed dataset in the fields <EM CLASS="Code">
c_info.szip.options_mask</EM>
 and <EM CLASS="Code">
c_info.szip.pixels_per_block</EM>
, respectively<EM CLASS="Code">
.</EM>
</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-148649"></A>NBIT compression parameters are specified in the fields <EM CLASS="VarName">
start_bit</EM>
, <EM CLASS="VarName">
bit_len</EM>
, <EM CLASS="VarName">
sign_ext</EM>
, and <EM CLASS="VarName">
fill_one</EM>
 in the structure <EM CLASS="VarName">
nbit</EM>
 of the union <EM CLASS="VarName">
c_def</EM>
.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593873_pgfId-148866"></A>In FORTRAN-77:</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-148661"></A>The <EM CLASS="VarName">
dim_length</EM>
 array specifies the chunk dimensions.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-148668"></A>The <EM CLASS="VarName">
comp_type</EM>
 parameter specifies the compression type. Valid compression types and their values are defined in the hdf.inc file, and are listed below.</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-148675"></A><EM CLASS="DefName">
COMP_CODE_NONE</EM>
 (or <EM CLASS="DefName">
0</EM>
) for uncompressed data</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-148676"></A><EM CLASS="DefName">
COMP_CODE_RLE</EM>
 (or <EM CLASS="DefName">
1</EM>
) for data compressed using the RLE compression algorithm</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-313958"></A><EM CLASS="DefName">
COMP_CODE_NBIT</EM>
 (or <EM CLASS="DefName">
2</EM>
) for data compressed using the NBIT compression algorithm</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-156375"></A><EM CLASS="DefName">
COMP_CODE_SKPHUFF</EM>
 (or <EM CLASS="DefName">
3</EM>
) for data compressed using the Skipping Huffman compression algorithm</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-156376"></A><EM CLASS="DefName">
COMP_CODE_DEFLATE</EM>
 (or <EM CLASS="DefName">
4</EM>
) for data compressed using the GZIP compression algorithm</P>
<P CLASS="List10pt">
<A NAME="50593873_pgfId-274654"></A><EM CLASS="DefName">
COMP_CODE_SZIP</EM>
 (or <EM CLASS="DefName">
5</EM>
) for data compressed using the Szip compression algorithm</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-156370"></A>The parameter <EM CLASS="VarName">
comp_prm(1) </EM>
specifies the skipping size for the Skipping Huffman compression method and the deflate level for the GZIP compression method.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-312320"></A>For Szip compression, the Szip options mask and the number of pixels per block in a chunked and Szip-compressed dataset must be specified in <EM CLASS="VarName">
comp_prm(1)</EM>
 and <EM CLASS="VarName">
comp_prm(2)</EM>
, respectively.</P>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312323"></A><EM CLASS="VarName">
comp_prm(1) </EM>
=</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312325"></A>value of <EM CLASS="Code">
option_mask</EM>
</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312327"></A><EM CLASS="VarName">
comp_prm(2) </EM>
=</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312329"></A>value of <EM CLASS="Code">
pixels_per_block</EM>
</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-312330"></A>For NBIT compression, the four elements of the array <EM CLASS="VarName">
comp_prm</EM>
  correspond to the four NBIT compression parameters listed in the structure <EM CLASS="VarName">
nbit</EM>
. The array <EM CLASS="VarName">
comp_prm</EM>
 should be initialized as follows:</P>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312333"></A><EM CLASS="VarName">
comp_prm(1) </EM>
=</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312335"></A>value of <EM CLASS="Code">
start_bit</EM>
</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312337"></A><EM CLASS="VarName">
comp_prm(2) </EM>
=</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312339"></A>value of <EM CLASS="Code">
bit_len</EM>
</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312341"></A><EM CLASS="VarName">
comp_prm(3) </EM>
=</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312343"></A>value of <EM CLASS="Code">
sign_ext</EM>
</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312345"></A><EM CLASS="VarName">
comp_prm(4) </EM>
=</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableElement">
<A NAME="50593873_pgfId-312347"></A>value of <EM CLASS="Code">
fill_one</EM>
</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-164549"></A>Refer to the description of the union <EM CLASS="Code">
HDF_CHUNK_DEF</EM>
 and of the routine <EM CLASS="FunctionName">
SDsetnbitdataset</EM>
 for NBIT compression parameter definitions.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-170615"></A><EM CLASS="FunctionName">
SDsetchunk</EM>
 returns either a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Refer to <A HREF="UG_html-3.htm#50593873_28935" CLASS="XRef">Table 3AD</A> and <A HREF="UG_html-3.htm#50593873_13739" CLASS="XRef">Table 3AE</A> for the descriptions of the parameters of both versions.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-170663"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-170617"></A><A NAME="50593873_28935"></A>SDsetchunk Parameter List<A NAME="50593873_marker-170662"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170621"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-170622"></A>[Return Type]</H6>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170624"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170626"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170628"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170634"></A>C</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170638"></A>SDsetchunk</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-170639"></A>[intn]</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170641"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170643"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170645"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170649"></A>c_def</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170651"></A>HDF_CHUNK_DEF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170653"></A>Union containing information on how the chunks are to be defined</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170657"></A>flag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170659"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170661"></A>Flag determining the behavior of the routine</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-170717"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_13739"></A>sfschnk Parameter List<A NAME="50593873_marker-170716"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170667"></A>Routine Name</P>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170668"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170670"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170672"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170674"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-170680"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170684"></A>sfschnk</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-170685"></A>&nbsp;</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170687"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170689"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170691"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170695"></A>dim_length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170697"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170699"></A>Sizes of the chunk dimensions</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170703"></A>comp_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170705"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170707"></A>Compression type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170711"></A>comp_prm</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-170713"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-170715"></A>Array containing information needed by the compression algorithm</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-158500"></A>	3.12.2	<A NAME="50593873_30563"></A>Setting the Maximum Number of Chunks in the Cache: SDsetchunkcache<A NAME="50593873_marker-158501"></A></H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-158502"></A>To maximize the performance of the HDF library routines when working with chunked SDSs, the library maintains a separate area of memory specifically for cached data chunks. <A NAME="50593873_marker-158503"></A><EM CLASS="FunctionName">
SDsetchunkcache</EM>
 sets the maximum number of chunks of the specified SDS that are cached into this segment of memory. The syntax of <EM CLASS="FunctionName">
SDsetchunkcache</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-158507"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDsetchunkcache(sds_id, maxcache, flag);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-158508"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfscchnk(sds_id, maxcache, flag)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-158511"></A>When the chunk cache has been filled, any additional chunks written to cache memory are cached according to the Least-Recently-Used (LRU) algorithm. This means that the chunk that has resided in the cache the longest without being reread or rewritten will be written over with the new chunk.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-47035"></A>By default, when a generic SDS is made a chunked SDS, the parameter <EM CLASS="VarName">
maxcache</EM>
  is set to the number of chunks along the fastest changing dimension. If needed, <EM CLASS="FunctionName">
SDsetchunkcache</EM>
 can then be called again to reset the size of the chunk cache. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-47036"></A>Essentially, the value of <EM CLASS="VarName">
maxcache</EM>
 cannot be set to a value less than the number of chunks currently cached. If the chunk cache is not full, then the size of the chunk cache is reset to the new value of <EM CLASS="VarName">
maxcache</EM>
 only if it is greater than the current number of chunks cached. If the chunk cache has been completely filled with cached data, <EM CLASS="FunctionName">
SDsetchunkcache</EM>
 has already been called, and the value of the parameter <EM CLASS="VarName">
maxcache</EM>
 in the current call to <EM CLASS="FunctionName">
SDsetchunkcache</EM>
 is larger than the value of <EM CLASS="VarName">
maxcache</EM>
 in the last call to <EM CLASS="FunctionName">
SDsetchunkcache</EM>
, then the value of <EM CLASS="VarName">
maxcache</EM>
 is reset to the new value.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-47037"></A>Currently the only allowed value of the parameter <EM CLASS="VarName">
flag</EM>
 is <EM CLASS="DefName">
0</EM>
, which designates default operation. In the near future, the value <EM CLASS="DefName">
HDF_CACHEALL</EM>
 will be provided to specify that the entire SDS array is to be cached.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-158557"></A><EM CLASS="FunctionName">
SDsetchunkcache</EM>
 returns the maximum number of chunks that can be cached (the value of the parameter <EM CLASS="VarName">
maxcache</EM>
) if successful and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters of <EM CLASS="FunctionName">
SDsetchunkcache</EM>
 are further described in <A HREF="UG_html-3.htm#50593873_11864" CLASS="XRef">Table 3AF</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-158622"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-158565"></A><A NAME="50593873_11864"></A>SDsetchunkcache Parameter List<A NAME="50593873_marker-158621"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158568"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158569"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158570"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158572"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158574"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158578"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158584"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158586"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158590"></A>SDsetchunkcache</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158591"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158592"></A>(sfscchnk)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158594"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158596"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158598"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158600"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158604"></A>maxcache</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158606"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158608"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158610"></A>Maximum number of chunks to cache</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158614"></A>flag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158616"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158618"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158620"></A>Flag determining the default caching behavior</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-47041"></A>	3.12.3	<A NAME="50593873_12520"></A>Writing Data to Chunked SDSs: SDwritechunk and SDwritedata<A NAME="50593873_marker-123607"></A></H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-145089"></A>Both <EM CLASS="FunctionName">
SDwritedata</EM>
<A NAME="50593873_marker-145088"></A> and <EM CLASS="FunctionName">
SDwritechunk</EM>
 can be used to write to a chunked SDS. Later in this chapter, situations where <EM CLASS="FunctionName">
SDwritechunk</EM>
 may be a more appropriate routine than <EM CLASS="FunctionName">
SDwritedata</EM>
 will be discussed, but, for the most part, both routines achieve the same results. <EM CLASS="FunctionName">
SDwritedata</EM>
 is discussed in <A HREF="UG_html-3.htm#50593873_20018" CLASS="XRef">Writing Data to an SDS Array: SDwritedata</A>. The syntax of <EM CLASS="FunctionName">
SDwritechunk</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145093"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDwritechunk(sds_id, origin, datap);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145007"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfwchnk(sds_id, origin, datap)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-145073"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfwcchnk(sds_id, origin, datap)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145001"></A>The location of data in a chunked SDS can be specified in two ways. The first is the standard method used in the routine <EM CLASS="FunctionName">
SDwritedata</EM>
 that access both chunked and non-chunked SDSs; this method refers to the starting location as an offset in elements from the origin of the SDS array itself. The second method is used by the routine <EM CLASS="FunctionName">
SDwritechunk</EM>
 that only access chunked SDSs; this method refers to the origin of the chunk as an offset in chunks from the origin of the chunk array itself. The parameter <EM CLASS="VarName">
origin</EM>
 specifies this offset; it also may be considered as chunkâ€™s coordinates in the chunk array. <A HREF="UG_html-3.htm#50593873_13546" CLASS="XRef">Chunk Indexing as an Offset in Chunks</A> illustrates this method of chunk indexing in a 4-by-4 element SDS array with 2-by-2 element chunks.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593873_pgfId-117559"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
FIGURE 3d	<A NAME="50593873_13546"></A>Chunk Indexing as an Offset in Chunks</H6>
<DIV>
<IMG SRC="UG_html-18.gif" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593873_pgfId-47046"></A><EM CLASS="FunctionName">
SDwritechunk</EM>
<A NAME="50593873_marker-47045"></A> is used when an entire chunk is to be written and requires the chunk offset to be known. <EM CLASS="FunctionName">
SDwritedata</EM>
 is used when the write operation is to be done regardless of the chunking scheme used in the SDS. Also, as <EM CLASS="FunctionName">
SDwritechunk</EM>
 is written specifically for chunked SDSs and does not have the overhead of the additional functionality supported by the <EM CLASS="FunctionName">
SDwritedata</EM>
 routine, it is much faster than <EM CLASS="FunctionName">
SDwritedata</EM>
. Note that attempting to use <EM CLASS="FunctionName">
SDwritechunk</EM>
 for writing to a non-chunked data set will return a <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144943"></A>The parameter <EM CLASS="VarName">
datap</EM>
 must point to an array containing the entire chunk of data. In other words, the size of the array must be the same as the chunk size of the SDS to be written to, or an error condition will result.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144953"></A>There are two FORTRAN-77 versions of this routine: sfwchnk writes numeric data and sfwcchnk writes character data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-144944"></A><EM CLASS="FunctionName">
SDwritechunk</EM>
 returns either a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDwritechunk</EM>
 are in <A HREF="UG_html-3.htm#50593873_16657" CLASS="XRef">Table 3AG</A>. The parameters of <EM CLASS="FunctionName">
SDwritedata</EM>
 are listed in <A HREF="UG_html-3.htm#50593873_19628" CLASS="XRef">SDwritedata Parameter List</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-47094"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-47051"></A><A NAME="50593873_16657"></A>SDwritechunk Parameter List<A NAME="50593873_marker-47093"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-47054"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132519"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-134321"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-47056"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-47058"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-47060"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-47066"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-134326"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-47070"></A>SDwritechunk</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-132520"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-134322"></A>(sfwchnk/sfwcchnk)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-47072"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-47074"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-134328"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-47076"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-47080"></A>origin</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-47082"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-134330"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-47084"></A>Coordinates of the origin of the chunk to be written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-47088"></A>datap</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-47090"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-134332"></A>&lt;valid numeric data type&gt;(*)/character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-47092"></A>Buffer containing the data to be written</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-47099"></A>	3.12.4	<A NAME="50593873_27905"></A>Reading Data from Chunked SDSs: SDreadchunk and SDreaddata<A NAME="50593873_marker-123614"></A></H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-145225"></A>As both <EM CLASS="FunctionName">
SDwritedata</EM>
 and <EM CLASS="FunctionName">
SDwritechunk</EM>
 can be used to write data to a chunked SDS, both <EM CLASS="FunctionName">
SDreaddata</EM>
 and <EM CLASS="FunctionName">
SDreadchunk</EM>
 can be used to read data from a chunked SDS. <EM CLASS="FunctionName">
SDreaddata</EM>
 is discussed in <A HREF="UG_html-3.htm#50593873_20018" CLASS="XRef">Writing Data to an SDS Array: SDwritedata</A>. The syntax of <EM CLASS="FunctionName">
SDreadchunk</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145229"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDreadchunk(sds_id, origin, datap);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145231"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfrchnk(sds_id, origin, datap)</P>
<P CLASS="syntax-or-top">
<A NAME="50593873_pgfId-145232"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = sfrcchnk(sds_id, origin, datap)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145165"></A><EM CLASS="FunctionName">
SDreadchunk</EM>
<A NAME="50593873_marker-145164"></A> is used when an entire chunk of data is to be read. <EM CLASS="FunctionName">
SDreaddata</EM>
 is used when the read operation is to be done regardless of the chunking scheme used in the SDS. Also, <EM CLASS="FunctionName">
SDreadchunk</EM>
 is written specifically for chunked SDSs and does not have the overhead of the additional functionality supported by the <EM CLASS="FunctionName">
SDreaddata</EM>
 routine. Therefore, it is much faster than <EM CLASS="FunctionName">
SDreaddata</EM>
. Note that <EM CLASS="FunctionName">
SDreadchunk</EM>
 will return <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) when an attempt is made to read from a non-chunked data set.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145270"></A>As with <EM CLASS="FunctionName">
SDwritechunk</EM>
, the parameter <EM CLASS="VarName">
origin</EM>
 specifies the coordinates of the chunk to be read, and the parameter <EM CLASS="VarName">
datap</EM>
 must point to an array containing enough space for an entire chunk of data. In other words, the size of the array must be the same as or greater than the chunk size of the SDS to be read, or an error condition will result.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145157"></A>There are two FORTRAN-77 versions of this routine: sfrchnk reads numeric data and sfrcchnk reads character data.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-145142"></A><EM CLASS="FunctionName">
SDreadchunk</EM>
 returns either a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters of <EM CLASS="FunctionName">
SDreadchunk</EM>
 are further described in <A HREF="UG_html-3.htm#50593873_22398" CLASS="XRef">Table 3AH</A>. The parameters of <EM CLASS="FunctionName">
SDreaddata</EM>
 are listed in <A HREF="UG_html-3.htm#50593873_33783" CLASS="XRef">SDreaddata Parameter List</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-47151"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-47108"></A><A NAME="50593873_22398"></A>SDreadchunk Parameter List<A NAME="50593873_marker-47150"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158635"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158636"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158637"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158639"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158641"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158645"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158651"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-158653"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158657"></A>SDreadchunk</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-158658"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-158659"></A>(sfrchnk/sfrcchnk)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158661"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158663"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158665"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158667"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158671"></A>origin</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158673"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158675"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158677"></A>Coordinates of the origin of the chunk to be read</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158681"></A>datap</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158683"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158685"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-158686"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-158688"></A>Buffer for the returned chunk data</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-47155"></A>	3.12.5	<A NAME="50593873_10144"></A>Obtaining Information about a Chunked SDS: SDgetchunkinfo<A NAME="50593873_marker-123621"></A> </H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-47157"></A><EM CLASS="FunctionName">
SDgetchunkinfo</EM>
<A NAME="50593873_marker-47156"></A> is used to determine whether an SDS is chunked and how the chunk is defined. The syntax of this routine is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145390"></A><EM CLASS="syntaxLang">
C:</EM>
		status = SDgetchunkinfo(sds_id, c_def, flag);</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-145392"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = sfgichnk(sds_id, dim_length, flag)</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-226922"></A>Currently, only information about chunk dimensions is retrieved into the corresponding structure element <EM CLASS="VarName">
c_def</EM>
 for each type of compression in C, and into the array <EM CLASS="VarName">
dim_length</EM>
 in Fortran. No information on compression parameters is available in the structure <EM CLASS="VarName">
comp</EM>
 of the union <EM CLASS="DefName">
HDF_CHUNK_DEF</EM>
. For specific information on <EM CLASS="VarName">
c_def</EM>
, refer to <A HREF="UG_html-3.htm#50593873_32968" CLASS="XRef">Making an SDS a Chunked SDS: SDsetchunk</A>.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-226926"></A>The value returned in the parameter <EM CLASS="VarName">
flag</EM>
 indicates the data set type (i.e., whether the data set is not chunked, chunked, or chunked and compressed).</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-149751"></A>If the data set is not chunked, the value of <EM CLASS="VarName">
flag</EM>
 will be <EM CLASS="DefName">
HDF_NONE</EM>
 (or <EM CLASS="DefName">
-1</EM>
). If the data set is chunked, the value of <EM CLASS="VarName">
flag</EM>
 will be <EM CLASS="DefName">
HDF_CHUNK</EM>
 (or <EM CLASS="DefName">
0</EM>
). If the data set is chunked and compressed with either RLE, Skipping Huffman, or GZIP compression algorithm, then the value of <EM CLASS="VarName">
flag</EM>
 will be <EM CLASS="DefName">
HDF_CHUNK | HDF_COMP</EM>
 (or <EM CLASS="DefName">
1</EM>
). If the data set is chunked and compressed with NBIT compression, then the value of <EM CLASS="VarName">
flag</EM>
 will be <EM CLASS="DefName">
HDF_CHUNK | HDF_NBIT</EM>
 (or <EM CLASS="DefName">
2</EM>
).</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-149762"></A>If the chunk length for each dimension is not needed, <EM CLASS="DefName">
NULL</EM>
 can be passed in as the value of the parameter <EM CLASS="VarName">
c_def</EM>
 in C.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-307326"></A>Note that if the data set is empty, <EM CLASS="FunctionName">
SDgetchunkinfo</EM>
 will fail.  Thus, application must first verify that the data set has been written with data, before calling <EM CLASS="FunctionName">
SDgetchunkinfo</EM>
.  <EM CLASS="FunctionName">
SDcheckempty</EM>
 in <A HREF="UG_html-3.htm#50593873_39481" CLASS="XRef">Determining whether an SDS is empty: SDcheckempty</A> determines whether the data set is empty.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-307333"></A><EM CLASS="FunctionName">
SDgetchunkinfo</EM>
 returns either a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Refer to <A HREF="UG_html-3.htm#50593873_20980" CLASS="XRef">Table 3AI</A> and <A HREF="UG_html-3.htm#50593873_42601" CLASS="XRef">Table 3AJ</A> for the description of the parameters of both versions.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-149604"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_marker-149558"></A><A NAME="50593873_20980"></A>SDgetchunkinfo Parameter List<A NAME="50593873_marker-149603"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149562"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-149563"></A>[Return Type]</H6>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149565"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149567"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149569"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149575"></A>C</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-149579"></A>SDgetchunkinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593873_pgfId-149580"></A>[intn]</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149582"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149584"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-149586"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149590"></A>c_def</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149592"></A>HDF_CHUNK_DEF *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-149594"></A>Union structure containing information about the chunks in the SDS</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149598"></A>flag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149600"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-149602"></A>Flag determining the behavior of the routine</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-149490"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_42601"></A>sfgichnk Parameter List<A NAME="50593873_marker-149489"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149670"></A>Routine Name</P>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149671"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149673"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149675"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149677"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-149683"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-149687"></A>sfgichnk</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593873_pgfId-149688"></A>&nbsp;</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149690"></A>sds_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149692"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-149694"></A>Data set identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149698"></A>dim_length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149700"></A>integer(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-149702"></A>Sizes of the chunk dimensions</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149706"></A>comp_type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-149708"></A>integer</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-149710"></A>Compression type</P>
</TD>
</TR>
<TR>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593873_pgfId-149492"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
Writing and Reading a Chunked SDS.</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-168890"></A>This example demonstrates the use of the routines <EM CLASS="FunctionName">
SDsetchunk/sfschnk</EM>
, <EM CLASS="FunctionName">
SDwritedata/sfwdata</EM>
, <EM CLASS="FunctionName">
SDwritechunk/sfwchnk</EM>
, <EM CLASS="FunctionName">
SDgetchunkinfo/sfgichnk</EM>
, <EM CLASS="FunctionName">
SDreaddata/sfrdata</EM>
, and <EM CLASS="FunctionName">
SDreadchunk/sfrchnk</EM>
 to create a chunked data set, write data to it, get information about the data set, and read the data back. Note that the Fortran example uses transpose data to reflect the difference between C and Fortran internal storage.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593873_pgfId-219321"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
C:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219324"></A>#include &quot;mfhdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219325"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219326"></A>#define FILE_NAME     &quot;SDSchunked.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219327"></A>#define SDS_NAME      &quot;ChunkedData&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219328"></A>#define RANK          2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219329"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219330"></A>main()</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219331"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219332"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219333"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219334"></A>   int32         sd_id, sds_id, sds_index;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219335"></A>   intn          status;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219336"></A>   int32         flag, maxcache, new_maxcache;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219337"></A>   int32         dim_sizes[2], origin[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219338"></A>   HDF_CHUNK_DEF c_def, c_def_out; /* Chunking definitions */ </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219339"></A>   int32         comp_flag, c_flags;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219340"></A>   int16         all_data[9][4];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219341"></A>   int32         start[2], edges[2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219342"></A>   int16         chunk_out[3][2];</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219343"></A>   int16         row[2] = { 5, 5 };</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219344"></A>   int16         column[3] = { 4, 4, 4 };</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219345"></A>   int16         fill_value = 0;   /* Fill value */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219346"></A>   int           i,j;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219347"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219348"></A>   * Declare chunks data type and initialize some of them. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219349"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219350"></A>          int16 chunk1[3][2] = { 1, 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219351"></A>                                 1, 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219352"></A>                                 1, 1 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219353"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219354"></A>          int16 chunk2[3][2] = { 2, 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219355"></A>                                 2, 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219356"></A>                                 2, 2 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219357"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219358"></A>          int16 chunk3[3][2] = { 3, 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219359"></A>                                 3, 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219360"></A>                                 3, 3 }; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219361"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219362"></A>          int16 chunk6[3][2] = { 6, 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219363"></A>                                 6, 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219364"></A>                                 6, 6 };</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219365"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219366"></A>    /********************* End of variable declaration ***********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219367"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219368"></A>    * Define chunkâ€™s dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219369"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219370"></A>    *         In this example we do not use compression. </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219371"></A>    *         To use chunking with RLE, Skipping Huffman, and GZIP</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219372"></A>    *         compression, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219373"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219374"></A>    *                c_def.comp.chunk_lengths[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219375"></A>    *                c_def.comp.chunk_lengths[1] = 2; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219376"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219377"></A>    *         To use chunking with NBIT, initialize</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219378"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219379"></A>    *                c_def.nbit.chunk_lengths[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219380"></A>    *                c_def.nbit.chunk_lengths[1] = 2; </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219381"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219382"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219383"></A>    c_def.chunk_lengths[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219384"></A>    c_def.chunk_lengths[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219385"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219386"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219387"></A>    * Create the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219388"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219389"></A>    sd_id = SDstart (FILE_NAME, DFACC_CREATE);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219390"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219391"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219392"></A>    * Create 9x4 SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219393"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219394"></A>    dim_sizes[0] = 9;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219395"></A>    dim_sizes[1] = 4;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219396"></A>    sds_id = SDcreate (sd_id, SDS_NAME,DFNT_INT16, RANK, dim_sizes);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219397"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219398"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219399"></A>    * Fill the SDS array with the fill value.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219400"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219401"></A>    status = SDsetfillvalue (sds_id, (VOIDP)&amp;fill_value);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219402"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219403"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219404"></A>    * Create chunked SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219405"></A>    * In this example we do not use compression ( third</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219406"></A>    * parameter of SDsetchunk is set to HDF_CHUNK).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219407"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219408"></A>    * To use RLE compresssion, set compression type and flag</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219409"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219410"></A>    *            c_def.comp.comp_type = COMP_CODE_RLE;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219411"></A>    *            comp_flag = HDF_CHUNK | HDF_COMP;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219412"></A>    *          </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219413"></A>    * To use Skipping Huffman compression, set compression type, flag</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219414"></A>    * and skipping size skp_size</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219415"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219416"></A>    *            c_def.comp.comp_type = COMP_CODE_SKPHUFF;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219417"></A>    *            c_def.comp.cinfo.skphuff.skp_size = value;             </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219418"></A>    *            comp_flag = HDF_CHUNK | HDF_COMP;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219419"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219420"></A>    * To use GZIP compression, set compression type, flag and</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219421"></A>    * deflate level</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219422"></A>    * </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219423"></A>    *            c_def.comp.comp_type = COMP_CODE_DEFLATE;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219424"></A>    *            c_def.comp.cinfo.deflate.level = value;             </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219425"></A>    *            comp_flag = HDF_CHUNK | HDF_COMP;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219426"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219427"></A>    * To use NBIT compression, set compression flag and</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219428"></A>    * compression parameters</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219429"></A>    *          </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219430"></A>    *            comp_flag = HDF_CHUNK | HDF_NBIT;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219431"></A>    *            c_def.nbit.start_bit = value1;             </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219432"></A>    *            c_def.nbit.bit_len   = value2;             </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219433"></A>    *            c_def.nbit.sign_ext  = value3;             </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219434"></A>    *            c_def.nbit.fill_one  = value4;             </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219435"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219436"></A>    comp_flag = HDF_CHUNK;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219437"></A>    status = SDsetchunk (sds_id, c_def, comp_flag);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219438"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219439"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219440"></A>    * Set chunk cache to hold maximum of 3 chunks.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219441"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219442"></A>    maxcache = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219443"></A>    flag = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219444"></A>    new_maxcache = SDsetchunkcache (sds_id, maxcache, flag);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219445"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219446"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219447"></A>    * Write chunks using SDwritechunk function.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219448"></A>    * Chunks can be written in any order.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219449"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219450"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219451"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219452"></A>    * Write the chunk with the coordinates (0,0).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219453"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219454"></A>    origin[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219455"></A>    origin[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219456"></A>    status = SDwritechunk (sds_id, origin, (VOIDP) chunk1);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219457"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219458"></A>    /*   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219459"></A>    * Write the chunk with the coordinates (1,0).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219460"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219461"></A>    origin[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219462"></A>    origin[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219463"></A>    status = SDwritechunk (sds_id, origin, (VOIDP) chunk3);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219464"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219465"></A>    /*   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219466"></A>    * Write the chunk with the coordinates (0,1). </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219467"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219468"></A>    origin[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219469"></A>    origin[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219470"></A>    status = SDwritechunk (sds_id, origin, (VOIDP) chunk2);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219471"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219472"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219473"></A>    * Write chunk with the coordinates (1,2) using</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219474"></A>    * SDwritedata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219475"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219476"></A>    start[0] = 6;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219477"></A>    start[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219478"></A>    edges[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219479"></A>    edges[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219480"></A>    status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) chunk6); </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219481"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219482"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219483"></A>    * Fill second column in the chunk with the coordinates (1,1)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219484"></A>    * using SDwritedata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219485"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219486"></A>    start[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219487"></A>    start[1] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219488"></A>    edges[0] = 3;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219489"></A>    edges[1] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219490"></A>    status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) column); </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219491"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219492"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219493"></A>    * Fill second row in the chunk with the coordinates (0,2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219494"></A>    * using SDwritedata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219495"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219496"></A>    start[0] = 7;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219497"></A>    start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219498"></A>    edges[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219499"></A>    edges[1] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219500"></A>    status = SDwritedata (sds_id, start, NULL, edges, (VOIDP) row); </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219501"></A>           </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219502"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219503"></A>    * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219504"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219505"></A>    status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219506"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219507"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219508"></A>    * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219509"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219510"></A>    status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219511"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219512"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219513"></A>    * Reopen the file and access the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219514"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219515"></A>    sd_id = SDstart (FILE_NAME, DFACC_READ);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219516"></A>    sds_index = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219517"></A>    sds_id = SDselect (sd_id, sds_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219518"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219519"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219520"></A>    * Get information about the SDS. Only chunk lengths and compression</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219521"></A>    * flag can be returned. Compression information is not available if</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219522"></A>    * NBIT, Skipping Huffman, or GZIP compression is used.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219523"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219524"></A>    status = SDgetchunkinfo (sds_id, &amp;c_def_out, &amp;c_flags);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219525"></A>    if (c_flags == HDF_CHUNK )</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219526"></A>       printf(&quot; SDS is chunked\nChunkâ€™s dimensions %dx%d\n&quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219527"></A>              c_def_out.chunk_lengths[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219528"></A>              c_def_out.chunk_lengths[1]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219529"></A>    else if (c_flags == (HDF_CHUNK | HDF_COMP))</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219530"></A>         printf(&quot;SDS is chunked and compressed\nChunkâ€™s dimensions %dx%d\n&quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219531"></A>                  c_def_out.comp.chunk_lengths[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219532"></A>                  c_def_out.comp.chunk_lengths[1]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219533"></A>    else if (c_flags == (HDF_CHUNK | HDF_NBIT))</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219534"></A>         printf (&quot;SDS is chunked (NBIT)\nChunkâ€™s dimensions %dx%d\n&quot;,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219535"></A>                  c_def_out.nbit.chunk_lengths[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219536"></A>                  c_def_out.nbit.chunk_lengths[1]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219537"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219538"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219539"></A>    * Read the entire data set using SDreaddata function.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219540"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219541"></A>    start[0] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219542"></A>    start[1] = 0;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219543"></A>    edges[0] = 9;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219544"></A>    edges[1] = 4;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219545"></A>    status = SDreaddata (sds_id, start, NULL, edges, (VOIDP)all_data);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219546"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219547"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219548"></A>    * Print out what we have read.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219549"></A>    * The following information should be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219550"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219551"></A>    * SDS is chunked </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219552"></A>    * Chunkâ€™s dimensions 3x2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219553"></A>    *          1 1 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219554"></A>    *          1 1 2 2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219555"></A>    *          1 1 2 2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219556"></A>    *          3 3 0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219557"></A>    *          3 3 0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219558"></A>    *          3 3 0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219559"></A>    *          0 0 6 6</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219560"></A>    *          5 5 6 6</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219561"></A>    *          0 0 6 6</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219562"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219563"></A>    for (j=0; j&lt;9; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219564"></A>    {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219565"></A>         for (i=0; i&lt;4; i++) printf (&quot; %d&quot;, all_data[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219566"></A>         printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219567"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219568"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219569"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219570"></A>    * Read chunk with the coordinates (2,0) and display it.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219571"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219572"></A>    origin[0] = 2;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219573"></A>    origin[1] = 0;    	</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219574"></A>    status = SDreadchunk (sds_id, origin, chunk_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219575"></A>    printf (&quot; Chunk (2,0) \n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219576"></A>    for (j=0; j&lt;3; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219577"></A>    {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219578"></A>         for (i=0; i&lt;2; i++) printf (&quot; %d&quot;, chunk_out[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219579"></A>         printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219580"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219581"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219582"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219583"></A>    * Read chunk with the coordinates (1,1) and display it.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219584"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219585"></A>    origin[0] = 1;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219586"></A>    origin[1] = 1;    	</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219587"></A>    status = SDreadchunk (sds_id, origin, chunk_out);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219588"></A>    printf (&quot; Chunk (1,1) \n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219589"></A>    for (j=0; j&lt;3; j++) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219590"></A>    {</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219591"></A>         for (i=0; i&lt;2; i++) printf (&quot; %d&quot;, chunk_out[j][i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219592"></A>         printf (&quot;\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219593"></A>    }</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219594"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219595"></A>    /*  The following information is displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219596"></A>    *</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219597"></A>    *   Chunk (2,0) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219598"></A>    *   0 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219599"></A>    *   5 5</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219600"></A>    *   0 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219601"></A>    *   Chunk (1,1) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219602"></A>    *   0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219603"></A>    *   0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219604"></A>    *   0 4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219605"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219606"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219607"></A>    /* </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219608"></A>    * Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219609"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219610"></A>    status = SDendaccess (sds_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219611"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219612"></A>    /*</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219613"></A>    * Terminate access to the SD interface and close the file.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219614"></A>    */</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219615"></A>    status = SDend (sd_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-223158"></A>}            </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-223160"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593873_pgfId-223162"></A><DIV>
<IMG SRC="UG_html-15.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219626"></A>      program  chunk_examples</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219627"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219628"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219629"></A>C     Parameter declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219630"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219631"></A>      character*14 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219632"></A>      character*11 SDS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219633"></A>      integer      RANK</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219634"></A>      parameter   (FILE_NAME = â€™SDSchunked.hdfâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219635"></A>     +             SDS_NAME  = â€™ChunkedDataâ€™,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219636"></A>     +             RANK      = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219637"></A>      integer      DFACC_CREATE, DFACC_READ, DFNT_INT16</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219638"></A>      parameter   (DFACC_CREATE = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219639"></A>     +             DFACC_READ   = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219640"></A>     +             DFNT_INT16   = 22)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219641"></A>      integer      COMP_CODE_NONE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219642"></A>      parameter   (COMP_CODE_NONE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219643"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219644"></A>C     This example does not use compression.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219645"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219646"></A>C     To use RLE compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219647"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219648"></A>C     integer      COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219649"></A>C     parameter   (COMP_CODE_RLE = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219650"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219651"></A>C     To use NBIT compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219652"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219653"></A>C     integer      COMP_CODE_NBIT</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219654"></A>C     parameter   (COMP_CODE_NBIT = 2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219655"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219656"></A>C     To use Skipping Huffman compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219657"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219658"></A>C     integer      COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219659"></A>C     parameter   (COMP_CODE_SKPHUFF = 3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219660"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219661"></A>C     To use GZIP compression, declare:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219662"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219663"></A>C     integer      COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219664"></A>C     parameter   (COMP_CODE_DEFLATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219665"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219666"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219667"></A>C     Function declaration.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219668"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219669"></A>      integer sfstart, sfcreate, sfendacc, sfend,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219670"></A>     +        sfselect, sfsfill, sfschnk, sfwchnk,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219671"></A>     +        sfrchnk, sfgichnk, sfwdata, sfrdata,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219672"></A>     +        sfscchnk</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219673"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219674"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219675"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219676"></A>      integer   sd_id, sds_id, sds_index, status          </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219677"></A>      integer   dim_sizes(2), origin(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219678"></A>      integer   fill_value, maxcache, new_maxcache, flag</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219679"></A>      integer   start(2), edges(2), stride(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219680"></A>      integer*2 all_data(4,9)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219681"></A>      integer*2 row(3), column(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219682"></A>      integer*2 chunk_out(2,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219683"></A>      integer*2 chunk1(2,3),</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219684"></A>     +          chunk2(2,3),</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219685"></A>     +          chunk3(2,3),</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219686"></A>     +          chunk6(2,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219687"></A>      integer   i, j</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219688"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219689"></A>C     Compression flag and parameters.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219690"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219691"></A>      integer comp_type, comp_flag, comp_prm(4)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219692"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219693"></A>C     Chunkâ€™s dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219694"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219695"></A>      integer dim_length(2), dim_length_out(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219696"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219697"></A>C     Initialize four chunks</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219698"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219699"></A>      data chunk1 /6*1/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219700"></A>      data chunk2 /6*2/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219701"></A>      data chunk3 /6*3/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219702"></A>      data chunk6 /6*6/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219703"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219704"></A>C     Initialize row and column arrays.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219705"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219706"></A>      data row /3*4/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219707"></A>      data column /2*5/</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219708"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219709"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219710"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219711"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219712"></A>C     Define chunkâ€™s dimensions.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219713"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219714"></A>      dim_length(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219715"></A>      dim_length(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219716"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219717"></A>C     Create the file and initialize SD interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219718"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219719"></A>      sd_id = sfstart(FILE_NAME, DFACC_CREATE)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219720"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219721"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219722"></A>C     Create 4x9 SDS</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219723"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219724"></A>      dim_sizes(1) = 4 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219725"></A>      dim_sizes(2) = 9 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219726"></A>      sds_id = sfcreate(sd_id, SDS_NAME, DFNT_INT16,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219727"></A>     +                  RANK, dim_sizes)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219728"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219729"></A>C     Fill SDS array with the fill value.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219730"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219731"></A>      fill_value = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219732"></A>      status = sfsfill( sds_id, fill_value)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219733"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219734"></A>C     Create chunked SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219735"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219736"></A>C     In this example we do not use compression.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219737"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219738"></A>C     To use RLE compression, initialize comp_type parameter</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219739"></A>C     before the call to sfschnk function.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219740"></A>C              comp_type = COMP_CODE_RLE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219741"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219742"></A>C     To use NBIT, Skipping Huffman, or GZIP compression,</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219743"></A>C     initialize comp_prm array and comp type parameter</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219744"></A>C     before call to sfschnk function</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219745"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219746"></A>C     NBIT:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219747"></A>C              comp_prm(1) = value_of(sign_ext)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219748"></A>C              comp_prm(2) = value_of(fill_one)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219749"></A>C              comp_prm(3) = value_of(start_bit)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219750"></A>C              comp_prm(4) = value_of(bit_len)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219751"></A>C              comp_type   = COMP_CODE_NBIT</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219752"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219753"></A>C     Skipping Huffman:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219754"></A>C              comp_prm(1) = value_of(skp_size)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219755"></A>C              comp_type   = COMP_CODE_SKPHUFF</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219756"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219757"></A>C     GZIP:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219758"></A>C              comp_prm(1) = value_of(deflate_level) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219759"></A>C              comp_type   = COMP_CODE_DEFLATE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219760"></A>C       </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219761"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219762"></A>      comp_type = COMP_CODE_NONE</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219763"></A>      status = sfschnk(sds_id, dim_length, comp_type, comp_prm)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219764"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219765"></A>C     Set chunk cache to hold maximum 2 chunks.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219766"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219767"></A>      flag = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219768"></A>      maxcache = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219769"></A>      new_maxcache = sfscchnk(sds_id, maxcache, flag) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219770"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219771"></A>C     Write chunks using SDwritechunk function.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219772"></A>C     Chunks can be written in any order.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219773"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219774"></A>C     Write chunk with the coordinates (1,1).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219775"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219776"></A>      origin(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219777"></A>      origin(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219778"></A>      status = sfwchnk(sds_id, origin, chunk1) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219779"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219780"></A>C     Write chunk with the coordinates (1,2).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219781"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219782"></A>      origin(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219783"></A>      origin(2) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219784"></A>      status = sfwchnk(sds_id, origin, chunk3) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219785"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219786"></A>C     Write chunk with the coordinates (2,1).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219787"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219788"></A>      origin(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219789"></A>      origin(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219790"></A>      status = sfwchnk(sds_id, origin, chunk2) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219791"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219792"></A>C     Write chunk with the coordinates (2,3).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219793"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219794"></A>      origin(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219795"></A>      origin(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219796"></A>      status = sfwchnk(sds_id, origin, chunk6) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219797"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219798"></A>C     Fill second row in the chunk with the coordinates (2,2).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219799"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219800"></A>      start(1) = 3</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219801"></A>      start(2) = 3</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219802"></A>      edges(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219803"></A>      edges(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219804"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219805"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219806"></A>      status = sfwdata(sds_id, start, stride, edges, row)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219807"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219808"></A>C     Fill second column in the chunk with the coordinates (1,3).</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219809"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219810"></A>      start(1) = 0 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219811"></A>      start(2) = 7 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219812"></A>      edges(1) = 2 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219813"></A>      edges(2) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219814"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219815"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219816"></A>      status = sfwdata(sds_id, start, stride, edges, column)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219817"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219818"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219819"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219820"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219821"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219822"></A>C     Terminate access to the SD interface and close the file.  </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219823"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219824"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219825"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219826"></A>C     Reopen the file and access the first data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219827"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219828"></A>      sd_id = sfstart(FILE_NAME, DFACC_READ)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219829"></A>      sds_index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219830"></A>      sds_id = sfselect(sd_id, sds_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219831"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219832"></A>C     Get information about the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219833"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219834"></A>      status = sfgichnk(sds_id, dim_length_out, comp_flag)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219835"></A>      if (comp_flag .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219836"></A>         write(*,*) â€™SDS is chunkedâ€™</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219837"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219838"></A>      if (comp_flag .eq. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219839"></A>         write(*,*) â€™SDS is chunked and compressedâ€™</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219840"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219841"></A>      if (comp_flag .eq. 2) then</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219842"></A>         write(*,*) â€™SDS is chunked and NBIT compressedâ€™</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219843"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219844"></A>      write(*,*) â€™Chunks dimensions are â€™, dim_length_out(1),</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219845"></A>     + â€™  xâ€™ ,dim_length_out(2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219846"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219847"></A>C     Read the whole SDS using sfrdata function and display</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219848"></A>C     what we have read. The following information will be displayed:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219849"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219850"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219851"></A>C             SDS is chunked</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219852"></A>C             Chunks dimensions are   2  x  3</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219853"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219854"></A>C             1  1  1  3  3  3  0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219855"></A>C             1  1  1  3  3  3  0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219856"></A>C             2  2  2  0  0  0  6  6  6</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219857"></A>C             2  2  2  4  4  4  6  6  6</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219858"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219859"></A>      start(1) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219860"></A>      start(2) = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219861"></A>      edges(1) = 4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219862"></A>      edges(2) = 9</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219863"></A>      stride(1) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219864"></A>      stride(2) = 1</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219865"></A>      status = sfrdata(sds_id, start, stride, edges, all_data)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219866"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219867"></A>C     Display the SDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219868"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219869"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219870"></A>      do 10 i = 1,4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219871"></A>         write(*,*) (all_data(i,j), j=1,9)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219872"></A>10    continue     </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219873"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219874"></A>C     Read chunks with the coordinates (2,2) and (1,3) and display.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219875"></A>C     The following information will be shown:</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219876"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219877"></A>C             Chunk (2,2)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219878"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219879"></A>C               0  0  0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219880"></A>C               4  4  4</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219881"></A>C </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219882"></A>C             Chunk (1,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219883"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219884"></A>C               0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219885"></A>C               0  5  0</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219886"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219887"></A>      origin(1) = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219888"></A>      origin(2) = 2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219889"></A>      status = sfrchnk(sds_id, origin, chunk_out)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219890"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219891"></A>      write(*,*) â€™Chunk (2,2)â€™</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219892"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219893"></A>      do 20 i = 1,2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219894"></A>         write(*,*) (chunk_out(i,j), j=1,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219895"></A>20    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219896"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219897"></A>      origin(1) = 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219898"></A>      origin(2) = 3 </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219899"></A>      status = sfrchnk(sds_id, origin, chunk_out)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219900"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219901"></A>      write(*,*) â€™Chunk (1,3)â€™</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219902"></A>      write(*,*) </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219903"></A>      do 30 i = 1,2</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219904"></A>         write(*,*) (chunk_out(i,j), j=1,3)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219905"></A>30    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219906"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219907"></A>C     Terminate access to the data set.</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219908"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219909"></A>      status = sfendacc(sds_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219910"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219911"></A>C     Terminate access to the SD interface and close the file.   </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219912"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219913"></A>      status = sfend(sd_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-219914"></A>      end </P>
<P CLASS="ExampleCode">
<A NAME="50593873_pgfId-198937"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-159482"></A>	3.13	<A NAME="50593873_13394"></A>Ghost Areas <DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-47696"></A>In cases where the size of the SDS array is not an even multiple of the chunk size, regions of excess array space beyond the defined dimensions of the SDS will be created. Refer to the following illustration.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593873_pgfId-47775"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
FIGURE 3e	Array Locations Created Beyond the Defined Dimensions of an SDS<A NAME="50593873_marker-47697"></A></H6>
<DIV>
<IMG SRC="UG_html-19.gif" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593873_pgfId-47776"></A>These &quot;ghost areas&quot; can be accessed only by <EM CLASS="FunctionName">
SDreadchunk</EM>
 and <EM CLASS="FunctionName">
SDwritechunk</EM>
; they cannot be accessed by either <EM CLASS="FunctionName">
SDreaddata</EM>
 or <EM CLASS="FunctionName">
SDwritedata</EM>
. Therefore, storing data in these areas is not recommended. Future versions of the HDF library may not include the ability to write to these areas.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-47777"></A>If the fill value has been set, the values in these array locations will be initialized to the fill value. It is highly recommended that users set the fill value before writing to chunked SDSs so that garbage values wonâ€™t be read from these locations.</P>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593873_pgfId-309011"></A>	3.14	<A NAME="50593873_20609"></A>netCDF<A NAME="50593873_marker-309010"></A><DIV>
<IMG SRC="UG_html-12.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593873_pgfId-14054"></A><A NAME="50593873_marker-27148"></A>HDF supports the netCDF data model and interface developed at the Unidata Program Center (UPC). Like HDF, netCDF is an interface to a library of data access programs that store and retrieve data. The file format developed at the UPC to support netCDF uses XDR (eXternal Data Representation), a non-proprietary external data representation developed by Sun Microsystems for describing and encoding data. Full documentation on netCDF and the Unidata netCDF interface is available at <EM CLASS="URL">
http://www.unidata.ucar.edu/packages/netcdf/</EM>
.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-18223"></A>The netCDF data model is interchangeable with the SDS data model in so far as it is possible to use the netCDF calling interface to place an SDS into an HDF file and conversely the SDS interface will read from an XDR-based netCDF file. Because the netCDF interface has not changed and netCDF files stored in XDR format are readable, existing netCDF programs and data are still usable, although programs will need to be relinked to the new library. However, there are important conceptual differences between the HDF and the netCDF data model that must be understood to effectively use HDF in working with netCDF data objects and to understand enhancements to the interface that will be included in the future to make the two APIs much more similar.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-199090"></A>In the HDF model, when a multidimensional SDS is created by <EM CLASS="FunctionName">
SDcreate</EM>
, HDF data objects are also created that provide information about the individual dimensions â€” one for each dimension. Each SDS contains within its internal structure the array data as well as pointers to these dimensions. Each dimension is stored in a structure that is in the HDF file but separate from the SDS array.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-6891"></A>If more than one SDS have the same dimension sizes, they may share dimensions by pointing to the same dimensions. This can be done in application programs by calling <EM CLASS="FunctionName">
SDsetdimname</EM>
 to assign the same dimension name to all dimensions that are shared by several SDSs. For example, suppose you make the following sequence of calls for every SDS in a file:</P>
<P CLASS="FM1-syntax">
<A NAME="50593873_pgfId-29788"></A>	dim_id = SDgetdimid(sds_id, 0);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-6946"></A>	ret = SDsetdimname(dim_id, &quot;Lat&quot;);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-6803"></A>	dim_id = SDgetdimid(sds_id, 1);</P>
<P CLASS="syntax">
<A NAME="50593873_pgfId-6804"></A>	ret = SDsetdimname(dim_id, &quot;Long&quot;);</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-6806"></A>This will create a shared dimension named &quot;<EM CLASS="VarName">
Lat</EM>
&quot; that is associated with every SDS as the first dimension and a dimension named &quot;<EM CLASS="VarName">
Long</EM>
&quot; as the second dimension.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-6810"></A>This same result is obtained differently in netCDF. Note that a netCDF &quot;variable&quot; is roughly the same as an HDF SDS. The netCDF interface requires application programs to define all dimensions, using <EM CLASS="VarName">
ncdimdef</EM>
, before defining variables. Those defined dimensions are then used to define variables in <EM CLASS="VarName">
ncvardef</EM>
. Each dimension is defined by a name and a size. All variables using the same dimension will have the same dimension name and dimension size.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-6780"></A>Although the HDF SDS interface will read from and write to existing XDR-based netCDF files, HDF cannot be used to create XDR-based netCDF files.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-14060"></A>There is currently no support for mixing HDF data objects that are not SDSs and netCDF data objects. For example, a raster image can exist in the same HDF file as a netCDF data object, but you must use one of the HDF raster image APIs to read the image and the HDF SD or netCDF interface to read the netCDF data object. The other HDF APIs are currently being modified to allow multifile access. Closer integration with the netCDF interface will probably be delayed until the end of that project.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-14064"></A>	3.14.1	<A NAME="50593873_marker-27151"></A><A NAME="50593873_19660"></A>HD<A NAME="50593873_marker-27152"></A>F Interface vs. netCDF Interface</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-14066"></A>Existing netCDF applications can be used to read HDF files and existing HDF applications can be used to read XDR-based netCDF files. To read an HDF file using a netCDF application, the application must be recompiled using the HDF library. For example, recompiling the netCDF utility <EM CLASS="VarName">
ncdump</EM>
 with HDF creates a utility that can dump scientific data sets from both HDF and XDR-based files. To read an XDR-based file using an HDF application, the application must be relinked to the HDF library.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-14068"></A>The current version of HDF contains several APIs that support essentially the same data model: </P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-14070"></A>The multifile SD interface.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-14072"></A>The netCDF or NC interface.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-14074"></A>The single-file DFSD interface.</LI>
<LI CLASS="Bullet">
<A NAME="50593873_pgfId-24175"></A>The multifile GR interface.</LI>
</UL>
<P CLASS="Body">
<A NAME="50593873_pgfId-14076"></A>The first three models can create, read, and write SDSs in HDF files. Both the SD and NC interfaces can read from and write to XDR-based netCDF files, but they cannot create them. This interoperability means that a single program may contain both SD and NC function calls and thus transparently read and write scientific data sets to HDF or XDR-based files. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-29672"></A>The SD interface is the only HDF interface capable of accessing the XDR-based netCDF file format. The DFSD interface cannot access XDR-based files and can only access SDS arrays, dimension scales, and predefined attributes. A summary of file interoperability among the three interfaces is provided in <A HREF="UG_html-3.htm#50593873_14728" CLASS="XRef">Table 3AK</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-29748"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_14728"></A>Summary of HDF and XDR File Compatibility for the HDF and netCDF APIs</H6>
<TABLE>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="Body">
<A NAME="50593873_pgfId-36621"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36623"></A>Files Created by </P>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36624"></A>DFSD interface</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36628"></A>Files Created by </P>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36629"></A>SD interface</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36633"></A>Files Written by </P>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36634"></A>NC Interface</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="Body">
<A NAME="50593873_pgfId-36638"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36640"></A>HDF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36644"></A>HDF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36648"></A>HDF Library</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-36650"></A>Unidata netCDF Library</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-36652"></A>Accessed by DFSD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36654"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36658"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36662"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36664"></A>No</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-36666"></A>Accessed by SD</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36668"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36672"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36676"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36678"></A>Yes</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-36680"></A>Accessed by NC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36682"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36686"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36690"></A>Yes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593873_pgfId-36692"></A>Yes</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593873_pgfId-159062"></A>A summary of NC function calls and their SD equivalents is presented in <A HREF="UG_html-3.htm#50593873_39199" CLASS="XRef">Table 3AL</A>. </P>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593873_pgfId-14092"></A><DIV>
<IMG SRC="UG_html-13.gif" ALT="">
</DIV>
<A NAME="50593873_39199"></A>NC Interface Routine Calls and their SD Equ<A NAME="50593873_marker-159063"></A>iva<A NAME="50593873_marker-159064"></A>l<A NAME="50593873_marker-159065"></A>ents<A NAME="50593873_marker-159066"></A></H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-159069"></A>Purpose</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-159071"></A>Routine Name</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-159075"></A>SD</P>
<P CLASS="TableHead">
<A NAME="50593873_pgfId-159076"></A>Equivalent</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-159078"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-159082"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593873_pgfId-159084"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="9" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-159090"></A>Operations</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159092"></A>nccreate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159094"></A>NCCRE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159096"></A>SDstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159098"></A>Creates a file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159102"></A>ncopen</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159104"></A>NCOPN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159106"></A>SDstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159108"></A>Opens a file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159112"></A>ncredef</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159114"></A>NCREDF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159116"></A>Not Applicable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159118"></A>Sets open file into define mode</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159122"></A>ncendef</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159124"></A>NCENDF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159126"></A>Not Applicable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159128"></A>Leaves define mode</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159132"></A>ncclose</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159134"></A>NCCLOS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159136"></A>SDend</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159138"></A>Closes an open file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159142"></A>ncinquire</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159144"></A>NCINQ</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159146"></A>SDfileinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159148"></A>Inquires about an open file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159152"></A>ncsync</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159154"></A>NCSNC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159156"></A>Not Applicable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159158"></A>Synchronizes a file to disk</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159162"></A>ncabort</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159164"></A>NCABOR</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159166"></A>Not Applicable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159168"></A>Backs out of recent definitions</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159172"></A>ncsetfill</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159174"></A>NCSFIL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159176"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159178"></A>Sets fill mode for writes</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-159180"></A>Dimensions</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159182"></A>ncdimdef</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159184"></A>NCDDEF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159186"></A>SDsetdimname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159188"></A>Creates a dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159192"></A>ncdimid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159194"></A>NCDID</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159196"></A>SDgetdimid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159198"></A>Returns a dimension identifier from its name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159202"></A>ncdiminq</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159204"></A>NCDINQ</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159206"></A>SDdiminfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159208"></A>Inquires about a dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159212"></A>ncdimrename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159214"></A>NCDREN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159216"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159218"></A>Renames a dimension</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="9" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-159220"></A>Variables</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159222"></A>ncvardef</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159224"></A>NCVDEF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159226"></A>SDcreate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159228"></A>Creates a variable</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159232"></A>ncvarid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159234"></A>NCVID</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159236"></A>SDnametoindex and SDselect</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159238"></A>Returns a variable identifier from its name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159242"></A>ncvarinq</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159244"></A>NCVINQ</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159246"></A>SDgetinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159248"></A>Returns information about a variable</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159252"></A>ncvarput1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159254"></A>NCVPT1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159256"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159258"></A>Writes a single data value</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159262"></A>ncvarget1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159264"></A>NCVGT1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159266"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159268"></A>Reads a single data value</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159272"></A>ncvarput</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159274"></A>NCVPT</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159276"></A>SDwritedata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159278"></A>Writes a hyperslab of values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159282"></A>ncvarget</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159284"></A>NCVGT/NCVGTC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159286"></A>SDreaddata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159288"></A>Reads a hyperslab of values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159292"></A>ncvarrename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159294"></A>NCVREN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159296"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159298"></A>Renames a variable</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159302"></A>nctypelen</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159304"></A>NCTLEN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159306"></A>DFKNTsize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159308"></A>Returns the number of bytes for a data type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="7" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593873_pgfId-159310"></A>Attributes</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159312"></A>ncattput</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159314"></A>NCAPT/NCAPTC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159316"></A>SDsetattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159318"></A>Creates an attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159322"></A>ncattinq</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159324"></A>NCAINQ</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159326"></A>SDattrinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159328"></A>Returns information about an attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159332"></A>ncattcopy</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159334"></A>NCACPY</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159336"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159338"></A>Copies attribute from one file to another</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159342"></A>ncattget</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159344"></A>NCAGT/NCAGTC</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159346"></A>SDreadattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159348"></A>Returns attributes values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159352"></A>ncattname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159354"></A>NCANAM</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159356"></A>SDattrinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159358"></A>Returns name of attribute from its number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159362"></A>ncattrename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159364"></A>NCAREN </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159366"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159368"></A>Renames an attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159372"></A>ncattdel</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593873_pgfId-159374"></A>NCADEL</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159376"></A>Not Implemented</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593873_pgfId-159378"></A>Deletes an attribute</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593873_pgfId-249821"></A>	3.14.2	ncdump and ncgen</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-250368"></A>The <EM CLASS="FunctionName">
ncdump</EM>
 summary capability works on both HDF and netCDF files.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250369"></A>The <EM CLASS="FunctionName">
ncgen</EM>
 summary capability works only on netCDF files.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593873_pgfId-250367"></A>	3.14.2.1	Using ncdump on HDF Files</H6>
<P CLASS="Body">
<A NAME="50593873_pgfId-250328"></A>When used with an HDF file on some platforms (reported on SGI), <EM CLASS="FunctionName">
ncdump</EM>
 may display signed 8-bit integer data (<EM CLASS="Figure9ptBold">
int8</EM>
, with the intended signed range of <EM CLASS="VarName">
-127</EM>
 through <EM CLASS="VarName">
128</EM>
) as unsigned 8-bit integer data (<EM CLASS="Figure9ptBold">
uint8</EM>
, with the unsigned range <EM CLASS="VarName">
0</EM>
 through <EM CLASS="VarName">
255</EM>
).  This is due to the mapping of <EM CLASS="Figure9ptBold">
int8</EM>
 and <EM CLASS="Figure9ptBold">
uint8</EM>
 data types in HDF to a common data type, <EM CLASS="Figure9ptBold">
NC_BYTE</EM>
, in netCDF.</P>
<P CLASS="Body">
<A NAME="50593873_pgfId-250364"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-131088"></A>&nbsp;</P>
</DIV>
</DIV>
</DIV>
</DIV>
<HR>
<DIV CLASS="footnotes">
<DIV CLASS="footnote">
<P CLASS="Footnote">
<SPAN CLASS="footnoteNumber">
1.</SPAN>
<A NAME="50593873_pgfId-312379"></A><EM CLASS="TextItalic">
netCDF-3 Userâ€™s Guide for C</EM>
 (June 5, 1997), Section 7, <EM CLASS="URL">
http://www.unidata.ucar.edu/software/netcdf/docs/netcdf/</EM>
.</P>
</DIV>
<DIV CLASS="footnote">
<P CLASS="Footnote">
<SPAN CLASS="footnoteNumber">
2.</SPAN>
<A NAME="50593873_pgfId-312090"></A><EM CLASS="TextItalic">
netCDF-3 Userâ€™s Guide for C</EM>
 (June 5, 1997), Section 2, <EM CLASS="URL">
http://www.unidata.ucar.edu/software/netcdf/docs/netcdf/</EM>
.</P>
</DIV>
</DIV>
<HR><P><table id="Botofpage" border="0" width="850" cellspacing="0" cellpadding="0">      <tr>        <td align="left">        HDF 4.2.12 - June 2016<br/>        <a href="THG_Copyright.html">Copyright</a>        <td align="right">          <span style="font-size: 12px; font-weight: bold">            The HDF Group<br />          </span>          <span style="font-size: 12px">            <a href="http://www.hdfgroup.org">www.hdfgroup.org</a><br />            <img valign="bottom" border="0" src="images/help.jpg" height="12" alt="The HDF Group" valign="top" />          </span>        </td>      </tr>    </table></BODY>
</HTML>
