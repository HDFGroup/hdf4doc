<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 11.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="UG_html.css" CHARSET="UTF-8" TYPE="text/css">
<table id="Topofpage" border="0" width="850" cellspacing="0" cellpadding="0"><tr><td align="left"><a href="http://www.hdfgroup.org"><img id="THG_logo" border="0" src="images/hdf_logo.jpg" width="90" height="70" alt="The HDF Group" valign="top" /></a></td><td valign="middle" align="center"><H1>HDF User’s Guide</H1><span style="font-size: 14px; font-weight: bold"><b>4.2.12</b></td><td valign="middle" align="center"><a HREF=UG_html.htm> [Top]</a> <a HREF=UG_html-3.htm> [Prev]</a><a HREF=UG_html-5.htm> [Next]</a></td></tr></table><HR></HEAD>
<BODY>
<DIV>
<span style="font-size: 14px; font-weight: bold"><a href="UG_html-17.htm">Index</a>] [<a href="UG_html-20.htm">List of Examples</a>] [<a href="UG_html-19.htm">List of Tables</a>] [<a href="UG_html-18.htm">List of Figures</a>]</DIV>
<H1 CLASS="ChapterTitle">
<A NAME="50593874_pgfId-156136"></A>Chapter 4 --	<A NAME="50593874_41304"></A>Vdatas (VS API)</H1>
<DIV>
<H4 CLASS="Heading1">
<A NAME="50593874_pgfId-68486"></A>	4.1	Chapter Overview<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H4>
<P CLASS="Body">
<A NAME="50593874_pgfId-68487"></A>This chapter describes the vdata data model, the Vdata interface (also called the VS interface or the VS API), and the vdata programming model.</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-11601"></A>	4.2	The Vdata Model<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-5344"></A>The<EM CLASS="Definition">
 </EM>
H<A NAME="50593874_marker-16805"></A>DF <EM CLASS="Definition">
Vdata model </EM>
provides a framework for storing customized tables, or <EM CLASS="Definition">
vdatas</EM>
, in HDF files. The term “vdata” is an abbreviation of “vertex data”, alluding to the fact that the object was first implemented in HDF to store the vertex and edge information of polygon sets. The vdata design has since been generalized to apply to a broader variety of applications. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-8097"></A>A <A NAME="50593874_marker-25529"></A>vdata is like a table that consists of a collection of <EM CLASS="Definition">
records</EM>
 whose values are stored in fixed-length <EM CLASS="Definition">
fields</EM>
. All records have the same structure and all values in each field have the same data type. <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_18902" CLASS="XRef">(See Figure 4a)</A></EM>
 The library does not check for uniqueness in vdata’s name, class, or field names. For example, when two vdatas having the same name, the first vdata will always be returned by VSfind().</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593874_pgfId-8180"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
FIGURE 4a	<A NAME="50593874_18902"></A>Vdata Table Structure	</H6>
<DIV>
<MAP NAME="UG_html-22">
</MAP>
<IMG SRC="UG_html-22.gif" USEMAP="#UG_html-22" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593874_pgfId-8092"></A><A NAME="50593874_marker-16807"></A>A <EM CLASS="Definition">
vdata name</EM>
 is a label typically assigned to describe the contents of a vdata. It often serves as a search key to locate a vdata in a file. <A NAME="50593874_marker-16808"></A>A <EM CLASS="Definition">
vdata class</EM>
 further distinguishes a particular vdata by identifying the purpose or the use of its data. Finally, <EM CLASS="Definition">
vdata</EM>
<A NAME="50593874_marker-67798"></A><EM CLASS="Definition">
 field names</EM>
 are labels assigned to the fields in the vdata.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-5355"></A>	4.2.1	Records and Fields</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-5145"></A><A NAME="50593874_marker-16810"></A>Each <EM CLASS="Definition">
record</EM>
 in a vdata is composed of one or more fixed-lengt<A NAME="50593874_marker-16811"></A>h <EM CLASS="Definition">
fields</EM>
. Vdata records and fields are identified by an index. The record and field indexes are zero-based and are separately incremented by one for each additional record and field in the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-5359"></A>Every field in a vdata is assigned a data type when the vdata is created. The data type of a field may be any basic HDF data type: character, 8-bit, 16-bit, and 32-bit signed and unsigned integers, and 32-bit and 64-bit floating point numbers. The maximum length of a vdata record is 65,535 bytes. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-7387"></A>The Vdata model allows multiple entries per field as long as they have the same data type. The number of entries or <EM CLASS="Definition">
components</EM>
 in a field is called th<A NAME="50593874_marker-16812"></A>e <EM CLASS="Definition">
order</EM>
 of the field.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-5363"></A><A NAME="50593874_marker-16813"></A>The organizational structure of a vdata is often determined by the data types of its data set or sets. For example, given a data set describing the location (“X,Y”) and temperature (“Temp”) of points in a plane, there are several ways to organize the data. <A HREF="UG_html-4.htm#50593874_24580" CLASS="XRef">(See Figure 4b)</A> If the “X”, “Y” and “Temp” values are of the same data type, they could be stored as three single-component fields, as a two-component “X_Y” field and a single-component “Temp” field, or as a three-component “X_Y_Temp” field. Generally, the “X,Y” data is stored in a single field, but HDF places no restrictions on the organization of field data and there are no significant HDF performance issues involved in choosing one organizational regime over another.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593874_pgfId-5368"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
FIGURE 4b	<A NAME="50593874_24580"></A>Three Different Vdata Structures for Data of the Same Number Type	</H6>
<DIV>
<MAP NAME="UG_html-23">
</MAP>
<IMG SRC="UG_html-23.gif" USEMAP="#UG_html-23" ALT="">
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-12906"></A>	4.3	T<A NAME="50593874_&lt;$startrange&gt;Vdata API"></A>he Vdata Interface<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-5376"></A>The Vdata interface consists of routines that are used to store and retrieve information about vdatas and their contents.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-26726"></A>	4.3.1	Header Files Used by the Vdata Interface</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-26727"></A>The header file “hdf.h” must be included in programs that invoke Vdata interface routines.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-12918"></A>	4.3.2	Vdata Library Routines</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-12922"></A>Vdata routines begin with the prefixes “VS”, “VF”, “VSQ”, and “VH” in C, and “vsf”, “vf”, “vsq”, and “vh” in FORTRAN-77. Vdata routines perform most general vdata operations, VF routines query information about vdata fields, and VSQ routines query information about specific vdatas. VH routines are high-level procedures that write to single-field vdatas.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-12920"></A>Vdata routines let you define, organize and manipulate vdatas. They are categorized as follows and are listed in <A HREF="UG_html-4.htm#50593874_33493" CLASS="XRef">Table 4A</A> by their categories:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-135485"></A><EM CLASS="Definition">
Access routines</EM>
<A NAME="50593874_marker-135484"></A> control access to files and vdatas. Data transfer to and from a vdata can only occur after the access to the vdata has been initiated and before it is terminated. Some Vgroup interface routines are included since they are used interchangeably between the Vdata and Vgroup interfaces. Refer to <EM CLASS="ChapterReference">
<A HREF="UG_html-5.htm#50593875_34180" CLASS="XRef">Vgroups (V API)</A></EM>
, for a description of the Vgroup interface.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-5384"></A><EM CLASS="Definition">
Read and write routines</EM>
 store and retrieve the contents of and the information about a vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-5386"></A><EM CLASS="Definition">
File inquiry routines </EM>
provide information about how vdatas are stored in a file. They are useful for locating vdatas in the file.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-5388"></A><EM CLASS="Definition">
Vdata inquiry routines</EM>
 provide specific information about a given vdata, including the vdata’s name, class, number of records, tag and reference number pairs, size, and interlace mode.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-81413"></A><EM CLASS="Definition">
Field inquiry routines</EM>
 provide specific information about the fields in a given vdata, including the field’s size, name, order, and type, and the number of fields in the vdata.</LI>
</UL>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-81483"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_33493"></A>Vdata Interface Routines</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-81416"></A>Category</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-81418"></A>Routine Names</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-81422"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-81426"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-81428"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-81432"></A>Access/Create</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81434"></A>Vstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81436"></A>vfstart</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-81440"></A>Initializes the Vdata and the Vgroup interfaces (<A HREF="UG_html-4.htm#50593874_28998" CLASS="XRef">Accessing Files and Vdatas: Vstart and VSattach</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81445"></A>VSattach</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81447"></A>vsfatch</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-81451"></A>Establishes access to a specified vdata (<A HREF="UG_html-4.htm#50593874_28998" CLASS="XRef">Accessing Files and Vdatas: Vstart and VSattach</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81456"></A>VSdetach</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81458"></A>vsfdtch</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-81462"></A>Terminates access to a specified vdata (<A HREF="UG_html-4.htm#50593874_36032" CLASS="XRef">Terminating Access to Vdatas and Files: VSdetach and Vend</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81467"></A>Vend</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-81469"></A>vfend</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-81471"></A>Terminates access to the Vdata and the Vgroup interfaces (<A HREF="UG_html-4.htm#50593874_36032" CLASS="XRef">Terminating Access to Vdatas and Files: VSdetach and Vend</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="16" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-82153"></A>Read and Write</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82155"></A>VSfdefine</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82157"></A>vsffdef</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82162"></A>Defines a new vdata field (<A HREF="UG_html-4.htm#50593874_23004" CLASS="XRef">Defining a Field within a Vdata: VSfdefine</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82144"></A>VSread</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82146"></A>vsfrd/vsfrdc/vsfread</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82151"></A>Reads one record from a vdata (<A HREF="UG_html-4.htm#50593874_32800" CLASS="XRef">Reading from the Current Vdata: VSread</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82133"></A>VSseek</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82135"></A>vsfseek</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82139"></A>Seeks to a specified record in a vdata (<A HREF="UG_html-4.htm#50593874_32597" CLASS="XRef">Resetting the Current Position within Vdatas: VSseek</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82122"></A>VSsetattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82124"></A>vsfsnat/vsfscat</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82128"></A>Sets the attribute of a vdata field or vdata (<A HREF="UG_html-4.htm#50593874_16111" CLASS="XRef">Setting the Attribute of a Vdata or Vdata Field: VSsetattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82111"></A>VSsetclass</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82113"></A>vsfscls</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82118"></A>Assigns a class to a vdata (<A HREF="UG_html-4.htm#50593874_19463" CLASS="XRef">Assigning a Vdata Name and Class: VSsetname and VSsetclass</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82097"></A>VSsetfields</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82099"></A>vsfsfld</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82103"></A>Specifies the vdata fields to be read or written (<A HREF="UG_html-4.htm#50593874_38506" CLASS="XRef">Initializing the Fields for Write Access: VSsetfields</A> and <A HREF="UG_html-4.htm#50593874_33834" CLASS="XRef">Initializing the Fields for Read Access: VSsetfields</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82086"></A>VSsetinterlace</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82088"></A>vsfsint</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82093"></A>Sets the interlace mode for a vdata (<A HREF="UG_html-4.htm#50593874_15638" CLASS="XRef">Specifying the Interlace Mode: VSsetinterlace</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82075"></A>VSsetname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82077"></A>vsfsnam</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82082"></A>Assigns a name to a vdata (<A HREF="UG_html-4.htm#50593874_19463" CLASS="XRef">Assigning a Vdata Name and Class: VSsetname and VSsetclass</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82064"></A>VHstoredata</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82066"></A>vhfsd/vhfscd</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82070"></A>Writes data to a vdata with a single-component field (<A HREF="UG_html-4.htm#50593874_16469" CLASS="XRef">Creating and Writing to Single-Field Vdatas: VHstoredata and VHstoredatam</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82053"></A>VHstoredatam</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82055"></A>vhfsdm/vhfscdm</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82059"></A>Writes data to a vdata with a multi-component field (<A HREF="UG_html-4.htm#50593874_16469" CLASS="XRef">Creating and Writing to Single-Field Vdatas: VHstoredata and VHstoredatam</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-115361"></A>VSgetblockinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-115363"></A>vsfgetblinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115365"></A>Retrieves the block size and the number of blocks for a linked-block vdata element (see HDF Reference Manual)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-115369"></A>VSsetblocksize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-115405"></A>vsfsetblsz</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115407"></A>Sets linked-block vdata element block size (see HDF Reference Manual)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-115377"></A>VSsetnumblocks</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-115423"></A>vsfsetnmbl</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115425"></A>Sets the number of blocks for a linked-block vdata element (see HDF Reference Manual)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-156426"></A>VSsetexternalfile</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-156428"></A>vsfsextf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-156430"></A>Specifies an external file to store data of a vdata (<A HREF="UG_html-4.htm#50593874_20173" CLASS="XRef">Specifying External Storage Information: VSsetexternalfile</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-156418"></A>VSgetexternalinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-156420"></A>unavailable</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-156422"></A>Retrieves the information of the external file (<A HREF="UG_Vdatas.htm#50593874_96748" CLASS="XRef"></A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82041"></A>VSwrite</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82043"></A>vsfwrt/vsfwrtc/</P>
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82044"></A>vsfwrit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82049"></A>Writes records to a vdata (<A HREF="UG_html-4.htm#50593874_23656" CLASS="XRef">Writing to a Vdata: VSwrite</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="23" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-82853"></A>Vdata</P>
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-82854"></A>Inquiry</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-82841"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82882"></A>VSattrinfo</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82884"></A>vsfainf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82888"></A>Retrieves information on a given attribute (<A HREF="UG_html-4.htm#50593874_26875" CLASS="XRef">Querying Information on a Vdata or Vdata Field Attribute: VSattrinfo</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82891"></A>VSelts</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82893"></A>vsfelts</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82895"></A>Returns the number of records in the specified vdata (<A HREF="UG_html-4.htm#50593874_13523" CLASS="XRef">Other Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82900"></A>VSfexist</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82902"></A>vsfex</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82906"></A>Locates a vdata given a list of field names (<A HREF="UG_html-4.htm#50593874_15313" CLASS="XRef">Searching for a Vdata by Field Name: VSfexist</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82909"></A>VSfindex</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82911"></A>vsffidx</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82913"></A>Returns the index of a vdata field given the field name (<A HREF="UG_html-4.htm#50593874_11074" CLASS="XRef">Querying the Index of a Vdata Field Given the Field Name: VSfindex</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82918"></A>VSfnattrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82920"></A>vsffnas</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82922"></A>Returns the number of attributes of a vdata or vdata field (<A HREF="UG_html-4.htm#50593874_16050" CLASS="XRef">Querying the Number of Attributes of a Vdata or a Vdata Field: VSfnattrs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82927"></A>VSfindattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82929"></A>vsffdat</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82931"></A>Retrieves the index of an attribute given the attribute name (<A HREF="UG_html-4.htm#50593874_39833" CLASS="XRef">Retrieving the Index of a Vdata or Vdata Field Attribute Given the Attribute Name: VSfindattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82936"></A>VSgetattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82938"></A>vsfgnat/vsfgcat</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82942"></A>Retrieves the values of a given attribute (<A HREF="UG_html-4.htm#50593874_34277" CLASS="XRef">Querying the Values of a Vdata or Vdata Field Attribute: VSgetattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82945"></A>VSgetclass</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82947"></A>vsfgcls</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82951"></A>Returns the class name of the specified vdata (<A HREF="UG_html-4.htm#50593874_13523" CLASS="XRef">Other Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82954"></A>VSgetfields</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82956"></A>vsfgfld</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82958"></A>Retrieves all field names within the specified vdata (<A HREF="UG_html-4.htm#50593874_13523" CLASS="XRef">Other Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82963"></A>VSgetinterlace</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82965"></A>vsfgint</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82967"></A>Retrieves the interlace mode of the specified vdata (<A HREF="UG_html-4.htm#50593874_13523" CLASS="XRef">Other Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82972"></A>VSgetname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82974"></A>vsfgnam</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82978"></A>Retrieves the name of the specified vdata (<A HREF="UG_html-4.htm#50593874_13523" CLASS="XRef">Other Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82981"></A>VSinquire</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82983"></A>vsfinq</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82987"></A>Returns information about the specified vdata (<A HREF="UG_html-4.htm#50593874_35960" CLASS="XRef">Obtaining Vdata Information: VSinquire</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82990"></A>VSisattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82992"></A>vsfisat</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-82996"></A>Determines whether the given vdata is an attribute (<A HREF="UG_html-4.htm#50593874_11493" CLASS="XRef">Determining whether a Vdata Is an Attribute: VSisattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-82999"></A>VSnattrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83001"></A>vsfnats</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83005"></A>Returns the total number of vdata attributes (<A HREF="UG_html-4.htm#50593874_41541" CLASS="XRef">Querying the Total Number of Vdata and Vdata Field Attributes: VSnattrs</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83008"></A>VSQuerycount</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83010"></A>vsqfnelt</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83012"></A>Returns the number of records in the specified vdata (<A HREF="UG_html-4.htm#50593874_41557" CLASS="XRef">VSQuery Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83017"></A>VSQueryfields</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83019"></A>vsqfflds</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83023"></A>Returns the field names of the specified vdata (<A HREF="UG_html-4.htm#50593874_41557" CLASS="XRef">VSQuery Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83026"></A>VSQueryinterlace</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83028"></A>vsqfintr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83032"></A>Returns the interlace mode of the specified vdata (<A HREF="UG_html-4.htm#50593874_41557" CLASS="XRef">VSQuery Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83035"></A>VSQueryname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83037"></A>vsqfname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83041"></A>Returns the name of the specified vdata (<A HREF="UG_html-4.htm#50593874_41557" CLASS="XRef">VSQuery Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83044"></A>VSQueryref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83046"></A>vsqref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83048"></A>Retrieves the reference number of the specified vdata (<A HREF="UG_html-4.htm#50593874_41557" CLASS="XRef">VSQuery Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83053"></A>VSQuerytag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83055"></A>vsqtag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83059"></A>Retrieves the tag of the specified vdata (<A HREF="UG_html-4.htm#50593874_41557" CLASS="XRef">VSQuery Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83062"></A>VSQueryvsize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83064"></A>vsqfsiz</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83066"></A>Retrieves the local size in bytes of the specified vdata record (<A HREF="UG_html-4.htm#50593874_41557" CLASS="XRef">VSQuery Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83071"></A>VSsetattr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83073"></A>vsfsnat/vsfscat</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83077"></A>Sets the attribute of a vdata field or vdata (<A HREF="UG_html-4.htm#50593874_16111" CLASS="XRef">Setting the Attribute of a Vdata or Vdata Field: VSsetattr</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83080"></A>VSsizeof</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83082"></A>vsfsiz</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83086"></A>Returns the size of the specified fields in a vdata (<A HREF="UG_html-4.htm#50593874_13523" CLASS="XRef">Other Vdata Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-83090"></A>Field</P>
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-83091"></A>Inquiry</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83093"></A>VFfieldesize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83095"></A>vffesiz</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83097"></A>Returns the field size, as stored in a file, of a specified field (<A HREF="UG_html-4.htm#50593874_24471" CLASS="XRef">VF Field Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83104"></A>VFfieldisize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83106"></A>vffisiz</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83108"></A>Returns the field size, as stored in memory, of a specified field (<A HREF="UG_html-4.htm#50593874_24471" CLASS="XRef">VF Field Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83115"></A>VFfieldname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83117"></A>vffname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83119"></A>Returns the name of the specified field in the given vdata (<A HREF="UG_html-4.htm#50593874_24471" CLASS="XRef">VF Field Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83126"></A>VFfieldorder</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83128"></A>vffordr</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83130"></A>Returns the order of the specified field in the given vdata (<A HREF="UG_html-4.htm#50593874_24471" CLASS="XRef">VF Field Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83137"></A>VFfieldtype</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83139"></A>vfftype</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83141"></A>Returns the data type for the specified field in the given vdata (<A HREF="UG_html-4.htm#50593874_24471" CLASS="XRef">VF Field Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83148"></A>VFnfields</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83150"></A>vfnflds</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83152"></A>Returns the total number of fields in the specified vdata (<A HREF="UG_html-4.htm#50593874_24471" CLASS="XRef">VF Field Information Retrieval Routines</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-83157"></A>File</P>
<P CLASS="TableCategory">
<A NAME="50593874_pgfId-83158"></A>Inquiry</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83160"></A>VSfind</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83162"></A>vsffnd</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83164"></A>Searches for a vdata in a file given the vdata’s name (<A HREF="UG_html-4.htm#50593874_38808" CLASS="XRef">Determining a Reference Number from a Vdata Name: VSfind</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83171"></A>VSgetid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83173"></A>vsfgid</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83175"></A>Returns the reference number of the next vdata in the file (<A HREF="UG_html-4.htm#50593874_39951" CLASS="XRef">Sequentially Searching for a Vdata: VSgetid</A>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83182"></A>VSlone</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellFunction">
<A NAME="50593874_pgfId-83184"></A>vsflone</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-83186"></A>Returns the reference number of vdatas that are not linked with any vgroups (<A HREF="UG_html-4.htm#50593874_13127" CLASS="XRef">Finding All Vdatas that are Not Members of a Vgroup: VSlone</A>)</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-79963"></A>	4.3.3	<A NAME="50593874_Vdata identifiers"></A>Identifying Vdatas in the Vdata Interface</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-10347"></A>The Vdata interface identifies vdatas in several ways. Before an existing vdata is accessible, it is uniquely identified by its <EM CLASS="Definition">
reference number</EM>
. The reference number of a vdata can be obtained from the name or the class of the vdata, or by sequentially traversing the file. The concept of reference number is discussed in <EM CLASS="Body">
<A HREF="UG_html-2.htm#50593872_30011" CLASS="XRef">Data Descriptor</A></EM>
. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-64377"></A>When a vdata is attached, it is assigned with an identifier, called <EM CLASS="Definition">
vdata id</EM>
, which is used by the Vdata interface routines in accessing the vdata.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-6114"></A>	4.3.4	P<A NAME="50593874_Vdata API"></A>rogramming Model for the Vdata Interface </H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-5429"></A>The programming model for accessing vdatas is as follows:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593874_pgfId-5431"></A>Open the file.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593874_pgfId-13000"></A>2.	Initialize the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5435"></A>3.	Create a new vdata or open an existing one using its reference number.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5437"></A>4.	Perform the desired operations on the vdata.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5439"></A>5.	Terminate access to the vdata.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5441"></A>6.	Terminate access to the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5443"></A>7.	Close the file.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593874_pgfId-50086"></A>To access a vdata, the calling program must contain the following calls, which are individually explained in the following subsections:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-50087"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, file_access_mode, num_dds_block);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-50088"></A>		status = Vstart(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5451"></A>		vdata_id = VSattach(file_id, vdata_ref, vdata_access_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5453"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5455"></A>		status = VSdetach(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5457"></A>		status = Vend(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-56185"></A>		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-56187"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, file_access_mode, num_dds_block)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5463"></A>		status = vfstart(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5465"></A>		vdata_id = vsfatch(file_id, vdata_ref, vdata_access_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5467"></A>		&lt;Optional operations&gt;</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5469"></A>		status = vsfdtch(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5471"></A>		status = vfend(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5473"></A>		status = hclose(file_id)</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-5531"></A>	4.3.5	<A NAME="50593874_28998"></A>Accessing Files and Vdatas: Vstart and VSattach</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-64970"></A><A NAME="50593874_Hopen"></A>An HDF file must be opened by <EM CLASS="FunctionName">
Hopen</EM>
 before it can be accessed using the Vdata interface. <EM CLASS="FunctionName">
Hopen</EM>
 is described in <EM CLASS="ChapterReference">
<A HREF="UG_html-2.htm#50593872_13138" CLASS="XRef">HDF Fundamentals</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-64972"></A><A NAME="50593874_Vstart"></A><EM CLASS="FunctionName">
Vstart</EM>
 must be called for every file to be accessed. This routine initializes the internal vdata structures used by the Vdata interface. <EM CLASS="FunctionName">
Vstart</EM>
 has only one argument, the file identifier (<EM CLASS="VarName">
file_id</EM>
) returned by <EM CLASS="FunctionName">
Hopen</EM>
, and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Note that the <EM CLASS="FunctionName">
Vstart</EM>
 routine is used by both the Vdata and Vgroup interfaces.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-59591"></A><EM CLASS="FunctionName">
VSattach</EM>
<A NAME="50593874_VSattach"></A> initiates access to a vdata and must be called before any operations on the vdata may occur. <EM CLASS="FunctionName">
VSattach</EM>
 takes three arguments: <EM CLASS="VarName">
file_id</EM>
, <EM CLASS="VarName">
vdata_ref</EM>
, and <EM CLASS="VarName">
vdata_access_mode</EM>
, and returns either a vdata identifier or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55350"></A>The argument <EM CLASS="VarName">
file_id</EM>
 is the file identifier returned by <EM CLASS="FunctionName">
Hopen</EM>
 and <EM CLASS="VarName">
vdata_ref</EM>
 is the reference number that identifies the vdata to be accessed. Specifying <EM CLASS="VarName">
vdata_ref</EM>
 with a value of <EM CLASS="DefName">
-1</EM>
 will create a new vdata; specifying <EM CLASS="VarName">
vdata_ref</EM>
 with a nonexistent reference number will return an error code of <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
); and specifying <EM CLASS="VarName">
vdata_ref</EM>
 with a valid reference number will initiate access to the corresponding vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-58464"></A>If an existing vdata’s reference number is unknown, it must be obtained prior to the <EM CLASS="FunctionName">
VSattach</EM>
 call. (Refer to <EM CLASS="ChapterReference">
<A HREF="UG_html-2.htm#50593872_13138" CLASS="XRef">HDF Fundamentals</A></EM>
, for a description of reference numbers.) The HDF library provides two routines for this purpose, <A NAME="50593874_marker-58465"></A><EM CLASS="FunctionName">
VSfind</EM>
 and <EM CLASS="FunctionName">
VSgetid</EM>
<A NAME="50593874_marker-58466"></A>. <EM CLASS="FunctionName">
VSfind</EM>
 can be used to obtain the reference number of a vdata when the vdata’s name is known. <EM CLASS="FunctionName">
VSgetid</EM>
 can be used to obtain the reference number when only the location of the vdata within the file is known; this is often discovered by sequentially traversing the file. These routines are discussed in <A HREF="UG_html-4.htm#50593874_39951" CLASS="XRef">Sequentially Searching for a Vdata: VSgetid</A> and <A HREF="UG_html-4.htm#50593874_38808" CLASS="XRef">Determining a Reference Number from a Vdata Name: VSfind</A>.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55299"></A>The argument <EM CLASS="VarName">
vdata_access_mode</EM>
 specifies the access mode (“<EM CLASS="VarName">
r</EM>
” for read-only access or “<EM CLASS="VarName">
w</EM>
” for read and write access) for subsequent operations on the specified vdata. Although several HDF user programs may simultaneously read from one vdata, only one write access is allowed at a time. The “<EM CLASS="VarName">
r</EM>
” access mode may only be used with existing vdatas; the “<EM CLASS="VarName">
w</EM>
” access mode is valid with both new vdatas (<EM CLASS="VarName">
vdata_ref = -1</EM>
) and existing vdatas.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-10396"></A>Note that, although a vdata can be created without being written with data, either the routine <EM CLASS="FunctionName">
VSsetname</EM>
 or <EM CLASS="FunctionName">
VSsetfields</EM>
 must be called in order for the vdata to exist in the file.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-57580"></A>The parameters for <EM CLASS="FunctionName">
Vstart</EM>
 and <EM CLASS="FunctionName">
VSattach</EM>
 are further defined in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_25929" CLASS="XRef">Vstart, VSattach, VSdetach, and Vend Parameter Lists</A></EM>
.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-5555"></A>	4.3.6	<A NAME="50593874_36032"></A>Terminating Access to Vdatas and Files: VSdetach and Vend</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-5557"></A><EM CLASS="FunctionName">
VSdetach</EM>
<A NAME="50593874_VSdetach"></A> terminates access to a vdata by updating pertinent information and freeing all memory associated with the vdata and initialized by <EM CLASS="FunctionName">
VSattach</EM>
. Once access to the vdata is terminated, its identifier becomes invalid and any attempt to access it will result in an error condition. <EM CLASS="FunctionName">
VSdetach</EM>
 takes only one argument, the vdata identifier that is returned by <EM CLASS="FunctionName">
VSattach</EM>
, and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-5561"></A><EM CLASS="FunctionName">
Vend</EM>
<A NAME="50593874_Vend"></A> releases all internal data structures allocated by <EM CLASS="FunctionName">
Vstart</EM>
. <EM CLASS="FunctionName">
Vend</EM>
 must be called once for each call to <EM CLASS="FunctionName">
Vstart</EM>
 and only after access to all vdatas have been terminated (i.e., all calls to <EM CLASS="FunctionName">
VSdetach</EM>
 have been made). Attempts to call Vdata interface routines after calling <EM CLASS="FunctionName">
Vend</EM>
 will result in an error condition. <EM CLASS="FunctionName">
Vend</EM>
 takes one argument, the file identifier that is returned by <EM CLASS="FunctionName">
Hopen</EM>
, and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Note that the <EM CLASS="FunctionName">
Vend</EM>
 routine is used by both the Vdata and Vgroup interfaces.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-60165"></A>In summary, successfully terminating access to a vdata requires one<EM CLASS="FunctionName">
 VSdetach</EM>
 call for each call to <EM CLASS="FunctionName">
VSattach</EM>
 and one <EM CLASS="FunctionName">
Vend</EM>
 call for each call to <EM CLASS="FunctionName">
Vstart</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68579"></A>The parameters for <EM CLASS="FunctionName">
VSdetach</EM>
 and <EM CLASS="FunctionName">
Vend</EM>
 are further defined in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_25929" CLASS="XRef">Table 4B</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-60166"></A><EM CLASS="FunctionName">
Hclose</EM>
 terminates access to a file and should only be called after all <EM CLASS="FunctionName">
Vend</EM>
 calls have been made to close the Vdata interface. Refer to <EM CLASS="ChapterReference">
<A HREF="UG_html-2.htm#50593872_13138" CLASS="XRef">HDF Fundamentals</A></EM>
, for a description of <EM CLASS="FunctionName">
Hclose</EM>
.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-98079"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_25929"></A>V<A NAME="50593874_Vstart"></A>start, V<A NAME="50593874_VSattach"></A>Sattach, <A NAME="50593874_VSdetach"></A>VSdetach, an<A NAME="50593874_Vend"></A>d Vend Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-97990"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-97991"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-97992"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-97994"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-97996"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-98000"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-98006"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-98008"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98012"></A>Vstart</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-98013"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98014"></A>(vfstart)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98016"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98018"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98020"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-98022"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98024"></A>VSattach</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-98025"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98026"></A>(vsfatch)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98028"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98030"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98032"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-98034"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98038"></A>vdata_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98040"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98042"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-98044"></A>Reference number of the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98048"></A>vdata_access_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98050"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98052"></A>character*1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-98054"></A>Vdata access mode</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98056"></A>VSdetach</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-98057"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98058"></A>(vsfdtch)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98060"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98062"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98064"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-98066"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98068"></A>Vend</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-98069"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-98070"></A>(vfend)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98072"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98074"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-98076"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-98078"></A>File identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-98080"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Accessing a Vdata in an HDF File</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-98081"></A>This example illustrates the use of <EM CLASS="FunctionName">
Hopen/hopen</EM>
, <EM CLASS="FunctionName">
Vstart/vfstart</EM>
, <EM CLASS="FunctionName">
VSattach/vsfatch</EM>
, <EM CLASS="FunctionName">
VSdetach/vsfdtch</EM>
, <EM CLASS="FunctionName">
Vend/vfend</EM>
, and <EM CLASS="FunctionName">
Hclose/hclose</EM>
 to create and to access different vdatas from different HDF files.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-79260"></A>The program creates an HDF file, named &quot;General_Vdatas.hdf&quot;, containing a vdata.  The program also creates a second HDF file, named &quot;Two_Vdatas.hdf&quot;, containing two vdatas.  Note that, in this example, the program does not write data to these vdatas.  Also note that before closing the file, the access to its vdatas and its corresponding Vdata interface must be terminated. These examples request information about a specific vdata.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-79262"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-79264"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131100"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131101"></A>#define  FILE1_NAME     &quot;General_Vdatas.hdf&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131102"></A>#define  FILE2_NAME     &quot;Two_Vdatas.hdf&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131103"></A>#define  VDATA_NAME     &quot;Vdata 1&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131104"></A>#define  VDATA_CLASS    &quot;Empty Vdatas&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131105"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131106"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131107"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131108"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131109"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131110"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131111"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131112"></A>         file1_id, file2_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131113"></A>         vdata_id, vdata1_id, vdata2_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131114"></A>         vdata_ref = -1;     /* ref number of a vdata, set to -1 to create  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131115"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131116"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131117"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131118"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131119"></A>   * Create the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131120"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131121"></A>   file1_id = Hopen (FILE1_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131122"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131123"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131124"></A>   * Initialize the VS interface associated with the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131125"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131126"></A>   status_n = Vstart (file1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131127"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131128"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131129"></A>   * Create a vdata in the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131130"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131131"></A>   vdata_id = VSattach (file1_id, vdata_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131132"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131133"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131134"></A>   * Assign a name to the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131135"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131136"></A>   status_32 = VSsetname (vdata_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131137"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131138"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131139"></A>   * Other operations on the vdata identified by vdata_id can be carried</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131140"></A>   * out starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131141"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131142"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131143"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131144"></A>   * Create the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131145"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131146"></A>   file2_id = Hopen (FILE2_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131147"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131148"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131149"></A>   * Initialize the VS interface associated with the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131150"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131151"></A>   status_n = Vstart (file2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131152"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131153"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131154"></A>   * Create the first vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131155"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131156"></A>   vdata1_id = VSattach (file2_id, vdata_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131157"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131158"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131159"></A>   * Create the second vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131160"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131161"></A>   vdata2_id = VSattach (file2_id, vdata_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131162"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131163"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131164"></A>   * Assign a class name to these vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131165"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131166"></A>   status_32 = VSsetclass (vdata1_id, VDATA_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131167"></A>   status_32 = VSsetclass (vdata2_id, VDATA_CLASS);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131168"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131169"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131170"></A>   * Other operations on the vdatas identified by vdata1_id and vdata2_id </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131171"></A>   * can be carried out starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131172"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131173"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131174"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131175"></A>   * Terminate access to the first vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131176"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131177"></A>   status_32 = VSdetach (vdata1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131178"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131179"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131180"></A>   * Terminate access to the second vdata in the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131181"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131182"></A>   status_32 = VSdetach (vdata2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131183"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131184"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131185"></A>   * From this point on, any operations on the vdatas identified by vdata1_id </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131186"></A>   and vdata2_id are invalid but not on the vdata identified by vdata_id.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131187"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131188"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131189"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131190"></A>   * Terminate access to the VS interface associated with the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131191"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131192"></A>   status_n = Vend (file2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131193"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131194"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131195"></A>   * Close the second HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131196"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131197"></A>   status_n = Hclose (file2_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131198"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131199"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131200"></A>   * Terminate access to the vdata in the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131201"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131202"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131203"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131204"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131205"></A>   * Terminate access to the VS interface associated with the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131206"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131207"></A>   status_n = Vend (file1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131208"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131209"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131210"></A>   * Close the first HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131211"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131212"></A>   status_n = Hclose (file1_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131213"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131214"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-62233"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-78992"></A> program create_vdatas</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131217"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131218"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131219"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131220"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131221"></A>      character*18 FILE1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131222"></A>      character*14 FILE2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131223"></A>      character*7  VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131224"></A>      character*12 VDATA_CLASS</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131225"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131226"></A>      parameter (FILE1_NAME  = ’General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131227"></A>     +           FILE2_NAME  = ’Two_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131228"></A>     +           VDATA_NAME  = ’Vdata 1’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131229"></A>     +           VDATA_CLASS = ’Empty Vdatas’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131230"></A>      integer DFACC_CREATE</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131231"></A>      parameter (DFACC_CREATE = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131232"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131233"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131234"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131235"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131236"></A>      integer vfstart, vsfatch, vsfsnam, vsfscls, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131237"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131238"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131239"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131240"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131241"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131242"></A>      integer file1_id, file2_id</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131243"></A>      integer vdata_id, vdata1_id, vdata2_id </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131244"></A>      integer vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131245"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131246"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131247"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131248"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131249"></A>C     Create the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131250"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131251"></A>      file1_id = hopen(FILE1_NAME, DFACC_CREATE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131252"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131253"></A>C     Initialize the VS interface associated with the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131254"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131255"></A>      status = vfstart(file1_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131256"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131257"></A>C     Create a vdata in the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131258"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131259"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131260"></A>      vdata_id = vsfatch(file1_id, vdata_ref, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131261"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131262"></A>C     Assign a name to the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131263"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131264"></A>      status = vsfsnam(vdata_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131265"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131266"></A>C     Other operations on the vdata identified by vdata_id can be carried out</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131267"></A>C     starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131268"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131269"></A>C     Create the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131270"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131271"></A>      file2_id = hopen(FILE2_NAME, DFACC_CREATE, 0) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131272"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131273"></A>C     Initialize the VS interface associated with the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131274"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131275"></A>      status = vfstart(file2_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131276"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131277"></A>C     Create the first vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131278"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131279"></A>      vdata1_id = vsfatch(file2_id, vdata_ref, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131280"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131281"></A>C     Create the second vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131282"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131283"></A>      vdata2_id = vsfatch(file2_id, vdata_ref, ’w’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131284"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131285"></A>C     Assign a class name to these vdatas.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131286"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131287"></A>      status = vsfscls(vdata1_id, VDATA_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131288"></A>      status = vsfscls(vdata2_id, VDATA_CLASS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131289"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131290"></A>C     Other operations on the vdatas identified by vdata1_id and vdata2_id</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131291"></A>C     can be carried out starting from this point.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131292"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131293"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131294"></A>C     Terminate access to the first vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131295"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131296"></A>      status = vsfdtch(vdata1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131297"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131298"></A>C     Terminate access to the second vdata in the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131299"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131300"></A>      status = vsfdtch(vdata2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131301"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131302"></A>C     Terminate access to the VS interface associated with the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131303"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131304"></A>      status = vfend(file2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131305"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131306"></A>C     Close the second HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131307"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131308"></A>      status = hclose(file2_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131309"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131310"></A>C     Terminate access to the vdata in the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131311"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131312"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131313"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131314"></A>C     terminate access to the VS interface associated with the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131315"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131316"></A>      status = vfend(file1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131317"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131318"></A>C     Close the first HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131319"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131320"></A>      status = hclose(file1_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131321"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131322"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-10418"></A>	4.4	<A NAME="50593874_16469"></A>Cr<A NAME="50593874_marker-16842"></A>eating and Writing to Single-Field Vdatas: VHstoredata and VHstoredatam<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-55638"></A>	There are two methods of writing vdatas that contain one field per record. One requires the use of several VS routines and the other involves the use of <EM CLASS="FunctionName">
VHstoredata </EM>
or<EM CLASS="FunctionName">
 VHstoredatam</EM>
, two high<A NAME="50593874_Vdata"></A>-level routines that encapsulate several VS routines into one.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55641"></A><A NAME="50593874_VH routines"></A>The high-level VH routines are useful when writing one-field vdatas and complete information about each vdata is available. If you cannot provide full information about a vdata, you must use the VS routines described in the next section.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-58546"></A><EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_12865" CLASS="XRef">Figure 4c</A></EM>
 shows two examples of single-field vdatas. The fields can be single-component or multi-component fields. With a multi-component field, they may contain one or more values of the same data type.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593874_pgfId-58649"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
FIGURE 4c	<A NAME="50593874_12865"></A>Single- and Multi-component Vdatas</H6>
<DIV>
<MAP NAME="UG_html-25">
</MAP>
<IMG SRC="UG_html-25.gif" USEMAP="#UG_html-25" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593874_pgfId-8306"></A><EM CLASS="FunctionName">
VHstoredata</EM>
<A NAME="50593874_VHstoredata"></A> creates then writes a vdata with one single-component field. <EM CLASS="FunctionName">
VHstoredatam</EM>
<A NAME="50593874_VHstoredatam"></A> creates and writes a vdata with one multi-component field. In both cases the following steps are involved:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593874_pgfId-5723"></A>Open the file.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5725"></A>2.	Initialize the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5727"></A>3.	Store (create then write to) the vdata.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5729"></A>4.	Terminate access to the Vdata interface. </LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-8172"></A>5.	Close the file. </LI>
</OL>
<P CLASS="Body">
<A NAME="50593874_pgfId-8173"></A>These steps correspond to the following sequence of function calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-8174"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, file_access_mode, num_dds_block);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5737"></A>		status = Vstart(file_id);</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-25601"></A>		/* Either VHstoredata or VHstoredatam can be called here. */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-58298"></A>		vdata_ref = VHstoredata(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class);</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-58302"></A>	<EM CLASS="syntaxLang">
OR</EM>
	vdata_ref = VHstoredatam(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class, order);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5743"></A>		status = Vend(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-84227"></A>		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-84228"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, file_access_mode, num_dds_block)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-84229"></A>		status = vfstart(file_id)</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-25602"></A>C		Either vhfsd/vhfscd or vhfsdm/vhfscdm can be called here.</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-60300"></A>		vdata_ref = vhfsd(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class)</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-60301"></A>	<EM CLASS="syntaxLang">
OR</EM>
	vdata_ref = vhfscd(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-60308"></A>			<EM CLASS="syntaxLang">
OR</EM>
</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-58305"></A>		vdata_ref = vhfsdm(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class, order)</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-58673"></A>	<EM CLASS="syntaxLang">
OR</EM>
	vdata_ref = vhfscdm(file_id, fieldname, buf, n_records, data_type, vdata_name, vdata_class, order)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-13492"></A>		status = vfend(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-13493"></A>		status = hclose(file_id)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55678"></A>The first seven parameters of <EM CLASS="FunctionName">
VHstoredata </EM>
and <EM CLASS="FunctionName">
VHstoredatam</EM>
 are the same. The parameter <EM CLASS="VarName">
file_id</EM>
 is the file identifier returned by <EM CLASS="FunctionName">
Hopen</EM>
. The parameter <EM CLASS="VarName">
fieldname</EM>
 specifies the name of the vdata field. The parameter <EM CLASS="VarName">
buf</EM>
 contains the data to be stored into the vdata. In C, the data type of the parameter <EM CLASS="VarName">
buf</EM>
 is <EM CLASS="VarName">
uint8</EM>
; in FORTRAN-77, it is the data type of the data to be stored. The parameters <EM CLASS="VarName">
n_records</EM>
 and <EM CLASS="VarName">
data_type</EM>
 contain the number of records in the vdata and the data type of the vdata data. The parameters <EM CLASS="VarName">
vdata_name</EM>
 and <EM CLASS="VarName">
vdata_class</EM>
 specify the name and class of the vdata. The parameter <EM CLASS="VarName">
order</EM>
 of <EM CLASS="FunctionName">
VHstoredatam</EM>
 specifies the order of the field. The maximum length of the vdata name is given by the <EM CLASS="DefName">
VSNAMELENMAX</EM>
 (or <EM CLASS="DefName">
64</EM>
) as defined in the header file “hlimits.h”.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68589"></A>Note that these two routines do not overwrite existing vdatas but only create new ones before storing the data.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68596"></A>The FORTRAN-77 version of <EM CLASS="FunctionName">
VHstoredata</EM>
 has two routines: <EM CLASS="FunctionName">
vhfsd</EM>
 for numeric data and <EM CLASS="FunctionName">
vhfscd</EM>
 for character data; the FORTRAN-77 version of <EM CLASS="FunctionName">
VHstoredatam</EM>
 has two routines: <EM CLASS="FunctionName">
vhfsdm</EM>
 for numeric data and <EM CLASS="FunctionName">
vhfscdm</EM>
 for character data.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68590"></A>Both routines return the reference number of the newly-created vdata or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) if the operation is unsuccessful. The parameters for <EM CLASS="FunctionName">
VHstoredata</EM>
 and <EM CLASS="FunctionName">
VHstoredatam</EM>
 are further described in <A HREF="UG_html-4.htm#50593874_11063" CLASS="XRef">Table 4C</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-5754"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_11063"></A>VH<A NAME="50593874_VHstoredata"></A>storedata and VH<A NAME="50593874_VHstoredatam"></A>storedatam Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58677"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58678"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58679"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58681"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58683"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58687"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58693"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58695"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="7" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58699"></A>VHstoredata</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58700"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58701"></A>(vhfsd/vhfscd)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58703"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58705"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58707"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58709"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58713"></A>fieldname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58715"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58717"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58719"></A>String containing the name of the field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58723"></A>buf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58725"></A>uint8 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84222"></A>&lt;valid numeric data type&gt;(*)/character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58729"></A>Buffer containing the data to be stored</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58733"></A>n_records</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58735"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58737"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58739"></A>Number of records to create in the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58743"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58745"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58747"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58749"></A>Data type of the stored data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58753"></A>vdata_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58755"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58757"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58759"></A>Name of the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58763"></A>vdata_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58765"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58767"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58769"></A>Class name of the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="8" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58771"></A>VHstoredatam</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58772"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58773"></A>(vhfsdm/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58774"></A>vhfscdm)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58776"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58778"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58780"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58782"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58786"></A>fieldname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58788"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58790"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58792"></A>String containing the name of the field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58796"></A>buf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58798"></A>uint8 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58800"></A>&lt;valid numeric data type&gt;(*)/character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58802"></A>Buffer containing the data to be stored</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58806"></A>n_records</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58808"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58810"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58812"></A>Number of records to create in the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58816"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58818"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58820"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58822"></A>Data type of the stored data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58826"></A>vdata_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58828"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58830"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58832"></A>Name of the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58836"></A>vdata_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58838"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58840"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58842"></A>Class name of the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58846"></A>order</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58848"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58850"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58852"></A>Number of field components</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-5795"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Creating and Storing One-field Vdatas Using VHstoredata and VHstoredatam</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-76303"></A>This example illustrates the use of <EM CLASS="FunctionName">
VHstoredata/vhfscd</EM>
 and <EM CLASS="FunctionName">
VHstoredatam/vhfsdm</EM>
 to create single-field vdatas. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-8808"></A>This example creates and writes two vdatas to the file &quot;General_Vdatas.hdf&quot;.  The first vdata is named &quot;First Vdata&quot;, contains 5 records, and belongs to a class named &quot;5x1 Array&quot;.  The second vdata is named &quot;Second Vdata&quot;, contains 6 records, and belongs to a class named &quot;6x4 Array&quot;.  The field of the first vdata is a single-component field, i.e., order of 1, and named &quot;Single-component Field&quot;.  The field of the second vdata has an order of 4 and is named &quot;Multi-component Field&quot;.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-76301"></A>In these examples two vdatas are created. The first vdata has five records with one field of order 1 and is created from a 5 x 1 array in memory. The second vdata has six records with one field of order 4 and is created from a 6 x 4 array in memory.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-21108"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-62526"></A>#include &quot;hdf.h&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131334"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131335"></A>#define  FILE_NAME      &quot;General_Vdatas.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131336"></A>#define  CLASS1_NAME    &quot;5x1 Array&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131337"></A>#define  CLASS2_NAME    &quot;6x4 Array&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131338"></A>#define  VDATA1_NAME    &quot;First Vdata&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131339"></A>#define  VDATA2_NAME    &quot;Second Vdata&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131340"></A>#define  FIELD1_NAME    &quot;Single-component Field&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131341"></A>#define  FIELD2_NAME    &quot;Multi-component Field&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131342"></A>#define  N_RECORDS_1    5    /* number of records the first vdata contains  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131343"></A>#define  N_RECORDS_2    6    /* number of records the second vdata contains */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131344"></A>#define  ORDER_2        4    /* order of the field in the second vdata      */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131345"></A>                /* Note that the order of the field in the first vdata is 1 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131346"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131347"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131348"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131349"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131350"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131351"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131352"></A>   int32 status_32;     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131353"></A>   int32 file_id, vdata1_ref, vdata2_ref; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131354"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131355"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131356"></A>   * Define an array to buffer the data of the first vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131357"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131358"></A>   char8 vdata1_buf [N_RECORDS_1] = {’V’, ’D’, ’A’, ’T’, ’A’};</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131359"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131360"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131361"></A>   * Define an array to buffer the data of the second vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131362"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131363"></A>   int32 vdata2_buf [N_RECORDS_2][ORDER_2] = {{1, 2, 3, 4}, {2, 4, 6, 8},</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131364"></A>                                              {3, 6, 9, 12}, {4, 8, 12, 16},</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131365"></A>                                              {5, 10, 15, 20}, {6, 12, 18, 24}};</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131366"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131367"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131368"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131369"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131370"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131371"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131372"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131373"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131374"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131375"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131376"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131377"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131378"></A>    </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131379"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131380"></A>   * Create the first vdata and populate it with data from the vdata1_buf </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131381"></A>   * array. Note that the buffer vdata1_buf is cast to (uint8 *) for the </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131382"></A>   * benefit of generic data type.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131383"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131384"></A>   vdata1_ref = VHstoredata (file_id, FIELD1_NAME, (uint8 *)vdata1_buf, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131385"></A>                       N_RECORDS_1, DFNT_CHAR8, VDATA1_NAME, CLASS1_NAME); </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131386"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131387"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131388"></A>   * Create the second vdata and populate it with data from the vdata2_buf </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131389"></A>   * array. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131390"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131391"></A>   vdata2_ref = VHstoredatam (file_id, FIELD2_NAME, (uint8 *)vdata2_buf, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131392"></A>               N_RECORDS_2, DFNT_INT32, VDATA2_NAME, CLASS2_NAME, ORDER_2); </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131393"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131394"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131395"></A>   * Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131396"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131397"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131398"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131399"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131400"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-21110"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-62611"></A> program create_onefield_vdatas</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131410"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131411"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131412"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131413"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131414"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131415"></A>      character*9  CLASS1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131416"></A>      character*9  CLASS2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131417"></A>      character*11 VDATA1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131418"></A>      character*12 VDATA2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131419"></A>      character*22 FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131420"></A>      character*21 FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131421"></A>      integer      N_RECORDS_1, N_RECORDS_2</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131422"></A>      integer      ORDER_2</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131423"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131424"></A>      parameter (FILE_NAME   = ’General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131425"></A>     +           CLASS1_NAME = ’5x1 Array’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131426"></A>     +           CLASS2_NAME = ’6x4 Array’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131427"></A>     +           VDATA1_NAME = ’First Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131428"></A>     +           VDATA2_NAME = ’Second Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131429"></A>     +           FIELD1_NAME = ’Single-component Field’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131430"></A>     +           FIELD2_NAME = ’Multi-component Field’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131431"></A>      parameter (N_RECORDS_1 = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131432"></A>     +           N_RECORDS_2 = 6,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131433"></A>     +           ORDER_2     = 4)               </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131434"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131435"></A>      integer DFACC_WRITE, DFNT_CHAR8, DFNT_INT32</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131436"></A>      parameter (DFACC_WRITE = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131437"></A>     +           DFNT_CHAR8  = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131438"></A>     +           DFNT_INT32  = 24)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131439"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131440"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131441"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131442"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131443"></A>      integer vfstart, vhfscd, vhfsdm, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131444"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131445"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131446"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131447"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131448"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131449"></A>      integer   file_id</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131450"></A>      integer   vdata1_ref, vdata2_ref </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131451"></A>      character vdata1_buf(N_RECORDS_1)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131452"></A>      integer   vdata2_buf(ORDER_2, N_RECORDS_2)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131453"></A>      data vdata1_buf /’V’,’D’,’A’,’T’,’A’/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131454"></A>      data vdata2_buf / 1,  2,  3,  4,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131455"></A>     +                  2,  4,  6,  8,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131456"></A>     +                  3,  6,  9, 12,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131457"></A>     +                  4,  8, 12, 16,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131458"></A>     +                  5, 10, 15, 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131459"></A>     +                  6, 12, 18, 24/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131460"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131461"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131462"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131463"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131464"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131465"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131466"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131467"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131468"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131469"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131470"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131471"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131472"></A>C     Create the first vdata and populate it with data from vdata1_buf array.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131473"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131474"></A>      vdata1_ref = vhfscd(file_id, FIELD1_NAME, vdata1_buf, N_RECORDS_1,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131475"></A>     +                    DFNT_CHAR8, VDATA1_NAME, CLASS1_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131476"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131477"></A>C     Create the second vdata and populate it with data from vdata2_buf array.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131478"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131479"></A>      vdata2_ref = vhfsdm(file_id, FIELD2_NAME, vdata2_buf, N_RECORDS_2,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131480"></A>     +                    DFNT_INT32, VDATA2_NAME, CLASS2_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131481"></A>     +                    ORDER_2)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131482"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131483"></A>C     Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131484"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131485"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131486"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131487"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131488"></A><A NAME="50593874_marker-83585"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-50098"></A>	4.5	<A NAME="50593874_18489"></A>Writ<A NAME="50593874_marker-79308"></A>ing to Multi-Field Vdatas <DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-50099"></A>There are several steps involved in creating <EM CLASS="Definition">
general vdatas</EM>
 with more than one field: define the vdata, define the fields of the vdata, and write the vdata to the file. These steps are usually executed within a single program, although it is also possible to define an empty vdata in anticipation of writing data to it at a later time.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-5891"></A>	4.5.1	<A NAME="50593874_32451"></A>C<A NAME="50593874_marker-16844"></A>reating Vdatas </H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-5893"></A>Creating an empty vdata involves the following steps:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593874_pgfId-5895"></A>Open a file.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5897"></A>2.	Initialize the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5899"></A>3.	Create the new vdata.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5901"></A>4.	Assign a vdata name. (optional)</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5903"></A>5.	Assign a vdata class. (optional)</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5905"></A>6.	Define the fields.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-25640"></A>7.	Initialize fields for writing.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5907"></A>8.	Set the interlace mode.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5909"></A>9.	Dispose of the vdata identifier.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5911"></A>10.	Terminate access to the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-5913"></A>11.	Close the file.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593874_pgfId-5915"></A>Like the high-level VH interface, the Vdata interface does not retain default settings from one operation to the next or from one file to the next. Each time a vdata is created, its definitions must be explicitly reset.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-8501"></A>To create a multi-field vdata, the calling program must contain the following:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-5917"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, file_access_mode, num_dds_block);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-55719"></A>		status = Vstart(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-55720"></A>		vdata_id = VSattach(file_id, -1, vdata_access_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-55721"></A>		status = VSsetname(vdata_id, vdata_name);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5925"></A>		status = VSsetclass(vdata_id, vdata_class);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5927"></A>		status = VSfdefine(vdata_id, fieldname1, data_type1, order1);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5929"></A>		 . . . . . . . . . .</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-77513"></A>		status = VSfdefine(vdata_id, fieldnameN, data_typeN, orderN);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-77511"></A>		status = VSsetfields(vdata_id, fieldname_list);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5931"></A>		status = VSsetinterlace(vdata_id, interlace_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5933"></A>		status = VSdetach(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5935"></A>		status = Vend(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5937"></A>		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-5939"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, file_access_mode, num_dds_block)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5941"></A>		status = vfstart(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5943"></A>		vdata_id = vsfatch(file_id, -1, vdata_access_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5945"></A>		status = vsfsnam(vdata_id, vdata_name)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5947"></A>		status = vsfscls(vdata_id, vdata_class)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5949"></A>		status = vsffdef(vdata_id, fieldname1, data_type1, order1)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-77523"></A>		 . . . . . . . . . .</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-77527"></A>		status = vsffdef(vdata_id, fieldnameN, data_typeN, orderN)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5951"></A>		status = vsfsfld(vdata_id, fieldname_list)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5953"></A>		status = vsfsint(vdata_id, interlace_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5955"></A>		status = vsfdtch(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5957"></A>		status = vfend(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5959"></A>		status = hclose(file_id)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-10443"></A>In the routines that follow, <EM CLASS="VarName">
vdata_id</EM>
 is the vdata identifier returned by <EM CLASS="FunctionName">
VSattach</EM>
. </P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-5967"></A>	4.5.1.1	<A NAME="50593874_19463"></A>Assigning a <A NAME="50593874_marker-16846"></A>Vdata Name and <A NAME="50593874_marker-16847"></A>Class: VSsetname and VSsetclass<A NAME="50593874_marker-5965"></A></H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-8581"></A><EM CLASS="FunctionName">
VSsetname</EM>
<A NAME="50593874_marker-16848"></A> assigns a name to a vdata. If not explicitly named by a call to <EM CLASS="FunctionName">
VSsetname</EM>
, the name of the vdata is set by default to <EM CLASS="DefName">
NULL</EM>
. A name may be assigned and reassigned at any time after the vdata is created. The parameter <EM CLASS="VarName">
vdata_name</EM>
 contains the name to be assigned to the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55762"></A><EM CLASS="FunctionName">
VSsetclass</EM>
<A NAME="50593874_marker-55761"></A> assigns a class to a vdata. If <EM CLASS="FunctionName">
VSsetclass</EM>
 is not called, the vdata’s class is set by default to <EM CLASS="DefName">
NULL</EM>
. As with the vdata name, the class may be assigned and reassigned any time after the vdata is created. The parameter <EM CLASS="VarName">
vdata_class</EM>
 contains the class name to be assigned to the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51025"></A><EM CLASS="FunctionName">
VSsetname</EM>
 and <EM CLASS="FunctionName">
VSsetclass</EM>
 return either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for these routines are further defined in <A HREF="UG_html-4.htm#50593874_38618" CLASS="XRef">VSsetname, VSsetclass, VSfdefine, VSsetfields, and VSsetinterlace Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-5973"></A>	4.5.1.2	<A NAME="50593874_23004"></A>D<A NAME="50593874_marker-16850"></A>efining a Field within a Vdata: VSfdefine</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-5975"></A><EM CLASS="FunctionName">
VSfdefine</EM>
<A NAME="50593874_marker-16851"></A> defines a field within a newly-created vdata. Each <EM CLASS="FunctionName">
VSfdefine</EM>
 call assigns the name contained in the argument <EM CLASS="VarName">
fieldname</EM>
, the data type contained in the argument <EM CLASS="VarName">
data_type</EM>
, and the order contained in the argument <EM CLASS="VarName">
order </EM>
to one new field. Once data is written to a vdata, the name, data type and order of the field may not be modified or deleted. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55743"></A>The Vdata interface also provides certain <EM CLASS="Definition">
pre</EM>
<A NAME="50593874_marker-58863"></A><EM CLASS="Definition">
defined fields.</EM>
 A predefined field has a specific name, data type, and order, so there is no need to call <EM CLASS="FunctionName">
VSfdefine</EM>
 to define a predefined field. Some applications may require the use of predefined fields in vdatas. Available predefined fields are discussed in <A HREF="UG_html-4.htm#50593874_29742" CLASS="XRef">Table 4D</A>.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55744"></A>Note that <EM CLASS="FunctionName">
VSfdefine</EM>
 does not allocate memory for the field, but simply introduces the field. The field definition must be completed by <EM CLASS="FunctionName">
VSsetfields</EM>
, which is discussed in <A HREF="UG_html-4.htm#50593874_38506" CLASS="XRef">Initializing the Fields for Write Access: VSsetfields</A>.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-14180"></A><EM CLASS="FunctionName">
VSfdefine</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSfdefine</EM>
 are further described in <A HREF="UG_html-4.htm#50593874_38618" CLASS="XRef">VSsetname, VSsetclass, VSfdefine, VSsetfields, and VSsetinterlace Parameter Lists</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-84426"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_29742"></A>Predefined Data Types and Field Names for Vdata Fields</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84371"></A>Data Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="3">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84373"></A>Coordinate Point Field Names</P>
</TD>
<TD ROWSPAN="1" COLSPAN="3">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84379"></A>Normal Component Field Names</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84387"></A>x-coordinate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84389"></A>y-coordinate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84391"></A>z-coordinate</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84393"></A>x-component</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84395"></A>y-component</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-84397"></A>z-component</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-84399"></A>float</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84401"></A>PX</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84403"></A>PY</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84405"></A>PZ</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84407"></A>NX</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84409"></A>NY</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84411"></A>NZ</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-84413"></A>integer</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84415"></A>IX</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84417"></A>IY</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84419"></A>IZ</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84421"></A>None</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84423"></A>None</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84425"></A>None</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-84429"></A>	4.5.1.3	<A NAME="50593874_38506"></A>I<A NAME="50593874_marker-84428"></A>nitializing the Fields for Write Access: VSsetfields</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-84431"></A>	<EM CLASS="FunctionName">
VSsetfields</EM>
<A NAME="50593874_marker-84430"></A> initializes read and write access to the fields in a vdata. It must be called prior to read or write operations. Initializing for read access is discussed in <A HREF="UG_html-4.htm#50593874_33834" CLASS="XRef">Initializing the Fields for Read Access: VSsetfields</A>. For writing, <EM CLASS="FunctionName">
VSsetfields</EM>
 specifies the fields to be written and the order in which they are to be placed.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55784"></A>The parameter <EM CLASS="VarName">
fieldname_list</EM>
 is a comma-separated list of the field names, with no white space included. The fields can be either the predefined fields or the fields that have been previously introduced by <EM CLASS="FunctionName">
VSfdefine</EM>
. <EM CLASS="FunctionName">
VSfdefine</EM>
 allows a user to declare a field, along with its data type and order, but <EM CLASS="FunctionName">
VSsetfields</EM>
 finalizes the definition by allowing the user to select the fields that are to be included in the vdata. Thus, any fields created by <EM CLASS="FunctionName">
VSfdefine</EM>
 that are not in the parameter <EM CLASS="VarName">
fieldname_list</EM>
 of <EM CLASS="FunctionName">
VSsetfields</EM>
 will be ignored. This feature was originally intended for interactive-mode users. The combined width of the fields in the parameter <EM CLASS="VarName">
fieldname_list</EM>
 is also the length of the record and must be less than <EM CLASS="DefName">
MAX_FIELD_SIZE</EM>
 (or <EM CLASS="DefName">
65535</EM>
). An attempt to create a larger record will cause <EM CLASS="FunctionName">
VSsetfields</EM>
 to return <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-14170"></A><EM CLASS="FunctionName">
VSsetfields</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSsetfields</EM>
 are further defined in <A HREF="UG_html-4.htm#50593874_38618" CLASS="XRef">VSsetname, VSsetclass, VSfdefine, VSsetfields, and VSsetinterlace Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-5992"></A>	4.5.1.4	<A NAME="50593874_15638"></A>Spe<A NAME="50593874_marker-16855"></A>cifying the Interlace Mode: VSsetinterlace</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-6501"></A>The Vdata interface supports two types of interlacing: <EM CLASS="Definition">
file interlacing</EM>
 and <EM CLASS="Definition">
buffer interlacing</EM>
. <EM CLASS="Definition">
File interlacing</EM>
<A NAME="50593874_marker-16856"></A> determines how data is stored in a file and <A NAME="50593874_marker-16857"></A><EM CLASS="Definition">
buffer interlacing</EM>
 determines how data is stored in memory. The Vdata interface can write data from a buffer to a file in an interlaced or non-interlaced manner. It can also read data from a file in an interlaced or non-interlaced manner.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-6922"></A>The <A NAME="50593874_marker-16858"></A><EM CLASS="FunctionName">
VSread</EM>
 and <EM CLASS="FunctionName">
VSwrite</EM>
<A NAME="50593874_marker-16859"></A> routines set the buffer’s interlace mode<A NAME="50593874_marker-58877"></A>.  The <EM CLASS="FunctionName">
VSwrite</EM>
 routine will be discussed in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_23656" CLASS="XRef">Writing to a Vdata: VSwrite</A></EM>
 and the <EM CLASS="FunctionName">
VSread</EM>
 routine will be discussed in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_32800" CLASS="XRef">Reading from the Current Vdata: VSread</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55871"></A><EM CLASS="FunctionName">
VSsetinterlace</EM>
<A NAME="50593874_marker-55869"></A><A NAME="50593874_marker-55870"></A> sets the file interlacing mode for a vdata. Setting the parameter <EM CLASS="VarName">
interlace_mode </EM>
to <EM CLASS="DefName">
FULL_INTERLACE</EM>
 (or <EM CLASS="DefName">
0</EM>
) fills the vdata by record, whereas specifying <EM CLASS="DefName">
NO_INTERLACE</EM>
 (or <EM CLASS="DefName">
1</EM>
) fills the vdata by field. <A HREF="UG_html-4.htm#50593874_12824" CLASS="XRef">(See Figure 4d)</A> For multi-component fields, all components are treated as a single field.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68618"></A>As with file interlacing, the default buffer interlace mode is <EM CLASS="DefName">
FULL_INTERLACE</EM>
 because it is more efficient to write complete records than it is to write fields if the file and buffer interlace modes are the same, although both require the same amount of disk space.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-55878"></A>In <A HREF="UG_html-4.htm#50593874_12824" CLASS="XRef">Figure 4d</A>, the illustrated vdata has four fields and three records.</P>
</DIV>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593874_pgfId-6001"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
FIGURE 4d	<A NAME="50593874_12824"></A>Interlaced and Non-Interlaced Vdata Contents</H6>
<DIV>
<MAP NAME="UG_html-26">
</MAP>
<IMG SRC="UG_html-26.gif" USEMAP="#UG_html-26" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593874_pgfId-10550"></A><EM CLASS="FunctionName">
VSsetinterlace</EM>
 can only be used for operations on new vdatas as the interlacing cannot be changed once the data has been written to a vdata. Records in a fully interlaced vdata can be written record-by-record and, thus, can be appended; however, all records in a non-interlaced vdata must be written at the same time.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-14166"></A><EM CLASS="FunctionName">
VSsetinterlace</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSsetinterlace</EM>
 are further described in <A HREF="UG_html-4.htm#50593874_38618" CLASS="XRef">Table 4E</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-6006"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_38618"></A>VS<A NAME="50593874_marker-16861"></A>setname, VSset<A NAME="50593874_marker-16862"></A>class, V<A NAME="50593874_marker-16863"></A>Sfdefine, V<A NAME="50593874_marker-16864"></A>Ssetfields, and VS<A NAME="50593874_marker-16865"></A>setinterlace Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14296"></A> Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49948"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14297"></A>(FORTRAN-77) </P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14299"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14303"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14305"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14311"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14313"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14317"></A>VSsetname</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49950"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14318"></A>(vsfsnam)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14320"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14322"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14324"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14326"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14330"></A>vdata_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14332"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14334"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14336"></A>Vdata name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14338"></A>VSsetclass</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49951"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14339"></A>(vsfscls)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14341"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14343"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14345"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14347"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14351"></A>vdata_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14353"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14355"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14357"></A>Vdata name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14359"></A>VSfdefine</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49952"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14360"></A>(vsffdef)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14362"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14364"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14366"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14368"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14372"></A>fieldname</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14374"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14376"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14378"></A>Name of the field to be defined</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14382"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14384"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14386"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14388"></A>Type of the field data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14392"></A>order</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14394"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14396"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14398"></A>Order of the new field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14400"></A>VSsetfields</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49953"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14401"></A>(vsfsfld)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14403"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14405"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14407"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14409"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14413"></A>fieldname_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14415"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14417"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14419"></A>Names of the vdata fields to be accessed</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14421"></A>VSsetinterlace</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49954"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14422"></A>(vsfsint)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14424"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14426"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14428"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14430"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14434"></A>interlace_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14436"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14438"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14440"></A>Interlace mode</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-156758"></A>	4.5.1.5	<A NAME="50593874_20173"></A>Specifying External Storage Information: VSsetexternalfile</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-156761"></A>The <A NAME="50593874_marker-156759"></A>HDF library allows applications to store vdata tables in an <EM CLASS="Definition">
external file</EM>
<A NAME="50593874_marker-156760"></A> that is separate from the <EM CLASS="Definition">
primary file</EM>
 containing the metadata for the vdata.  The library keeps track of the beginning of the vdata and adds data at the appropriate position in the external file. When data is written or appended, the HDF library writes data to the external file and updates the appropriate metadata in the primary file.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-156762"></A>VSsetexternalfile specifies that an external data file is to be used to store the data of the given vdata.  The parameter <EM CLASS="VarName">
ext_filename</EM>
 is the name of the external data file and <EM CLASS="VarName">
offset</EM>
 is the number of bytes from the beginning of the external file to the location where the first byte of data should be written.  The syntax for <EM CLASS="FunctionName">
VSsetexternalfile</EM>
 is as followed:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-156763"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSsetexternalfile(vdata_id, ext_filename, offset)</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-156764"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfsextf(vdata_id, ext_filename, offset)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-156765"></A>If a file with the name specified by <EM CLASS="VarName">
filename</EM>
 exists in the current directory search path, the function will access it as the external file.  It is the user's responsibility to make sure that the external data file is kept with the primary HDF file.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-156766"></A><EM CLASS="FunctionName">
VSsetexternalfile</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSsetexternalfile</EM>
 are further described in <A HREF="UG_html-4.htm#50593874_38618" CLASS="XRef">VSsetname, VSsetclass, VSfdefine, VSsetfields, and VSsetinterlace Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-156770"></A>	4.5.1.6	Retrieving External Storage Information: VSgetexternalinfo</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-156774"></A>VSgetexternalinfo retrieves the information that specifies where the data is stored in an external data file.  The function takes a length of external file name, <EM CLASS="VarName">
buf_size</EM>
, and retrieves the name into the provided buffer, <EM CLASS="VarName">
ext_filename</EM>
, if it exists.  The offset specifying where the external data is started in the external file is retrieved into <EM CLASS="VarName">
offset</EM>
 and the length of the external data into <EM CLASS="VarName">
length</EM>
.  The syntax for <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 is as followed:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-156775"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSgetexternalinfo(vdata_id, buf_size, ext_filename, &amp;offset, &amp;length)</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-157610"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Unavailable</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-157619"></A><EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 returns either the length of the external file name or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).  If the data is not stored in an external file, the length will be <EM CLASS="DefName">
0</EM>
.  The parameters for <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 are further described in <A HREF="UG_html-4.htm#50593874_15707" CLASS="XRef">VSsetexternalfile and VSgetexternalinfo Parameter Lists</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-156986"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_15707"></A>VSsetexternalfile and VSgetexternalinfo Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-156803"></A> Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-156804"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-156805"></A>(FORTRAN-77) </P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-156807"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-156809"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-156813"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-156819"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-156821"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-157762"></A>VSsetexternalfile</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-157763"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-157764"></A>(vsfsextf)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157766"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157768"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157770"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-157772"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157776"></A>ext_filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157778"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157780"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-157782"></A>External file name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157786"></A>offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157788"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157790"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-157818"></A>Offset of external data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-156955"></A>VSgetexternalinfo</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-156956"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-157954"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156959"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156961"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156963"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-156965"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157842"></A>buf_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157844"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-157846"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-157848"></A>Size of external file name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156969"></A>ext_filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156971"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156973"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-156975"></A>External file name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156979"></A>offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156981"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-156983"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-156985"></A>Retrieved offset of external data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-158128"></A>length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-158130"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-158132"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-158134"></A>Retrieved length of external data</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-6008"></A>	4.5.2	W<A NAME="50593874_marker-16866"></A>riting Data to Vdatas</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-51058"></A>This section describes the vdata writing operation (<EM CLASS="FunctionName">
VSwrite</EM>
), random access to vdata (<EM CLASS="FunctionName">
VSseek</EM>
), and packing and unpacking mechanisms that allow storing vdata fields of different data types (<EM CLASS="FunctionName">
VSfpack</EM>
).</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51059"></A>Writing to a vdata requires the following steps:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593874_pgfId-6012"></A>Open a file.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6014"></A>2.	Initialize the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-25787"></A>3.	Initialize fields for writing.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-55841"></A>4.	Initiate access to the vdata.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-55842"></A>5.	Seek to the target record.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-55843"></A>6.	Write the data.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6022"></A>7.	Dispose of the vdata identifier.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6024"></A>8.	Terminate access to the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6026"></A>9.	Close the file.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593874_pgfId-6028"></A>These steps correspond to the following sequence of function calls:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-6030"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, file_access_mode, num_dds_block);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5537"></A>		status = Vstart(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5557"></A>		vdata_id = VSattach(file_id, vdata_ref, vdata_access_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5571"></A>		status = VSsetfields(vdata_id, fieldname_list);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-57942"></A>		record_pos = VSseek(vdata_id, record_index);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-57943"></A>		num_of_recs = VSwrite(vdata_id, databuf, n_records, interlace_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6040"></A>		status = VSdetach(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6042"></A>		status = Vend(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-58354"></A>		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-58355"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, file_access_mode, num_dds_block)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-58356"></A>		status = vfstart(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6050"></A>		vdata_id = vsfatch(file_id, vdata_ref, vdata_access_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-5582"></A>		status = vsfsfld(vdata_id, fieldname_list);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52309"></A>		record_pos = vsfseek(vdata_id, record_index);</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-58364"></A>		num_of_recs = vsfwrt(vdata_id, databuf, n_records, interlace_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-58360"></A>	<EM CLASS="syntaxLang">
OR</EM>
	num_of_recs = vsfwrtc(vdata_id, databuf, n_records, interlace_mode)</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-58368"></A>	<EM CLASS="syntaxLang">
OR</EM>
	num_of_recs = vsfwrit(vdata_id, databuf, n_records, interlace_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-58369"></A>		status = vsfdtch(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-58370"></A>		status = vfend(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6060"></A>		status = hclose(file_id)</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-6851"></A>	4.5.2.1	<A NAME="50593874_32597"></A>Re<A NAME="50593874_marker-16867"></A>setting the Current Position within Vdatas: VSseek</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-6064"></A><EM CLASS="FunctionName">
VSseek</EM>
<A NAME="50593874_marker-16868"></A> provides a mechanism for random access to fully-interlaced vdatas. Random-access for non-interlaced vdatas is not available. The parameter <EM CLASS="VarName">
record_index</EM>
 is the position of the record to be written. The position of the first record in a vdata is specified by <EM CLASS="VarName">
record_index</EM>
 = <EM CLASS="DefName">
0</EM>
. Any vdata operation will be performed on this record by default; vdata operations on other records require that <EM CLASS="FunctionName">
VSseek</EM>
 be called first to specify the target record.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-58920"></A><A NAME="50593874_marker-58919"></A>Note that <EM CLASS="FunctionName">
VSseek</EM>
 has been designed for the purpose of overwriting data, not appending data. That means <EM CLASS="FunctionName">
VSseek</EM>
 puts the current record pointer at the beginning of the sought record and the subsequent write will overwrite the record. To append data to a vdata, the current record pointer must be put at the end of the last record. Thus, you must seek to the last record then read this record so that the current record pointer will be put at the end of the record. A write operation will now start at the end of the last record in the vdata. <A HREF="UG_html-4.htm#50593874_13085" CLASS="XRef">Figure 4e</A> illustrates a situation where <EM CLASS="FunctionName">
VSseek</EM>
 can be misused while attempting to append data to the vdata and how <EM CLASS="FunctionName">
VSread</EM>
 is called to correctly place the record pointer at the end of the vdata for appending.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-25810"></A>Note that, because the record location numbering starts at 0, the record location and the value of the parameter <EM CLASS="VarName">
record_index</EM>
 are off by 1. For example, reading the fourth record in the buffer requires <EM CLASS="VarName">
record_index</EM>
 to be set to 3. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-115346"></A>See the notes regarding the potential performance impact of appendable data sets in <A HREF="UG_html-14.htm#50593884_97527" CLASS="XRef">Unlimited Dimension Data Sets (SDSs and Vdatas) and Performance</A></P>
</DIV>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593874_pgfId-8228"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
FIGURE 4e	<A NAME="50593874_13085"></A>Se<A NAME="50593874_marker-16870"></A>tting the Record Pointer to the End of a Vdata</H6>
<DIV>
<MAP NAME="UG_html-27">
</MAP>
<IMG SRC="UG_html-27.gif" USEMAP="#UG_html-27" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593874_pgfId-8262"></A>In this illustration, the vdata to which we plan to append data contains 4 records. Using <EM CLASS="FunctionName">
VSseek</EM>
 to seek to the end of the fourth record by setting the parameter <EM CLASS="VarName">
record_index</EM>
 to 4 results in an error condition. Setting the parameter <EM CLASS="VarName">
record_index</EM>
 to 3 places the current record pointer at the beginning of the fourth record. We then use <EM CLASS="FunctionName">
VSread</EM>
 to read the contents of the fourth record into a buffer; this moves the current record pointer to the end of the fourth record. The contents of the buffer can then be discarded and a write operation can be called to append data to the end of the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51066"></A><EM CLASS="FunctionName">
VSseek</EM>
 returns the sought record location or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further defined in <A HREF="UG_html-4.htm#50593874_36265" CLASS="XRef">Table 4G</A>.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-8258"></A>	4.5.2.2	<A NAME="50593874_23656"></A>Writ<A NAME="50593874_marker-16871"></A>ing to a Vdata: VSwrite</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-8259"></A><EM CLASS="FunctionName">
VSwrite</EM>
<A NAME="50593874_marker-16872"></A> writes buffered data to a specified vdata. The parameter <EM CLASS="VarName">
databuf</EM>
 is a buffer containing the records to be stored in the vdata. The parameter <EM CLASS="VarName">
n_records</EM>
 specifies the number of records to be stored.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-24495"></A>Recall that the file interlacing is set by <EM CLASS="FunctionName">
VSsetinterlace</EM>
 when the vdata is created, and the buffer interlacing is specified by the parameter <EM CLASS="VarName">
interlace_mode</EM>
 in the call to <EM CLASS="FunctionName">
VSwrite</EM>
 when data is written to the file. The array <EM CLASS="VarName">
databuf</EM>
 is assumed to be organized in memory as specified by <EM CLASS="VarName">
interlace_mode</EM>
. Setting <EM CLASS="VarName">
interlace_mode</EM>
 to <EM CLASS="DefName">
FULL_INTERLACE</EM>
 (or <EM CLASS="DefName">
0</EM>
) indicates that the array in memory is organized by record, whereas to <EM CLASS="DefName">
NO_INTERLACE</EM>
 (or <EM CLASS="DefName">
1</EM>
) indicates that the array is organized by field. <A HREF="UG_html-4.htm#50593874_29332" CLASS="XRef">(See Figure 4f)</A> <EM CLASS="FunctionName">
VSwrite</EM>
 will write interlaced or non-interlaced data to a vdata in a file: interlaced data in the buffer can be written to the vdata in the file as non-interlaced data and vice versa. If the data is to be stored with an interlace mode different from that of the buffer, <EM CLASS="FunctionName">
VSsetinterlace</EM>
 (described in <A HREF="UG_html-4.htm#50593874_15638" CLASS="XRef">Specifying the Interlace Mode: VSsetinterlace</A>) must be called prior to <EM CLASS="FunctionName">
VSwrite</EM>
. Multiple write operations can only be used on fully-interlaced vdatas in the file.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593874_pgfId-6075"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
FIGURE 4f	<A NAME="50593874_29332"></A>W<A NAME="50593874_marker-16873"></A>riting Interlaced or Non-interlaced Buffers into Interlaced or Non-interlaced Vdatas</H6>
<DIV>
<MAP NAME="UG_html-28">
</MAP>
<IMG SRC="UG_html-28.gif" USEMAP="#UG_html-28" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593874_pgfId-6077"></A>The data in the array <EM CLASS="VarName">
databuf</EM>
 is assumed to contain the exact amount of data in the order needed to fill the fields defined in the last call to <EM CLASS="FunctionName">
VSsetfields</EM>
. Because <EM CLASS="FunctionName">
VSwrite</EM>
 writes the contents of <EM CLASS="VarName">
databuf</EM>
 contiguously to the vdata, any “padding” due to record alignment must be removed before attempting to write from <EM CLASS="VarName">
databuf</EM>
 to the vdata. For more information on alignment padding see <A HREF="UG_html-4.htm#50593874_14057" CLASS="XRef">Packing or Unpacking Field Data: VSfpack</A>.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-4815"></A>It should be remembered that <EM CLASS="FunctionName">
VSwrite</EM>
 writes whole records, not individual fields. If a modification to one field within a previously-written record is needed, the contents of the record must first be preserved by reading it to a buffer with <EM CLASS="FunctionName">
VSread</EM>
, which will be described in <A HREF="UG_html-4.htm#50593874_32800" CLASS="XRef">Reading from the Current Vdata: VSread</A>; the record must then be updated in the buffer and written back to the file with <EM CLASS="FunctionName">
VSwrite</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-13997"></A>To store a vdata to the file after being created, either <EM CLASS="FunctionName">
VSsetname</EM>
, <EM CLASS="FunctionName">
VSsetfields</EM>
, or <EM CLASS="FunctionName">
VSwrite</EM>
 must be called before <EM CLASS="FunctionName">
VSdetach</EM>
 for the vdata. If <EM CLASS="FunctionName">
VSwrite</EM>
 is not called, the vdata created will be empty.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51080"></A>The FORTRAN-77 version of <EM CLASS="FunctionName">
VSwrite</EM>
 has three routines: vsfwrt is for buffered numeric data, vsfwrtc is for buffered character data and vsfwrit is for generic packed data.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68681"></A><EM CLASS="FunctionName">
VSwrite</EM>
 returns the total number of records written or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further defined in <A HREF="UG_html-4.htm#50593874_36265" CLASS="XRef">Table 4G</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-6080"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_36265"></A>VS<A NAME="50593874_marker-16874"></A>seek and VS<A NAME="50593874_marker-16875"></A>write Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14573"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49957"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14574"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14576"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14580"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14582"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14588"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-14590"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14594"></A>VSseek</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49958"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14595"></A>(vsfseek)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14597"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14599"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14601"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14603"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14607"></A>record_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14609"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14611"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14613"></A>Index of the record to seek to</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14615"></A>VSwrite</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49959"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-14616"></A>(vsfwrt/vsfwrtc/</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-59007"></A>vsfwrit)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14618"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14620"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14622"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14624"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14628"></A>databuf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14630"></A>uint8*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14632"></A>&lt;valid numeric data type&gt;(*) / character*(*) / integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14634"></A>Buffer containing data to be written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14638"></A>n_records</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14640"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14642"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14644"></A>Number of records to be written</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14648"></A>interlace_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14650"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-14652"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-14654"></A>Interlace mode of the buffered data</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-6082"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Writing a Vdata of Homogeneous Type</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-76345"></A>This example illustrates the use of <EM CLASS="FunctionName">
VSfdefine/vsffdef</EM>
, <EM CLASS="FunctionName">
VSsetname/vsfsnam</EM>
, <EM CLASS="FunctionName">
VSsetclass/vsfscls</EM>
, <EM CLASS="FunctionName">
VSsetfields/vsfsfld</EM>
, and <EM CLASS="FunctionName">
VSwrite/vsfwrt</EM>
 to create and write a three-field vdata to the file &quot;General_Vdatas.hdf&quot;. Although the fields have data of the same type, they have different orders. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-6084"></A>To clarify the illustration, let us assume that the vdata is used to contain the data of some particles collected from an experiment. Each record of the data includes the position of a particle, its weight, and the minimum and maximum temperature the particle can endure.  The vdata is named &quot;Solid Particle&quot;, contains 10 records, and belongs to a class, named &quot;Particle Data&quot;.  The fields of the vdata include &quot;Position&quot;, &quot;Mass&quot;, and &quot;Temperature&quot;.  The field &quot;Position&quot; has an order of 3 for the x, y, and z values representing the position of a particle. The field &quot;Mass&quot; has an order of 1.  The field &quot;Temperature&quot; has an order of 2 for the minimum and maximum temperature.  The program creates the vdata, sets its name and class name, defines its fields, and then writes the data to it.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-6086"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-66335"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131496"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131497"></A>#define  FILE_NAME        &quot;General_Vdatas.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131498"></A>#define  N_RECORDS        10        /* number of records the vdata contains */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131499"></A>#define  ORDER_1          3         /* order of first field */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131500"></A>#define  ORDER_2          1         /* order of second field */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131501"></A>#define  ORDER_3          2         /* order of third field */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131502"></A>#define  CLASS_NAME       &quot;Particle Data&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131503"></A>#define  VDATA_NAME       &quot;Solid Particle&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131504"></A>#define  FIELD1_NAME      &quot;Position&quot;      /* contains x, y, z values */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131505"></A>#define  FIELD2_NAME      &quot;Mass&quot;          /* contains weight values */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131506"></A>#define  FIELD3_NAME      &quot;Temperature&quot;   /* contains min and max values */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131507"></A>#define  FIELDNAME_LIST   &quot;Position,Mass,Temperature&quot; /* No spaces b/w names */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131508"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131509"></A>/* number of values per record */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131510"></A>#define  N_VALS_PER_REC   (ORDER_1 + ORDER_2 + ORDER_3)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131511"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131512"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131513"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131514"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131515"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131516"></A>   intn   status_n;     /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131517"></A>   int32  status_32,    /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131518"></A>          file_id, vdata_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131519"></A>          vdata_ref = -1,    /* ref number of a vdata, set to -1 to create  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131520"></A>          num_of_records;    /* number of records actually written to vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131521"></A>   int16  rec_num;           /* current record number */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131522"></A>   float32  data_buf[N_RECORDS][N_VALS_PER_REC]; /* buffer for vdata values */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131523"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131524"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131525"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131526"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131527"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131528"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131529"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131530"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131531"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131532"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131533"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131534"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131535"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131536"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131537"></A>   * Create a new vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131538"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131539"></A>   vdata_id = VSattach (file_id, vdata_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131540"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131541"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131542"></A>   * Set name and class name of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131543"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131544"></A>   status_32 = VSsetname (vdata_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131545"></A>   status_32 = VSsetclass (vdata_id, CLASS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131546"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131547"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131548"></A>   * Introduce each field’s name, data type, and order.  This is the first</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131549"></A>   * part in defining a field.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131550"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131551"></A>   status_n = VSfdefine (vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER_1 );</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131552"></A>   status_n = VSfdefine (vdata_id, FIELD2_NAME, DFNT_FLOAT32, ORDER_2 );</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131553"></A>   status_n = VSfdefine (vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER_3 );</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131554"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131555"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131556"></A>   * Finalize the definition of the fields.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131557"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131558"></A>   status_n = VSsetfields (vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131559"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131560"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131561"></A>   * Buffer the data by the record for fully interlaced mode.  Note that the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131562"></A>   * first three elements contain the three values of the first field, the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131563"></A>   * fourth element contains the value of the second field, and the last two</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131564"></A>   * elements contain the two values of the third field.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131565"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131566"></A>   for (rec_num = 0; rec_num &lt; N_RECORDS; rec_num++)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131567"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131568"></A>      data_buf[rec_num][0] = 1.0 * rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131569"></A>      data_buf[rec_num][1] = 2.0 * rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131570"></A>      data_buf[rec_num][2] = 3.0 * rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131571"></A>      data_buf[rec_num][3] = 0.1 + rec_num;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131572"></A>      data_buf[rec_num][4] = 0.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131573"></A>      data_buf[rec_num][5] = 65.0;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131574"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131575"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131576"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131577"></A>   * Write the data from data_buf to the vdata with full interlacing mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131578"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131579"></A>   num_of_records = VSwrite (vdata_id, (uint8 *)data_buf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131580"></A>                             FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131581"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131582"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131583"></A>   * Terminate access to the vdata and to the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131584"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131585"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131586"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131587"></A>   status_n  = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131588"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131589"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131590"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-4946"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-62830"></A> program write_to_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131597"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131598"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131599"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131600"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131601"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131602"></A>      character*13 CLASS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131603"></A>      character*14 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131604"></A>      character*8  FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131605"></A>      character*4  FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131606"></A>      character*11 FIELD3_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131607"></A>      character*27 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131608"></A>      integer      N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131609"></A>      integer      ORDER_1, ORDER_2, ORDER_3</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131610"></A>      integer      N_VALS_PER_REC</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131611"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131612"></A>      parameter (FILE_NAME       = ’General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131613"></A>     +           CLASS_NAME      = ’Particle Data’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131614"></A>     +           VDATA_NAME      = ’Solid Particle’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131615"></A>     +           FIELD1_NAME     = ’Position’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131616"></A>     +           FIELD2_NAME     = ’Mass’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131617"></A>     +           FIELD3_NAME     = ’Temperature’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131618"></A>     +           FIELDNAME_LIST = ’Position,Mass,Temperature’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131619"></A>      parameter (N_RECORDS = 10,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131620"></A>     +           ORDER_1   = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131621"></A>     +           ORDER_2   = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131622"></A>     +           ORDER_3   = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131623"></A>     +           N_VALS_PER_REC = ORDER_1 + ORDER_2 + ORDER_3)               </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131624"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131625"></A>      integer DFACC_WRITE, DFNT_FLOAT32, FULL_INTERLACE</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131626"></A>      parameter (DFACC_WRITE    = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131627"></A>     +           DFNT_FLOAT32   = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131628"></A>     +           FULL_INTERLACE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131629"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131630"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131631"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131632"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131633"></A>      integer vfstart, vsfatch, vsfsnam, vsfscls, vsffdef, vsfsfld,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131634"></A>     +        vsfwrt, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131635"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131636"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131637"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131638"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131639"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131640"></A>      integer file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131641"></A>      integer vdata_ref, rec_num, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131642"></A>      real    data_buf(N_VALS_PER_REC, N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131643"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131644"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131645"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131646"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131647"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131648"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131649"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131650"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131651"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131652"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131653"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131654"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131655"></A>C     Create a new vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131656"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131657"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131658"></A>      vdata_id = vsfatch(file_id, vdata_ref, ’w’) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131659"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131660"></A>C     Set name and class name of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131661"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131662"></A>      status = vsfsnam(vdata_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131663"></A>      status = vsfscls(vdata_id, CLASS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131664"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131665"></A>C     Introduce each field’s name, data type, and order. This is the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131666"></A>C     first part in defining a field.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131667"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131668"></A>      status = vsffdef(vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER_1)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131669"></A>      status = vsffdef(vdata_id, FIELD2_NAME, DFNT_FLOAT32, ORDER_2)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131670"></A>      status = vsffdef(vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER_3)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131671"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131672"></A>C     Finalize the definition of the fields.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131673"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131674"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131675"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131676"></A>C     Buffer the data by the record for fully interlaced mode. Note that the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131677"></A>C     first three elements contain the three values of the first field,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131678"></A>C     the forth element contains the value of the second field, and the last two</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131679"></A>C     elements contain the two values of the third field.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131680"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131681"></A>      do 10 rec_num = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131682"></A>         data_buf(1, rec_num) = 1.0 * rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131683"></A>         data_buf(2, rec_num) = 2.0 * rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131684"></A>         data_buf(3, rec_num) = 3.0 * rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131685"></A>         data_buf(4, rec_num) = 0.1 + rec_num</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131686"></A>         data_buf(5, rec_num) = 0.0</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131687"></A>         data_buf(6, rec_num) = 65.0</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131688"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131689"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131690"></A>C     Write the data from data_buf to the vdata with the full interlacing mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131691"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131692"></A>      num_of_records = vsfwrt(vdata_id, data_buf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131693"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131694"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131695"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131696"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131697"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131698"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131699"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131700"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131701"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131702"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-115431"></A>	4.5.2.3	Setting Up Linked Block Vdatas: VSsetblocksize and VSsetnumblocks</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-115675"></A>Unless otherwise specified, Vdata data sets stored in linked blocks employ a default size and number of linked blocks, as set in <EM CLASS="DefName">
HDF_APPENDABLE_BLOCK_LEN</EM>
 and <EM CLASS="DefName">
HDF_APPENDABLE_BLOCK_NUM</EM>
, respectively. <EM CLASS="FunctionName">
VSsetblocksize </EM>
and<EM CLASS="FunctionName">
 VSsetnumblocks </EM>
provide a mechanism for managing these values when the defaults are not appropriate. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-115894"></A><EM CLASS="FunctionName">
VSsetblocksize </EM>
and<EM CLASS="FunctionName">
 VSsetnumblocks </EM>
can be called to change the default linked block settings. The parameter <EM CLASS="VarName">
vdata_id</EM>
 identifies the vdata. The size of blocks is specified in bytes in <EM CLASS="VarName">
block_size</EM>
 and number of blocks in <EM CLASS="VarName">
num_blocks</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-115961"></A><EM CLASS="FunctionName">
VSsetblocksize </EM>
and<EM CLASS="FunctionName">
 VSsetnumblocks </EM>
must be called before any data is written to a vdata; once a linked block element has been created, neither the block size nor the number blocks can be changed. Further note that <EM CLASS="FunctionName">
VSsetblocksize </EM>
sets the block size only for blocks following the first block.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-115897"></A>See the notes regarding the potential performance impact of block size in <A HREF="UG_html-14.htm#50593884_99984" CLASS="XRef">Tuning Linked Block Size to Enhance Performance</A></P>
<P CLASS="Body">
<A NAME="50593874_pgfId-115899"></A><EM CLASS="FunctionName">
VSsetblocksize </EM>
and<EM CLASS="FunctionName">
 VSsetnumblocks </EM>
both return <EM CLASS="DefName">
SUCCESS</EM>
 (or <EM CLASS="DefName">
0</EM>
) upon successful completion or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Their parameters are further defined in <A HREF="UG_html-4.htm#50593874_68053" CLASS="XRef">Table 4H</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-115883"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_68053"></A>VSsetblocksize and VSsetnumblocks Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115818"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-115819"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115820"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115822"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115824"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115828"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115834"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115836"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-115840"></A>VSsetblocksize</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-115841"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-115842"></A>(vsfsetblsz)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115844"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115846"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115848"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115850"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115854"></A>block_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115856"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115858"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115860"></A>Size of each block, in bytes</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-115862"></A>VSsetnumblocks</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-115863"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-115864"></A>(vsfsetnmbl)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115866"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115868"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115870"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115872"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115876"></A>num_blocks</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115878"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115880"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115882"></A>Number of blocks to be used for the linked-block element</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593874_pgfId-115620"></A>	4.5.2.4	<A NAME="50593874_14057"></A>Pack<A NAME="50593874_marker-59023"></A>ing or Un<A NAME="50593874_marker-59024"></A>packing Field Data: VSfpack</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-59027"></A>Storing fields of mixed data types is an efficient use of disk space and is useful in applications that use structures. However, while data structures in memory containing fields of variable lengths can contain alignment bytes, field data stored in a vdata cannot include them. This is true for both fully-interlaced and non-interlaced data. Because of this storing limitation, when variable-length field types are used, it is generally not possible to write data directly from a structure in memory into a vdata in a file with a <EM CLASS="FunctionName">
VSwrite</EM>
 call or to read data directly into a buffer from the vdata with a call to <EM CLASS="FunctionName">
VSread</EM>
. Thus, when writing, <EM CLASS="FunctionName">
VSfpack</EM>
<A NAME="50593874_marker-59026"></A> is used to pack field data into a temporary buffer by removing the padding, or alignment bytes, and when reading, to unpack field data into vdata fields by adding necessary alignment bytes. The syntax for <EM CLASS="FunctionName">
VSfpack</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-26127"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSfpack(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-58334"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfcpak(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs)</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-58336"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = vsfnpak(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-24974"></A>The process of removing the alignment bytes is called “packing the array.” An illustration of this process is provided in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_31615" CLASS="XRef">Figure 4g</A></EM>
. The data provided by the user is stored in the structure in memory.  The field values are aligned with padded bytes.  <EM CLASS="FunctionName">
VSfpack</EM>
 packs the data into the array in memory after removing the padded bytes.  The packed data is then written to the vdata in the file by <EM CLASS="FunctionName">
VSwrite</EM>
.</P>
</DIV>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593874_pgfId-59353"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
FIGURE 4g	<A NAME="50593874_31615"></A>Re<A NAME="50593874_marker-59105"></A>moving Alignment Bytes When Writing Data From a C Structure to a Vdata</H6>
<DIV>
<MAP NAME="UG_html-29">
</MAP>
<IMG SRC="UG_html-29.gif" USEMAP="#UG_html-29" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593874_pgfId-64398"></A>The process illustrated in <A HREF="UG_html-4.htm#50593874_31615" CLASS="XRef">Figure 4g</A> can be read in the reverse direction for &quot;unpacking the array,&quot; that is when using <EM CLASS="FunctionName">
VSfpack</EM>
 to fill a structure in memory with vdata field data. In this case, alignment bytes are added to the field data to make the data conform to the specific alignment requirements of the platform.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-25211"></A><EM CLASS="FunctionName">
VSfpack</EM>
 performs both tasks, packing and unpacking, and the parameter <EM CLASS="VarName">
action</EM>
 specifies the appropriate action for the routine. Valid values for the parameter <EM CLASS="VarName">
action</EM>
 are <EM CLASS="DefName">
_HDF_VSPACK</EM>
 (or <EM CLASS="DefName">
0</EM>
) for packing and <EM CLASS="DefName">
_HDF_VSUNPACK</EM>
 (or <EM CLASS="DefName">
1</EM>
) for unpacking.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-59091"></A>The calling program must allocate sufficient space for the buffer <EM CLASS="VarName">
buf</EM>
 to hold all packed or unpacked fields. The parameter <EM CLASS="VarName">
buf_size</EM>
 specifies the size of the buffer <EM CLASS="VarName">
buf</EM>
 and should be at least <EM CLASS="VarName">
n_records</EM>
 *( the total size of all fields specified in <EM CLASS="VarName">
fields_in_buf</EM>
). </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-25216"></A>When <EM CLASS="FunctionName">
VSfpack</EM>
 is called to pack field values into <EM CLASS="VarName">
buf</EM>
, the parameter <EM CLASS="VarName">
fields_in_buf</EM>
 must specify all fields of the vdata. This can be accomplished either by listing all of the field names in <EM CLASS="VarName">
fields_in_buf</EM>
 or by setting <EM CLASS="VarName">
fields_in_buf</EM>
 to <EM CLASS="DefName">
NULL</EM>
 in C or to one blank character in FORTRAN-77.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-25217"></A>When <EM CLASS="FunctionName">
VSfpack</EM>
 is called to unpack field values, the parameter <EM CLASS="VarName">
fields_in_buf</EM>
 may specify a subset of the vdata fields. The parameter <EM CLASS="VarName">
fields_in_buf</EM>
 can be set to <EM CLASS="DefName">
NULL</EM>
 in C or to one space character in FORTRAN-77 to specify all fields in the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-25198"></A>The parameter <EM CLASS="VarName">
fieldname_list</EM>
 specifies the field(s) to be packed or unpacked. The parameter <EM CLASS="VarName">
bufptrs</EM>
 provides pointers to the buffers for each field to be packed or unpacked. The calling program is responsible for allocating sufficient space for each field buffer. Significant differences between the C and FORTRAN-77 functionality are described in the following paragraphs.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68698"></A>In C, <EM CLASS="VarName">
fieldname_list</EM>
 can list either all of the fields specified by <EM CLASS="VarName">
fields_in_buf</EM>
 or a subset of those fields. Only if <EM CLASS="VarName">
fields_in_buf</EM>
 specifies all of the vdata fields, then <EM CLASS="VarName">
fields_in_buf</EM>
 can be set to <EM CLASS="DefName">
NULL</EM>
 to specify all vdata fields. The parameter <EM CLASS="VarName">
bufptrs</EM>
 contains an array of pointers to the buffers where field data will be packed or unpacked.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68715"></A>The FORTRAN-77 routines can pack or unpack only one field at a time, so the parameter <EM CLASS="VarName">
fieldname_list</EM>
 contains only the name of that field. The parameter <EM CLASS="VarName">
bufptrs</EM>
 is the buffer for that field.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-59100"></A>The FORTRAN-77 version of <EM CLASS="FunctionName">
VSfpack</EM>
 has two routines: <EM CLASS="FunctionName">
vsfcpak</EM>
 packs or unpacks character data and <EM CLASS="FunctionName">
vsfnpak</EM>
 packs or unpacks numeric data.  Refer to the FORTRAN-77 version in <A HREF="UG_html-4.htm#50593874_20266" CLASS="XRef">Writing a Multi-field and Mixed-type Vdata with Packing</A> for a more specific illustration.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51101"></A><EM CLASS="FunctionName">
VSfpack</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSfpack</EM>
 are described in <A HREF="UG_html-4.htm#50593874_20337" CLASS="XRef">Table 4I</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-25099"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_20337"></A>VSf<A NAME="50593874_marker-25173"></A>pack Parameter List </H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-24991"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49963"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-24992"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-24994"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-24996"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-25000"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-25006"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-25008"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="8" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-25054"></A>VSfpack</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49962"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-25055"></A>(vsfcpak/vsfnpak)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25057"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25059"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25061"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25063"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25067"></A>action</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25069"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25071"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25073"></A>Action to be performed</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25077"></A>fields_in_buf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25079"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25081"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25083"></A>Fields in the buffer buf to write or read from the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25087"></A>buf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25089"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-59361"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25093"></A>Buffer for the vdata values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25123"></A>buf_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25125"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25127"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25129"></A>Buffer size in bytes</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25113"></A>n_records</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25115"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25117"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25119"></A>Number of records to pack or unpack</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25103"></A>fieldname_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25105"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-64478"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25109"></A>Names of the fields to be packed or unpacked</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25157"></A>bufptrs</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-25159"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-64487"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-64488"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-25163"></A>Array of pointers to the field buffers in C and field buffer in FORTRAN-77</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-24983"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_20266"></A>Writing a Multi-field and Mixed-type Vdata with Packing</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-76372"></A>This example illustrates the use of <EM CLASS="FunctionName">
VSfpack/vsfnpak/vsfcpak</EM>
 and <EM CLASS="FunctionName">
VSwrite/vsfwrit</EM>
 to write a vdata with data of different types. Note that the approach used in Example 3 makes it difficult for the vdata to have mixed-type data. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-76374"></A>In this example, the program creates an HDF file, named &quot;Packed_Vdata.hdf&quot;, then defines a vdata which is named &quot;Mixed Data Vdata&quot; and belongs to class &quot;General Data Class&quot;.  The vdata contains four order-1 fields, &quot;Temp&quot;, &quot;Height&quot;, &quot;Speed&quot;, and &quot;Ident&quot; of type float32, int16, float32, and char8, respectively.  The program then packs the data in fully interlaced mode into a databuf and writes the packed data to the vdata.  Note that, in the C example, a VSfpack call packs all N_RECORDS and a VSwrite call writes out all N_RECORDS records. In the Fortran example, N_RECORDS of each field are packed using separate calls to vsfnpak and vsfcpak; vsfwrit writes packed data to the vdata.  </P>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-21633"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-62957"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131718"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131719"></A>#define  FILE_NAME        &quot;Packed_Vdata.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131720"></A>#define  VDATA_NAME       &quot;Mixed Data Vdata&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131721"></A>#define  CLASS_NAME       &quot;General Data Class&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131722"></A>#define  FIELD1_NAME      &quot;Temp&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131723"></A>#define  FIELD2_NAME      &quot;Height&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131724"></A>#define  FIELD3_NAME      &quot;Speed&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131725"></A>#define  FIELD4_NAME      &quot;Ident&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131726"></A>#define  ORDER            1        /* number of values in the field         */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131727"></A>#define  N_RECORDS        20       /* number of records the vdata contains  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131728"></A>#define  N_FIELDS         4        /* number of fields in the vdata         */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131729"></A>#define  FIELDNAME_LIST   &quot;Temp,Height,Speed,Ident&quot;  /* No spaces b/w names */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131730"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131731"></A>/* number of bytes of the data to be written, i.e., the size of all the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131732"></A>   field values combined times the number of records */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131733"></A>#define BUF_SIZE (2*sizeof(float32) + sizeof(int16) + sizeof(char)) * N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131734"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131735"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131736"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131737"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131738"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131739"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131740"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131741"></A>         file_id, vdata_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131742"></A>         vdata_ref = -1,   /* vdata’s reference number, set to -1 to create */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131743"></A>         num_of_records; /* number of records actually written to the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131744"></A>   float32 temp[N_RECORDS];       /* buffer to hold values of first field   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131745"></A>   int16   height[N_RECORDS];     /* buffer to hold values of second field  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131746"></A>   float32 speed[N_RECORDS];      /* buffer to hold values of third field   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131747"></A>   char8   ident[N_RECORDS];      /* buffer to hold values of fourth field  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131748"></A>   VOIDP   fldbufptrs[N_FIELDS];/*pointers to be pointing to the field buffers*/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131749"></A>   uint16  databuf[BUF_SIZE]; /* buffer to hold the data after being packed*/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131750"></A>   int     i;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131751"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131752"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131753"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131754"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131755"></A>   * Create an HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131756"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131757"></A>   file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131758"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131759"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131760"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131761"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131762"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131763"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131764"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131765"></A>   * Create a new vdata. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131766"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131767"></A>   vdata_id = VSattach (file_id, vdata_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131768"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131769"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131770"></A>   * Set name and class name of the vdata. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131771"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131772"></A>   status_32 = VSsetname (vdata_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131773"></A>   status_32 = VSsetclass (vdata_id, CLASS_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131774"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131775"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131776"></A>   * Introduce each field’s name, data type, and order.  This is the first</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131777"></A>   * part in defining a vdata field.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131778"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131779"></A>   status_n = VSfdefine (vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131780"></A>   status_n = VSfdefine (vdata_id, FIELD2_NAME, DFNT_INT16, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131781"></A>   status_n = VSfdefine (vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131782"></A>   status_n = VSfdefine (vdata_id, FIELD4_NAME, DFNT_CHAR8, ORDER); </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131783"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131784"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131785"></A>   * Finalize the definition of the fields of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131786"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131787"></A>   status_n = VSsetfields (vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131788"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131789"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131790"></A>   * Enter data values into the field buffers by the records.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131791"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131792"></A>   for (i = 0; i &lt; N_RECORDS; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131793"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131794"></A>      temp[i] = 1.11 * (i+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131795"></A>      height[i] = i;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131796"></A>      speed[i] = 1.11 * (i+1);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131797"></A>      ident[i] = ’A’ + i;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131798"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131799"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131800"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131801"></A>   * Build an array of pointers each of which points to a field buffer that</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131802"></A>   * holds all values of the field.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131803"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131804"></A>   fldbufptrs[0] = &amp;temp[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131805"></A>   fldbufptrs[1] = &amp;height[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131806"></A>   fldbufptrs[2] = &amp;speed[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131807"></A>   fldbufptrs[3] = &amp;ident[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131808"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131809"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131810"></A>   * Pack all data in the field buffers that are pointed to by the set of</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131811"></A>   * pointers fldbufptrs, and store the packed data into the buffer </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131812"></A>   * databuf.  Note that the second parameter is _HDF_VSPACK for packing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131813"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131814"></A>   status_n = VSfpack (vdata_id,_HDF_VSPACK, NULL, (VOIDP)databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131815"></A>           BUF_SIZE, N_RECORDS, NULL, (VOIDP)fldbufptrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131816"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131817"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131818"></A>   * Write all records of the packed data to the vdata. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131819"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131820"></A>   num_of_records = VSwrite (vdata_id, (uint8 *)databuf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131821"></A>                             FULL_INTERLACE); </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131822"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131823"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131824"></A>   * Terminate access to the vdata and the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131825"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131826"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131827"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131828"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131829"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131830"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131831"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-21635"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-63089"></A> program write_mixed_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131842"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131843"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131844"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131845"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131846"></A>      character*16 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131847"></A>      character*18 CLASS_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131848"></A>      character*16 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131849"></A>      character*4  FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131850"></A>      character*6  FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131851"></A>      character*5  FIELD3_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131852"></A>      character*5  FIELD4_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131853"></A>      character*23 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131854"></A>      integer      N_RECORDS, N_FIELDS, ORDER</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131855"></A>      integer      BUF_SIZE </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131856"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131857"></A>      parameter (FILE_NAME       = ’Packed_Vdata.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131858"></A>     +           CLASS_NAME      = ’General Data Class’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131859"></A>     +           VDATA_NAME      = ’Mixed Data Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131860"></A>     +           FIELD1_NAME     = ’Temp’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131861"></A>     +           FIELD2_NAME     = ’Height’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131862"></A>     +           FIELD3_NAME     = ’Speed’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131863"></A>     +           FIELD4_NAME     = ’Ident’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131864"></A>     +           FIELDNAME_LIST = ’Temp,Height,Speed,Ident’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131865"></A>      parameter (N_RECORDS = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131866"></A>     +           N_FIELDS  = 4, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131867"></A>     +           ORDER     = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131868"></A>     +           BUF_SIZE = (4 + 2 + 4 + 1)*N_RECORDS)               </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131869"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131870"></A>      integer DFACC_WRITE, DFNT_FLOAT32, DFNT_INT16, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131871"></A>     +        FULL_INTERLACE, HDF_VSPACK  </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131872"></A>      parameter (DFACC_WRITE    = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131873"></A>     +           DFNT_FLOAT32   = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131874"></A>     +           DFNT_INT16     = 22,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131875"></A>     +           DFNT_CHAR8     = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131876"></A>     +           FULL_INTERLACE = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131877"></A>     +           HDF_VSPACK     = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131878"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131879"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131880"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131881"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131882"></A>      integer vfstart, vsfatch, vsfsnam, vsfscls, vsffdef, vsfsfld,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131883"></A>     +        vsfnpak, vsfcpak, vsfwrit, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131884"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131885"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131886"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131887"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131888"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131889"></A>      integer   file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131890"></A>      integer   vdata_ref, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131891"></A>      real      temp(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131892"></A>      integer*2 height(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131893"></A>      real      speed(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131894"></A>      character ident(N_RECORDS) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131895"></A>      integer   i</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131896"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131897"></A>C     Buffer for packed data should be big enough to hold N_RECORDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131898"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131899"></A>      integer   databuf(BUF_SIZE/4 + 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131900"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131901"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131902"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131903"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131904"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131905"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131906"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131907"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131908"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131909"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131910"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131911"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131912"></A>C     Create a new vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131913"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131914"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131915"></A>      vdata_id = vsfatch(file_id, vdata_ref, ’w’) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131916"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131917"></A>C     Set name and class name of the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131918"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131919"></A>      status = vsfsnam(vdata_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131920"></A>      status = vsfscls(vdata_id, CLASS_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131921"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131922"></A>C     Introduce each field’s name, data type, and order. This is the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131923"></A>C     first part in defining a field.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131924"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131925"></A>      status = vsffdef(vdata_id, FIELD1_NAME, DFNT_FLOAT32, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131926"></A>      status = vsffdef(vdata_id, FIELD2_NAME, DFNT_INT16, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131927"></A>      status = vsffdef(vdata_id, FIELD3_NAME, DFNT_FLOAT32, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131928"></A>      status = vsffdef(vdata_id, FIELD4_NAME, DFNT_CHAR8, ORDER)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131929"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131930"></A>C     Finalize the definition of the fields.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131931"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131932"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131933"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131934"></A>C     Enter data values into the field databufs by the records.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131935"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131936"></A>      do 10 i = 1, N_RECORDS</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131937"></A>         temp(i)   = 1.11 * i</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131938"></A>         height(i) = i - 1</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131939"></A>         speed(i)  = 1.11 * i</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131940"></A>         ident(i)  = char(64+i)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131941"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131942"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131943"></A>C     Pack N_RECORDS of data into databuf. In Fortran, each field is packed </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131944"></A>C     using separate calls to vsfnpak or vsfcpak.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131945"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131946"></A>      status = vsfnpak(vdata_id, HDF_VSPACK, ’ ’, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131947"></A>     +                 N_RECORDS, FIELD1_NAME, temp) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131948"></A>      status = vsfnpak(vdata_id, HDF_VSPACK, ’ ’, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131949"></A>     +                 N_RECORDS, FIELD2_NAME, height) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131950"></A>      status = vsfnpak(vdata_id, HDF_VSPACK, ’ ’, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131951"></A>     +                 N_RECORDS, FIELD3_NAME, speed) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131952"></A>      status = vsfcpak(vdata_id, HDF_VSPACK, ’ ’, databuf, BUF_SIZE,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131953"></A>     +                 N_RECORDS, FIELD4_NAME, ident) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131954"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131955"></A>C     Write all the records of the packed data to the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131956"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131957"></A>      num_of_records = vsfwrit(vdata_id, databuf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131958"></A>     +                         FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131959"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131960"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131961"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131962"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131963"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131964"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131965"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131966"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131967"></A><A NAME="50593874_marker-83580"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-6495"></A>	4.6	R<A NAME="50593874_marker-16891"></A>eading from Vdatas<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-11670"></A>Reading from vdatas is more complicated than writing to vdatas, as it usually involves searching for a particular vdata, then searching within that vdata, before actually reading data. The process of reading from vdatas can be summarized as follows: </P>
<OL>
<LI CLASS="Step">
<A NAME="50593874_pgfId-11728"></A>10.	Identify the appropriate vdata in the file.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-11729"></A>11.	Obtain information about the vdata. </LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-11730"></A>12.	Read in the desired data.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593874_pgfId-11711"></A>Only Step 3 will be covered in this section assuming that the vdata of interest and its data information is known. Step 1 is covered in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_18002" CLASS="XRef">Searching for Vdatas in a File</A></EM>
 and Step 2 is covered in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_10689" CLASS="XRef">Obtaining Information about a Specific Vdata</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-25850"></A>Step 3 can be expanded into the following:</P>
<DIV>
<H6 CLASS="FM1Step">
<A NAME="50593874_pgfId-6499"></A>Open the file.</H6>
<OL>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6501"></A>2.	Initialize the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6503"></A>3.	Initiate access to the vdata.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6505"></A>4.	Optionally seek to the appropriate record.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6507"></A>5.	Initialize the fields to be read.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-25872"></A>6.	Read the data.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6509"></A>7.	If the fields have different data types, unpack the field data.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6511"></A>8.	Terminate access to the vdata.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6513"></A>9.	Terminate access to the Vdata interface.</LI>
<LI CLASS="Step">
<A NAME="50593874_pgfId-6515"></A>10.	Close the file.</LI>
</OL>
<P CLASS="Body">
<A NAME="50593874_pgfId-6517"></A>The following sequence of function calls corresponds to the above steps:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-6519"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, file_access_mode, num_dds_block);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6521"></A>		status = Vstart(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6523"></A>		vdata_id = VSattach(file_id, vdata_ref, vdata_access_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6525"></A>		record_pos = VSseek(vdata_id, record_index);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6527"></A>		status = VSsetfields(vdata_id, fieldname_list);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6529"></A>		records_read = VSread(vdata_id, databuf, n_records, interlace_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-59388"></A>		status = VSfpack(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6531"></A>		status = VSdetach(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6533"></A>		status = Vend(file_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6535"></A>		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-6537"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, file_access_mode, num_dds_block)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6539"></A>		status = vfstart(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6541"></A>		vdata_id = vsfatch(file_id, vdata_ref, vdata_access_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6543"></A>		record_pos = vsfseek(vdata_id, record_index)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6545"></A>		status = vsfsfld(vdata_id, fieldname_list)</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-6547"></A>		records_read = vsfrd(vdata_id, databuf, n_records, interlace_mode)</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-58374"></A>	<EM CLASS="syntaxLang">
OR</EM>
	records_read = vsfrdc(vdata_id, databuf, n_records, interlace_mode)</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-59377"></A>		status = vsfcpak(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs)</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-59378"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = vsfnpak(vdata_id, action, fields_in_buf, buf, buf_size, n_records, fieldname_list, bufptrs)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6549"></A>		status = vsfdtch(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6551"></A>		status = vfend(file_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-7009"></A>		status = hclose(file_id)</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-6559"></A>	4.6.1	<A NAME="50593874_33834"></A>Initializing the Fields for Read Access<A NAME="50593874_marker-16895"></A>: VSsetfields</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-26072"></A><EM CLASS="FunctionName">
VSsetfields</EM>
<A NAME="50593874_marker-26070"></A><A NAME="50593874_marker-26071"></A> is used to establish access to the fields to be read by the next read operation. The argument <EM CLASS="VarName">
fieldname_list</EM>
 is a comma-separated string of the field names with no white space. The order the field names occur in <EM CLASS="VarName">
fieldname_list</EM>
 is the order in which the fields will be read. For example, assume that a vdata contains fields named A, B, C, D, E, F in that order. The following declarations demonstrate how to use <EM CLASS="VarName">
fieldname_list</EM>
 to read a single field, a collection of random fields, and all the fields in reverse order:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-26073"></A>Single field: <EM CLASS="VarName">
	fieldname_list </EM>
= “<EM CLASS="DefName">
B</EM>
”</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-26074"></A>Collection of fields:<EM CLASS="VarName">
 	fieldname_list </EM>
= “<EM CLASS="DefName">
A,E</EM>
”</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-26075"></A>Reverse order: <EM CLASS="VarName">
	fieldname_list </EM>
= “<EM CLASS="DefName">
F,E,D,C,B,A</EM>
”</LI>
</UL>
<P CLASS="Body">
<A NAME="50593874_pgfId-83571"></A><EM CLASS="FunctionName">
VSsetfields</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSsetfields</EM>
 are further defined in <A HREF="UG_html-4.htm#50593874_38618" CLASS="XRef">VSsetname, VSsetclass, VSfdefine, VSsetfields, and VSsetinterlace Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-6575"></A>	4.6.2	<A NAME="50593874_32800"></A>Reading from the Current Vdata: VSread</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-25960"></A><EM CLASS="FunctionName">
VSread</EM>
<A NAME="50593874_marker-16898"></A> sequentially retrieves data from the records in a vdata. The parameter <EM CLASS="VarName">
databuf</EM>
 is the buffer to store the retrieved data, <EM CLASS="VarName">
n_records</EM>
 specifies the number of records to retrieve, and <EM CLASS="VarName">
interlace_mode</EM>
 specifies the interlace mode, <EM CLASS="DefName">
FULL_INTERLACE</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
NO_INTERLACE </EM>
(or <EM CLASS="DefName">
1</EM>
), to be used in the contents of <EM CLASS="VarName">
databuf</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-6581"></A>	Prior to the first <EM CLASS="FunctionName">
VSread</EM>
 call, <EM CLASS="FunctionName">
VSsetfields</EM>
<A NAME="50593874_marker-6579"></A> must be called.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-10657"></A>If a <EM CLASS="FunctionName">
VSread</EM>
 call is successful, the data returned in <EM CLASS="VarName">
databuf</EM>
 is formatted according to the interlace mode specified by the parameter <EM CLASS="VarName">
interlace_mode</EM>
 and the data fields appear in the order specified in the last call to <EM CLASS="FunctionName">
VSsetfields</EM>
 for that vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-58403"></A>By default, <EM CLASS="FunctionName">
VSread</EM>
 reads from the first vdata record. To retrieve an arbitrary record from a vdata, use <EM CLASS="FunctionName">
VSseek</EM>
<A NAME="50593874_marker-58404"></A> to specify the record position before calling <EM CLASS="FunctionName">
VSread</EM>
. <EM CLASS="FunctionName">
VSseek</EM>
<A NAME="50593874_marker-58405"></A> is described in <EM CLASS="Body">
<A HREF="UG_html-4.htm#50593874_32597" CLASS="XRef">Resetting the Current Position within Vdatas: VSseek</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-58409"></A>The FORTRAN-77 version of <EM CLASS="FunctionName">
VSread</EM>
 has three routines: <EM CLASS="FunctionName">
vsfrd</EM>
 reads buffered numeric data, <EM CLASS="FunctionName">
vsfrdc</EM>
 reads buffered character data and <EM CLASS="FunctionName">
vsfread</EM>
 reads generic packed data.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-58385"></A><EM CLASS="FunctionName">
VSread</EM>
 returns the total number of records read if successful and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSread</EM>
 are further defined in <A HREF="UG_html-4.htm#50593874_41225" CLASS="XRef">Table 4J</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-10766"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_41225"></A>VS<A NAME="50593874_marker-16901"></A>read Parameter List </H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-23007"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49966"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-23008"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-23010"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-23012"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-23016"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-23022"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-23024"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-23070"></A>VSread</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49967"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-23071"></A>(vsfrd/vsfrdc/vsfread)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23073"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23075"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23077"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-23079"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23083"></A>databuf</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23085"></A>uint8*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-77533"></A>&lt;valid numeric data type&gt;(*) /</P>
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-84243"></A>character*(*) / integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-23089"></A>Buffer for the retrieved data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23093"></A>n_records</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23095"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23097"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-23099"></A>Number of records to be retrieved</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23103"></A>interlace_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23105"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-23107"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-23109"></A>Interlace mode of the buffered data</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593874_pgfId-10767"></A><EM CLASS="FunctionName">
VSsetfields</EM>
 and <EM CLASS="FunctionName">
VSread</EM>
 may be called several times to read from the same vdata. However, note that <EM CLASS="FunctionName">
VSread</EM>
 operations are sequential. Thus, in the following code segment, the first call to <EM CLASS="FunctionName">
VSread</EM>
 returns ten “A” data values from the first ten elements in the vdata, while the second call to <EM CLASS="FunctionName">
VSread</EM>
 returns ten “B” data values from the second ten elements (elements 10 to 19) in the vdata.</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-5089"></A>	status = VSsetfields(vdata_id, &quot;A&quot;);</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-6594"></A>		records_read = VSread(vdata_id, bufferA, 10, interlace_mode);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-6598"></A>	status = VSsetfields(vdata_id, &quot;B&quot;);</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-6600"></A>		records_read = VSread(vdata_id, bufferB, 10, interlace_mode);</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-67966"></A>To read the first ten “B” data values, the access routine <EM CLASS="FunctionName">
VSseek</EM>
 must be called to explicitly position the read pointer back to the position of the first record. The following code segment reads the first ten “A” and “B” values into two separate float arrays <EM CLASS="VarName">
bufferA</EM>
 and <EM CLASS="VarName">
bufferB</EM>
.</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-67968"></A>	status = VSsetfields(vdata_id, &quot;A&quot;);</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-6608"></A>		records_read = VSread(vdata_id, bufferA, 10, interlace_mode);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-6612"></A>	record_pos = VSseek(vdata_id, 0)	; /* seeks to first record */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-6614"></A>		status = VSsetfields(vdata_id, &quot;B&quot;);</P>
<P CLASS="syntax-or-bot">
<A NAME="50593874_pgfId-76415"></A>		records_read = VSread(vdata_id, bufferB, 10, interlace_mode);</P>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-76416"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Reading a Vdata of Homogeneous Type </H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-76404"></A>This example illustrates the use of <EM CLASS="FunctionName">
VSfind/vsffnd</EM>
 to locate a vdata given its name, <EM CLASS="FunctionName">
VSseek/vsfseek</EM>
 to move the current position to a desired record, and <EM CLASS="FunctionName">
VSread/vsfrd</EM>
 to read the data of several records.  The function <EM CLASS="FunctionName">
VSfind</EM>
 will be discussed in Section 4.7.3.  The approach used in this example can only read data written by a program such as that in Example 3, i.e., without packing.  Reading mixed data vdatas must use the approach illustrated in Example 6. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-76406"></A>The program reads 5 records starting from the fourth record of the two fields &quot;Position&quot; and &quot;Temperature&quot; in the vdata &quot;Solid Particle&quot; from the file &quot;General_Vdatas.hdf&quot;.  After the program uses VSfind/vsffnd to obtain the reference number of the vdata, it uses <EM CLASS="FunctionName">
VSseek/vsfseek</EM>
 to place the current position at the fourth record, then starts reading 5 records, and displays the data.   </P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-21962"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-63180"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131979"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131980"></A>#define  FILE_NAME       &quot;General_Vdatas.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131981"></A>#define  VDATA_NAME      &quot;Solid Particle&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131982"></A>#define  N_RECORDS       5    /* number of records the vdata contains */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131983"></A>#define  RECORD_INDEX    3    /* position where reading starts - 4th record */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131984"></A>#define  ORDER_1         3    /* order of first field to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131985"></A>#define  ORDER_2         2    /* order of second field to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131986"></A>#define  FIELDNAME_LIST  &quot;Position,Temperature&quot; /* only two fields are read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131987"></A>#define  N_VALS_PER_REC  (ORDER_1 + ORDER_2)   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131988"></A>                         /* number of values per record */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131989"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131990"></A>main( ) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131991"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131992"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131993"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131994"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131995"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131996"></A>         file_id, vdata_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131997"></A>         vdata_ref,     /* vdata’s reference number */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131998"></A>         num_of_records, /* number of records actually written to the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-131999"></A>         record_pos;    /* position of the current record */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132000"></A>   int16 i, rec_num;    /* current record number in the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132001"></A>   float32 databuf[N_RECORDS][N_VALS_PER_REC];   /* buffer for vdata values */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132002"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132003"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132004"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132005"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132006"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132007"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132008"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132009"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132010"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132011"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132012"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132013"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132014"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132015"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132016"></A>   * Get the reference number of the vdata, whose name is specified in </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132017"></A>   * VDATA_NAME, using VSfind, which will be discussed in Section 4.7.3.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132018"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132019"></A>   vdata_ref = VSfind (file_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132020"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132021"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132022"></A>   * Attach to the vdata for reading if it is found, otherwise </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132023"></A>   * exit the program.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132024"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132025"></A>   if (vdata_ref == 0) exit;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132026"></A>   vdata_id = VSattach (file_id, vdata_ref, &quot;r&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132027"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132028"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132029"></A>   * Specify the fields that will be read.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132030"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132031"></A>   status_n = VSsetfields (vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132032"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132033"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132034"></A>   * Place the current point to the position specified in RECORD_INDEX.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132035"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132036"></A>   record_pos = VSseek (vdata_id, RECORD_INDEX);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132037"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132038"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132039"></A>   * Read the next N_RECORDS records from the vdata and store the data </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132040"></A>   * in the buffer databuf with fully interlaced mode.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132041"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132042"></A>   num_of_records = VSread (vdata_id, (uint8 *)databuf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132043"></A>                            FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132044"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132045"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132046"></A>   * Display the read data as many records as the number of records </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132047"></A>   * returned by VSread.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132048"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132049"></A>   printf (&quot;\n       Particle Position        Temperature Range\n\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132050"></A>   for (rec_num = 0; rec_num &lt; num_of_records; rec_num++)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132051"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132052"></A>      printf (&quot;   %6.2f, %6.2f, %6.2f        %6.2f, %6.2f\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132053"></A>        databuf[rec_num][0], databuf[rec_num][1], databuf[rec_num][2], </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132054"></A>        databuf[rec_num][3], databuf[rec_num][4]);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132055"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132056"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132057"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132058"></A>   * Terminate access to the vdata and to the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132059"></A>   * the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132060"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132061"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132062"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132063"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132064"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132065"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-83844"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-63278"></A> program read_from_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132072"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132073"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132074"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132075"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132076"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132077"></A>      character*14 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132078"></A>      character*20 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132079"></A>      integer      N_RECORDS, RECORD_INDEX</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132080"></A>      integer      ORDER_1, ORDER_2</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132081"></A>      integer      N_VALS_PER_REC</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132082"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132083"></A>      parameter (FILE_NAME       = ’General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132084"></A>     +           VDATA_NAME      = ’Solid Particle’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132085"></A>     +           FIELDNAME_LIST = ’Position,Temperature’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132086"></A>      parameter (N_RECORDS  = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132087"></A>     +           RECORD_INDEX = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132088"></A>     +           ORDER_1    = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132089"></A>     +           ORDER_2    = 2,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132090"></A>     +           N_VALS_PER_REC = ORDER_1 + ORDER_2 )               </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132091"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132092"></A>      integer DFACC_READ, FULL_INTERLACE</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132093"></A>      parameter (DFACC_READ     = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132094"></A>     +           FULL_INTERLACE = 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132095"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132096"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132097"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132098"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132099"></A>      integer vfstart, vsffnd, vsfatch, vsfsfld, vsfrd, vsfseek,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132100"></A>     +        vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132101"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132102"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132103"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132104"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132105"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132106"></A>      integer file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132107"></A>      integer vdata_ref, rec_num, num_of_records, rec_pos</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132108"></A>      real    databuf(N_VALS_PER_REC, N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132109"></A>      integer i</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132110"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132111"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132112"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132113"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132114"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132115"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132116"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132117"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132118"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132119"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132120"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132121"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132122"></A>C     Get the reference number of the vdata, whose name is specified in</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132123"></A>C     VDATA_NAME, using vsffnd, which will be discussed in Section 4.7.3. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132124"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132125"></A>      vdata_ref = vsffnd(file_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132126"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132127"></A>C     Attach to the vdata for reading if it is found, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132128"></A>C     otherwise exit the program.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132129"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132130"></A>      if (vdata_ref .eq. 0) stop</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132131"></A>      vdata_id = vsfatch(file_id, vdata_ref, ’r’) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132132"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132133"></A>C     Specify the fields that will be read. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132134"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132135"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132136"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132137"></A>C     Place the current point to the position specified in RECORD_INDEX.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132138"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132139"></A>      rec_pos = vsfseek(vdata_id, RECORD_INDEX) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132140"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132141"></A>C     Read the next N_RECORDS from the vdata and store the data in the buffer </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132142"></A>C     databuf with fully interlace mode. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132143"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132144"></A>      num_of_records = vsfrd(vdata_id, databuf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132145"></A>     +                        FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132146"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132147"></A>C     Display the read data as many records as the number of records returned</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132148"></A>C     by vsfrd.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132149"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132150"></A>      write(*,*) ’  Particle Position     Temperature Range’</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132151"></A>      write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132152"></A>      do 10 rec_num = 1, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132153"></A>         write(*,1000) (databuf(i, rec_num), i = 1, N_VALS_PER_REC)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132154"></A>10    continue </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132155"></A>1000  format(1x,3(f6.2), 8x,2(f6.2))</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132156"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132157"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132158"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132159"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132160"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132161"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132162"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132163"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132164"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-98097"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Reading a Multi-field and Mixed-type Vdata with Packing </H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-98098"></A>This example illustrates the use of <EM CLASS="FunctionName">
VSread/vsfread</EM>
 to read part of a mixed data vdata and <EM CLASS="FunctionName">
VSfpack/vsfnpak/vsfcpak</EM>
 to unpack the data read. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-63293"></A>The program reads the vdata &quot;Mixed Data Vdata&quot; that was written to the file &quot;Packed_Vdata.hdf&quot; by the program in Example 4.  In Example 6, all values of the fields &quot;Temp&quot; and &quot;Ident&quot; are read.  The program unpacks and displays all the values after reading is complete.  Again, note that in C only one call to <EM CLASS="FunctionName">
VSread</EM>
 and one call to <EM CLASS="FunctionName">
VSfpack</EM>
 are made to read and unpack all <EM CLASS="DefName">
N_RECORDS</EM>
 records. In Fortran, data is read with one call to <EM CLASS="FunctionName">
vsfread</EM>
, but each field is unpacked using separate calls to <EM CLASS="FunctionName">
vsfnpak</EM>
 and <EM CLASS="FunctionName">
vsfcpak</EM>
</P>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-63294"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-63577"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132176"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132177"></A>#define  N_RECORDS       20      /* number of records to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132178"></A>#define  N_FIELDS        2       /* number of fields to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132179"></A>#define  FILE_NAME       &quot;Packed_Vdata.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132180"></A>#define  VDATA_NAME      &quot;Mixed Data Vdata&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132181"></A>#define  FIELDNAME_LIST  &quot;Temp,Ident&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132182"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132183"></A>/* number of bytes of the data to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132184"></A>#define  BUFFER_SIZE     ( sizeof(float32) + sizeof(char)) * N_RECORDS </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132185"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132186"></A>main ()</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132187"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132188"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132189"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132190"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132191"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132192"></A>         file_id, vdata_id, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132193"></A>         num_of_records,        /* number of records actually read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132194"></A>         vdata_ref,             /* reference number of the vdata to be read */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132195"></A>         buffer_size;           /* number of bytes the vdata can hold       */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132196"></A>   float32 itemp[N_RECORDS];    /* buffer to hold values of first field     */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132197"></A>   char  idents[N_RECORDS];     /* buffer to hold values of fourth field    */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132198"></A>   uint8 databuf[BUFFER_SIZE];  /* buffer to hold read data, still packed   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132199"></A>   VOIDP fldbufptrs[N_FIELDS];/*pointers to be pointing to the field buffers*/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132200"></A>   int   i;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132201"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132202"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132203"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132204"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132205"></A>   * Open the HDF file for reading. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132206"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132207"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132208"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132209"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132210"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132211"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132212"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132213"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132214"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132215"></A>   * Get the reference number of the vdata, whose name is specified in</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132216"></A>   * VDATA_NAME, using VSfind, which will be discussed in Section 4.7.3.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132217"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132218"></A>   vdata_ref = VSfind (file_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132219"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132220"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132221"></A>   * Attach to the vdata for reading. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132222"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132223"></A>   vdata_id = VSattach (file_id, vdata_ref, &quot;r&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132224"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132225"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132226"></A>   * Specify the fields that will be read. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132227"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132228"></A>   status_n = VSsetfields(vdata_id, FIELDNAME_LIST);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132229"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132230"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132231"></A>   * Read N_RECORDS records of the vdata and store the values into the </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132232"></A>   * buffer databuf. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132233"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132234"></A>   num_of_records = VSread (vdata_id, (uint8 *)databuf, N_RECORDS, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132235"></A>                            FULL_INTERLACE);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132236"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132237"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132238"></A>   * Build an array of pointers each of which points to an array that</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132239"></A>   * will hold all values of a field after being unpacked.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132240"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132241"></A>   fldbufptrs[0] = &amp;itemp[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132242"></A>   fldbufptrs[1] = &amp;idents[0];</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132243"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132244"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132245"></A>   * Unpack the data from the buffer databuf and store the values into the </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132246"></A>   * appropriate field buffers pointed to by the set of pointers fldbufptrs.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132247"></A>   * Note that the second parameter is _HDF_VSUNPACK for unpacking and the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132248"></A>   * number of records is the one returned by VSread.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132249"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132250"></A>   status_n = VSfpack (vdata_id, _HDF_VSUNPACK, FIELDNAME_LIST, (VOIDP)databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132251"></A>               BUFFER_SIZE, num_of_records, NULL, (VOIDP)fldbufptrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132252"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132253"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132254"></A>   * Display the read data being stored in the field buffers.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132255"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132256"></A>   printf (&quot;\n     Temp      Ident\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132257"></A>   for (i=0; i &lt; num_of_records; i++)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132258"></A>       printf (&quot;   %6.2f        %c\n&quot;, itemp[i], idents[i]);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132259"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132260"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132261"></A>   * Terminate access to the vdata and the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132262"></A>   * the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132263"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132264"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132265"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132266"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132267"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132268"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-115357"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-63382"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-63695"></A> program read_mixed_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132279"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132280"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132281"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132282"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132283"></A>      character*16 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132284"></A>      character*16 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132285"></A>      character*4  FIELD1_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132286"></A>      character*5  FIELD2_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132287"></A>      character*10 FIELDNAME_LIST</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132288"></A>      integer      N_RECORDS, N_FIELDS</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132289"></A>      integer      BUFFER_SIZE </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132290"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132291"></A>      parameter (FILE_NAME       = ’Packed_Vdata.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132292"></A>     +           VDATA_NAME      = ’Mixed Data Vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132293"></A>     +           FIELD1_NAME     = ’Temp’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132294"></A>     +           FIELD2_NAME     = ’Ident’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132295"></A>     +           FIELDNAME_LIST = ’Temp,Ident’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132296"></A>      parameter (N_RECORDS   = 20,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132297"></A>     +           N_FIELDS    = 2, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132298"></A>     +           BUFFER_SIZE = (4 + 1)*N_RECORDS)               </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132299"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132300"></A>      integer DFACC_READ, DFNT_FLOAT32, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132301"></A>     +        FULL_INTERLACE, HDF_VSUNPACK  </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132302"></A>      parameter (DFACC_READ       = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132303"></A>     +           DFNT_FLOAT32     = 5,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132304"></A>     +           DFNT_CHAR8       = 4,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132305"></A>     +           FULL_INTERLACE   = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132306"></A>     +           HDF_VSUNPACK     = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132307"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132308"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132309"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132310"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132311"></A>      integer vfstart, vsfatch, vsffnd, vsfsfld,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132312"></A>     +        vsfnpak, vsfcpak, vsfread, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132313"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132314"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132315"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132316"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132317"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132318"></A>      integer   file_id, vdata_id</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132319"></A>      integer   vdata_ref, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132320"></A>      real      temp(N_RECORDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132321"></A>      character ident(N_RECORDS) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132322"></A>      integer   i</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132323"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132324"></A>C     Buffer for read packed data should be big enough to hold N_RECORDS.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132325"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132326"></A>      integer   databuf(BUFFER_SIZE/4 + 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132327"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132328"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132329"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132330"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132331"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132332"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132333"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132334"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132335"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132336"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132337"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132338"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132339"></A>C     Get the reference number of the vdata, whose name is specified in</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132340"></A>C     VDATA_NAME, using vsffnd, which will be discussed in Section 4.7.3. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132341"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132342"></A>      vdata_ref = vsffnd(file_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132343"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132344"></A>C     Attach to the vdata for reading if it is found, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132345"></A>C     otherwise exit the program.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132346"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132347"></A>      if (vdata_ref .eq. 0) stop</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132348"></A>      vdata_id = vsfatch(file_id, vdata_ref, ’r’) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132349"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132350"></A>C     Specify the fields that will be read. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132351"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132352"></A>      status = vsfsfld(vdata_id, FIELDNAME_LIST)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132353"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132354"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132355"></A>C     Read N_RECORDS records of the vdata and store the values into the databuf.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132356"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132357"></A>      num_of_records = vsfread(vdata_id, databuf, N_RECORDS,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132358"></A>     +                         FULL_INTERLACE)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132359"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132360"></A>C     Unpack N_RECORDS from databuf into temp and ident arrays.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132361"></A>C     In Fortran, each field is unpacked using separate calls to </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132362"></A>C     vsfnpak or vsfcpak.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132363"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132364"></A>      status = vsfnpak(vdata_id, HDF_VSUNPACK, FIELDNAME_LIST, databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132365"></A>     +                 BUFFER_SIZE, num_of_records, FIELD1_NAME, temp) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132366"></A>      status = vsfcpak(vdata_id, HDF_VSUNPACK, FIELDNAME_LIST, databuf,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132367"></A>     +                 BUFFER_SIZE, num_of_records, FIELD2_NAME, ident) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132368"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132369"></A>C     Display the read data being stored in the field databufs.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132370"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132371"></A>      write (*,*) ’    Temp  Ident’</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132372"></A>      do 10 i = 1, num_of_records</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132373"></A>         write(*,1000) temp(i), ident(i)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132374"></A>10    continue </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132375"></A>1000  format (3x,F6.2, 4x, a)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132376"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132377"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132378"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132379"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132380"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132381"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132382"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132383"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132384"></A><A NAME="50593874_marker-83590"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-6828"></A>	4.7	<A NAME="50593874_18002"></A>Sea<A NAME="50593874_marker-16902"></A>rching for Vdatas in a File<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-15162"></A>There are several HDF library routines that perform searches for a specific vdata in a file. In this section, we introduce these routines; methods for obtaining information about the members of a given vdata are described in the following section.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-15165"></A>	4.7.1	<A NAME="50593874_13127"></A>Findin<A NAME="50593874_marker-16904"></A>g All Vdatas that are Not Members of a Vgroup: VSlone </H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-10893"></A><A NAME="50593874_marker-16905"></A>A <EM CLASS="Definition">
lone vdata</EM>
 is one that is not a member of a vgroup. <EM CLASS="Definition">
Vgroups</EM>
 are HDF objects that contain sets of HDF objects, including vgroups. Vgroups are described in <EM CLASS="ChapterReference">
<A HREF="UG_html-5.htm#50593875_34180" CLASS="XRef">Vgroups (V API)</A></EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68766"></A><EM CLASS="FunctionName">
VSlone</EM>
<A NAME="50593874_marker-16906"></A> searches an HDF file and retrieves the reference numbers of lone vdatas in the file. The syntax of <EM CLASS="FunctionName">
VSlone</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51260"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_lone_vdatas = VSlone(file_id, ref_array, maxsize);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51262"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_lone_vdatas = vsflone(file_id, ref_array, maxsize)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51263"></A>The parameter <EM CLASS="VarName">
ref_array</EM>
 is an array allocated to hold the retrieved reference numbers of lone vdatas and the argument <EM CLASS="VarName">
maxsize</EM>
 specifies the maximum size of <EM CLASS="VarName">
ref_array</EM>
. At most, <EM CLASS="VarName">
maxsize</EM>
 reference numbers will be returned in <EM CLASS="VarName">
ref_array</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51222"></A>The space that should be allocated for <EM CLASS="VarName">
ref_array</EM>
 is dependent upon on how many lone vdatas are expected in the file. A size of <EM CLASS="DefName">
MAX_FIELD_SIZE</EM>
 (or <EM CLASS="DefName">
65535</EM>
) integers is adequate to handle any case. To use dynamic memory instead of allocating such a large array, first call <EM CLASS="FunctionName">
VSlone</EM>
 with <EM CLASS="VarName">
maxsize</EM>
 set to a small value like 0 or 1, then use the returned value to allocate memory for <EM CLASS="VarName">
ref_array</EM>
 to be passed to a subsequent call to <EM CLASS="FunctionName">
VSlone</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51226"></A><EM CLASS="FunctionName">
VSlone</EM>
 returns the number of lone vdatas or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSlone</EM>
 are listed in <A HREF="UG_html-4.htm#50593874_16134" CLASS="XRef">VSlone, VSgetid, VSfind, and VSfexist Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-51229"></A>	4.7.2	<A NAME="50593874_39951"></A>Sequentially Se<A NAME="50593874_marker-51228"></A>arching for a Vdata: VSgetid</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-26247"></A><EM CLASS="FunctionName">
VSgetid</EM>
<A NAME="50593874_marker-16914"></A> sequentially searches through an HDF file to obtain the vdata immediately following the vdata specified by the reference number in the parameter <EM CLASS="VarName">
vdata_ref</EM>
. The syntax of <EM CLASS="FunctionName">
VSgetid</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51448"></A><EM CLASS="syntaxLang">
C:</EM>
		ref_num = VSgetid(file_id, vdata_ref);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51450"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	ref_num = vsfgid(file_id, vdata_ref)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51444"></A>To obtain the reference number of the first vdata in the file, the user must set the parameter <EM CLASS="VarName">
vdata_ref</EM>
 to -1. Thus, <EM CLASS="FunctionName">
VSgetid</EM>
 can be repeatedly called, with the initial value of <EM CLASS="VarName">
vdata_ref</EM>
 set to -1 so that the routine will sequentially return the reference number of each vdata in the file, starting from the first vdata. After the last vdata is reached, subsequent calls to <EM CLASS="FunctionName">
VSgetid</EM>
 will return <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-135713"></A><EM CLASS="FunctionName">
VSgetid</EM>
 returns a vdata reference number or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSgetid</EM>
 are listed in <A HREF="UG_html-4.htm#50593874_16134" CLASS="XRef">VSlone, VSgetid, VSfind, and VSfexist Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-6844"></A>	4.7.3	<A NAME="50593874_38808"></A>De<A NAME="50593874_marker-16915"></A>termining a Reference Number from a Vdata Name: VSfind</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-6846"></A><EM CLASS="FunctionName">
VSfind</EM>
<A NAME="50593874_marker-16916"></A> searches an HDF file for a vdata with the specified name and returns the vdata reference number. The syntax of <EM CLASS="FunctionName">
VSfind</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51470"></A><EM CLASS="syntaxLang">
C:</EM>
		ref_num = VSfind(file_id, vdata_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51500"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	ref_num = vsffnd(file_id, vdata_name)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-61487"></A>The parameter <EM CLASS="VarName">
vdata_name</EM>
 is the search key. Although there may be several identically named vdatas in the file, <EM CLASS="FunctionName">
VSfind</EM>
 will only return the reference number of the first vdata in the file with the specified name.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-61488"></A><EM CLASS="FunctionName">
VSfind</EM>
 returns either the vdata reference number if the named vdata is found or <EM CLASS="DefName">
0</EM>
 otherwise. The parameters for <EM CLASS="FunctionName">
VSfind</EM>
 are listed in <A HREF="UG_html-4.htm#50593874_16134" CLASS="XRef">Table 4K</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-6848"></A>	4.7.4	<A NAME="50593874_15313"></A>Searching for <A NAME="50593874_marker-16920"></A>a Vdata by Field Name: VSfexist</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-51509"></A><EM CLASS="FunctionName">
VSfexist</EM>
<A NAME="50593874_marker-51508"></A> queries a vdata for a set of specified field names and is often useful for locating vdatas containing particular field names. <A NAME="50593874_marker-51510"></A>The syntax of the <EM CLASS="FunctionName">
VSfexist</EM>
 function is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51516"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSfexist(vdata_id, fieldname_list);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51518"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfex(vdata_id, fieldname_list)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-61494"></A>The parameter <EM CLASS="VarName">
fieldname_list</EM>
 is a string of comma-separated field names containing no white space, for example, “<EM CLASS="DefName">
PX,PY,PZ</EM>
”.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-61495"></A><EM CLASS="FunctionName">
VSfexist</EM>
 returns <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if all of the fields specified in the parameter <EM CLASS="VarName">
fieldname_list</EM>
 are found and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSfexist</EM>
 are listed in <A HREF="UG_html-4.htm#50593874_16134" CLASS="XRef">Table 4K</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-6857"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_16134"></A>VS<A NAME="50593874_marker-16922"></A>lone, V<A NAME="50593874_marker-16923"></A>Sgetid, <A NAME="50593874_marker-16924"></A>VSfind, and V<A NAME="50593874_marker-16925"></A>Sfexist Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-15259"></A>Routine Name </P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49971"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-49970"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-15262"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-15266"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-15268"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-15274"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-15276"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15280"></A>VSlone</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49972"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15281"></A>(vsflone)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15283"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15285"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15287"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15290"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15294"></A>ref_array</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15296"></A>int32 []</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15298"></A>integer (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15300"></A>Buffer for a list of lone vdata reference numbers</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15304"></A>maxsize</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15306"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15308"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15310"></A>Maximum number of reference numbers to be buffered</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15312"></A>VSgetid</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49976"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15313"></A>(vsfgid)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15315"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15317"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15319"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15321"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15325"></A>vdata_ref</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15327"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15329"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15331"></A>Reference number of the vdata preceding the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15333"></A>VSfind</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49977"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15334"></A>(vsffnd)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15336"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15338"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15340"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15343"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15347"></A>vdata_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15349"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15351"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15353"></A>Name of the vdata to find</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15355"></A>VSfexist</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49978"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-15356"></A>(vsfex)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15358"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15360"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15362"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15365"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15369"></A>fieldname_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15371"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-15373"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-15375"></A>Names of the fields to be queried</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-76481"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Locating a Vdata Containing Specified Field Names</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-76484"></A>This example illustrates the use of <EM CLASS="FunctionName">
VSgetid/vsfgid</EM>
 to obtain the reference number of each vdata in an HDF file and the use of <EM CLASS="FunctionName">
VSfexist/vsfex</EM>
 to determine whether a vdata contains specific fields. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-6863"></A>In this example, the program searches the HDF file &quot;General_Vdatas.hdf&quot; to locate the first vdata containing the fields &quot;Position&quot; and &quot;Temperature&quot;.  The HDF file is an output of the program in Example 3.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-22245"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-65351"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132396"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132397"></A>#define  FILE_NAME         &quot;General_Vdatas.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132398"></A>#define  SEARCHED_FIELDS   &quot;Position,Temperature&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132399"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132400"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132401"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132402"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132403"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132404"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132405"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132406"></A>         file_id, vdata_id, vdata_ref,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132407"></A>         index = 0;     /* index of the vdata in the file - manually kept   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132408"></A>   int8  found_fields;  /* TRUE if the specified fields exist in the vdata  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132409"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132410"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132411"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132412"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132413"></A>   * Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132414"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132415"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132416"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132417"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132418"></A>   * Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132419"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132420"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132421"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132422"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132423"></A>   * Set the reference number to -1 to start the search from </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132424"></A>   * the beginning of file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132425"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132426"></A>   vdata_ref = -1;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132427"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132428"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132429"></A>   * Assume that the specified fields are not found in the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132430"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132431"></A>   found_fields = FALSE;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132432"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132433"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132434"></A>   * Use VSgetid to obtain each vdata by its reference number then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132435"></A>   * attach to the vdata and search for the fields.  The loop</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132436"></A>   * terminates when the last vdata is reached or when a vdata which</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132437"></A>   * contains the fields listed in SEARCHED_FIELDS is found.  </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132438"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132439"></A>   while ((vdata_ref = VSgetid (file_id, vdata_ref)) != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132440"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132441"></A>      vdata_id = VSattach (file_id, vdata_ref, &quot;r&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132442"></A>      if ((status_n = VSfexist (vdata_id, SEARCHED_FIELDS)) != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132443"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132444"></A>         found_fields = TRUE;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132445"></A>         break;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132446"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132447"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132448"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132449"></A>      * Detach from the current vdata before continuing searching.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132450"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132451"></A>      status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132452"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132453"></A>      index++;		/* advance the index by 1 for the next vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132454"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132455"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132456"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132457"></A>   * Print the index of the vdata containing the fields or a &quot;not found&quot; </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132458"></A>   * message if no such vdata is found.  Also detach from the vdata found.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132459"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132460"></A>   if (!found_fields) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132461"></A>      printf (&quot;Fields Position and Temperature were not found.\n&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132462"></A>   else </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132463"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132464"></A>      printf</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132465"></A>     (&quot;Fields Position and Temperature found in the vdata at position %d\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132466"></A>       index);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132467"></A>      status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132468"></A>   }</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132469"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132470"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132471"></A>   * Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132472"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132473"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132474"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132475"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132476"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-22247"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-63875"></A> program locate_vdata </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132483"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132484"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132485"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132486"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132487"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132488"></A>      character*20 SEARCHED_FIELDS </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132489"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132490"></A>      parameter (FILE_NAME       = ’General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132491"></A>     +           SEARCHED_FIELDS = ’Position,Temperature’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132492"></A>      integer DFACC_READ</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132493"></A>      parameter (DFACC_READ = 1)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132494"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132495"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132496"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132497"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132498"></A>      integer vfstart, vsfatch, vsfgid, vsfex, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132499"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132500"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132501"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132502"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132503"></A>      integer status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132504"></A>      integer file_id, vdata_id, vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132505"></A>      integer index </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132506"></A>      logical found_fields </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132507"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132508"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132509"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132510"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132511"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132512"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132513"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132514"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132515"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132516"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132517"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132518"></A>      index = 0</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132519"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132520"></A>C     Set the reference number to -1 to start the search from the beginning</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132521"></A>C     of the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132522"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132523"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132524"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132525"></A>C     Assume that the specified fields are not found in the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132526"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132527"></A>      found_fields = .FALSE.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132528"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132529"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132530"></A>C     Use vsfgid to obtain each vdata by its reference number then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132531"></A>C     attach to the vdata and search for the fields. The loop terminates</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132532"></A>C     when the last vdata is reached or when a vdata which contains the</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132533"></A>C     fields listed in SEARCHED_FIELDS is found.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132534"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132535"></A>      vdata_ref = vsfgid(file_id, vdata_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132536"></A>      if (vdata_ref .eq. -1) goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132537"></A>      vdata_id = vsfatch(file_id, vdata_ref, ’r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132538"></A>      status = vsfex(vdata_id, SEARCHED_FIELDS)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132539"></A>      if (status .ne. -1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132540"></A>          found_fields = .TRUE.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132541"></A>          goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132542"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132543"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132544"></A>      index = index + 1 </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132545"></A>      goto 10</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132546"></A>100   continue</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132547"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132548"></A>C     Print the index of the vdata containing the fields or a ’not found’</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132549"></A>C     message if no such vdata is found. Also detach from the vdata found.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132550"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132551"></A>      if(.NOT.found_fields) then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132552"></A>         write(*,*) ’Fields Positions and Temperature were not found’</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132553"></A>      else</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132554"></A>         write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132555"></A>     +   ’Fields Positions and Temperature were found in the vdata’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132556"></A>     +   ’ at position ’, index</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132557"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132558"></A>C        Terminate access to the vdata</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132559"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132560"></A>         status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132561"></A>      endif  </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132562"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132563"></A>C     Terminate access to the VS interface and close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132564"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132565"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132566"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132567"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132568"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132569"></A><A NAME="50593874_marker-67315"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-155295"></A>	4.7.5	Retrieving Vdatas in a File or in a Vgroup: VSgetvdatas</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-155296"></A><EM CLASS="FunctionName">
VSgetvdatas</EM>
 retrieves a list containing reference numbers of vdatas in a file or in a vgroup, which is identified by the parameter <EM CLASS="VarName">
id</EM>
.  The syntax of <EM CLASS="FunctionName">
VSgetvdatas</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-155297"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSgetvdatas(id, start_vd, vd_count, refarray);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-155298"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfgvdatas(id, start_vd, vd_count, refarray)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155299"></A>The library commonly use vgroups or vdatas to store HDF objects.  For example, a vgroup is used to represent an SDS and a vdata for an attribute. <EM CLASS="FunctionName">
VSgetvdatas</EM>
 retrieves only the vdatas that were previously created by user applications, not those that were created by the library internally.  They are referred to as user-created vdatas, for brevity.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155300"></A>When <EM CLASS="VarName">
id</EM>
 is a vgroup identifier, only the immediate sub-vdatas will be retrieved; that is, the sub-vgroups will not be traversed.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155301"></A>The parameter <EM CLASS="VarName">
vd_count</EM>
 specifies the number of values that the <EM CLASS="VarName">
refarray</EM>
 list can hold and can be any positive number smaller than <EM CLASS="DefName">
MAX_REF</EM>
 (<EM CLASS="DefName">
65535</EM>
).  If <EM CLASS="VarName">
vd_count</EM>
 is larger than the actual number of user-created vdatas, then only the actual number of user-created vdatas will be retrieved.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155302"></A>The retrieval starts at the vdatas number <EM CLASS="VarName">
start_vd</EM>
 going forward in the order which the vdatas were created.  For example, if there are 100 vdatas that can be retrieved, specifying <EM CLASS="VarName">
start_vd</EM>
 as 90 and <EM CLASS="VarName">
vd_count</EM>
 as 10 will retrieve the last ten vdatas.  The value for <EM CLASS="VarName">
start_vd</EM>
 must be non-negative and smaller than the number of user-created vdatas, which can be obtained by invoking <EM CLASS="FunctionName">
VSgetvdatas</EM>
 passing in <EM CLASS="DefName">
NULL</EM>
 for the array <EM CLASS="VarName">
refarray</EM>
.  This number of user-created vdatas will also allow applications to sufficiently allocate space for <EM CLASS="VarName">
refarray</EM>
.</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-155303"></A>When <EM CLASS="VarName">
start_vd</EM>
 is 0, the retrieval will start at the beginning of the file or the first sub-vdata of the specified vgroup.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-155304"></A>When <EM CLASS="VarName">
start_vd</EM>
 is smaller than the number of user-created vdatas in the file or the specified vgroup, <EM CLASS="FunctionName">
VSgetvdatas</EM>
 will start retrieving vdatas from the vdata number <EM CLASS="VarName">
start_vd</EM>
.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-155305"></A>When <EM CLASS="VarName">
start_vd</EM>
 equals or is greater than the number of user-created vdatas in the file or the vgroup, <EM CLASS="FunctionName">
VSgetvdatas</EM>
 will return <EM CLASS="DefName">
FAIL </EM>
(or <EM CLASS="DefName">
-1</EM>
).</LI>
</UL>
<P CLASS="Body">
<A NAME="50593874_pgfId-155306"></A>Following are some examples of using <EM CLASS="FunctionName">
VSgetvdatas</EM>
 to get the reference numbers of vdatas in a file, assuming that the file has been opened for reading successfully:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-155307"></A><EM CLASS="syntaxLang">
C:</EM>
		/* Call VSgetvdatas the first time to get the number of vdatas in </P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155308"></A>		   the file to allocate ref_array */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155309"></A>		n_vds = VSgetvdatas(file_id, 0, 0, NULL);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155310"></A>		</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155311"></A>		/* Allocate space to retrieve reference numbers of n_vds vdatas */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155312"></A>		ref_array = (uint16 *)HDmalloc(sizeof(uint16)*n_vds);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155313"></A>		</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155314"></A>		/* To get all the vdatas in the file: */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155315"></A>		n_vds = VSgetvdatas(file_id, 0, n_vds, ref_array);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155316"></A>		</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155317"></A>		/* Assuming n_vds=100, to get the first 10 vdatas in the file: */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155318"></A>		n_vds = VSgetvdatas(file_id, 0, 10, ref_array);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155319"></A>		</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155320"></A>		/* Assuming n_vds=100, to get the last 10 vdatas in the file: */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155321"></A>		n_vds = VSgetvdatas(file_id, 90, 10, ref_array);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155322"></A>		</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155323"></A>Following are some examples of using <EM CLASS="FunctionName">
VSgetvdatas</EM>
 to get the reference numbers of vdatas in a parent vgroup:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-155324"></A><EM CLASS="syntaxLang">
C:</EM>
		vdata_id = Vattach(file_id, vdata_ref, &quot;r&quot;);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155325"></A>		/* Call VSgetvdatas the first time to get the number of vdatas in the</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155326"></A>		   parent vgroup to allocate ref_array */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155327"></A>		n_vds = VSgetvdatas(vgroup_id, 0, 0, NULL);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155328"></A>		</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155329"></A>		/* Allocate space to retrieve reference numbers of n_vds vdatas */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155330"></A>		ref_array = (uint16 *)HDmalloc(sizeof(uint16)*n_vds);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155331"></A>		</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155332"></A>		/* Get all the vdatas in the parent vgroup */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155333"></A>		n_vds = VSgetvdatas(vgroup_id, 0, n_vds, ref_array);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155334"></A>		</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155335"></A>		/* Close the vgroup */</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-155336"></A>		status = Vdetach(vgroup_id);</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155405"></A>Note that, in the FORTRAN-77 version, if <EM CLASS="VarName">
vd_count</EM>
 is <EM CLASS="DefName">
-1</EM>
 then the function will return the number of user-created vdatas and disregard <EM CLASS="VarName">
refarray</EM>
; equivalent to passing <EM CLASS="DefName">
NULL</EM>
 for <EM CLASS="VarName">
refarray</EM>
 in the C version.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155337"></A><EM CLASS="FunctionName">
VSgetvdatas</EM>
 returns the number of user-created vdatas retrieved, if successful, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
), otherwise.  The parameters of this routine are further defined in <A HREF="UG_html-4.htm#50593874_82642" CLASS="XRef">VSgetvdatas, VSisinternal, and VSofclass Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-155411"></A>	4.7.6	Determining Internal Vdata: VSisinternal</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-155412"></A>The HDF library commonly uses vgroups and vdatas to store metadata or data for the library's own use.  For examples, vgroups are used to represent SDS or raster images, and vdatas are used to store attributes or dimensions.  Typically, a user is only interested in vgroups/vdatas that were created by user applications, not by the library internally.  <EM CLASS="FunctionName">
VSisinternal</EM>
 allows an application to find out if a vdata is internally created.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155413"></A>The syntax of <EM CLASS="FunctionName">
VSisinternal</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-155414"></A><EM CLASS="syntaxLang">
C:</EM>
		is_internal = VSisinternal(vdata_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-155415"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Currently unavailable</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155416"></A><EM CLASS="FunctionName">
VSisinternal</EM>
 checks the class name of the given vdata against the list <EM CLASS="DefName">
HDF_INTERNAL_VDS</EM>
 to determine whether the vdata was previously created by the library instead of by a user application.  The names in <EM CLASS="DefName">
HDF_INTERNAL_VDS</EM>
 are included:</P>
<P CLASS="List10pt">
<A NAME="50593874_pgfId-155700"></A><EM CLASS="DefName">
DIM_VALS (&quot;DimVal0.0&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593874_pgfId-155701"></A><EM CLASS="DefName">
DIM_VALS01 (&quot;DimVal0.1&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593874_pgfId-155702"></A><EM CLASS="DefName">
_HDF_ATTRIBUTE (&quot;Attr0.0&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593874_pgfId-155703"></A><EM CLASS="DefName">
HDF_SDSVAR (&quot;SDSVar&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593874_pgfId-155704"></A><EM CLASS="DefName">
HDF_CRDVAR (&quot;CoordVar&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593874_pgfId-155705"></A><EM CLASS="DefName">
_HDF_CHK_TBL_CLASS (&quot;_HDF_CHK_TBL_&quot;)</EM>
</P>
<P CLASS="List10pt">
<A NAME="50593874_pgfId-155706"></A><EM CLASS="DefName">
RIGATTRCLASS(&quot;RIATTR0.0C&quot;)</EM>
</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-155424"></A><EM CLASS="FunctionName">
VSisinternal</EM>
 returns <EM CLASS="DefName">
TRUE</EM>
 (<EM CLASS="DefName">
1</EM>
) if the inquired vdata is one that was internally created by the library, <EM CLASS="DefName">
FALSE</EM>
 (<EM CLASS="DefName">
0</EM>
) otherwise, and <EM CLASS="DefName">
FAIL</EM>
 (<EM CLASS="DefName">
-1</EM>
) if failure occurs.  The parameters of this routine are further defined in <A HREF="UG_html-4.htm#50593874_82642" CLASS="XRef">VSgetvdatas, VSisinternal, and VSofclass Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-153026"></A>	4.7.7	Retrieving Vdatas in a File or in a Vgroup: VSofclass</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-153027"></A><EM CLASS="FunctionName">
VSofclass</EM>
 retrieves reference numbers of vdatas of the specified class in a file or in a vgroup.  The syntax of <EM CLASS="FunctionName">
VSofclass</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-153313"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSofclass(id, vd_class, start_vd, vd_count, refarray);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-153314"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Unavailable</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-153931"></A>When <EM CLASS="VarName">
id</EM>
 is a vgroup identifier, only the immediate sub-vdatas will be checked; that is, the sub-vgroups will not be traversed.  The parameter <EM CLASS="VarName">
vd_count</EM>
 specifies the number of values that the <EM CLASS="VarName">
refarray</EM>
 list can hold and can be any positive number smaller than <EM CLASS="DefName">
MAX_REF</EM>
 (<EM CLASS="DefName">
65535</EM>
). If <EM CLASS="VarName">
vd_count</EM>
 is larger than the actual number of vdatas that has the specified class, then only the actual number of such vdatas will be retrieved.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-154008"></A>The parameter <EM CLASS="VarName">
start_vd</EM>
 is the index of the vdatas having the specified class, <EM CLASS="VarName">
vd_class</EM>
.  The retrieval starts at the vdata number <EM CLASS="VarName">
start_vd</EM>
 going forward in the order which the vdatas were created.  The combination of <EM CLASS="VarName">
start_vd</EM>
 and <EM CLASS="VarName">
vd_count</EM>
 provide flexibility in the retrieval.  For example, if there are 100 vdatas that can be retrieved, specifying <EM CLASS="VarName">
start_vd</EM>
 as 90 and <EM CLASS="VarName">
vd_count</EM>
 as 10 will retrieve the last ten such vdatas.  The value for <EM CLASS="VarName">
start_vd</EM>
 must be non-negative and smaller than the number of vdatas having the specified class.  This number can be obtained by invoking <EM CLASS="FunctionName">
VSofclass</EM>
 passing in <EM CLASS="DefName">
NULL</EM>
 for the array <EM CLASS="VarName">
refarray</EM>
 and will also allow applications to sufficiently allocate space for <EM CLASS="VarName">
refarray</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-154009"></A>When <EM CLASS="VarName">
start_vd</EM>
 is 0, the retrieval will start at the beginning of the file or the first sub-vdata of the specified vgroup.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-153035"></A>When <EM CLASS="VarName">
start_vd</EM>
 is smaller than the number of vdatas having the specified class name, <EM CLASS="FunctionName">
VSofclass</EM>
 will start retrieving from the vdata number <EM CLASS="VarName">
start_vd</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-153036"></A>When <EM CLASS="VarName">
start_vd</EM>
 equals or is greater than the number of vdatas having the specified class name, <EM CLASS="FunctionName">
VSofclass</EM>
 will return <EM CLASS="DefName">
FAIL </EM>
(or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-153686"></A><EM CLASS="FunctionName">
VSofclass</EM>
 returns the number of vdatas retrieved, if successful, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
), otherwise.  The parameters of this routine are further defined in <A HREF="UG_html-4.htm#50593874_82642" CLASS="XRef">Table 4L</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-153863"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_82642"></A>VSgetvdatas, VSisinternal, and VSofclass Parameter Lists</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-155583"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-155584"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-155585"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-155587"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-155589"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-155593"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-155599"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-155601"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-155605"></A>VSgetvdatas</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-155606"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-155607"></A>(vsfgvdatas)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155609"></A>id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155611"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155613"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155615"></A>File or vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155619"></A>start_vd</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155621"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155623"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155625"></A>Vdata index to start retrieving at</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155629"></A>vd_count</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155631"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155633"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155635"></A>Number of vdatas to be retrieved</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155639"></A>refarray</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155641"></A>uint16 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155643"></A>integer (*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155645"></A>Array to hold reference numbers of retrieved vdatas</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-155717"></A>VSisinternal</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-155718"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-155719"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155721"></A>vdata_id</P>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155723"></A>int32</P>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155725"></A>N/A</P>
</TD>
<TD ROWSPAN="4" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155727"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-155647"></A>VSofclass</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-155648"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-155649"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155651"></A>id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155653"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155655"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155657"></A>File or vgroup identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155661"></A>vd_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155663"></A>const char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155665"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155667"></A>Class name of vdatas to be retrieved</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155671"></A>start_vd</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155673"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155675"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155677"></A>Vdata index to start retrieving at</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155681"></A>vd_count</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155683"></A>uintn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155685"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155687"></A>Number of vdatas to be retrieved</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155691"></A>*refarray</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155693"></A>uint16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-155695"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-155697"></A>Array to hold reference numbers of retrieved vdatas</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-152871"></A>	4.8	Vdata Att<A NAME="50593874_marker-67308"></A>ributes<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-17002"></A>HDF version 4.1r1 and later include the ability to assign attributes to a vdata and/or a vdata field. The concept of attributes is fully explained in <EM CLASS="ChapterReference">
<A HREF="UG_html-3.htm#50593873_13938" CLASS="XRef">Scientific Data Sets (SD API)</A></EM>
. To review briefly: an attribute has a name, a data type, a number of attribute values, and the attribute values themselves. All attribute values must be of the same data type. For example, an integer cannot be added to an attribute value consisting of ten characters, or a character value cannot be included in an attribute value consisting of 2 32-bit integers.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-56024"></A>Any number of attributes can be assigned to either a vdata or any single field in a vdata. However, each attribute name should be unique within its scope. In other words, the name of a field’s attribute must be unique among all attributes that belong to that same field, and the name of a vdata’s attribute must be unique among all attributes assigned to the same vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-26355"></A>The following subsections describe routines that retrieve various information about vdata and vdata field attributes. Those routines that access field attributes require the field index as a parameter (<EM CLASS="VarName">
field_index</EM>
.)</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-18495"></A>	4.8.1	<A NAME="50593874_11074"></A>Querying the In<A NAME="50593874_marker-20069"></A>dex of a Vdata Field Given the Field Name: VSfindex</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-51572"></A><EM CLASS="FunctionName">
VSfindex</EM>
<A NAME="50593874_marker-51571"></A> retrieves the index of a field given its name, <EM CLASS="VarName">
field_name</EM>
, and stores the value in the parameter <EM CLASS="VarName">
field_index</EM>
. The syntax of <EM CLASS="FunctionName">
VSfindex</EM>
 is as follows: </P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51573"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSfindex(vdata_id, field_name, &amp;field_index);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51575"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsffidx(vdata_id, field_name, field_index)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51576"></A>The parameter <EM CLASS="VarName">
field_index</EM>
 is the index number that uniquely identifies the location of the field within the vdata. Field index numbers are assigned in increasing order and are zero-based: for example, a <EM CLASS="VarName">
field_index</EM>
 value of 4 would refer to the fifth field in the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-26365"></A><EM CLASS="FunctionName">
VSfindex</EM>
 returns <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if successful and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSfindex</EM>
 are further defined in <A HREF="UG_html-4.htm#50593874_20394" CLASS="XRef">Table 4M</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-18550"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_20394"></A>VSfin<A NAME="50593874_marker-20071"></A>dex Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-18499"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49981"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-18500"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-18502"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-18504"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-18508"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-18514"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-18516"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-18520"></A>VSfindex</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-49983"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-18521"></A>(vsffidx)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18523"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18525"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18527"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-18529"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18533"></A>field_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18535"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18537"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-18539"></A>Name of the vdata field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18543"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18545"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-18547"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-18549"></A>Index of the vdata field</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-17060"></A>	4.8.2	<A NAME="50593874_16111"></A>Set<A NAME="50593874_marker-20072"></A>ting the Attribute of a Vdata or Vd<A NAME="50593874_marker-20073"></A>ata Field: VSsetattr</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-51618"></A><EM CLASS="FunctionName">
VSsetattr</EM>
<A NAME="50593874_marker-51617"></A> attaches an attribute to a vdata or a vdata field. The syntax of <EM CLASS="FunctionName">
VSsetattr</EM>
 is as follows: </P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-52346"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSsetattr(vdata_id, field_index, attr_name, data_type, n_values, values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-52358"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfsnat(vdata_id, field_index, attr_name, data_type, n_values, values)</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-52359"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = vsfscat(vdata_id, field_index, attr_name, data_type, n_values, values)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-73514"></A>If the attribute has already been attached, the new attribute values will replace the current values, provided the data type and the number of attribute values (<EM CLASS="VarName">
n_values</EM>
) have not been changed. If either of these have been changed, <EM CLASS="FunctionName">
VSsetattr</EM>
 will return <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-73515"></A>Set the parameter <EM CLASS="VarName">
field_index</EM>
 to <EM CLASS="DefName">
_HDF_VDATA</EM>
 (or <EM CLASS="DefName">
-1</EM>
) to set an attribute for a vdata or to a valid field index to set attribute for a vdata field. A valid field index is a zero-based integer value representing the ordinal location of a field within the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-59500"></A>The parameter attr_name specifies the name of the attribute to be set and can contain <EM CLASS="DefName">
VSNAMELENMAX</EM>
 (or <EM CLASS="DefName">
64</EM>
) characters. The parameter <EM CLASS="VarName">
data_type</EM>
 specifies the data type of the attribute values. Data types supported by HDF are listed in <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A>. The parameter <EM CLASS="VarName">
values</EM>
 contains attribute values to be written.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-26462"></A>The FORTRAN-77 version of <EM CLASS="FunctionName">
VSsetattr</EM>
 has two routines: <EM CLASS="FunctionName">
vsfsnat</EM>
 sets numeric attribute data and <EM CLASS="FunctionName">
vsfscat</EM>
 sets character attribute data.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-18641"></A><EM CLASS="FunctionName">
VSsetattr</EM>
 returns <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if successful and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSsetattr</EM>
 are described in <A HREF="UG_html-4.htm#50593874_37692" CLASS="XRef">Table 4N</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-56300"></A>	4.8.3	<A NAME="50593874_34277"></A>Querying the Values of a Vdata <A NAME="50593874_marker-56299"></A>or Vdata Field Attribute: VSgetattr</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-56302"></A><EM CLASS="FunctionName">
VSgetattr</EM>
<A NAME="50593874_marker-56301"></A> returns all of the values of the specified attribute of the specified vdata field or vdata. The syntax of <EM CLASS="FunctionName">
VSgetattr</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-56303"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSgetattr(vdata_id, field_index, attr_index, values);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-56304"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfgnat(vdata_id, field_index, attr_index, values)</P>
<P CLASS="syntax-or-top">
<A NAME="50593874_pgfId-56305"></A>	<EM CLASS="syntaxLang">
OR</EM>
	status = vsfgcat(vdata_id, field_index, attr_index, values)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-67726"></A>Set the parameter <EM CLASS="VarName">
field_index</EM>
 to <EM CLASS="DefName">
_HDF_VDATA</EM>
 (or <EM CLASS="DefName">
-1</EM>
) to retrieve the values of the attribute attached to the vdata identified by the parameter <EM CLASS="VarName">
vdata_id</EM>
. Set <EM CLASS="VarName">
field_index</EM>
 to a zero-based integer value to retrieve the values of an attribute attached to a vdata field; the value of <EM CLASS="VarName">
field_index</EM>
 will be used as the index of the vdata field.  In both cases, the values returned will be those of the attribute located at the position specified by the parameter <EM CLASS="VarName">
attr_index</EM>
, the zero-based index of the target attribute. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-67738"></A>The parameter <EM CLASS="VarName">
values</EM>
 must be sufficiently allocated to hold the retrieved attribute values. Use <EM CLASS="FunctionName">
VSattrinfo</EM>
 to obtain information about the attribute values for appropriate memory allocation.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-56308"></A>The FORTRAN-77 versions of <EM CLASS="FunctionName">
VSgetattr</EM>
 has two routines: <EM CLASS="FunctionName">
vsfgnat</EM>
 gets numeric attribute data and <EM CLASS="FunctionName">
vsfgcat</EM>
 gets character attribute data.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-56309"></A><EM CLASS="FunctionName">
VSgetattr</EM>
 returns <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if successful and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSgetattr</EM>
 are described in <A HREF="UG_html-4.htm#50593874_37692" CLASS="XRef">Table 4N</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-56380"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_37692"></A>VSset<A NAME="50593874_marker-56450"></A>attr and VSget<A NAME="50593874_marker-56314"></A>attr Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-56317"></A>Routine Name </P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-56318"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-56319"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-56321"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-56323"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-56327"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-56333"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-56335"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-56384"></A>VSsetattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-56385"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-56386"></A>(vsfsnat/vsfscat)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56388"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56390"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56392"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56394"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56398"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56400"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56402"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56404"></A><EM CLASS="DefName7">
_HDF_VDATA</EM>
 or index of the field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56408"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56410"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56412"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56414"></A>Name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56418"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56420"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56422"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56424"></A>Data type of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56428"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56430"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56432"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56434"></A>Number of values the attribute contains</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56438"></A>values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56440"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56442"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-59501"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56444"></A>Buffer containing the attribute values</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-56339"></A>VSgetattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-56340"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-56341"></A>(vsfgnat/vsfgcat)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56343"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56345"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56347"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56349"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56353"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56355"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56357"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56359"></A><EM CLASS="DefName7">
_HDF_VDATA</EM>
 or index of the field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56363"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56365"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56367"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56369"></A>Index of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56373"></A>values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56375"></A>VOIDP</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56377"></A>&lt;valid numeric data type&gt;(*)/</P>
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-59502"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56379"></A>Buffer containing attribute values</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-17089"></A>	4.8.4	<A NAME="50593874_41541"></A>Queryi<A NAME="50593874_marker-20076"></A>ng the Total Number of Vdata and Vdata Field Attributes: VSnattrs</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-18714"></A><EM CLASS="FunctionName">
VSnattrs</EM>
<A NAME="50593874_marker-20077"></A> returns the total number of attributes of the specified vdata and the fields contained in the vdata. This is different from the <EM CLASS="FunctionName">
VSfnattrs</EM>
 routine, which returns the number of attributes of the specified vdata or a specified field contained in the specified vdata. The syntax of <EM CLASS="FunctionName">
VSnattrs</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51673"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_attrs = VSnattrs(vdata_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51676"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_attrs = vsfnats(vdata_id)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-17066"></A><EM CLASS="FunctionName">
VSnattrs</EM>
 returns the total number of attributes assigned to the vdata and its fields when successful, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSnattrs</EM>
 are described in <A HREF="UG_html-4.htm#50593874_18705" CLASS="XRef">Table 4O</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-17091"></A>	4.8.5	<A NAME="50593874_16050"></A>Querying th<A NAME="50593874_marker-20079"></A>e Number of Attributes of a Vdata <A NAME="50593874_marker-20080"></A>or a Vdata Field: VSfnattrs</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-51702"></A><EM CLASS="FunctionName">
VSfnattrs</EM>
<A NAME="50593874_marker-51701"></A> returns the number of attributes attached to the vdata field specified by the parameter <EM CLASS="VarName">
field_index</EM>
 or the number of attributes attached to the vdata identified by <EM CLASS="VarName">
vdata_id</EM>
. This is different from the routine <EM CLASS="FunctionName">
VSnattrs</EM>
, which returns the total number of attributes of the specified vdata and the fields contained in it. The syntax of <EM CLASS="FunctionName">
VSfnattrs</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51708"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_attrs = VSfnattrs(vdata_id, field_index);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51709"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_attrs = vsffnas(vdata_id, field_index)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-51704"></A>If <EM CLASS="VarName">
field_index</EM>
 is set to a zero-based integer value, it will be used as the index of the vdata field, and the number of attributes attached to that field will be returned. If <EM CLASS="VarName">
field_index</EM>
 is set to <EM CLASS="DefName">
_HDF_VDATA</EM>
 (or <EM CLASS="DefName">
-1</EM>
), the number of attributes attached to the vdata specified by <EM CLASS="VarName">
vdata_id </EM>
will be returned.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-18682"></A><EM CLASS="FunctionName">
VSfnattrs</EM>
 returns the number of attributes assigned to the specified vdata or to the specified vdata field when successful, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSfnattrs</EM>
 are described in <A HREF="UG_html-4.htm#50593874_18705" CLASS="XRef">Table 4O</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-17850"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_18705"></A>VSna<A NAME="50593874_marker-56277"></A>ttrs and VSfnattrs <A NAME="50593874_marker-20082"></A>Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-17739"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50003"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-17740"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-17742"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-17744"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-17748"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-17754"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-17756"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-56282"></A>VSnattrs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-56283"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-56284"></A>(vsfnats)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56286"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56288"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-56290"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-56292"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-17760"></A>VSfnattrs</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50005"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-17761"></A>(vsffnas)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-17763"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-17765"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-17767"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-17769"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-17773"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-17775"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-17777"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-17779"></A><EM CLASS="DefName7">
_HDF_VDATA</EM>
 or index of the field</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-84501"></A>	4.8.6	<A NAME="50593874_39833"></A>Retrieving the Index of a Vdata <A NAME="50593874_marker-84500"></A>or Vdata Field Attribute Given the Attribute Name: VSfindattr</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-84503"></A><EM CLASS="FunctionName">
VSfindattr</EM>
<A NAME="50593874_marker-84502"></A> returns the index of an attribute with the specified name. The attribute must be attached to either a vdata or one of its fields. The syntax of <EM CLASS="FunctionName">
VSfindattrs</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51727"></A><EM CLASS="syntaxLang">
C:</EM>
		attr_index = VSfindattr(vdata_id, field_index, attr_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51728"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	attr_index = vsffdat(vdata_id, field_index, attr_name)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-26553"></A>If <EM CLASS="VarName">
field_index</EM>
 is set to <EM CLASS="DefName">
_HDF_VDATA</EM>
 (or <EM CLASS="DefName">
-1</EM>
), the index of the attribute identified by the parameter <EM CLASS="VarName">
attr_name</EM>
 and attached to the vdata specified by <EM CLASS="VarName">
vdata_id </EM>
will be returned.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68904"></A>If the parameter <EM CLASS="VarName">
field_index</EM>
 is set to a zero-based integer value, the value will be used as the index of the vdata field. Then, the index of the attribute named by the parameter <EM CLASS="VarName">
attr_name</EM>
 and attached to the field specified by the parameter <EM CLASS="VarName">
field_index</EM>
 will be returned.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-68905"></A><EM CLASS="FunctionName">
VSfindattr</EM>
 returns an attribute index if successful, and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSfindattr</EM>
 are described in <A HREF="UG_html-4.htm#50593874_25831" CLASS="XRef">VSfindattr, VSattrinfo, and VSisattr Parameter Lists</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-17093"></A>	4.8.7	<A NAME="50593874_26875"></A>Querying Information on a Vdata <A NAME="50593874_marker-20086"></A>or Vdata Field Attribute: VSattrinfo</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-57750"></A><EM CLASS="FunctionName">
VSattrinfo</EM>
<A NAME="50593874_marker-57749"></A> returns the name, data type, number of values, and the size of the values of the specified attribute of the specified vdata field or vdata. The syntax of <EM CLASS="FunctionName">
VSattrinfo</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-57751"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSattrinfo(vdata_id, field_index, attr_index, attr_name, &amp;data_type, &amp;n_values, &amp;size);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51747"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfainf(vdata_id, field_index, attr_index, attr_name, data_type, n_values, size)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-57735"></A>In C, the parameters <EM CLASS="VarName">
attr_name</EM>
, <EM CLASS="VarName">
data_type</EM>
, <EM CLASS="VarName">
n_values</EM>
, and <EM CLASS="VarName">
size</EM>
 can be set to <EM CLASS="DefName">
NULL</EM>
, if the information returned by these parameters are not needed.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-64870"></A>The parameter <EM CLASS="VarName">
field_index</EM>
 is the same as the parameter <EM CLASS="VarName">
field_index</EM>
 in <EM CLASS="FunctionName">
VSsetattr</EM>
; it can be set either to a nonnegative integer to specify the field or to <EM CLASS="DefName">
_HDF_VDATA</EM>
 (or <EM CLASS="DefName">
-1</EM>
) to specify the vdata referred to by <EM CLASS="VarName">
vdata_id</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-56553"></A><EM CLASS="FunctionName">
VSattrinfo</EM>
 returns <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if successful and <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSattrinfo</EM>
 are described in <A HREF="UG_html-4.htm#50593874_25831" CLASS="XRef">Table 4P</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-68928"></A>	4.8.8	<A NAME="50593874_11493"></A>Determi<A NAME="50593874_marker-68927"></A>ning whether a Vdata Is an Attribute: VSisattr</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-68930"></A>The HDF library stores vdata attributes and vdata field attributes as vdatas. HDF therefore provides the routine <EM CLASS="FunctionName">
VSisattr</EM>
<A NAME="50593874_marker-68929"></A> to determine whether a particular vdata contains attribute data. The syntax of <EM CLASS="FunctionName">
VSisattr</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51807"></A><EM CLASS="syntaxLang">
C:</EM>
			status = VSisattr(vdata_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51808"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfisat(vdata_id)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-18773"></A><EM CLASS="FunctionName">
VSisattr</EM>
 returns <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) if the vdata contains an attribute data and <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
) otherwise. The parameters for <EM CLASS="FunctionName">
VSisattr</EM>
 are described in <A HREF="UG_html-4.htm#50593874_25831" CLASS="XRef">Table 4P</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-18318"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_25831"></A>VSfindat<A NAME="50593874_marker-60857"></A>tr, VSattrin<A NAME="50593874_marker-56665"></A>fo, and VSis<A NAME="50593874_marker-20094"></A>attr Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-61321"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-61322"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-61323"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-61325"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-61327"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-61331"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-61337"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-61339"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-61343"></A>VSfindattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-61344"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-61345"></A>(vsffdat)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61347"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61349"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61351"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61353"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61357"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61359"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61361"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61363"></A><EM CLASS="DefName7">
_HDF_VDATA</EM>
 or index of the field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61367"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61369"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61371"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61373"></A>Name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="7" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-61375"></A>VSattrinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-61376"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-61377"></A>(vsfainf)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61379"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61381"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61383"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61385"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61389"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61391"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61393"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61395"></A>Index of the field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61399"></A>attr_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61401"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61403"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61405"></A>Index of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61409"></A>attr_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61411"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61413"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61415"></A>Returned name of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61419"></A>data_type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61421"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61423"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61425"></A>Returned data type of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61429"></A>n_values</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61431"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61433"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61435"></A>Number of values of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61439"></A>size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61441"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61443"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61445"></A>Size, in bytes, of the values of the attribute</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-61447"></A>VSisattr</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-61448"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-61449"></A>(vsfisat)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61451"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61453"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-61455"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-61457"></A>Vdata identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-18988"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Operations on Field and Vdata Attributes</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-76497"></A>This example illustrates the use of <EM CLASS="FunctionName">
VSsetattr/vsfscat/vsfsnat</EM>
 to attach an attribute to a vdata and to a field in a vdata, the use of <EM CLASS="FunctionName">
VSattrinfo/vsfainf</EM>
 to get information about a field attribute and a vdata attribute, and the use of <EM CLASS="FunctionName">
VSgetattr/vsfgcat/vsfgnat</EM>
 to get the values of an attribute of a vdata and the values of an attribute of a field in a vdata.  The example also shows the use of <EM CLASS="FunctionName">
VSfnattrs/vsffnas</EM>
 to obtain the number of attributes attached to a field of a vdata and the use of <EM CLASS="FunctionName">
VSnattrs/vsfnats</EM>
 to obtain the total number of attributes attached to both a vdata and its fields. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-18989"></A>In this example, the program finds the vdata, named &quot;Solid Particle&quot;, in the HDF file &quot;General_Vdatas.hdf&quot; produced by Example 3.  It then obtains the index of the field, named &quot;Mass&quot;, in the vdata.  An attribute named &quot;Site Ident&quot; is attached to the vdata to contain the identification of the experiment sites.  Another attribute named &quot;Scales&quot; is attached to the field for its scale values.  The vdata attribute has 3 character values and the field attribute has 4 integer values.</P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-22532"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:			</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-64018"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132581"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132582"></A>#define  FILE_NAME        &quot;General_Vdatas.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132583"></A>#define  VDATA_NAME       &quot;Solid Particle&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132584"></A>#define  FIELD_NAME       &quot;Mass&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132585"></A>#define  VATTR_NAME       &quot;Site Ident&quot;      /* name of the vdata attribute  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132586"></A>#define  FATTR_NAME       &quot;Scales&quot;          /* name of the field attribute  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132587"></A>#define  VATTR_N_VALUES   3      /* number of values in the vdata attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132588"></A>#define  FATTR_N_VALUES   4      /* number of values in the field attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132589"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132590"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132591"></A>{   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132592"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132593"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132594"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132595"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132596"></A>         file_id, vdata_ref, vdata_id,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132597"></A>         field_index,   /* index of a field within the vdata */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132598"></A>         n_vdattrs,     /* number of vdata attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132599"></A>         n_fldattrs,    /* number of field attributes */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132600"></A>         vdata_type,    /* to hold the type of vdata’s attribute */ </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132601"></A>         vdata_n_values,/* to hold the number of vdata’s attribute values   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132602"></A>         vdata_size,    /* to hold the size of vdata’s attribute values     */ </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132603"></A>         field_type,    /* to hold the type of field’s attribute            */ </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132604"></A>         field_n_values,/* to hold the number of field’s attribute values   */ </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132605"></A>         field_size;    /* to hold the size of field’s attribute values     */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132606"></A>   char  vd_attr[VATTR_N_VALUES] = {’A’, ’B’, ’C’};/* vdata attribute values*/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132607"></A>   int32 fld_attr[FATTR_N_VALUES] = {2, 4, 6, 8};  /* field attribute values*/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132608"></A>   char  vattr_buf[VATTR_N_VALUES];     /* to hold vdata attribute’s values */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132609"></A>   int32 fattr_buf[FATTR_N_VALUES];     /* to hold field attribute’s values */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132610"></A>   char  vattr_name[30],                /* name of vdata attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132611"></A>         fattr_name[30];                /* name of field attribute */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132612"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132613"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132614"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132615"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132616"></A>   * Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132617"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132618"></A>   file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132619"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132620"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132621"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132622"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132623"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132624"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132625"></A>   /* </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132626"></A>   * Get the reference number of the vdata named VDATA_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132627"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132628"></A>   vdata_ref = VSfind (file_id, VDATA_NAME);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132629"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132630"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132631"></A>   * Attach to the vdata for writing. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132632"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132633"></A>   vdata_id = VSattach (file_id, vdata_ref, &quot;w&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132634"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132635"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132636"></A>   * Attach an attribute to the vdata, i.e., indicated by the second parameter.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132637"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132638"></A>   status_n = VSsetattr (vdata_id, _HDF_VDATA, VATTR_NAME, DFNT_CHAR,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132639"></A>                                                   VATTR_N_VALUES, vd_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132640"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132641"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132642"></A>   * Get the index of the field FIELD_NAME within the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132643"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132644"></A>   status_n = VSfindex (vdata_id, FIELD_NAME, &amp;field_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132645"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132646"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132647"></A>   * Attach an attribute to the field field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132648"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132649"></A>   status_n = VSsetattr (vdata_id, field_index, FATTR_NAME, DFNT_INT32, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132650"></A>                                                   FATTR_N_VALUES, fld_attr);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132651"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132652"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132653"></A>   * Get the number of attributes attached to the vdata’s first </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132654"></A>   * field - should be 0. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132655"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132656"></A>   n_fldattrs = VSfnattrs (vdata_id, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132657"></A>   printf ( &quot;Number of attributes of the first field of the vdata: %d\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132658"></A>             n_fldattrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132659"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132660"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132661"></A>   * Get the number of attributes attached to the field specified by </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132662"></A>   * field_index - should be 1.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132663"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132664"></A>   n_fldattrs = VSfnattrs (vdata_id, field_index);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132665"></A>   printf ( &quot;Number of attributes of field %s: %d\n&quot;, FIELD_NAME, n_fldattrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132666"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132667"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132668"></A>   * Get the total number of the field’s and vdata’s attributes - should be 2. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132669"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132670"></A>   n_vdattrs = VSnattrs (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132671"></A>   printf ( &quot;Number of attributes of the vdata and its fields: %d\n&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132672"></A>             n_vdattrs);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132673"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132674"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132675"></A>   * Get information about the vdata’s first attribute, indicated</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132676"></A>   * by the third parameter which is the index of the attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132677"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132678"></A>   status_n = VSattrinfo (vdata_id, _HDF_VDATA, 0, vattr_name, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132679"></A>                          &amp;vdata_type, &amp;vdata_n_values, &amp;vdata_size);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132680"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132681"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132682"></A>   * Get information about the first attribute of the field specified by </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132683"></A>   * field_index. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132684"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132685"></A>   status_n = VSattrinfo (vdata_id, field_index, 0, fattr_name, &amp;field_type, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132686"></A>                          &amp;field_n_values, &amp;field_size);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132687"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132688"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132689"></A>   * Get the vdata’s first attribute. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132690"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132691"></A>   status_n = VSgetattr (vdata_id, _HDF_VDATA, 0, vattr_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132692"></A>   printf(&quot;Values of the vdata attribute = %c %c %c\n&quot;, vattr_buf[0],</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132693"></A>                          vattr_buf[1], vattr_buf[2]);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132694"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132695"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132696"></A>   * Get the first attribute of the field specified by field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132697"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132698"></A>   status_n = VSgetattr (vdata_id, field_index, 0, fattr_buf);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132699"></A>   printf(&quot;Values of the field attribute = %d %d %d %d\n&quot;, fattr_buf[0], </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132700"></A>                          fattr_buf[1], fattr_buf[2], fattr_buf[3]);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132701"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132702"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132703"></A>   * Terminate access to the vdata and to the VS interface, then close </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132704"></A>   * the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132705"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132706"></A>   status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132707"></A>   status_n  = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132708"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132709"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132710"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-22443"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-64166"></A> program vdata_attributes </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132721"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132722"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132723"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132724"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132725"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132726"></A>      character*14 VDATA_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132727"></A>      character*4  FIELD_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132728"></A>      character*10 VATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132729"></A>      character*6  FATTR_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132730"></A>      integer      VATTR_N_VALUES, FATTR_N_VALUES </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132731"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132732"></A>      parameter (FILE_NAME    = ’General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132733"></A>     +           VDATA_NAME   = ’Solid Particle’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132734"></A>     +           FIELD_NAME   = ’Mass’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132735"></A>     +           VATTR_NAME   = ’Site Ident’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132736"></A>     +           FATTR_NAME   = ’Scales’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132737"></A>      parameter (VATTR_N_VALUES = 3,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132738"></A>     +           FATTR_N_VALUES = 4)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132739"></A>   </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132740"></A>      integer DFACC_WRITE, FULL_INTERLACE, HDF_VDATA</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132741"></A>      integer DFNT_INT32, DFNT_CHAR8</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132742"></A>      parameter (DFACC_WRITE    =  2,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132743"></A>     +           FULL_INTERLACE =  0,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132744"></A>     +           HDF_VDATA      = -1,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132745"></A>     +           DFNT_INT32     = 24,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132746"></A>     +           DFNT_CHAR8     =  4)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132747"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132748"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132749"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132750"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132751"></A>      integer vfstart, vsffnd, vsfatch, vsfscat, vsfsnat, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132752"></A>     +        vsffnas, vsffidx, vsfnats, vsfainf, vsfgcat, vsfgnat,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132753"></A>     +        vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132754"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132755"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132756"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132757"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132758"></A>      integer   status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132759"></A>      integer   file_id, vdata_id, vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132760"></A>      integer   field_index, n_vdattrs, n_fldattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132761"></A>      integer   vdata_type, vdata_n_values, vdata_size</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132762"></A>      integer   field_type, field_n_values, field_size </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132763"></A>      character vd_attr(VATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132764"></A>      integer   fld_attr(FATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132765"></A>      character vattr_buf(VATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132766"></A>      integer   fattr_buf(FATTR_N_VALUES)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132767"></A>      character vattr_name_out(30), fattr_name_out(30)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132768"></A>      data vd_attr /’A’, ’B’, ’C’/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132769"></A>      data fld_attr /2, 4, 6, 8/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132770"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132771"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132772"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132773"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132774"></A>C     Open the HDF file for writing.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132775"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132776"></A>      file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132777"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132778"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132779"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132780"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132781"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132782"></A>C     Get the reference number of the vdata named VDATA_NAME.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132783"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132784"></A>      vdata_ref = vsffnd(file_id, VDATA_NAME)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132785"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132786"></A>C     Attach to the vdata for writing. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132787"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132788"></A>      vdata_id = vsfatch(file_id, vdata_ref, ’w’) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132789"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132790"></A>C     Attach an attribute to the vdata, as it is indicated by second parameter.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132791"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132792"></A>      status = vsfscat(vdata_id, HDF_VDATA, VATTR_NAME, DFNT_CHAR8,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132793"></A>     +                  VATTR_N_VALUES, vd_attr)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132794"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132795"></A>C     Get the index of the field FIELD_NAME within the vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132796"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132797"></A>      status = vsffidx(vdata_id, FIELD_NAME, field_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132798"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132799"></A>C     Attach an attribute to the field with the index field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132800"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132801"></A>      status = vsfsnat(vdata_id, field_index, FATTR_NAME, DFNT_INT32,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132802"></A>     +                  FATTR_N_VALUES, fld_attr)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132803"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132804"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132805"></A>C     Get the number of attributes attached to the vdata’s first</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132806"></A>C     field - should be 0.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132807"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132808"></A>      n_fldattrs = vsffnas(vdata_id, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132809"></A>      write(*,*) ’Number of attributes of the first field’ </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132810"></A>      write(*,*) ’ of the vdata: ’, n_fldattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132811"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132812"></A>C     Get the number of the attributes attached to the field specified by</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132813"></A>C     index field_index - should be 1.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132814"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132815"></A>      n_fldattrs = vsffnas(vdata_id, field_index)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132816"></A>      write(*,*) ’Number of attributes of field ’, FIELD_NAME,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132817"></A>     +           n_fldattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132818"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132819"></A>C     Get the total number of the field’s and vdata’s attributes - should be 2.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132820"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132821"></A>      n_vdattrs = vsfnats(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132822"></A>      write(*,*) ’Number of attributes of the vdata and its fields: ’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132823"></A>     +           n_vdattrs</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132824"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132825"></A>C     Get information about the vdata’s first attribute, indicated by </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132826"></A>C     the third parameter, which is the index of the attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132827"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132828"></A>      status = vsfainf(vdata_id, HDF_VDATA, 0, vattr_name_out,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132829"></A>     +                 vdata_type, vdata_n_values, vdata_size)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132830"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132831"></A>C     Get information about the first attribute of the field specified by</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132832"></A>C     field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132833"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132834"></A>      status = vsfainf(vdata_id, field_index, 0, fattr_name_out, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132835"></A>     +                 field_type, field_n_values, field_size)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132836"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132837"></A>C     Get the vdata’s first attribute.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132838"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132839"></A>      status = vsfgcat(vdata_id, HDF_VDATA, 0, vattr_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132840"></A>      write(*,*) ’Values of vdata attribute  ’, vattr_buf</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132841"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132842"></A>C     Get the first attribute of the field specified by field_index.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132843"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132844"></A>      status = vsfgnat(vdata_id, field_index, 0, fattr_buf)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132845"></A>      write(*,*)  ’Values of the field attribute = ’, fattr_buf</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132846"></A>C       </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132847"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132848"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132849"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132850"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132851"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132852"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132853"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132854"></A>&nbsp;</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593874_pgfId-18984"></A>	4.9	<A NAME="50593874_10689"></A>Ob<A NAME="50593874_marker-17102"></A>taining Information about a Specific Vdata<DIV>
<IMG SRC="UG_html-20.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593874_pgfId-17104"></A>Once a vdata has been located, its contents must be obtained. In this section four categories of routines that obtain vdata information are described:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-9544"></A>A general inquiry routine named <EM CLASS="FunctionName">
VSinquire</EM>
.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-9545"></A>A set of <EM CLASS="Definition">
vdata query</EM>
 routines with names prefaced by “VSQuery”.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-8495"></A>A set of <EM CLASS="Definition">
vdata inquiry</EM>
 routines prefaced by “VS”. Some of these routines retrieve specific vdata information which can also be retrieved by the general inquiry routine <EM CLASS="FunctionName">
VSinquire</EM>
.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-9546"></A>A set of <EM CLASS="Definition">
field query</EM>
 routines with names prefaced by “VF”.</LI>
</UL>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-7031"></A>	4.9.1	<A NAME="50593874_35960"></A>Obtaining Vdata Information: VSinquire</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-51842"></A><EM CLASS="FunctionName">
VSinquire</EM>
<A NAME="50593874_marker-51841"></A> retrieves information about the vdata identified by the parameter <EM CLASS="VarName">
vdata_id</EM>
. The routine has the following syntax:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-52410"></A><EM CLASS="syntaxLang">
C:</EM>
			status = VSinquire(vdata_id, &amp;n_records, &amp;interlace_mode, fieldname_list, &amp;vdata_size, vdata_name);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-52412"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsfinq(vdata_id, n_records, interlace_mode, fieldname_list, vdata_size, vdata_name)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-56671"></A>The parameter <EM CLASS="VarName">
n_records</EM>
 contains the returned number of records in the vdata, the parameter <EM CLASS="VarName">
interlace_mode</EM>
 contains the returned interlace mode of the vdata contents, the parameter <EM CLASS="VarName">
fieldname_list</EM>
 is a comma-separated list of the returned names of all the fields in the vdata, the parameter <EM CLASS="VarName">
vdata_size</EM>
 is the returned size, in bytes, of the vdata record, and the parameter <EM CLASS="VarName">
vdata_name</EM>
 contains the returned name of the vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-56672"></A>If any of the parameters are set to <EM CLASS="DefName">
NULL</EM>
 in C, the corresponding data will not be returned. <EM CLASS="FunctionName">
VSinquire</EM>
 will return <EM CLASS="DefName">
FAIL</EM>
 if it is called before <EM CLASS="FunctionName">
VSdefine</EM>
 and <EM CLASS="FunctionName">
VSsetfield</EM>
 on the same vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-56673"></A><EM CLASS="FunctionName">
VSinquire</EM>
 returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for <EM CLASS="FunctionName">
VSinquire</EM>
 are further defined in <A HREF="UG_html-4.htm#50593874_27523" CLASS="XRef">Table 4Q</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-51411"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_27523"></A>VSi<A NAME="50593874_marker-51325"></A>nquire Parameter List</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-51328"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-51329"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-51330"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-51332"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-51334"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-51338"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-51344"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-51346"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="6" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-51350"></A>VSinquire</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-51351"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-51352"></A>(vsfinq)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51354"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51356"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51358"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-51360"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51364"></A>n_records</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51366"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51368"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-51370"></A>Number of records in the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51374"></A>interlace_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51376"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51378"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-51380"></A>Interlace mode</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51384"></A>fieldname_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51386"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51388"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-51390"></A>Buffer for the list of field names</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51394"></A>vdata_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51396"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51398"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-51400"></A>Size in bytes of the vdata record</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51404"></A>vdata_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51406"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-51408"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-51410"></A>Name of the vdata</P>
</TD>
</TR>
</TABLE>
</DIV>
<DIV>
<H6 CLASS="Example">
<A NAME="50593874_pgfId-76534"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
Obtaining Vdata Information</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-76544"></A>This example illustrates the use of <EM CLASS="FunctionName">
VSgetid/vsfgid</EM>
 and <EM CLASS="FunctionName">
VSinquire/vsfinq</EM>
 to obtain information about all vdatas in an HDF file. </P>
<P CLASS="Body">
<A NAME="50593874_pgfId-76535"></A>In this example, the program uses <EM CLASS="FunctionName">
VSgetid</EM>
 to locate all vdatas in the HDF file &quot;General_Vdatas.hdf&quot;, which is the output of Example 3.  For each vdata found, if it is not the storage of an attribute, the program uses <EM CLASS="FunctionName">
VSinquire/vsfinq</EM>
 to obtain information about the vdata and displays its information.  Recall that an attribute is also stored as a vdata; the function <EM CLASS="FunctionName">
VSisattr/vsfisat</EM>
 checks whether a vdata is a storage of an attribute. </P>
</DIV>
</DIV>
</DIV>
</DIV>
<DIV>
<H4 CLASS="Code-C-Title">
<A NAME="50593874_pgfId-76536"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
C:		</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-76538"></A>#include &quot;hdf.h&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132866"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132867"></A>#define  FILE_NAME      &quot;General_Vdatas.hdf&quot;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132868"></A>#define  FIELD_SIZE     80         /* maximum length of all the field names */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132869"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132870"></A>main( )</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132871"></A>{</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132872"></A>   /************************* Variable declaration **************************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132873"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132874"></A>   intn  status_n;      /* returned status for functions returning an intn  */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132875"></A>   int32 status_32,     /* returned status for functions returning an int32 */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132876"></A>         n_records,     /* to retrieve the number of records in the vdata   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132877"></A>         interlace_mode,/* to retrieve the interlace mode of the vdata      */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132878"></A>         vdata_size,    /* to retrieve the size of all specified fields     */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132879"></A>         file_id, vdata_ref, vdata_id;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132880"></A>   char  fieldname_list[FIELD_SIZE], /* buffer to retrieve the vdata data   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132881"></A>         vdata_name[VSNAMELENMAX];   /* buffer to retrieve the vdata name   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132882"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132883"></A>   /********************** End of variable declaration **********************/</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132884"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132885"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132886"></A>   * Open the HDF file for reading. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132887"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132888"></A>   file_id = Hopen (FILE_NAME, DFACC_READ, 0);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132889"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132890"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132891"></A>   * Initialize the VS interface. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132892"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132893"></A>   status_n = Vstart (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132894"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132895"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132896"></A>   * Set vdata_ref to -1 to start the search from the beginning of file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132897"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132898"></A>   vdata_ref = -1;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132899"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132900"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132901"></A>   * Use VSgetid to obtain each vdata by its reference number then attach </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132902"></A>   * to the vdata and get its information.  The loop terminates when </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132903"></A>   * the last vdata is reached.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132904"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132905"></A>   while ((vdata_ref = VSgetid (file_id, vdata_ref)) != FAIL)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132906"></A>   {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132907"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132908"></A>      * Attach to the current vdata for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132909"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132910"></A>      vdata_id = VSattach (file_id, vdata_ref, &quot;r&quot;);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132911"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132912"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132913"></A>      * Test whether the current vdata is not a storage of an attribute, then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132914"></A>      * obtain and display its information.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132915"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132916"></A>      if( VSisattr (vdata_id) != TRUE )</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132917"></A>      {</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132918"></A>         status_n = VSinquire (vdata_id, &amp;n_records, &amp;interlace_mode, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132919"></A>                            fieldname_list, &amp;vdata_size, vdata_name);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132920"></A>         printf (&quot;Vdata %s: - contains %d records\n\tInterlace mode: %s \</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132921"></A>                 \n\tFields: %s - %d bytes\n\t\n&quot;, vdata_name, n_records,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132922"></A>                 interlace_mode == FULL_INTERLACE ? &quot;FULL&quot; : &quot;NONE&quot;, </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132923"></A>                 fieldname_list, vdata_size );</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132924"></A>      }</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132925"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132926"></A>      /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132927"></A>      * Detach from the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132928"></A>      */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132929"></A>      status_32 = VSdetach (vdata_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132930"></A>   } /* while */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132931"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132932"></A>   /*</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132933"></A>   * Terminate access to the VS interface and close the HDF file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132934"></A>   */</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132935"></A>   status_n = Vend (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132936"></A>   status_32 = Hclose (file_id);</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132937"></A>}</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132938"></A>&nbsp;</P>
</DIV>
<DIV>
<H4 CLASS="Code-F-Title">
<A NAME="50593874_pgfId-5722"></A><DIV>
<IMG SRC="UG_html-24.gif" ALT="">
</DIV>
FORTRAN:	</H4>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-64344"></A> program vdata_info </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132946"></A>      implicit none</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132947"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132948"></A>C     Parameter declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132949"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132950"></A>      character*18 FILE_NAME</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132951"></A>      integer      DFACC_READ, FULL_INTERLACE</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132952"></A>      integer      FIELD_SIZE</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132953"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132954"></A>      parameter (FILE_NAME      = ’General_Vdatas.hdf’,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132955"></A>     +           DFACC_READ     = 1,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132956"></A>     +           FULL_INTERLACE = 0,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132957"></A>     +           FIELD_SIZE     = 80)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132958"></A>      </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132959"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132960"></A>C     Function declaration</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132961"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132962"></A>      integer hopen, hclose</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132963"></A>      integer vfstart, vsfatch, vsfgid, vsfinq,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132964"></A>     +        vsfisat, vsfdtch, vfend </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132965"></A>&nbsp;</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132966"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132967"></A>C**** Variable declaration *******************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132968"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132969"></A>      integer      status</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132970"></A>      integer      file_id, vdata_id, vdata_ref</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132971"></A>      integer      n_records, interlace_mode, vdata_size</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132972"></A>      character*64 vdata_name</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132973"></A>      character*80 fieldname_list </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132974"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132975"></A>C**** End of variable declaration ************************************</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132976"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132977"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132978"></A>C     Open the HDF file for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132979"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132980"></A>      file_id = hopen(FILE_NAME, DFACC_READ, 0)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132981"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132982"></A>C     Initialize the VS interface.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132983"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132984"></A>      status = vfstart(file_id) </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132985"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132986"></A>C     Set the reference number to -1 to start the search from the beginning</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132987"></A>C     of the file. </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132988"></A>C     </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132989"></A>      vdata_ref = -1</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132990"></A>10    continue</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132991"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132992"></A>C     Use vsfgid to obtain each vdata by its reference number then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132993"></A>C     attach to the vdata and get information. The loop terminates</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132994"></A>C     when the last vdata is reached.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132995"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132996"></A>      vdata_ref = vsfgid(file_id, vdata_ref)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132997"></A>      if (vdata_ref .eq. -1) goto 100</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132998"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-132999"></A>C     Attach to the current vdata for reading.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133000"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133001"></A>      vdata_id = vsfatch(file_id, vdata_ref, ’r’)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133002"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133003"></A>C     Test whether the current vdata is not a storage for an attribute,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133004"></A>C     then obtain and display its information.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133005"></A>      if (vsfisat(vdata_id) .ne. 1) then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133006"></A>          status = vsfinq(vdata_id, n_records, interlace_mode,</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133007"></A>     +                    fieldname_list, vdata_size, vdata_name)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133008"></A>          write(*,*) ’Vdata: ’, vdata_name</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133009"></A>          write(*,*) ’contains ’, n_records, ’ records’</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133010"></A>          if (interlace_mode .eq. 0) then</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133011"></A>              write(*,*) ’Interlace mode: FULL’</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133012"></A>          else	 </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133013"></A>              write(*,*) ’Interlace mode: NONE’</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133014"></A>          endif</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133015"></A>          write(*,*) ’Fields: ’, fieldname_list(1:30)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133016"></A>          write(*,*) ’Vdata record size in bytes :’, vdata_size</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133017"></A>          write(*,*)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133018"></A>      endif</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133019"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133020"></A>C     Detach from the current vdata.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133021"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133022"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133023"></A>      goto 10 </P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133024"></A>100   continue</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133025"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133026"></A>C     Terminate access to the vdata and to the VS interface, and</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133027"></A>C     close the HDF file.</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133028"></A>C</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133029"></A>      status = vsfdtch(vdata_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133030"></A>      status = vfend(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133031"></A>      status = hclose(file_id)</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133032"></A>      end</P>
<P CLASS="ExampleCode">
<A NAME="50593874_pgfId-133033"></A><A NAME="50593874_marker-67327"></A>&nbsp;</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-9166"></A>	4.9.2	Obtaining Linked Block Information: VSgetblockinfo</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-115960"></A><EM CLASS="FunctionName">
VSgetblockinfo</EM>
 retrieves the block size and number of blocks employed in a linked block vdata data element. The parameter <EM CLASS="VarName">
vdata_id</EM>
 identifies the vdata. The size of blocks, in bytes, is returned in <EM CLASS="VarName">
block_size</EM>
 and the number of blocks in <EM CLASS="VarName">
num_blocks</EM>
.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-116152"></A>If either the block size or the number of blocks used in a particular vdata is likely to differ from the default setting, <EM CLASS="FunctionName">
VSgetblockinfo </EM>
must be called before any data is read from a vdata.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-116132"></A><EM CLASS="FunctionName">
VSgetblockinfo </EM>
returns <EM CLASS="DefName">
SUCCESS</EM>
 (or <EM CLASS="DefName">
0</EM>
) upon successful completion or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). Its parameters are further defined in <A HREF="UG_html-4.htm#50593874_57772" CLASS="XRef">Table 4R</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-154660"></A>	4.9.3	Obtaining Linked Block Information: VSgetblockinfo</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-154661"></A><EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 retrieves external file and data information of a vdata, when the vdata has external element.  The information includes the external file’s name, the position, where the data had been written in the external file, and the length of that external data.  <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 will return <EM CLASS="DefName">
0</EM>
 if the vdata does not have external element.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-154719"></A>The syntax of <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-154720"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSgetexternalinfo(vdata_id, buf_size, filename, &amp;offset, &amp;length);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-154721"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	Currently unavailable</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-154680"></A><A NAME="50593874_marker-154679"></A>The application must provide sufficient buffer for the external file name.  When the external file name is available and <EM CLASS="VarName">
buf_size</EM>
 is 0, <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 simply returns the length of the external file name.  Thus, application can call <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 passing in 0 for <EM CLASS="VarName">
buf_size</EM>
 first, then allocate the buffer sufficiently before calling <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 again passing in the proper length for <EM CLASS="VarName">
buf_size</EM>
 and appropriately allocated buffer <EM CLASS="VarName">
filename</EM>
.  <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 stores the external file name in <EM CLASS="VarName">
filename</EM>
 up to the name’s length or the value in <EM CLASS="VarName">
buf_size</EM>
, whichever smaller.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-154747"></A><EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 stores in the parameter <EM CLASS="VarName">
offset</EM>
 the number of bytes from the beginning of the external file to the location where the first byte of data had been written and in the parameter <EM CLASS="VarName">
length</EM>
 the length of the data.</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-154748"></A><EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 returns one of the following values:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-154683"></A>the actual length of the external file name or the length of the retrieved file name, if there is external element</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-154684"></A><EM CLASS="DefName">
0</EM>
, if there is no external element</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-154685"></A><EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
), if failure occurs</LI>
</UL>
<P CLASS="Body">
<A NAME="50593874_pgfId-154689"></A>The parameters of <EM CLASS="FunctionName">
VSgetexternalinfo</EM>
 are described in <A HREF="UG_html-4.htm#50593874_57772" CLASS="XRef">Table 4R</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-116101"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_57772"></A>VSgetblockinfo Parameter List </H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115997"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-115998"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-115999"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-116001"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-116003"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-116007"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-116013"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-116015"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-116019"></A>VSgetblockinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-116020"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-116021"></A>(vsfgetblinfo)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116023"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116025"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116027"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-116029"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116033"></A>block_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116035"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116037"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-116039"></A>Size of each block, in bytes</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116073"></A>num_blocks</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116075"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-116077"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-116079"></A>Number of linked blocks</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-154776"></A>VSgetexternalinfo</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-154777"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-154778"></A>(unavailable)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154780"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154782"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154784"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-154786"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154768"></A>buf_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154770"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154772"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-154774"></A>Size of external file name’s buffer</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154804"></A>filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154806"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154808"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-154810"></A>External file name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154794"></A>offset</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154796"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154798"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-154800"></A>Offset of external data</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154758"></A>length</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154760"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-154762"></A>N/A</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-154764"></A>Length of external data</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-115959"></A>	4.9.4	<A NAME="50593874_41557"></A>VS<A NAME="50593874_marker-16930"></A>Query Vdata Information Retrieval Routines</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-51998"></A>The syntax of the VSQuery routines are as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-83246"></A><EM CLASS="syntaxLang">
C:</EM>
		status = VSQueryname(vdata_id, vdata_name);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51953"></A>		status = VSQueryfields(vdata_id, fields);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51954"></A>		status = VSQueryinterlace(vdata_id, &amp;interlace_mode);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51955"></A>		status = VSQuerycount(vdata_id, &amp;n_records);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51925"></A>		vdata_tag = VSQuerytag(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51929"></A>		vdata_ref = VSQueryref(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51933"></A>		status = VSQueryvsize(vdata_id, &amp;vdata_vsize);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-51896"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = vsqfname(vdata_id, vdata_name)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51986"></A>		status = vsqfflds(vdata_id, fields)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51987"></A>		status = vsqfintr(vdata_id, interlace_mode)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51988"></A>		status = vsqfnelt(vdata_id, n_records)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51989"></A>		vdata_tag = vsqtag(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51990"></A>		vdata_ref = vsqref(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-51991"></A>		status = vsqfvsiz(vdata_id, vdata_vsize)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-11316"></A><A NAME="50593874_marker-11315"></A>All VSQuery routines except <EM CLASS="FunctionName">
VSQuerytag</EM>
 and <EM CLASS="FunctionName">
VSQueryref</EM>
 have two arguments. The first argument identifies the vdata to be queried. The second argument is the type of vdata information being requested.</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16428"></A><EM CLASS="FunctionName">
VSQueryname</EM>
<A NAME="50593874_marker-16933"></A> retrieves the name of the specified vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16430"></A><EM CLASS="FunctionName">
VSQueryfields</EM>
<A NAME="50593874_marker-16935"></A> retrieves the names of the fields in the specified vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-56213"></A><EM CLASS="FunctionName">
VSQueryinterlace</EM>
<A NAME="50593874_marker-56212"></A> retrieves the interlace mode of the specified vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-56214"></A><EM CLASS="FunctionName">
VSQuerycount</EM>
<A NAME="50593874_marker-57093"></A> retrieves the number of records in the specified vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-56216"></A><EM CLASS="FunctionName">
VSQuerytag</EM>
<A NAME="50593874_marker-56215"></A> returns the tag of the specified vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-56218"></A><EM CLASS="FunctionName">
VSQueryref</EM>
<A NAME="50593874_marker-56217"></A> returns the reference number of the specified vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-57104"></A><EM CLASS="FunctionName">
VSQueryvsize</EM>
<A NAME="50593874_marker-57103"></A> retrieves the size, in bytes, of a record in the specified vdata.</LI>
</UL>
<P CLASS="Body">
<A NAME="50593874_pgfId-57108"></A><EM CLASS="FunctionName">
VSQuerytag</EM>
 and <EM CLASS="FunctionName">
VSQueryref</EM>
 return the tag and reference number, respectively, or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). All other routines return <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for these routines are listed in <EM CLASS="Synopsis3">
<A HREF="UG_html-4.htm#50593874_39289" CLASS="XRef">Table 4S</A></EM>
.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-58217"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_39289"></A>VSQuery Routines Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58055"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58056"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58057"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58059"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58061"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58065"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58071"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-58073"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58078"></A>VSQ<A NAME="50593874_marker-58077"></A>ueryname</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58079"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58080"></A>(vsqfname)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58082"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58084"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58086"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58088"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58092"></A>vdata_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58094"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58096"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58098"></A>Name of the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58101"></A>VSQ<A NAME="50593874_marker-58100"></A>ueryfields</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58102"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58103"></A>(vsqfflds)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58105"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58107"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58109"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58111"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58115"></A>fields</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58117"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58119"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58121"></A>Comma-separated list of the field names in the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58124"></A>VSQue<A NAME="50593874_marker-58123"></A>ryinterlace</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58125"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58126"></A>(vsqfintr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58128"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58130"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58132"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58134"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58138"></A>interlace_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58140"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58142"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58144"></A>Interlace mode</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58147"></A>VSQ<A NAME="50593874_marker-58146"></A>uerycount</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58148"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58149"></A>(vsqfnelt)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58151"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58153"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58155"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58157"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58161"></A>n_records</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58163"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58165"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58167"></A>Number of records in the vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58170"></A>VSQu<A NAME="50593874_marker-58169"></A>eryvsize</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58171"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58172"></A>(vsqfvsiz)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58174"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58176"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58178"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58180"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58184"></A>vdata_size</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58186"></A>int32 *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58188"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58190"></A>Size in bytes of the vdata record</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58193"></A>VSQue<A NAME="50593874_marker-58192"></A>rytag</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58194"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58195"></A>(vsqtag)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58197"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58199"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58201"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58203"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58206"></A>VSQu<A NAME="50593874_marker-58205"></A>eryref</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-58207"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-58208"></A>(vsqref)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58210"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58212"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-58214"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-58216"></A>Vdata identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-58220"></A>	4.9.5	<A NAME="50593874_13523"></A>Other V<A NAME="50593874_marker-58219"></A>data Information Retrieval Routines</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-83709"></A>The routines described in this section, with names prefaced by “VS”, are used to obtain specific types of vdata information. The syntax of these routines are as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-83710"></A><EM CLASS="syntaxLang">
C:</EM>
		num_of_records = VSelts(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-83711"></A>		num_of_fields = VSgetfields(vdata_id, fieldname_list);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52067"></A>		interlace_mode = VSgetinterlace(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-57329"></A>		size_of_fields = VSsizeof(vdata_id, fieldname_list);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-57348"></A>		status = VSgetname(vdata_id, vdata_name);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-57330"></A>		status = VSgetclass(vdata_id, vdata_class);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-57332"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	num_of_records = vsfelts(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52164"></A>		num_of_fields = vsfgfld(vdata_id, fieldname_list)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52165"></A>		interlace_mode = vsfgint(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-57371"></A>		size_of_fields = vsfsiz(vdata_id, fieldname_list)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52166"></A>		status = vsfgnam(vdata_id, vdata_name)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-57377"></A>		status = vsfcls(vdata_id, vdata_class)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-52175"></A>With the exception of <EM CLASS="FunctionName">
VSgetclass</EM>
, the information obtained through these routines can also be obtained through <EM CLASS="FunctionName">
VSinquire</EM>
. <EM CLASS="FunctionName">
VSinquire</EM>
 provides a way to query commonly used vdata information with one routine call. The VS routines in this section are useful in situations where the HDF programmer wishes to obtain only specific information. </P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16371"></A><EM CLASS="FunctionName">
VSelts</EM>
<A NAME="50593874_marker-16950"></A> returns the number of records in the specified vdata or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16373"></A><EM CLASS="FunctionName">
VSgetfields</EM>
<A NAME="50593874_marker-16952"></A> retrieves the names of all the fields in the specified vdata and returns the number of retrieved fields or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16374"></A><EM CLASS="FunctionName">
VSgetinterlace</EM>
<A NAME="50593874_marker-16953"></A> returns the interlace mode of the specified vdata or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-57365"></A><EM CLASS="FunctionName">
VSsizeof</EM>
<A NAME="50593874_marker-57364"></A> returns the size, in bytes, of the specified fields or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16375"></A><EM CLASS="FunctionName">
VSgetname</EM>
<A NAME="50593874_marker-16954"></A> retrieves the name of the specified vdata and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-57358"></A><EM CLASS="FunctionName">
VSgetclass</EM>
<A NAME="50593874_marker-57357"></A> retrieves the class of the specified vdata and returns either <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
).</LI>
</UL>
<P CLASS="Body">
<A NAME="50593874_pgfId-8550"></A>The parameters for these routines are described in <A HREF="UG_html-4.htm#50593874_30864" CLASS="XRef">Table 4T</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-8663"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_30864"></A>VS<A NAME="50593874_marker-16956"></A>elts, VS<A NAME="50593874_marker-16958"></A>getfields, V<A NAME="50593874_marker-16959"></A>Sgetinterlace, VSsizeof,<A NAME="50593874_marker-16960"></A> VSgetname, <A NAME="50593874_marker-16961"></A>and VS<A NAME="50593874_marker-57470"></A>getclass Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-8559"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50040"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-8560"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-8562"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-8564"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-8566"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-8572"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-16030"></A>FORTRAN -77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8576"></A>VSelts</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50041"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8674"></A>(vsfelts)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8578"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8580"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16032"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-8582"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8608"></A>VSgetfields</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50043"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8676"></A>(vsfgfld)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8610"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8612"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16038"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-8614"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8618"></A>fieldname_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8620"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16040"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16000"></A>List of field names to be queried</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8624"></A>VSgetinterlace</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50044"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8679"></A>(vsfgint)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8626"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8628"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16042"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-8630"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-57403"></A>VSsizeof</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-57404"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-57405"></A>(vsfsiz)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57407"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57409"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57411"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-57413"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57417"></A>fieldname_list</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57419"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57421"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-57423"></A>List of field names to be queried</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8632"></A>VSgetname</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50045"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-8680"></A>(vsfgnam)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8634"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8636"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16044"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-8638"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8642"></A>vdata_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-8644"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16046"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-8646"></A>Vdata name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-57381"></A>VSgetclass</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-57382"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-57383"></A>(vsfcls)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57385"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57387"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57389"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-57391"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57395"></A>vdata_class</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57397"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-57399"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-57401"></A>Class name of the vdata to be queried</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593874_pgfId-8496"></A>	4.9.6	<A NAME="50593874_24471"></A>VF<A NAME="50593874_marker-16962"></A> Field Information Retrieval Routines</H6>
<P CLASS="Body">
<A NAME="50593874_pgfId-83212"></A>Routines whose names are prefaced by “VF” are used for obtaining information about specific fields in a vdata. The syntax of these routines are as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-83218"></A><EM CLASS="syntaxLang">
C:</EM>
		field_name = VFfieldname(vdata_id, field_index);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-83214"></A>		field_file_size = VFfieldesize(vdata_id, field_index);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52201"></A>		field_mem_size = VFfieldisize(vdata_id, field_index);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52202"></A>		num_of_fields = VFnfields(vdata_id);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52203"></A>		field_order = VFfieldorder(vdata_id, field_index);</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52204"></A>		field_type = VFfieldtype(vdata_id, field_index);</P>
<P CLASS="FM1-syntax">
<A NAME="50593874_pgfId-52255"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	field_name = vffname(vdata_id, field_index, field_name)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52256"></A>		field_file_size = vffesiz(vdata_id, field_index)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52257"></A>		field_mem_size = vffisiz(vdata_id, field_index)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52258"></A>		num_of_fields = vfnflds(vdata_id)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52274"></A>		field_order = vffordr(vdata_id, field_index)</P>
<P CLASS="syntax">
<A NAME="50593874_pgfId-52275"></A>		field_type = vfftype(vdata_id, field_index)</P>
<P CLASS="Body">
<A NAME="50593874_pgfId-52276"></A>The functionality of each of the VF routines is as follows: </P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16130"></A><EM CLASS="FunctionName">
VFfieldname</EM>
<A NAME="50593874_marker-57538"></A> returns the name of the specified field.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-57505"></A><EM CLASS="FunctionName">
VFfieldesize</EM>
<A NAME="50593874_marker-57504"></A> returns the size of the specified field as stored in the HDF file. This is the size of the field as tracked by the HDF library.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-57506"></A><EM CLASS="FunctionName">
VFfieldisize</EM>
<A NAME="50593874_marker-57510"></A> returns the size of the specified field as stored in memory. This is the native machine size of the field.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16275"></A><EM CLASS="FunctionName">
VFnfields</EM>
<A NAME="50593874_marker-57517"></A> returns the number of fields in the specified vdata.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16283"></A><EM CLASS="FunctionName">
VFfieldorder</EM>
<A NAME="50593874_marker-57524"></A> returns the order of the specified field.</LI>
<LI CLASS="Bullet">
<A NAME="50593874_pgfId-16286"></A><EM CLASS="FunctionName">
VFfieldtype</EM>
<A NAME="50593874_marker-57531"></A> returns the data type of the specified field.</LI>
</UL>
<P CLASS="Body">
<A NAME="50593874_pgfId-16366"></A>If the operations are unsuccessful, these routines return <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). The parameters for all of these routines are described in <A HREF="UG_html-4.htm#50593874_18897" CLASS="XRef">Table 4U</A>.<A NAME="50593874_marker-83575"></A></P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593874_pgfId-9776"></A><DIV>
<IMG SRC="UG_html-21.gif" ALT="">
</DIV>
<A NAME="50593874_18897"></A>VF Routines Parameter Lists</H6>
<TABLE>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-16164"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50047"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593874_pgfId-19995"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-16166"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-16168"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-16170"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-16176"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593874_pgfId-19969"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-16180"></A>VFfieldname</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-50050"></A>[char *]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-19994"></A>(vffname)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16182"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16184"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19971"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16186"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16190"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16192"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19973"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16194"></A>Field index</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115332"></A>field_name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115334"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-115336"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-115338"></A>Field name (FORTRAN-77 only)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-16196"></A>VFfieldesize</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50048"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-20007"></A>(vffesiz)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16198"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16200"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19975"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16202"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16206"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16208"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19977"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16210"></A>Field index</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-16212"></A>VFfieldisize</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50049"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-20008"></A>(vffisiz)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16214"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16216"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19979"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16218"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16222"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16224"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19981"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16226"></A>Field index</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-16228"></A>VFnfields</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50053"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-19965"></A>(vfnflds)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16230"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16232"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19983"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16234"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-16236"></A>VFfieldorder</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50051"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-20017"></A>(vffordr)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16238"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16240"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19985"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16242"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16246"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16248"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19987"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16250"></A>Field index</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-16252"></A>VFfieldtype</H6>
<H6 CLASS="ReturnType">
<A NAME="50593874_pgfId-50052"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593874_pgfId-20002"></A>(vfftype)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16254"></A>vdata_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16256"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19989"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16258"></A>Vdata identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16262"></A>field_index</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-16264"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593874_pgfId-19991"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593874_pgfId-16266"></A>Field index</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593874_pgfId-11568"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="50593875_pgfId-2487"></A>&nbsp;</P>
</DIV>
</DIV>
</DIV>
<HR><P><table id="Botofpage" border="0" width="850" cellspacing="0" cellpadding="0">      <tr>        <td align="left">        HDF 4.2.12 - June 2016<br/>        <a href="THG_Copyright.html">Copyright</a>        <td align="right">          <span style="font-size: 12px; font-weight: bold">            The HDF Group<br />          </span>          <span style="font-size: 12px">            <a href="http://www.hdfgroup.org">www.hdfgroup.org</a><br />            <img valign="bottom" border="0" src="images/help.jpg" height="12" alt="The HDF Group" valign="top" />          </span>        </td>      </tr>    </table></BODY>
</HTML>
