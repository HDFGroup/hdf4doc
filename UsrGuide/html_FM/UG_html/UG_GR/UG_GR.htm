
<!DOCTYPE HTML>
<html>
<head>
 <meta http-equiv="X-UA-Compatible" content="IE=edge" />
 <meta name="OriginalFile" content="C:\hdf\H4\releases\4.2.12\Doc\hdf4doc\UsrGuide\src\UG_GR.fm" />
 <meta name="Originator" content="ImportMif" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=100%, initial-scale=1" />
<meta name="generator" content="Adobe FrameMaker 12" />
<title>HDF User’s Guide - 4.2.12</title>
<link href="../../template/Theme1_Standard/main.css" type="text/css" rel="stylesheet" />
<link href="../../template/Theme1_Standard/jqueryui-custom.css" type="text/css" rel="stylesheet" />
 <link rel="stylesheet" href="UG_GR.css" type="text/css" />
 <link rel="StyleSheet" href="../../Responsive_HTML5_stylesheet.css" type="text/css" /><script type="text/javascript" language="JavaScript">//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]></script><style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadcsh.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/showhidecontrols.js"></script>
<script type="text/javascript" src="../../template/scripts/pageloader.js"></script>
<script type="text/javascript" src="../../template/scripts/toctree.js"></script>
<script type="text/javascript" src="../../template/scripts/toctreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/indextree.js"></script>
<script type="text/javascript" src="../../template/scripts/indextreeloader.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylist.js"></script>
<script type="text/javascript" src="../../template/scripts/glossarylistloader.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
<script type="text/javascript" src="../../template/scripts/searchfield.js"></script>
<script type="text/javascript" src="../../template/scripts/tabpanels.js"></script>
<script type="text/javascript" >
gTocPageHtml = "{%ICON%}<span  class=\"wTOCTreePageText\">{%LINK_NAME%}</span>";
gTocBookClosedHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocBookOpenHtml = "{%ICON%}<span  class=\"wTOCTreeCloseBookText\">{%LINK_NAME%}</span>";
gTocUrlHtml = "{%ICON%}<span  class=\"wTOCTreeLinkText\">{%LINK_NAME%}</span>";
gTocPageIconSrc = "../../template/Theme1_Standard/TOCTreePage.png";
gTocPageIconHoverSrc = "../../template/Theme1_Standard/TOCTreePageHover.png";
gTocPageIconSelSrc = "../../template/Theme1_Standard/TOCTreePageSelected.png";
gTocPageIconClass = "wTOCTreePageIcon";
gTocPageIconStyle = "";
gTocBookClosedIconSrc = "../../template/Theme1_Standard/TOCTreeCloseBook.png";
gTocBookClosedIconHoverSrc = "../../template/Theme1_Standard/TOCTreeCloseBookHover.png";
gTocBookClosedIconSelSrc = "../../template/Theme1_Standard/TOCTreeCloseBookSelected.png";
gTocBookClosedIconClass = "wTOCTreeCloseBookIcon";
gTocBookClosedIconStyle = "";
gTocBookOpenIconSrc = "../../template/Theme1_Standard/TOCTreeOpenBook.png";
gTocBookOpenIconHoverSrc = "../../template/Theme1_Standard/TOCTreeOpenBookHover.png";
gTocBookOpenIconSelSrc = "../../template/Theme1_Standard/TOCTreeOpenBookHoverSelected.png";
gTocBookOpenIconClass = "wTOCTreeOpenBookIcon";
gTocBookOpenIconStyle = "";
gTocUrlIconSrc = "../../template/Theme1_Standard/TOCTreeLink.png";
gTocUrlIconHoverSrc = "../../template/Theme1_Standard/TOCTreeLinkHover.png";
gTocUrlIconSelSrc = "../../template/Theme1_Standard/TOCTreeLinkSelected.png";
gTocUrlIconClass = "wTOCTreeLinkIcon";
gTocUrlIconStyle = "";
</script>
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
</script>
<script type="text/javascript" >
gIdxKWHtml = "<span  class=\"wIdxKeywordText\">{%LINK_NAME%}</span>";
	gIdxLinkHtml = "<span  class=\"wIdxLinkText\">{%LINK_NAME%}</span>";
	gIdxCategoryHtml = "<span  class=\"wIdxAlphabetText\">{%LINK_NAME%}</span>";
</script>
<script type="text/javascript" >
gTopicId = "8.0_1";
</script>
<script type="text/javascript" >
gGloTermHtml = "<span  class=\"wGloTermText\">{%LINK_NAME%}</span>";
	gGloDefHtml = "<span  class=\"wGloDefinitionText\">{%LINK_NAME%}</span>";
	gGloCategoryHtml = "<span  class=\"wGloAlphabetText\">{%LINK_NAME%}</span>";
</script>
 <link rel="SHORTCUT ICON" href="../../Responsive HTML5_favicon.png" />
</head>

<body>
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

<div class="floatholder">
	<div class="phone_scrollarea overthrow">
		<div class="header">
			<div class="logo">
				<a href="../UG_Intro/UG_Intro.htm" class="homelink"><img src="../../template/Theme1_Standard/logo.png" alt="Logo" id="wLogoImage" style=" border:none; width:100%; max-width:90px;" border="0" /></a> 
				 
			</div>
			<div class="title">
				<a href="../UG_Intro/UG_Intro.htm" class="homelink"><span>HDF User’s Guide - 4.2.12</span></a> 
				 
			</div>
		</div>
		<div class="sidebar">
			<div data-showin="Always" class="wTabbedPanel" id="tabbedpanel">
				<ul class="wTabGroup" id="tab" data-tabid="tocTabButton" style="margin: 0px;">
					<li class="wTab" id="tocTabButton" data-contentid="tocTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/toc.png" class="normal" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButton" style=" border:none; width:100%; max-width:42px;" border="0" /><img src="../../template/Theme1_Standard/toc_hover.png" class="hover" alt="Table of Contents" title="Table of Contents" id="xmlEditorTOCSidebarButtonHover" style=" border:none; width:100%; max-width:48px;" border="0" /></li>
					<li class="wTab" id="idxTabButton" data-contentid="idxTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/index.png" class="normal" alt="Index" title="Index" id="xmlEditorIDXSidebarButton" style=" border:none; width:100%; max-width:48px;" border="0" /><img src="../../template/Theme1_Standard/index_hover.png" class="hover" alt="Index" title="Index" id="xmlEditorIDXSidebarButtonHover" style=" border:none; width:100%; max-width:48px;" border="0" /></li>
					<li class="wTab" id="gloTabButton" data-contentid="gloTabPane" onmouseout="onTabHoverOut(this, 'tab')" data-class="wTab" ontouchend="onTabHoverOut(this, 'tab')" onclick="selectTab(this, 'tab')" ontouchstart="onTabHover(this, 'tab')" data-classhover="wTabHover" style="display: inline;" ontouchmove="onTabHoverOut(this, 'tab')" data-classsel="wTabSelected" onmouseover="onTabHover(this, 'tab')"><img src="../../template/Theme1_Standard/glo.png" class="normal" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButton" style=" border:none; width:100%; max-width:48px;" border="0" /><img src="../../template/Theme1_Standard/glo_hover.png" class="hover" alt="Glossary" title="Glossary" id="xmlEditorGLOSidebarButtonHover" style=" border:none; width:100%; max-width:48px;" border="0" /></li>
				</ul>
				<div class="wTabContentGroup">
					<div id="tocTabPane" class="wTabContent">
						<div id="toc" class="wTOCTree" tabindex="190">
							
							
							
							
						</div>
					</div>
					<div id="idxTabPane" class="wTabContent">
						<div id="idx" class="wIndex">
							<input class="wIdxFilter" id="idxFilterBox" type="text" data-placeholder="Filter Keyword" onkeyup="filterIdx()"></input>
							
							
							
						</div>
					</div>
					<div id="gloTabPane" class="wTabContent">
						<div id="glo" class="wGlossary">
							<input class="wGloFilter" id="gloFilterBox" type="text" data-placeholder="Filter Term" onkeyup="filterGlo()"></input>
							
							
							
						</div>
					</div>
				</div>
			</div>
			<div class="closebutton buttonOpened">
				&#160; 
			</div>
		</div>
		<div class="content">
			<div class="desktop_functionholder">
				<div class="searchholder">
					<div class="wSearchField">
						<input id="searchBox" class="wSearchField" type="search" data-placeholder="-Search-" onkeydown="searchHelp(event, 'searchBox')" data-search="true" /><a class="wSearchLink" onclick="searchHelp(null, 'searchBox')" href="#"><img src="../../template/Theme1_Standard/Search.png" alt="" id="xmlEditwSearchLink" class="wSearchLink" border="0" style="width:100%; max-width:28px" /></a> 
						 
					</div>
				</div>
				<div class="brsNext">
					<a id="browseSeqNext" class="wBSNextButton" href="../UG_Palettes/UG_Palettes.htm"><img alt="" src="../../template/Theme1_Standard/BSNext.png" class="wBSNextButton normal" id="xmlEditorBSNextButton" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSNext_hover.png" class="wBSNextButton hover" id="xmlEditorBSNextButtonHover" border="0" style="width:100%; max-width:48px" /></a> 
					 
				</div>
				<div class="print">
					<a href="javascript:window.print()" class="wPrintButton"><img src="../../template/Theme1_Standard/Print.png" alt="" class="wPrintButton normal" id="xmlEditorPrintButton" border="0" style="width:100%; max-width:48px" /><img src="../../template/Theme1_Standard/Print_hover.png" alt="" class="wPrintButton hover" id="xmlEditorPrintButtonHover" border="0" style="width:100%; max-width:48px" /></a> 
				</div>
				<div class="brsBack">
					<a id="browseSeqBack" class="wBSBackButton" href="../UG_RIS24s/UG_RIS24s.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton normal" id="xmlEditorBSBackButton" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSBack_hover.png" class="wBSBackButton hover" id="xmlEditorBSBackButtonHover" border="0" style="width:100%; max-width:56px" /></a> 
					 
				</div>
			</div>
			<div class="contentholder">
				<div class="mobile_browseholder">
					<div class="brsBack">
						<a id="browseSeqBack0" class="wBSBackButton" href="../UG_RIS24s/UG_RIS24s.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton" border="0" style="width:100%; max-width:48px" /></a> 
					</div>
					<div class="brsNext">
						<a id="browseSeqNext0" class="wBSNextButton" href="../UG_Palettes/UG_Palettes.htm"><img alt="" src="../../template/Theme1_Standard/BSNext.png" class="wBSNextButton" border="0" style="width:100%; max-width:48px" /></a> 
					</div>
				</div>
				<a name="content_top_placeholder"></a> 
				<div class="wTopic" id="rh_default_topic_placeholder_id">

 <p class="Body">&nbsp;</p>
 <p class="ChapTitleUnNum"><a name="IX_General_raster_image"></a><span class="FM_ChapterNumber">Chapter 8<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_29022_General_Raster"></a>General Raster Images (GR API)</p>
 <p class="Body">&nbsp;</p>
 <p class="Heading1">8.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Chapter Overview</p>
 <p class="Body">This chapter describes the general raster (GR) data model, the GR interface (also called the GR&nbsp;API), and the interface routines used to manipulate GR data objects. The GR data model is designed to provide a flexible means of manipulating raster images. There were two other inter&#173;faces that worked with raster images, the DFR8 interface (<a href="../UG_RIS8s/UG_RIS8s.htm#XREF_20224_8_Bit_Raster">Chapter 6<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;8-Bit Raster Images (DFR8 API)&quot;</a>) and the DF24 interface (<a href="../UG_RIS24s/UG_RIS24s.htm#XREF_18201_24_bit_Raster">Chapter 7<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;24-bit Raster Images (DF24 API)&quot;</a>) but the GR interface supersedes them.</p>
 <p class="Heading2"><a name="IX_General_raster_image_1"></a>8.2<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The GR Data Model</p>
 <p class="Body">HDF users familiar with the SD interface will find certain aspects of the GR data model similar to the SD data model. The interfaces are similar in that both interfaces support data storage in multi&#173;ple files, attributes, compression, and chunking. They are dissimilar in that palettes can be created and attached to an image through GR interface routines, customized dimension information is not supported in the GR interface, and GR dataset chunking is constrained to two dimensions. </p>
 <p class="Figure"><span class="StepNumber">FIGURE 8a<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_36422_FIGURE_9a_Contents"></a>GR Data Set Contents</p>
 <div align="center"><img alt="UG_GR00001.png" style=" width:100%; margin-left:30pt; max-width:486.072pt;" id="image0" src="UG_GR00001.png" />
 </div>
 <p class="Body">The terms <span class="Definition">GR data set</span>, <span class="Definition">raster image</span>, and <span class="Definition">image </span>are used interchangeably in this chapter.</p>
 <p class="Body">Refer to <a href="#XREF_36422_FIGURE_9a_Contents">Figure&nbsp;8a on page&nbsp;295</a> for a graphical overview of the raster image, or GR data set, struc&#173;ture. Note that GR data sets consist of required and optional components.</p>
 <p class="Heading3"><a name="IX_required_objects_5"></a>8.2.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_36435_8_3_1_Required_GR"></a>Required GR Data Set Components</p>
 <p class="Body">Every GR data set must contain the following components: <span class="Definition">image array</span>, <span class="Definition">name</span>, <span class="Definition">pixel type</span>, and <span class="Definition">dimensions</span>. The name, dimensions, and pixel type must be supplied by the user at the time the GR data set is defined.</p>
 <p class="FM_BodyBold"><a name="IX_description_244"></a>Image Array</p>
 <p class="Body">An <span class="Definition">image array</span>&#160;is a two-dimensional array of pixels. This is the primary data component of the GR model and will be discussed later in this section; it can be compressed, chunked, and/or stored in external files. Refer to <a href="#XREF_19774_GRsetcompress">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.6.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>&#160;for a description of raster image compression and <a href="#XREF_13823_8_6_3_External">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.6.4<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a> for a description of external image storage.</p>
 <p class="Body"><a name="IX_description_246"></a><a name="IX_description_245"></a>A raster image has an index and a reference number associated with it. The <span class="Definition">index</span> is a non-nega&#173;tive integer that describes the relative position of the raster image in the file. A valid index ranges from 0 to the total number of images in the file minus 1. The <span class="Definition">reference number</span> is a unique posi&#173;tive integer assigned to the raster image by the GR interface when the image is created. Various GR interface routines can be used to obtain an image index or reference number depending on the available information about the raster image. The index can also be determined if the sequence in which the images are created in the file is known.</p>
 <p class="Body"><a name="IX_see_Raster_image"></a>In the GR interface, a <span class="Definition">raster image identifier</span>&#160;uniquely identifies a raster image within the file. The identifier is generated by the GR interface access routines when a new GR data set is created or an existing one is selected. The identifier is then used by other GR interface routines to access the raster image until the access to this image is terminated. For an existing raster image, the index of the image can be used to obtain the identifier.</p>
 <p class="FM_BodyBold"><a name="IX_description_247"></a>Image Array Name</p>
 <p class="Body">Each image array has a <span class="Definition">name</span>&#160;consisting of a string of case-sensitive alphanumeric characters. The name must be provided by the calling program at the time the image is created, and cannot be changed afterward. Image array names do not have to be unique within a file, but if they are not it can be difficult to distinguish among the raster images in the file.</p>
 <p class="FM_BodyBold"><a name="IX_description_248"></a><a name="XREF_15606_8_3_1_3_Pixels_and"></a>Pixels and Pixel Type</p>
 <p class="Body">Each element in an image array corresponds to one <span class="Definition">pixel</span>&#160;and each pixel can consist of a number of color component values or <span class="Definition">pixel components</span>, e.g., Red-Green-Blue or RGB, Cyan-Magenta-Yellow-Black or CMYK, etc. Pixel components can be represented by different methods (8-bit lookup table or 24-bit direct representation, graphically depicted by <a href="../UG_RIS8s/UG_RIS8s.htm#XREF_89021_FIGURE_2_7a_The">Figure&nbsp;6a on page&nbsp;261</a>&#160;and <a href="../UG_RIS24s/UG_RIS24s.htm#XREF_36368_FIGURE_7b_The">Figure&nbsp;7b on page&nbsp;280</a>, respectively) and may have different data types. </p>
 <p class="Body"><a name="IX_data_type_1"></a>The data type of pixel components and the number of components in each pixel are collectively known as the <span class="Definition">pixel type</span>. The GR data model supports all of the HDF-supported data types. A list of these data types appears provided in <a href="../UG_Fundmtls/UG_Fundmtls.htm#XREF_13047_TABLE_2E_Standard">(See Table&nbsp;2F on page&nbsp;14)</a>.</p>
 <p class="Body">Pixels can be composed of any number of components.</p>
 <p class="FM_BodyBold">Dimensions</p>
 <p class="Body">Image array <span class="Definition">dimensions</span>&#160;specify the shape of the image array. A raster image array has two limited dimensions. The size of each dimension must be specified at the creation of the image and must be greater than 0.</p>
 <p class="Body"><a name="IX_required_objects_6"></a>The GR library does not allow the HDF user to add attributes to a dimension or to set dimension scale.</p>
 <p class="Heading3"><a name="IX_optional_objects_5"></a>8.2.2<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span>Optional GR Data Set Components</p>
 <p class="Body">There are two types of optional components available for inclusion in a GR data set: <span style="font-style : italic; font-weight : bold; ">palettes </span>and <span style="font-style : italic; font-weight : bold; ">attributes</span>. These components are only created when specifically requested by the calling pro&#173;gram; the GR interface does not provide predefined palettes or attributes.</p>
 <p class="FM_BodyBold"><a name="IX_description_249"></a>Palettes</p>
 <p class="Body"><span class="Definition">Palettes</span>&#160;are lookup tables attached to images and define a set of color values for each pixel value in the image array. The GR interface provides similar capabilities for storing and manipulating palettes as the DFP interface described in <a href="../UG_Palettes/UG_Palettes.htm#XREF_27404_Palettes_DFP_API">Chapter 9<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;Palettes (DFP API)&quot;</a>. However, the DFP inter&#173;face is restricted to single-file operations while the GR interface allows multifile palette opera&#173;tions.</p>
 <p class="Body">Eventually, all palette manipulation functionality will reside only within the GR interface. In the meantime, the single-file DFP routines are fully compatible with palettes created with the GR pal&#173;ette routines. The GR palette routines are described in <a href="#XREF_31041_9_10_Reading_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.11<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>.</p>
 <p class="FM_BodyBold"><a name="IX_description_250"></a>Attributes</p>
 <p class="Body"><span class="Definition">Attributes</span>&#160;contain auxiliary information about a file, a raster image, or both. The concept of attributes is described in <a href="../UG_SD/UG_SD.htm#XREF_13938_Scientific_Data">Chapter 3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;Scientific Data Sets (SD API)&quot;</a>.</p>
 <p class="Body"><a name="IX_General_raster_image_2"></a><a name="IX_optional_objects_6"></a>The GR interface does not support dimension attributes.</p>
 <p class="Heading2"><a name="IX_General_raster_image_3"></a>8.3<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>The GR Interface</p>
 <p class="Body">The GR consists of routines for storing, retrieving, and manipulating the data in GR data sets. </p>
 <p class="Heading3"><a name="IX_routine_categories_5"></a>8.3.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span>GR Interface Routines</p>
 <p class="Body">All C routine names in the GR interface have the prefix <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GR</span>&#160;and the equivalent FORTRAN-77 routine names are prefaced by <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mg</span>. All GR routines are classifiable within one of the following categories:</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="Definition">Access routines</span> initialize and terminate access to the GR interface and raster images.</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="Definition">Raster image manipulation routines</span>&#160;modify the data and metadata contained in a GR data set.</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="Definition">LUT manipulation routines</span>&#160;modify the palettes, also called color lookup tables or LUTs, contained in a GR data set.</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="Definition">Maintenance routines</span>&#160;create the data and metadata contained in a GR data set and modify global settings governing the format of the stored data.</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="Definition">Inquiry routines</span> return information about data contained in a GR data set.</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="Definition">Chunking routines</span> are used to define data chunking parameters, to retrieve chunking infor&#173;mation, and to write and read chunked GR data sets.</p>
 <p class="Body">The GR routines are listed in the following table and described further in subsequent sections of this chapter.</p>
 <p class="Figure"><a name="IX_routine_list_4"></a><span class="StepNumber">TABLE 8A<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>GR Library Routines</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:391.39pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 60.338pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Purpose</p>
</td>
  <td colspan="2" style="width : 130.247pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name7</p>
</td>
  <td rowspan="2" style="width : 200.801pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="5" style="width : 60.338pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableCategory"> Access</p>
</td>
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRstart</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgstart</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Initializes the GR interface (<a href="#XREF_19873_SDstart_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRcreate</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgcreat</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Creates a new raster image (<a href="#XREF_19873_SDstart_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRselect</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgselct</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Selects the raster image (<a href="#XREF_19873_SDstart_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRendaccess</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgendac</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Terminates access to the raster image (<a href="#XREF_27202_GRendaccess_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRend</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgend</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Terminates access to the GR interface (<a href="#XREF_27202_GRendaccess_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td rowspan="8" style="width : 60.338pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableCategory">Raster Image Manipulation</p>
</td>
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetattr</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mggnatt/</p>
  <p class="CellFunction">mggcatt</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Reads an attribute of a raster image or a file (<a href="#XREF_17499_GRgetattr">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.10.4<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRidtoref</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgid2rf</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Maps a raster image identifier to a reference number (<a href="#XREF_10010_GRreftoindex_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRnametoindex</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgn2ndx</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Maps the name of a raster image name to an index (<a href="#XREF_17067_8_8_5_Obtaining">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.5<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 19.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreadimage</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgrdimg/</p>
  <p class="CellFunction">mgrcimg</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Reads raster image data (<a href="#XREF_24692_GRreadimage">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.7.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreftoindex</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgr2idx</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Maps the reference number of a raster image to its index (<a href="#XREF_28236_8_8_4_Obtaining">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.4<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetattr</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgsnatt/</p>
  <p class="CellFunction">mgscatt</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Assigns an attribute to a raster image or a file (<a href="#XREF_33193_GRsetattr">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.10.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 19.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRwriteimage</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgwrimg/mgwcimg</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Writes raster image data (<a href="#XREF_11596_GRwriteimage">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.6.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreqimageil</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgrimil</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Sets the interlace mode of the image read for subsequent read oper&#173;ations (<a href="#XREF_26886_GRreqlutil">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.7.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td rowspan="6" style="width : 60.338pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableCategory">LUT &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Manipulation</p>
</td>
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetlutid</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mggltid</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Gets a palette identifier given the palette’s index (<a href="#XREF_13955_GRgetlutid">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.11.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRluttoref</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mglt2rf</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Maps a palette identifier to a reference number (<a href="#XREF_22530_GRluttoref">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.11.3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 19.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreadlut</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgrdlut/</p>
  <p class="CellFunction">mgrclut</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Reads palette data from a raster image (<a href="#XREF_24546_GRreadlut">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.11.7<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 19.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRwritelut</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgwrlut/</p>
  <p class="CellFunction">mgwclut</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Writes palette data to a raster image (<a href="#XREF_37998_GRwritelut">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.11.5<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreqlutil</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgrltil</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Sets the interlace mode of the next palette for subsequent read oper&#173;ations (<a href="#XREF_26886_GRreqlutil">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.7.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetnluts</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mggnluts</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Retrieves the number of palettes associated with an image &#160;(See the <span style="font-style : italic; ">HDF Reference Manual</span>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td rowspan="4" style="width : 60.338pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableCategory">Miscenlaneous</p>
</td>
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetcompress</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgscomp</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Specifies whether the raster image will be stored in a file as a com&#173;pressed raster image (<a href="#XREF_19774_GRsetcompress">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.6.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetcompinfo</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mggcompress</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Retrieves image compression type and compression information &#160;(<a href="#XREF_54086_8_9_6_Obtaining">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.6<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetexternalfile</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgsxfil</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Specifies that the raster image will be written to an external file (<a href="#XREF_10019_GRsetexternalfile">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.6.4.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetaccesstype</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">nmgsactp</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Sets the access for an RI to be either serial or parallel I/O ()</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td rowspan="5" style="width : 60.338pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableCategory">Inquiry</p>
</td>
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRattrinfo</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgatinf</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Retrieves information about an attribute (<a href="#XREF_11523_GRfindattr_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.10.3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRfindattr</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgfndat</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Finds the index of a data object's attribute given an attribute name (<a href="#XREF_11523_GRfindattr_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.10.3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRfileinfo</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgfinfo</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Retrieves the number of raster images and the number of global attributes in the file (<a href="#XREF_18290_GRfileinfo">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetiminfo</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mggiinf</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Retrieves general information about a raster image (<a href="#XREF_21293_GRgetiminfo">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetlutinfo</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgglinf</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Retrieves information about a palette (<a href="#XREF_15860_GRgetlutinfo">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.11.4<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="5" style="width : 60.338pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableCategory">Chunking</p>
</td>
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetchunk</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgschnk</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Creates chunked raster image (<a href="#XREF_24765_GRsetchunk">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.12.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetchunkinfo</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mggichnk</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Retrieves information about a chunked raster image (<a href="#XREF_33313_8_11_2_Obtaining">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.12.5<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetchunkcache</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgscchnk</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Sets maximum number of chunks to be cached (<a href="#XREF_36329_8_11_3_Setting_the">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.12.6<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreadchunk</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgrchnk/</p>
  <p class="CellFunction">mgrcchnk</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Reads a data chunk from a chunked raster image (pixel-interlace only) (<a href="#XREF_48842_GRreadchunk">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.12.4<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 74.376pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRwritechunk</p>
</td>
  <td style="width : 55.871pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">mgwchnk/</p>
  <p class="CellFunction">mgwcchnk</p>
</td>
  <td style="width : 200.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Writes a data chunk to a chunked raster image (pixel-interlace only) (<a href="#XREF_68057_GRwritechunk">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.12.3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>)</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Heading2">8.4<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Header Files Required by the GR Interface</p>
 <p class="FM_Body1"><a name="IX_SD_scientific_data_set_4"></a>The header file &quot;hdf.h&quot; must be included in any program that utilizes GR interface routines.</p>
 <p class="Heading2"><a name="IX_programming_model"></a>8.5<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Programming Model for the GR Interface</p>
 <p class="Body">As with the SD interface, the GR interface relies on the calling program to initiate and terminate access to files and data sets to support multifile access. The GR programming model for accessing a raster image is as follows:</p>
 <p class="FM_1Step"><span class="StepNumber">1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Open an HDF file.</p>
 <p class="Step"><span class="StepNumber">2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Initialize the GR interface.</p>
 <p class="Step"><span class="StepNumber">3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Open an existing raster image or create a new raster image.</p>
 <p class="Step"><span class="StepNumber">4.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Perform desired operations on the raster image.</p>
 <p class="Step"><span class="StepNumber">5.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Terminate access to the raster image.</p>
 <p class="Step"><span class="StepNumber">6.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Terminate access to the GR interface by disposing of the interface identifier.</p>
 <p class="Step"><span class="StepNumber">7.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Close the HDF file.</p>
 <p class="Body">To access a single raster image data set in an HDF file, the calling program must contain the fol&#173;lowing calls:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>file_id = Hopen(filename, access_mode, n_dds_block);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gr_id = GRstart(file_id);</p>
 <p class="FM_syntaxortop"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = GRselect(gr_id, ri_index);</p>
 <p class="FM_syntaxorbot"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = GRcreate(gr_id, name, n_comps, data_type, interlace_mode, dim_sizes);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;Optional operations&gt;</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRendaccess(ri_id);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRend(gr_id);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = Hclose(file_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>file_id = hopen(filename, access_mode, n_dds_block)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gr_id = mgstart(file_id)</p>
 <p class="FM_syntaxortop"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = mgselct(gr_id, ri_index)</p>
 <p class="FM_syntaxorbot"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; "><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = mgcreat(gr_id, name, n_comps, data_type, interlace_mode, dim_sizes)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;Optional operations&gt;</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgendac(ri_id)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgend(gr_id)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = hclose(file_id)</p>
 <p class="Body">To access several files at the same time, a calling program must obtain a separate interface identi&#173;fier for each file to be opened. Similarly, to access more than one raster image, a calling program must obtain a separate data set identifier for each data set.</p>
 <p class="Body">Because every file and raster image is assigned its own identifier, the order in which files and data sets are accessed is very flexible as long as all file and raster image identifiers are individually dis&#173;carded before the end of the calling program.</p>
 <p class="Heading3"><a name="IX_accessing"></a>8.5.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_19873_SDstart_and"></a>Accessing Images and Files: GRstart, GRselect, and GRcreate</p>
 <p class="Body">In the GR interface, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hopen</span>&#160;opens the files and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span> initiates the GR interface. Note the con&#173;trast to the SD interface, where <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDstart</span>&#160;performs both tasks. For information on the use of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hopen</span>, refer to <a href="../UG_Fundmtls/UG_Fundmtls.htm#XREF_13138_HDF_Fundamentals">Chapter 2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;HDF Fundamentals&quot;</a><span style="font-style : italic; ">. </span>For information on <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDstart</span>, refer to <a href="../UG_SD/UG_SD.htm#XREF_13938_Scientific_Data">Chapter 3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;Scientific Data Sets (SD API)&quot;</a>.</p>
 <p class="Body"><a name="IX_description_251"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>&#160;initializes the GR interface and must be called once after <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hopen</span>&#160;and before any other GR routines are called. It takes one argument, <span class="VarName">file_id</span>, the file identifier returned by <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hopen</span>, and returns the interface identifier <span class="VarName">gr_id</span>&#160;or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) upon unsuccessful completion. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hopen</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span> can be called several times to access more than one file.</p>
 <p class="Body"><a name="IX_description_252"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>&#160;specifies the given image as the current image to be accessed. It takes two arguments, the GR interface identifier <span class="VarName">gr_id</span>&#160;and the raster image index <span class="VarName">ri_index</span>, and returns the raster image identifier <span class="VarName">ri_id</span>&#160;or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) upon unsuccessful completion. The GR interface identifier is returned by <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>. The raster image index specifies the position of the image relative to the beginning of the file; it is zero-based, meaning that the index of the first image in the file is <span class="FM_Superscript" style="font-family : Times New Roman; font-style : normal; font-weight : normal; font-size  : 7.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">0</span>. The index of a raster image can be obtained from the image’s name using the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRnametoindex</span>&#160;or from the image’s reference number using <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreftoindex</span>. These routines are discussed in <a href="#XREF_28236_8_8_4_Obtaining">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.4<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>&#160;and <a href="#XREF_17067_8_8_5_Obtaining">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.5<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>. The index value must be less than the total number of raster images in the file; that number can be obtained using <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo</span>, described in <a href="#XREF_18290_GRfileinfo">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.9.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>.</p>
 <p class="Body">The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>&#160;are further defined in <a href="#XREF_12133_TABLE_9B_GRstart">(See Table&nbsp;8B on page&nbsp;302)</a>.</p>
 <p class="Body"><a name="IX_description_253"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>&#160;defines a new raster image using the arguments <span class="VarName">gr_id</span>, <span class="VarName">name</span>, <span class="VarName">n_comps</span>, <span class="VarName">data_type</span>, <span class="VarName">interlace_mode</span>, and <span class="VarName">dim_sizes</span>. Once a data set is created, you cannot change its name, data type, dimension, or number of components. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>&#160;does not actually write the image to the file; this occurs only when <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>&#160;is called. Thus, failing to call <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>&#160;properly will cause a loss of data.</p>
 <p class="Body">The buffer <span class="VarName">name</span>&#160;contains the name of the image; it must not exceed <span class="DefName">H4_MAX_GR_NAME </span>(or<span class="DefName"> 256</span>). The parameter <span class="VarName">n_comps</span>&#160;specifies the number of pixel components in the raster image; it must have a value of at least 1. The parameter <span class="VarName">data_type</span>&#160;specifies the data type of the image data; it can be any of the data types supported by the HDF library. The HDF supported data type are defined in the header file “hntdefs.h” and listed in <a href="../UG_Fundmtls/UG_Fundmtls.htm#XREF_13047_TABLE_2E_Standard"><span class="FM_Synopsis2" style="font-family : Times New Roman; font-style : normal; font-weight : normal; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">(See Table&nbsp;2F on page&nbsp;14)</span></a>.</p>
 <p class="Body"><a name="IX_description_256"></a><a name="IX_description_255"></a><a name="IX_description_254"></a>The parameter <span class="VarName">interlace_mode</span>&#160;specifies the interlacing in which the raster image is to be written; it can be set to either <span class="DefName">MFGR_INTERLACE_PIXEL</span><span style="font-size  : 8.0pt; ">&#160;</span>(or <span class="DefName">0</span>), <span class="DefName">MFGR_INTERLACE_LINE</span> (or<span class="DefName"> 1</span>), or <span class="DefName">MFGR_INTERLACE_COMPONENT</span> (or<span class="DefName"> 2</span>). These definitions respectively correspond to pixel interlac&#173;ing, line interlacing, and component interlacing. The first two interlacing modes are illustrated for the instance of 24-bit pixel representation in <a href="../UG_RIS24s/UG_RIS24s.htm#XREF_17407_FIGURE_7c_RGB">Figure&nbsp;7c on page&nbsp;281</a>&#160;of <a href="../UG_RIS24s/UG_RIS24s.htm#XREF_18201_24_bit_Raster">Chapter 7<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;24-bit Raster Images (DF24 API)&quot;</a>. &#160;Component interlacing, as the name implies, describes interlacing raster data by color component. &#160;Note that images created with the GR interface are actually written to disk in pixel interlace mode; any user-specified interlace mode is stored in the file with the image and the image is automatically converted to that mode when it is read with a GR interface func&#173;tion.</p>
 <p class="Body">The parameter <span class="VarName">dim_sizes</span>&#160;specifies the size of the two dimensions of the image. The dimension sizes must be specified; their values must be at least 1.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>&#160;returns the value of the raster image identifier if successful or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>, and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>&#160;are further defined in <a href="#XREF_12133_TABLE_9B_GRstart">(See TABLE 8B)</a>.</p>
 <p class="Heading3"><a name="IX_terminating_access_to_1"></a>8.5.2<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_27202_GRendaccess_and"></a>Terminating Access to Images and Files: GRendaccess and GRend</p>
 <p class="Body"><a name="IX_description_257"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>&#160;disposes of the raster image identifier <span class="VarName">ri_id</span>&#160;and terminates access to the data set initiated by the corresponding call to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>&#160;or <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>. The calling program must make one <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>&#160;call for every <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>&#160;or <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>&#160;call made during its execution. Failing to call <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>&#160;for each call to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>&#160;or <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span> may result in a loss of data.</p>
 <p class="Body"><a name="IX_description_258"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRend</span>&#160;disposes of the GR interface identifier <span class="VarName">gr_id</span> and terminates access to the GR interface ini&#173;tiated by the corresponding call to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>. The calling program must make one <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRend</span>&#160;call for every <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>&#160;call made during its execution; failing to call <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRend</span>&#160;for each <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>&#160;may result in a loss of data. </p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRend</span>&#160;return <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters of these routines are further defined in <a href="#XREF_12133_TABLE_9B_GRstart">Table 8B</a>.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hclose</span>&#160;terminates access to an HDF file and should only be called after <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRend</span>&#160;has been called properly. Refer to <a href="../UG_Fundmtls/UG_Fundmtls.htm#XREF_13138_HDF_Fundamentals">Chapter 2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;HDF Fundamentals&quot;</a>, for a description of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hclose</span>.</p>
 <p class="Figure"><a name="IX_parameter_list_146"></a><a name="IX_parameter_list_145"></a><a name="IX_parameter_list_144"></a><a name="IX_parameter_list_143"></a><a name="IX_parameter_list_142"></a><span class="StepNumber">TABLE 8B<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_12133_TABLE_9B_GRstart"></a>GRstart, GRselect, GRcreate, GRendaccess, and GRend, Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.67pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 59.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 115.200pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 149.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 30.00pt;">
  <td style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRstart</p>
  <p class="FM_ReturnType">[int32]</p>
  <p class="CellFunction">(mgstart)</p>
</td>
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">file_id</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">File identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRselect</p>
  <p class="FM_ReturnType">[int32]</p>
  <p class="CellFunction">(mgselct)</p>
</td>
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">gr_id</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface identifier</p>
</td>
</tr>
  <tr style=" height : 17.00pt;">
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_index</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Position of the raster image within the file</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="6" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRcreate</p>
  <p class="FM_ReturnType">[int32]</p>
  <p class="CellFunction">(mgcreat)</p>
</td>
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">gr_id</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">name</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">char *</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">character*(*)</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Name of the image</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_comps</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of components in each pixel</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data_type</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Data type of the pixel component</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">interlace_mode</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Interlace mode to be used when writing to the data set</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">dim_sizes</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 [2]</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array defining the size of both dimensions</p>
</td>
</tr>
  <tr style=" height : 30.00pt;">
  <td style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRendaccess</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgendac)</p>
</td>
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 30.00pt;">
  <td style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRend</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgend)</p>
</td>
  <td style="width : 59.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">gr_id</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface identifier</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Heading2">8.6<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Writing Raster Images</p>
 <p class="Body">A raster image can be written partially or entirely. Partial writing includes writing to a contiguous region of the image and writing to selected locations in the image according to patterns defined by the user. This section describes the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;and how it can write data to part of an image or to an entire image. The section also illustrates the concepts of compressing raster images and the use of external files to store image data. </p>
 <p class="Heading3">8.6.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_11596_GRwriteimage"></a>Writing Raster Images: GRwriteimage</p>
 <p class="Body"><a name="IX_description_259"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span> is used to either completely or partially fill an image array.</p>
 <p class="Body">Writing data to an image array involves the following steps:</p>
 <p class="FM_1Step"><span class="StepNumber">1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Open a file and initialize the GR interface. </p>
 <p class="Step"><span class="StepNumber">2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Select an existing raster image or create a new one.</p>
 <p class="Step"><span class="StepNumber">3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Write data to the image array.</p>
 <p class="Step"><span class="StepNumber">4.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Terminate access to the raster image.</p>
 <p class="Step"><span class="StepNumber">5.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Terminate access to the GR interface and close the file.</p>
 <p class="Body">The calling program must contain the following sequence of calls:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>file_id = Hopen(filename, access_mode, num_dds_block);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gr_id = GRstart(file_id);</p>
 <p class="FM_syntaxortop"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = GRselect(gr_id, ri_index);</p>
 <p class="FM_syntaxorbot"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = GRcreate(gr_id, name, n_comps, number_type, interlace_mode, dim_sizes);<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRwriteimage(ri_id, start, stride, edges, data);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRendaccess(gr_id);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRend(ri_id);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = Hclose(file_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>file_id = hopen(filename, access_mode, num_dds_block)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gr_id = mgstart(file_id)</p>
 <p class="FM_syntaxortop"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = mgselct(gr_id, ri_index);</p>
 <p class="FM_syntaxorbot"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = mgcreat(gr_id, name, n_comps, number_type, interlace_mode, dim_sizes);</p>
 <p class="FM_syntaxortop"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgwrimg(ri_id, start, stride, edges, data)</p>
 <p class="FM_syntaxorbot"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgwrcmg(ri_id, start, stride, edges, data) </p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgendac(ri_id)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgend(gr_id)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = hclose(file_id)</p>
 <p class="Body">As with SD arrays, whole raster images, subsamples, and slabs can be written. The data to be writ&#173;ten is defined by the values of the parameters <span class="VarName">start</span>, <span class="VarName">stride</span>, and <span class="VarName">edges</span>, which correspond to the coordinate location of the data origin, number of values to be skipped along each dimension dur&#173;ing write operation, and number of elements to be written along each dimension.</p>
 <p class="Body">The array <span class="VarName">start</span> specifies the starting location of the data to be written. Valid values of each ele&#173;ment in the array <span class="VarName">start</span>&#160;are <span class="DefName">0</span>&#160;to the size of the corresponding raster image dimension - 1. The first element of the array <span class="VarName">start</span>&#160;specifies an offset from the beginning of the array <span class="VarName">data</span> along the fastest-changing dimension, which is the second dimension in C and the first dimension in FORTRAN-77. The second element of the array <span class="VarName">start</span>&#160;specifies an offset from the beginning of the array <span class="VarName">data</span>&#160;along the second fastest-changing dimension, which is the first dimension in C and the second dimension in FORTRAN-77. For example, if the first value of the array <span class="VarName">start</span>&#160;is 2 and the second value is 3, the starting location of the data to be written is at the fourth row and third column in C, and at the third row and fourth column in FORTRAN-77. Note that the correspondence between elements in the array <span class="VarName">start</span>&#160;and the raster image dimensions in the GR interface is different from that in the SD interface. See <a href="../UG_SD/UG_SD.htm#XREF_13107_SDreaddata">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>3.6<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a><span style="font-weight : bold; ">&#160;</span>on <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDreaddata</span> for an example of this.</p>
 <p class="Body">The array <span class="VarName">stride</span> specifies the writing pattern along each dimension. For example, if one of the ele&#173;ments of the array <span class="VarName">stride</span>&#160;is 1, then every element along the corresponding dimension of the array <span class="VarName">data</span>&#160;&#160;will be written. If one of the elements of the <span class="VarName">stride</span>&#160;array is 2, then every other element along the corresponding dimension of the array <span class="VarName">data</span>&#160;&#160;will be written, and so on. The correspondence between elements of the array <span class="VarName">stride</span>&#160;&#160;and the dimensions of the array <span class="VarName">data</span>&#160;is the same as described above for the array <span class="VarName">start</span>.</p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwrimg</span> writes buff&#173;ered numeric data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwcimg</span> writes buffered character data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;returns either <span class="DefName">SUCCEED </span>(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;are described in <a href="#XREF_19628_TABLE_4H_The">Table 8C</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_147"></a><span class="StepNumber">TABLE 8C<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_19628_TABLE_4H_The"></a>GRwriteimage Parameter List</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.67pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 50.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 154.801pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 118.799pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 56.229pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 98.572pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td rowspan="5" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRwriteimage</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgwrimg/</p>
  <p class="CellFunction">mgwcimg)</p>
</td>
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 56.229pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 98.572pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 118.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier returned by <span style="font-weight : bold; ">GRcreate</span></p>
</td>
</tr>
  <tr style=" height : 31.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">start</p>
</td>
  <td style="width : 56.229pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 [2]</p>
</td>
  <td style="width : 98.572pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 118.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array containing the x,y-coordinate location where the write will start for each dimension</p>
</td>
</tr>
  <tr style=" height : 31.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">stride</p>
</td>
  <td style="width : 56.229pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 [2]</p>
</td>
  <td style="width : 98.572pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 118.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array containing the number of data locations the current location is to be moved forward before the next write</p>
</td>
</tr>
  <tr style=" height : 31.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">edges</p>
</td>
  <td style="width : 56.229pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 [2]</p>
</td>
  <td style="width : 98.572pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 118.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array containing the number of data elements that will be written along each dimension</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data</p>
</td>
  <td style="width : 56.229pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">VOIDP</p>
</td>
  <td style="width : 98.572pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid numeric data type&gt;(*)/</p>
  <p class="CellParameter">character(*)</p>
</td>
  <td style="width : 118.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer for the image data to be written</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Figure"><span class="StepNumber">EXAMPLE 1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_75625_EXAMPLE_1_Creating"></a>Creating and Writing a Raster Image</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hopen</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">hopen</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgstart</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgcreat</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwrimg</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgendac</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRend</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgend</span>, and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hclose</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">hclose</span> to create an HDF file and store a raster image in it.</p>
 <p class="Body">In this example, the program creates the HDF file called &quot;General_RImages.hdf&quot; and a raster image in the file. The image created is of size 5x10 and named &quot;Image Array 1&quot;, and has data of the int16 data type, 2 components, and interlace mode <span class="DefName">MFGR_INTERLACE_PIXEL</span>. Then the program writes the image data, terminates access to the image and the GR interface, and closes the file.</p>
 <p class="FM_CodeCTitle"><span style="font-weight : normal; "><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></span>C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&#160;&quot;General_RImages.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;IMAGE_NAME &#160;&#160;&#160;&quot;Image Array 1&quot;</p>
 <p class="FM_ExampleCode">#define &#160;X_LENGTH &#160;&#160;&#160;&#160;&#160;10 &#160;&#160;&#160;/* number of columns in the image */</p>
 <p class="FM_ExampleCode">#define &#160;Y_LENGTH &#160;&#160;&#160;&#160;&#160;5 &#160;&#160;&#160;&#160;/* number of rows in the image */</p>
 <p class="FM_ExampleCode">#define &#160;N_COMPS &#160;&#160;&#160;&#160;&#160;&#160;2 &#160;&#160;&#160;&#160;/* number of components in the image */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 file_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* HDF file identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gr_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* GR interface identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* raster image identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start[2], &#160;&#160;&#160;&#160;&#160;&#160;/* start position to write for each dimension */</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;edges[2], &#160;&#160;&#160;&#160;&#160;&#160;/* number of elements to be written </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;along each dimension */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes[2], &#160;&#160;/* dimension sizes of the image array */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, /* interlace mode of the image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_type, &#160;&#160;&#160;&#160;&#160;/* data type of the image data */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i, j;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 image_buf[Y_LENGTH][X_LENGTH][N_COMPS];</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create and open the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set the data type, interlace mode, and dimensions of the image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;data_type = DFNT_INT16;</p>
 <p class="FM_ExampleCode"> &#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[0] = X_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[1] = Y_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the raster image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;ri_id = GRcreate (gr_id, IMAGE_NAME, N_COMPS, data_type, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, dim_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Fill the image data buffer with values.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; Y_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; X_LENGTH; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image_buf[i][j][0] = (i + j) + 1; &#160;&#160;&#160;&#160;/* first component */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image_buf[i][j][1] = (i + j) + 1; &#160;&#160;&#160;&#160;/* second component */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the size of the data to be written, i.e., start from the origin</p>
 <p class="FM_ExampleCode"> &#160;&#160;* and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = X_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = Y_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write the data in the buffer into the image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwriteimage(ri_id, start, NULL, edges, (VOIDP)image_buf);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Terminate access to the raster image and to the GR interface and, </p>
 <p class="FM_ExampleCode"> &#160;&#160;* close the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;program create_raster_image</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*19 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*13 IMAGE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N_COMPS</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME &#160;= ’General_RImages.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGE_NAME = ’Image Array 1’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH &#160;&#160;= 10,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH &#160;&#160;= 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_COMPS &#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_CREATE, DFNT_INT16, MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT16 &#160;&#160;= 22,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MFGR_INTERLACE_PIXEL = 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer mgstart, mgcreat, mgwrimg, mgendac, mgend </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer file_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer gr_id, ri_id, num_type, interlace_mode</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), stride(2), edges(2), dimsizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i, j, k</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer*2 &#160;image_buf(N_COMPS, X_LENGTH, Y_LENGTH) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create and open the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set the number type, interlace mode, and dimensions of the image. &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;num_type = DFNT_INT16</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dimsizes(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dimsizes(2) = Y_lENGTH</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the raster image array. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_id = mgcreat(gr_id, IMAGE_NAME, N_COMPS, num_type,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, dimsizes)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Fill the image data buffer with values. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 30 i = 1, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 20 j = 1, X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 k = 1, N_COMPS</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image_buf(k,j,i) = (i+j) - 1</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">30 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the size of the data to be written, i.e., start from the origin</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the data in the buffer into the image array.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwrimg(ri_id, start, stride, edges, image_buf)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the raster image and to the GR interface, </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and close the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="Figure"><span class="StepNumber">EXAMPLE 2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Modifying an Existing Raster Image</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgselct</span>&#160;to obtain an existing raster image and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwrite</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwrimg</span> to modify image data.</p>
 <p class="Body">In this example, the program selects the only raster image in the file &quot;General_RImages.hdf&quot; cre&#173;ated and written in Example 1, and modifies image data. The program also creates another raster image that is named &quot;Image Array 2&quot; and has 3 components with dimension size of 4x6, data type of <span class="DefName">DFNT_CHAR8</span>, and interlace mode of <span class="DefName">MFGR_INTERLACE_PIXEL</span>.</p>
 <p class="FM_CodeCTitle">C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&quot;General_RImages.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;X1_LENGTH &#160;&#160;&#160;5 &#160;&#160;&#160;&#160;/* number of columns in the first image </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;being modified */</p>
 <p class="FM_ExampleCode">#define &#160;Y1_LENGTH &#160;&#160;&#160;2 &#160;&#160;&#160;&#160;/* number of rows in the first image </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;being modified */</p>
 <p class="FM_ExampleCode">#define &#160;N1_COMPS &#160;&#160;&#160;&#160;2 &#160;&#160;&#160;&#160;/* number of components in the first image */</p>
 <p class="FM_ExampleCode">#define &#160;IMAGE1_NAME &#160;&quot;Image Array 1&quot;</p>
 <p class="FM_ExampleCode">#define &#160;IMAGE2_NAME &#160;&quot;Image Array 2&quot;</p>
 <p class="FM_ExampleCode">#define &#160;X2_LENGTH &#160;&#160;&#160;6 &#160;&#160;&#160;&#160;/* number of columns in the second image */</p>
 <p class="FM_ExampleCode">#define &#160;Y2_LENGTH &#160;&#160;&#160;4 &#160;&#160;&#160;&#160;/* number of rows in the second image */</p>
 <p class="FM_ExampleCode">#define &#160;N2_COMPS &#160;&#160;&#160;&#160;3 &#160;&#160;&#160;&#160;/* number of components in the second image */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 file_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* HDF file identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gr_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* GR interface identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri1_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* raster image identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start1[2], &#160;&#160;&#160;&#160;&#160;/* start position to write for each dimension */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;edges1[2], &#160;&#160;&#160;&#160;&#160;/* number of elements to be written along</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;each dimension */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri2_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* raster image identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start2[2], &#160;&#160;&#160;&#160;&#160;/* start position to write for each dimension */</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;edges2[2], &#160;&#160;&#160;&#160;&#160;/* number of elements to be written along </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;each dimension */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dims_sizes[2], &#160;/* sizes of the two dimensions of the image array */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_type, &#160;&#160;&#160;&#160;&#160;/* data type of the image data */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode; /* interlace mode of the image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 i, j; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* indices for the dimensions */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 image1_buf[Y1_LENGTH][X1_LENGTH][N1_COMPS]; /* data of first image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;char &#160;image2_buf[Y2_LENGTH][X2_LENGTH][N2_COMPS]; /* data of second image*/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the HDF file for writing.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first raster image in the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri1_id = GRselect (gr_id, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Fill the first image data buffer with values.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; Y1_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; X1_LENGTH; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image1_buf[i][j][0] = 0; &#160;/* first component */ </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image1_buf[i][j][1] = 0; &#160;/* second component */ </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the size of the data to be written, i.e., start from the origin</p>
 <p class="FM_ExampleCode"> &#160;&#160;* and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start1[0] = start1[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges1[0] = X1_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges1[1] = Y1_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write the data in the buffer into the image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwriteimage (ri1_id, start1, NULL, edges1, (VOIDP)image1_buf);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set the interlace mode and dimensions of the second image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;data_type = DFNT_CHAR8;</p>
 <p class="FM_ExampleCode"> &#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dims_sizes[0] = X2_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dims_sizes[1] = Y2_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the second image in the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri2_id = GRcreate (gr_id, IMAGE2_NAME, N2_COMPS, data_type,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, dims_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Fill the second image data buffer with values.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; Y2_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; X2_LENGTH; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image2_buf[i][j][0] = ’A’; &#160;&#160;&#160;&#160;/* first component */ </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image2_buf[i][j][1] = ’B’; &#160;&#160;&#160;&#160;/* second component */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image2_buf[i][j][2] = ’C’; &#160;&#160;&#160;&#160;/* third component */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the size of the data to be written, i.e., start from the origin</p>
 <p class="FM_ExampleCode"> &#160;&#160;* and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; 2; i++) {</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start2[i] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges2[i] = dims_sizes[i];</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write the data in the buffer into the second image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwriteimage (ri2_id, start2, NULL, edges2, (VOIDP)image2_buf);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the raster images and to the GR interface, and</p>
 <p class="FM_ExampleCode"> &#160;&#160;* close the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri1_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri2_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program modify_image</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*19 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*13 IMAGE1_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X1_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;Y1_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N1_COMPS</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*13 IMAGE2_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X2_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;Y2_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N2_COMPS</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME &#160;&#160;= ’General_RImages.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGE1_NAME = ’Image Array 1’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGE2_NAME = ’Image Array 2’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X1_LENGTH &#160;&#160;= 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y1_LENGTH &#160;&#160;= 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N1_COMPS &#160;&#160;&#160;= 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X2_LENGTH &#160;&#160;= 6,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y2_LENGTH &#160;&#160;= 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N2_COMPS &#160;&#160;&#160;= 3)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_WRITE, DFNT_INT16, DFNT_CHAR8,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_WRITE &#160;= 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_CHAR8 &#160;&#160;= 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT16 &#160;&#160;= 22,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MFGR_INTERLACE_PIXEL = 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer mgstart, mgselct, mgcreat, mgwrimg, mgendac, mgend </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer file_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer gr_id, ri1_id, ri2_id, data_type, interlace_mode</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start1(2), stride1(2), edges1(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start2(2), stride2(2), edges2(2), dim_sizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i, j, k</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer*2 &#160;image1_buf(N1_COMPS, X1_LENGTH, Y1_LENGTH) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character &#160;image2_buf(N2_COMPS, X2_LENGTH, Y2_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the HDF file for writing.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first raster image in the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri1_id = mgselct(gr_id, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Fill the buffer with values.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 20 i = 1, Y1_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 j = 1, X1_LENGTH</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image1_buf(1,j,i) = 0 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image1_buf(2,j,i) = 0 </p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the part of the data in the first image that will be overwritten</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;with the new values from image1_buf.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start1(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start1(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges1(1) = X1_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges1(2) = Y1_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride1(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride1(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the data in the buffer into the image array.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwrimg(ri1_id, start1, stride1, edges1, image1_buf)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set the number type, interlace mode, and dimensions of the second image. &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data_type = DFNT_CHAR8</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(1) = X2_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(2) = Y2_LENGTH</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the second image in the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri2_id = mgcreat(gr_id, IMAGE2_NAME, N2_COMPS, data_type,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, dim_sizes)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Fill the image data buffer with values. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;do 60 i = 1, Y2_LENGTH </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 50 j = 1, X2_LENGTH</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 40 k = 1, N2_COMPS </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image2_buf(k,j,i) = char(65 + k - 1) </p>
 <p class="FM_ExampleCode">40 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">50 &#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">60 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the size of the data to be written, i.e., start from the origin</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start2(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start2(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges2(1) = &#160;dim_sizes(1)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges2(2) = &#160;dim_sizes(2) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride2(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride2(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the data in the buffer into the image array.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwrimg(ri2_id, start2, stride2, edges2, image2_buf)</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the raster images and to the GR interface,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and close the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri1_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri2_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="Heading3"><a name="IX_compressing_1"></a>8.6.2<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_19774_GRsetcompress"></a>Compressing Raster Images: GRsetcompress</p>
 <p class="Body"><a name="IX_description_260"></a>Images can be compressed using the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetcompress</span>. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetcompress</span>&#160;compresses the image data at the time it is called and supports all standard HDF compression algorithms. The syntax of the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetcompress</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRsetcompress(ri_id, comp_type, c_info);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgscompress(ri_id, comp_type, comp_prm)</p>
 <p class="Body">The compression method is specified by the parameter <span class="VarName">comp_type</span>. Valid values of the parameter <span class="VarName">comp_type</span>&#160;are: </p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_NONE</span>&#160;(or <span class="DefName">0</span>) for no compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_RLE</span>&#160;(or <span class="DefName">1</span>) for RLE run-length encoding</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_SKPHUFF</span>&#160;(or <span class="DefName">3</span>) for Skipping Huffman compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_DEFLATE</span>&#160;(or <span class="DefName">4</span>) for GZIP compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_SZIP</span>&#160;(or <span class="DefName">5</span>) for Szip compression (not for Fortran)</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_JPEG</span>&#160;(or <span class="DefName">7</span>) for JPEG compression</p>
 <p class="Body">The compression parameters are specified by the parameter <span class="VarName">c_info</span>&#160;in C and the parameter <span class="VarName">comp_prm</span>&#160;in FORTRAN-77. The parameter <span class="VarName">c_info</span>&#160;has type <span class="VarName">comp_info</span> and contains algorithm-specific information for the library compression routines. The type <span class="VarName">comp_info</span>&#160;is described in the header file <span class="Subscript">hcomp.h</span>&#160;and in the reference manual page for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDsetcompress</span>. Compression parame&#173;ters are only needed when Skipping Huffman, GZIP, and Szip compression methods are applied.</p>
 <p class="Body">If <span class="VarName">comp_type</span>&#160;is set to <span class="DefName">COMP_CODE_NONE</span>&#160;or <span class="DefName">COMP_CODE_RLE</span>, the parameters <span class="VarName">c_info</span>&#160;and <span class="VarName">comp_prm</span>&#160;are not used; <span class="VarName">c_info</span>&#160;can be set to <span class="DefName">NULL</span>&#160;and <span class="VarName">comp_prm</span> can be undefined.</p>
 <p class="Body">If <span class="VarName">comp_type</span>&#160;is set to <span class="DefName">COMP_CODE_SKPHUFF</span>, then the structure <span class="VarName">skphuff</span>&#160;in the union <span class="VarName">comp_info</span>&#160;in C (<span class="VarName">comp_prm(1)</span> in FORTRAN-77) must be provided with the size, in bytes, of the data elements.</p>
 <p class="Body">If <span class="VarName">comp_type</span>&#160;is set to <span class="DefName">COMP_CODE_DEFLATE</span>, the deflate structure in the union <span class="VarName">comp_info</span>&#160;in C (<span class="VarName">comp_prm(1)</span>&#160;in FORTRAN-77) must be provided with the information about the compression effort.</p>
 <p class="Body">Note that, as of HDF 4.2.2, Szip is not supported in Fortran GR interface yet.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetcompress</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetcompress</span>&#160;parameters are further described in <a href="#XREF_34560_TABLE_8G">Table 8D</a>.</p>
 <p class="Heading3"><a name="IX_I_O_access_type"></a>8.6.3<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span>Setting I/O Access Type for a Raster Image: GRsetaccesstype</p>
 <p class="Body"><a name="IX_description_261"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetaccesstype</span> sets the access type to be either serial or parallel I/O for the raster image speci&#173;fied by <span style="font-style : italic; ">ri_id</span>.</p>
 <p class="Body">The syntax of the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetaccesstype</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRsetaccesstype(ri_id, access_type);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = <span style="font-size  : 8.0pt; letter-spacing : 0.00em; ">mgsactp</span>(ri_id, access_type)</p>
 <p class="Body">The access type is specified by the parameter <span class="VarName">access_type</span>&#160;and its valid values are <span class="DefName">DFACC_SERIAL</span>&#160;(or <span class="DefName">1</span>), <span class="DefName">DFACC_PARALLEL </span>(or <span class="DefName">11</span>), and <span class="DefName">DFACC_DEFAULT</span>&#160;(or <span class="DefName">0</span>.)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetaccesstype</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetaccesstype</span>&#160;parameters are further described in <a href="#XREF_34560_TABLE_8G">Table 8D</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_149"></a><a name="IX_parameter_list_148"></a><span class="StepNumber">TABLE 8D<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_34560_TABLE_8G"></a>GRsetcompress and GRsetaccesstype Parameter List</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.13pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 64.686pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_ReturnType">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 45.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 121.422pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 158.625pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 60.086pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 61.336pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="4" style="width : 64.686pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetcompress</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="FM_ReturnType">(<span style="font-family : Courier New; font-size  : 8.0pt; ">mgscom&#173;press</span><span style="font-weight : bold; ">)</span></p>
</td>
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 60.086pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 61.336pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 158.625pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_type</p>
</td>
  <td style="width : 60.086pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 61.336pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 158.625pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Compression method</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">c_info</p>
</td>
  <td style="width : 60.086pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_info*</p>
</td>
  <td style="width : 61.336pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 158.625pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Pointer to compression information structure</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_prm</p>
</td>
  <td style="width : 60.086pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 61.336pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 158.625pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Compression parameters array</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 64.686pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetaccesstype</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="FM_ReturnType">(<span style="font-family : Courier New; font-size  : 8.0pt; ">mgsactp</span><span style="font-weight : bold; ">)</span></p>
</td>
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 60.086pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 61.336pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 158.625pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 17.00pt;">
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">access_type</p>
</td>
  <td style="width : 60.086pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 61.336pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 158.625pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">I/O access type</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Figure"></p>
 <p class="Heading3"><a name="IX_external_file_operations"></a>8.6.4<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_13823_8_6_3_External"></a>External File Operations Using the GR Interface</p>
 <p class="Body">An <span class="Definition">external image array</span>&#160;is one that is stored in a file that is not the file containing the metadata for the image. The HDF file containing the metadata is known as the primary HDF file; the file containing the external image array is known as an <span class="Definition">external file</span>. The concept of externally stored data is described in <a href="../UG_SD/UG_SD.htm#XREF_13938_Scientific_Data">Chapter 3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;Scientific Data Sets (SD API)&quot;</a>. The GR interface supports the same external file functionality as the SD interface.</p>
 <p class="Heading4"><a name="IX_creating_a_in_an"></a>8.6.4.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_10019_GRsetexternalfile"></a>Creating a Raster Image in an External File: GRsetexternalfile</p>
 <p class="Body">Creating an image with the data stored in an external file involves the same general steps as with the SD interface:</p>
 <p class="FM_1Step"><span class="StepNumber">1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Create the image array.</p>
 <p class="Step"><span class="StepNumber">2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Specify that an external data file is to be used.</p>
 <p class="Step"><span class="StepNumber">3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Write data to the image array.</p>
 <p class="Step"><span class="StepNumber">4.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Terminate access to the image. </p>
 <p class="Body">To create a data set containing image array stored in an external file, the calling program must make the following calls.</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = GRcreate(gr_id, name, n_comps, data_type, interlace_mode, dim_sizes);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRsetexternalfile(ri_id, filename, offset);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRwriteimage(ri_id, start, stride, edges, image_data);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRendaccess(ri_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = mgcreat(gr_id, name, n_comps, data_type, interlace_mode, dim_sizes)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgsxfil(ri_id, filename, offset)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgwrimg(ri_id, start, stride, edges, image_data)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgendac(ri_id)</p>
 <p class="Body"><a name="IX_description_262"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetexternalfile</span>&#160;marks the image identified by the parameter <span class="VarName">ri_id</span>&#160;as one whose data is to be written to an external file. The parameter <span class="VarName">filename</span> is the name of the external file, and the param&#173;eter <span class="VarName">offset</span>&#160;specifies the number of bytes from the beginning of the external file to the location where the first byte of data will be written.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetexternalfile</span>&#160;can only be called once per data set. If a file with the same name as <span class="VarName">filename</span>&#160;exists in the current directory, HDF will use it as the external file. If the file does not exist, HDF will create one. Once the name of the external file is specified, it is impossible to change it with&#173;out breaking the association between the raster image and its data.</p>
 <p class="Body">Use caution when writing to existing files because the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;begins its write at the specified offset without checking whether existing data is being overwritten. When different data sets have arrays being stored the same external file, the calling program is responsible for avoiding any overlap between them.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetexternalfile</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetexter&#173;nalfile</span>&#160;are further defined in <a href="#XREF_17771_TABLE_8H">Table 8E</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_150"></a><span class="StepNumber">TABLE 8E<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_17771_TABLE_8H"></a>GRsetexternalfile Parameter List</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.76pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 64.686pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 45.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 108.829pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 171.842pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 61.557pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="3" style="width : 64.686pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetexternalfile</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgsxfil)</p>
</td>
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 61.557pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 171.842pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">filename</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">char *</p>
</td>
  <td style="width : 61.557pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">character*(*)</p>
</td>
  <td style="width : 171.842pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Name of the external file</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 45.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">offset</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 61.557pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 171.842pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Offset in bytes from the beginning of the external file to the image data</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Heading4">8.6.4.2<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_26698_8_6_4_2_Moving"></a>Moving Raster Images to an External File</p>
 <p class="Body">Images can be moved from the primary HDF file to an external file. To do so requires the follow&#173;ing steps:</p>
 <p class="FM_1Step"><span class="StepNumber">1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Select the image.</p>
 <p class="Step"><span class="StepNumber">2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Specify the external data file.</p>
 <p class="Step"><span class="StepNumber">3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Terminate access to the image. </p>
 <p class="Body">The calling program must make the following calls:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = GRselect(gr_id, ri_index);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRsetexternalfile(ri_id, filename, offset);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRendaccess(ri_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = mgselct(gr_id, ri_index);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgsxfil(ri_id, filename, offset)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgendac(ri_id);</p>
 <p class="Body">When <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetexternalfile</span>&#160;is used in conjunction with <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>, it will immediately write the existing data to the external file; any data in the external file that occupies the space reserved for the external array will be overwritten as a result of this operation. A data set can only be moved to an external file once. </p>
 <p class="Body">During the operation, the data is written to the external file as a contiguous stream regardless of how it is stored in the primary file. Because data is moved “as is,” any unwritten locations in the data set are preserved in the external file. Subsequent read and write operations performed on the data set will access the external file.</p>
 <p class="Heading2">8.7<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Reading Raster Images</p>
 <p class="Body">Image array data can be read as an entire array or as a subsample of the array. Raster image data is read from an external file in the same way that it is read from a primary file; whether the image array is stored in an external file is transparent to the user. This section describes how <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadim&#173;age</span>&#160;is used to read an entire image and part of an image. The section also describes the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqimageil</span> that sets the interlacing for reading image data.</p>
 <p class="Heading3"><a name="IX_reading_5"></a>8.7.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_24692_GRreadimage"></a>Reading Data from an Image: GRreadimage</p>
 <p class="Body">Reading data subsamples from an image array involves the following steps:</p>
 <p class="FM_1Step"><span class="StepNumber">1.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Select a data set. </p>
 <p class="Step"><span class="StepNumber">2.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Read data from the image array.</p>
 <p class="Step"><span class="StepNumber">3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Terminate access to the data set. </p>
 <p class="Body">To read data from an image array, the calling program must contain the following function calls:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = GRselect(gr_id, ri_index);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRreadimage(ri_id, start, stride, edges, data);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRendaccess(ri_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_id = mgselct(gr_id, ri_index)</p>
 <p class="FM_syntaxortop"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrdimg(ri_id, start, stride, edges, data)</p>
 <p class="FM_syntaxorbot"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrcimg(ri_id, start, stride, edges, data)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgendac(gr_id)</p>
 <p class="Body"><a name="IX_description_263"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>&#160;can be used to read either an entire image or a subsample of the image. The <span class="VarName">ri_id </span>argument is the raster image identifier returned by <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>. As with <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>, the argu&#173;ments <span class="VarName">start</span>, <span class="VarName">stride</span>, and <span class="VarName">edges</span>&#160;respectively describe the starting location for the read operation, the number of locations the current image array location will be moved forward after each read, and the length of each dimension to be read. Refer to <a href="#XREF_11596_GRwriteimage">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.6.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a> for detailed descrip&#173;tions of the parameters <span class="VarName">start</span>, <span class="VarName">stride</span>, and <span class="VarName">edges</span>. If the image array is smaller than the <span class="VarName">data</span> argu&#173;ment array, the amount of data read will be limited to the maximum size of the image array. </p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgrdimg</span>&#160;reads numeric image data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgrcimg</span> reads character image data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>&#160;are further defined in <a href="#XREF_37212_TABLE_9E">(See TABLE 8F)</a>.</p>
 <p class="Heading3"><a name="IX_setting_the_interlace_1"></a>8.7.2<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_26886_GRreqlutil"></a>Setting the Interlace Mode for an Image Read: GRreqimageil</p>
 <p class="Body">The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqimageil</span> routine sets the interlace mode for the next image read. The syntax of this rou&#173;tine is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRreqimageil(ri_id, interlace_mode);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrimil(ri_id, interlace_mode)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqimageil</span>&#160;can be called at any time before the read operation and takes two parameters, <span class="VarName">ri_id</span>&#160;and <span class="VarName">interlace_mode</span>. The parameter <span class="VarName">ri_id</span>&#160;is the raster image identifier returned by the <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRselect</span>&#160;routine and the parameter <span class="VarName">interlace_mode</span>&#160;specifies the interlace mode that will be in effect for the image read operation. Refer to <a href="#XREF_19873_SDstart_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>&#160;for a description of the GR interlace modes.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqimagetil</span>&#160;may be called more than once; the interlace mode setting specified by the last call to the routine will be used for the next read operation.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqimagetil</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL </span>(or <span class="DefName">-1</span>). The parameters of this routine are further defined in <a href="#XREF_37212_TABLE_9E">Table 8F</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_152"></a><a name="IX_parameter_list_151"></a><span class="StepNumber">TABLE 8F<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_37212_TABLE_9E"></a>GRreadimage and GRreqimageil Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.67pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name </p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 56.257pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 130.944pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 136.799pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="5" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreadimage</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgrdimg/</p>
  <p class="CellFunction">mgrcimg)</p>
</td>
  <td style="width : 56.257pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 56.257pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">start</p>
</td>
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32[2]</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 136.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array containing the starting read coordi&#173;nates</p>
</td>
</tr>
  <tr style=" height : 31.00pt;">
  <td style="width : 56.257pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">stride</p>
</td>
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32[2]</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 136.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array specifying the interval between the values that will be read along each dimen&#173;sion</p>
</td>
</tr>
  <tr style=" height : 31.00pt;">
  <td style="width : 56.257pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">edges</p>
</td>
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32[2]</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 136.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array containing the number of data ele&#173;ments that will be read along each dimen&#173;sion</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 56.257pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data</p>
</td>
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">VOIDP</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid numeric data type&gt;(*)/character*(*)</p>
</td>
  <td style="width : 136.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer for the &#160;image data to be read</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreqimageil</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgrimil)</p>
</td>
  <td style="width : 56.257pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 56.257pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">interlace_mode</p>
</td>
  <td style="width : 44.658pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">intn</p>
</td>
  <td style="width : 86.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.799pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Interlace mode for the next image read oper&#173;ation</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Figure"><span class="StepNumber">EXAMPLE 3.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Reading a Raster Image.</p>
 <p class="Body">This example illustrates the use of the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage/mgrdimg</span>&#160;to read an image and its subsets.</p>
 <p class="Body">In this example, the program reads the image written by Example 1 and modified by Example 2 in the file &quot;General_RImages.hdf&quot;. Recall that this image has two components and has 5 rows and 10 columns. The program first reads the entire image, then reads a subset of the image, 3 rows and 2 columns starting at the 2nd row and the 4th column, and finally reads the image skipping all the even rows and all the odd columns. &#160;Reading patterns are applied to all components.</p>
 <p class="FM_CodeCTitle">C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&#160;&#160;&#160;&quot;General_RImages.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;N_COMPS &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2</p>
 <p class="FM_ExampleCode">#define &#160;X_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;&#160;10 &#160;&#160;/* number of columns of the entire image */</p>
 <p class="FM_ExampleCode">#define &#160;Y_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;&#160;5 &#160;&#160;&#160;/* number of rows of the entire image */</p>
 <p class="FM_ExampleCode">#define &#160;PART_COLS &#160;&#160;&#160;&#160;&#160;&#160;2 &#160;&#160;&#160;/* number of columns read for partial image */</p>
 <p class="FM_ExampleCode">#define &#160;PART_ROWS &#160;&#160;&#160;&#160;&#160;&#160;3 &#160;&#160;&#160;/* number of rows read for partial image */</p>
 <p class="FM_ExampleCode">#define &#160;SKIP_COLS &#160;&#160;&#160;&#160;&#160;&#160;5 &#160;&#160;&#160;/* number of columns read for skipped image */</p>
 <p class="FM_ExampleCode">#define &#160;SKIP_ROWS &#160;&#160;&#160;&#160;&#160;&#160;3 &#160;&#160;&#160;/* number of rows read for skipped image */</p>
 <p class="FM_ExampleCode">#define &#160;COLS_PART_START 3 &#160;&#160;&#160;/* starting column to read partial image */</p>
 <p class="FM_ExampleCode">#define &#160;ROWS_PART_START 1 &#160;&#160;&#160;/* starting row to read partial image */</p>
 <p class="FM_ExampleCode">#define &#160;COLS_SKIP_START 1 &#160;&#160;&#160;/* starting column to read skipped image */</p>
 <p class="FM_ExampleCode">#define &#160;ROWS_SKIP_START 0 &#160;&#160;&#160;/* starting row to read skipped image */</p>
 <p class="FM_ExampleCode">#define &#160;N_STRIDES &#160;&#160;&#160;&#160;&#160;&#160;2 &#160;&#160;&#160;/* number of elements to skip on each dim. */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( )</p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 file_id, gr_id, ri_id,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start[2], &#160;&#160;&#160;&#160;&#160;/* start position to write for each dimension */</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;edges[2], &#160;&#160;&#160;&#160;&#160;/* number of elements to bewritten along </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;each dimension */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stride[2], &#160;&#160;&#160;&#160;/* number of elements to skip on each dimension */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes[2]; &#160;/* dimension sizes of the image array */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 entire_image[Y_LENGTH][X_LENGTH][N_COMPS],</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial_image[PART_ROWS][PART_COLS][N_COMPS],</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;skipped_image[SKIP_ROWS][SKIP_COLS][N_COMPS];</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 i, j;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the HDF file for reading.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_READ, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the first raster image in the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_id = GRselect (gr_id, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Define the size of the data to be read, i.e., start from the origin </p>
 <p class="FM_ExampleCode"> &#160;&#160;* and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = X_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = Y_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read the data from the raster image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRreadimage (ri_id, start, NULL, edges, (VOIDP)entire_image);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Display only the first component of the image since the two components </p>
 <p class="FM_ExampleCode"> &#160;&#160;* have the same data in this example.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">   printf (&quot;First component of the entire image:\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; Y_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; X_LENGTH; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf (&quot;%d &quot;, entire_image[i][j][0]);</p>
 <p class="FM_ExampleCode">      printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the size of the data to be read.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = COLS_PART_START;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = ROWS_PART_START;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = PART_COLS;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = PART_ROWS;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read a subset of the raster image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRreadimage (ri_id, start, NULL, edges, (VOIDP)partial_image);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Display the first component of the read sample.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">   printf (&quot;\nThree rows &amp; two cols at 2nd row and 4th column&quot;);</p>
 <p class="FM_ExampleCode">   printf (&quot; of the first component:\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; PART_ROWS; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; PART_COLS; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf (&quot;%d &quot;, partial_image[i][j][0]);</p>
 <p class="FM_ExampleCode">      printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the size and the pattern to read the data.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = COLS_SKIP_START;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[1] = ROWS_SKIP_START;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = SKIP_COLS;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = SKIP_ROWS;</p>
 <p class="FM_ExampleCode"> &#160;&#160;stride[0] = stride[1] = N_STRIDES;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read all the odd rows and even columns of the image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRreadimage (ri_id, start, stride, edges, (VOIDP)skipped_image);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Display the first component of the read sample.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">   printf (&quot;\nAll odd rows and even columns of the first component:\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; SKIP_ROWS; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; SKIP_COLS; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf (&quot;%d &quot;, skipped_image[i][j][0]);</p>
 <p class="FM_ExampleCode">      printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the raster image and to the GR interface, and</p>
 <p class="FM_ExampleCode"> &#160;&#160;* close the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program read_raster_image</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*19 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N_COMPS</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME &#160;= ’General_RImages.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH &#160;&#160;= 10,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH &#160;&#160;= 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_COMPS &#160;&#160;&#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer PART_COLS, PART_ROWS, SKIP_COLS, SKIP_ROWS</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer COLS_PART_START, ROWS_PART_START</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer COLS_SKIP_START, ROWS_SKIP_START</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer N_STRIDES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (PART_COLS = 3, PART_ROWS = 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SKIP_COLS = 3, SKIP_ROWS = 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;COLS_PART_START = 1, ROWS_PART_START = 3,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;COLS_SKIP_START = 0, ROWS_SKIP_START = 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_STRIDES = 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_READ</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_READ = 1)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer mgstart, mgselct, mgrdimg, mgendac, mgend </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer file_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer gr_id, ri_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer start(2), stride(2), edges(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer i, j</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer*2 &#160;entire_image(N_COMPS, X_LENGTH, Y_LENGTH) </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer*2 &#160;partial_image(N_COMPS, PART_ROWS, PART_COLS) </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer*2 &#160;skipped_image(N_COMPS, SKIP_ROWS, SKIP_COLS) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the HDF file for reading.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_READ, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the first raster image in the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_id = mgselct(gr_id, 0)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the size of the data to be read, i.e., start from the origin</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the data from the raster image array. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgrdimg(ri_id, start, stride, edges, entire_image)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Display only the first component of the image since the two components</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;have the same data in this example.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’First component of the entire image’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 10 i = 1, X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,1000) (entire_image(1,i,j), j = 1, Y_LENGTH)</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the size of the data to be read.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = ROWS_PART_START</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = COLS_PART_START </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = PART_ROWS </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(2) = PART_COLS </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read a subset of the raster image array. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgrdimg(ri_id, start, stride, edges, partial_image)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Display only the first component of the read sample. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;’Two rows and three columns at 4th row and 2nd column’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;’ of the first component’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 20 i = 1, PART_ROWS</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,1000) (partial_image(1,i,j), j = 1, PART_COLS)</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the size and the pattern to read the data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = ROWS_SKIP_START</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = COLS_SKIP_START </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(1) = SKIP_ROWS </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;edges(2) = SKIP_COLS </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;stride(1) = N_STRIDES </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;stride(2) = N_STRIDES </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read all the odd rows and even columns of the image.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgrdimg(ri_id, start, stride, edges, skipped_image)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Display only the first component of the read sample. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’All even rows and odd columns of the first component’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 30 i = 1, SKIP_ROWS</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,1000) (skipped_image(1,i,j), j = 1, SKIP_COLS)</p>
 <p class="FM_ExampleCode">30 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the raster image and to the GR interface, </p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and close the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode">1000 &#160;format(1x, 5(I4))</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="Heading2">8.8<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Difference between the SD and GR Interfaces</p>
 <p class="Body">There is a difference between the SD and GR interfaces that becomes important in applications or tools that must manipulate both images and two-dimensional SDs.</p>
 <p class="Body">The SD and GR interfaces differ in the correspondence between the dimension order in parameter arrays such as <span class="VarName">start</span>, <span class="VarName">stride</span>, <span class="VarName">edge</span>, and <span class="VarName">dimsizes</span>&#160;and the dimension order in the <span style="font-style : italic; ">data</span>&#160;array. See the <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDreaddata </span>and<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">&#160;GRreadimage </span>reference manual pages for discussions of the SD and GR approaches, respectively.</p>
 <p class="Body">When writing applications or tools to manipulate both images and two-dimensional SDs, this cru&#173;cial difference between the interfaces must be taken into account. &#160;While the underlying data is stored in row-major order in both cases, the API parameters are not expressed in the same way. &#160;Consider the example of an SD data set and a GR image that are stored as identically-shaped arrays of X columns by Y rows and accessed via the <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDreaddata</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>&#160;functions, respectively. &#160;Both functions take the parameters <span class="VarName">start</span>, <span class="VarName">stride</span>, and <span class="VarName">edge</span>.</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>For <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDreaddata</span>, those parameters are expressed in (<span class="VarName">y</span>,<span class="VarName">x</span>) or [<span class="VarName">row</span>,<span class="VarName">column</span>] order. &#160;For exam&#173;ple, <span class="Subscript">start[0]</span>&#160;is the starting point in the Y dimension and <span class="Subscript">start[1]</span>&#160;is the starting point in the X dimension. &#160;The same ordering holds true for all SD data set manipulation functions.</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>For <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>, those parameters are expressed in (<span class="VarName">x</span>,<span class="VarName">y</span>) or [<span class="VarName">column</span>,<span class="VarName">row</span>] order. &#160;For example, <span class="Subscript">start[0]</span>&#160;is the starting point in the X dimension and <span class="Subscript">start[1]</span>&#160;is the starting point in the Y dimension. &#160;The same ordering holds true for all GR functions manipulating image data.</p>
 <p class="Heading2">8.9<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Obtaining Information about Files and Raster Images</p>
 <p class="Body">The routines covered in this section provide methods for obtaining information about all of the images in a file, for identifying images that meet certain criteria, and for obtaining information about specific raster images.</p>
 <p class="Body"><a name="IX_description_265"></a><a name="IX_description_264"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo</span>&#160;retrieves the number of images and file attributes in a file. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetiminfo</span>&#160;provides information about individual images. To retrieve information about all images in a file, a calling program can use <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo</span>&#160;to determine the number of images, followed by repeated calls to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetiminfo</span> to obtain information about each image.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRnametoindex</span>&#160;or <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreftoindex</span>&#160;can be used to obtain the index of a raster image in a file knowing its name or reference number, respectively. Refer to <a href="#XREF_36435_8_3_1_Required_GR">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.2.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>&#160;for a description of the raster image index and reference number. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRidtoref</span>&#160;is used when the reference number of an image is required by another routine and the raster image identifier is available.</p>
 <p class="Body">These routines are described individually in the following subsections.</p>
 <p class="Heading3"><a name="IX_obtaining_information_11"></a>8.9.1<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_18290_GRfileinfo"></a>Obtaining Information about the Contents of a File: GRfileinfo</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo</span>&#160;retrieves the number of raster images and the number of file attributes contained in a file. This information is often useful in index validation, sequential searches, or memory alloca&#173;tion. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRfileinfo(gr_id, &amp;n_images, &amp;n_file_attrs);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgfinfo(gr_id, n_images, n_file_attrs)</p>
 <p class="Body">The number of images in the file and the total number of file attributes will be stored in the argu&#173;ments <span class="VarName">n_images</span>&#160;and <span class="VarName">n_file_attrs</span>, respectively. </p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo</span>&#160;returns <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) if successful or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. &#160;The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo</span>&#160;are further described in <a href="#XREF_22684_TABLE_9F">(See Table&nbsp;8G on page&nbsp;322)</a>.</p>
 <p class="Heading3"><a name="IX_obtaining_information_12"></a>8.9.2<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_21293_GRgetiminfo"></a>Obtaining Information about an Image: GRgetiminfo</p>
 <p class="Body"><a name="IX_description_266"></a>It is impossible to allocate the proper amount of memory to buffer the image data when the num&#173;ber of components, dimension sizes, and/or data type of the image are unknown. The routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetiminfo</span> retrieves this required information. To access information about an image, the call&#173;ing program must contain the following:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRgetiminfo(ri_id, name, &amp;n_comps, &amp;data_type, &amp;interlace_mode, dim_sizes, &amp;n_attrs);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mggiinf(ri_id, name, n_comps, data_type, interlace_mode, dim_sizes, n_attrs)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetiminfo</span> takes a raster image identifier as input, and returns the name, number of compo&#173;nents, data type, interlace mode, dimension size, and number of attributes for the corresponding image in the arguments <span class="VarName">name</span>, <span class="VarName">n_comps</span>, <span class="VarName">data_type</span>, <span class="VarName">interlace_mode</span>, <span class="VarName">dim_sizes</span>, and <span class="VarName">n_attrs</span>&#160;respectively. The number of components of an image array element corresponds to the order of a vdata field, therefore this implementation of image components in the GR interface is flexible enough to accommodate any representation of pixel data. The calling program determines this representation; the GR interface recognizes only the raw byte configuration of the data. The attribute count will only reflect the number of attributes assigned to the image array; file attributes are not included.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetiminfo</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters of this routine are fur&#173;ther defined in <a href="#XREF_22684_TABLE_9F">Table 8G</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_154"></a><a name="IX_parameter_list_153"></a><span class="StepNumber">TABLE 8G<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_22684_TABLE_9F"></a>GRfileinfo and GRgetiminfo Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.67pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 63.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 101.679pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 159.321pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="3" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRfileinfo</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgfinfo)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">gr_id</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_images</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of raster images in the file</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_file_attrs</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of global attributes in the file</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="7" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetiminfo</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mggiinf)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">name</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">char *</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">character*(*)</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Name of the raster image</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_comps</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of pixel components in the pixel</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data_type</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Pixel data type</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">interlace_mode</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Interlace mode of the data in the raster image</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">dim_sizes</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 [2]</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer (2)</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array containing the size of each dimension in the raster image</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_attrs</p>
</td>
  <td style="width : 45.482pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 56.197pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 159.321pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of raster image attributes</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Heading3"><a name="IX_getting_the_index_of_a"></a>8.9.3<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_10010_GRreftoindex_and"></a>Obtaining the Reference Number of a Raster Image from Its Identifier: GRidtoref</p>
 <p class="Body"><a name="IX_description_267"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRidtoref</span>&#160;returns either the reference number of the raster image identified by the parameter <span class="VarName">ri_id</span>, or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) upon unsuccessful completion. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRidtoref</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ref = GRidtoref(ri_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ref = mgid2rf(ri_id)</p>
 <p class="Body">This routine is further defined in <a href="#XREF_27712_TABLE_8F_GRidtoref">(See Table&nbsp;8H on page&nbsp;325)</a>.</p>
 <p class="Heading3">8.9.4<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span>Obtaining the Index of a Raster<a name="XREF_28236_8_8_4_Obtaining"></a>&#160;Image from Its Reference Number: GRreftoindex</p>
 <p class="Body"><a name="IX_description_268"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreftoindex</span>&#160;returns either the index of the raster image specified by its reference number, <span class="VarName">ref</span>, or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) upon unsuccessful completion. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreftoindex</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-size  : 8.0pt; "><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></span>ri_index = GRreftoindex(gr_id, ref);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_index = mgr2idx(gr_id, ref)</p>
 <p class="Body">This routine is further defined in <a href="#XREF_27712_TABLE_8F_GRidtoref">Table 8H</a>.</p>
 <p class="Heading3">8.9.5<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_17067_8_8_5_Obtaining"></a>Obtaining the Index of a Raster Image from Its Name: GRnametoindex</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRnametoindex </span>returns the index of the raster image specified by its name or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) upon unsuccessful completion. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRnametoindex</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_index = GRnametoindex(gr_id, name);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ri_index = mgr2idx(gr_id, name)</p>
 <p class="Body">This routine is further defined in <a href="#XREF_27712_TABLE_8F_GRidtoref">Table 8H</a>.</p>
 <p class="Heading3">8.9.6<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_54086_8_9_6_Obtaining"></a>Obtaining Compression Information for a Raster Image: GRgetcompinfo</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetcompinfo </span>retrieves the type of compression used to store a raster image and, when appro&#173;priate, the required compression parameters. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; "> GRgetcompinfo</span>&#160;replaces <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetcompress</span>&#160;because this function has flaws, causing failure for some chunked and chunked/compressed data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetcompinfo </span>takes one input parameter, <span class="VarName">ri_id</span>, a raster image identifier, and two output param&#173;eters, <span class="VarName">comp_type</span>, for the type of compression used when the image was written, and either <span class="VarName">c_info</span>&#160;(a C struct) or <span class="VarName">comp_prm</span>&#160;(a FORTRAN-77 array) for the returned compression parameters. &#160;</p>
 <p class="Body">Valid <span class="VarName">comp_type</span> values are as follows:</p>
 <p class="FM_List10pt"><span style="font-family : Courier New; font-size  : 8.0pt; ">COMP_CODE_NONE</span>&#160;(or <span style="font-family : Courier New; font-size  : 8.0pt; ">0</span>) for no compression</p>
 <p class="FM_List10pt"><span style="font-family : Courier New; font-size  : 8.0pt; ">COMP_CODE_RLE</span>&#160;(or <span style="font-family : Courier New; font-size  : 8.0pt; ">1</span>) for RLE run-length encoding</p>
 <p class="FM_List10pt"><span style="font-family : Courier New; font-size  : 8.0pt; ">COMP_CODE_SKPHUFF</span>&#160;(or <span style="font-family : Courier New; font-size  : 8.0pt; ">3</span>) for Skipping Huffman compression</p>
 <p class="FM_List10pt"><span style="font-family : Courier New; font-size  : 8.0pt; ">COMP_CODE_DEFLATE</span>&#160;(or <span style="font-family : Courier New; font-size  : 8.0pt; ">4</span>) for GZIP compression</p>
 <p class="FM_List10pt"><span style="font-family : Courier New; font-size  : 8.0pt; ">COMP_CODE_SZIP</span>&#160;(or <span style="font-family : Courier New; font-size  : 8.0pt; ">5</span>) for Szip compression (not for Fortran)</p>
 <p class="FM_List10pt"><span style="font-family : Courier New; font-size  : 8.0pt; ">COMP_CODE_JPEG</span>&#160;(or <span style="font-family : Courier New; font-size  : 8.0pt; ">7</span>) for JPEG compression</p>
 <p class="Body">The <span class="VarName">c_info</span> struct is of type<span class="DefName"> comp_info</span>, contains algorithm-specific information for the library compression routines, and is described in the<span class="DefName">&#160;hcomp.h </span>header file.</p>
 <p class="Body">The <span class="VarName">comp_prm</span>&#160;parameter is an array of several elements. &#160;</p>
 <p class="Body">For Skipping Huffman compression, <span class="VarName">comp_prm(1) </span>contains the skip value,<span class="VarName">&#160;</span><span class="Subscript">skphuff_skp_size</span>. &#160;</p>
 <p class="Body">For GZIP compression, <span class="VarName">comp_prm(1) </span>contains the deflation value,<span class="VarName">&#160;</span><span class="Subscript">deflate_value</span>.</p>
 <p class="Body">For other compression types,<span class="VarName">&#160;comp_prm </span>is ignored. &#160;Currently, Szip is not yet supported in For&#173;tran GR interface.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetcompinfo </span>returns <span class="DefName">SUCCESS</span>&#160;(or <span class="DefName">0</span>) if it is successful or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) upon unsuccessful com&#173;pletion. </p>
 <p class="Body">The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetcompinfo</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRgetcompinfo(ri_id, comp_type, c_info);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mggcompress(ri_id, comp_type, comp_prm)</p>
 <p class="Body">This routine is further defined in <a href="#XREF_27712_TABLE_8F_GRidtoref">Table 8H</a>.</p>
 <p class="Heading3">8.9.7<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span>Checking Whether a Raster Image Is To Be Mapped: GR2bmapped</p>
 <p class="Body">This function was originally added to support the HDF4 File Content Project. &#160;The tool, produced from the project, maps the contents of HDF4 files. &#160;Supporting for raster images was limited as requested by the project’s sponsor. &#160;Thus, only certain types of images, which satisfy a set of con&#173;ditions, are to be mapped.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GR2bmapped </span>will set <span class="VarName">tobe_mapped</span>&#160;to <span class="DefName">TRUE</span>&#160;if the given raster image, <span class="VarName">ri_id</span>, satisfies the follow&#173;ing conditions:</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>being an 8-bit raster image,</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>having one component,</p>
 <p class="Bullet2"><span class="FM_BulletSymbol">•<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>being non-special or RLE compressed only, i.e., no other compressions or chunking,</p>
 <p class="Body">or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>), otherwise. &#160;The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GR2bmapped</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GR2bmapped(ri_id, &amp;tobe_mapped, &amp;name_generated);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Unavailable</p>
 <p class="Body">Another characteristic of the image to be reported by <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GR2bmapped</span>&#160;is whether the image has name that was generated by the library and, if so, <span class="VarName">name_generated</span>&#160;will be set to <span class="DefName">TRUE</span>. &#160;Old images (or images created with pre-GR API) do not have a name and the library would generate a name for it while reading in the file. &#160;The tool from the HDF4 File Content Project needs to make this distinction.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GR2bmapped </span>returns <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>), if successful, or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>), otherwise. &#160;When failure occurs, <span class="VarName">tobe_mapped</span>&#160;and <span class="VarName">name_generated</span>&#160;will be undefined. &#160;This routine is further defined in <a href="#XREF_27712_TABLE_8F_GRidtoref">Table 8H</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_156"></a><a name="IX_parameter_list_155"></a><span class="StepNumber">TABLE 8H<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_27712_TABLE_8F_GRidtoref"></a>GRidtoref, GRreftoindex, GRnametoindex, and GRgetcompinfo Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:383.79pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 64.471pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 58.320pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 111.629pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 149.371pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 30.00pt;">
  <td style="width : 64.471pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRidtoref</p>
  <p class="FM_ReturnType">[uint16]</p>
  <p class="CellFunction">(mgid2rf)</p>
</td>
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 64.471pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreftoindex</p>
  <p class="FM_ReturnType">[int32]</p>
  <p class="CellFunction">(mgr2idx)</p>
</td>
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">gr_id</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface identifier </p>
</td>
</tr>
  <tr style=" height : 17.00pt;">
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ref</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">uint16</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Reference number of the raster image</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 64.471pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRnametoindex</p>
  <p class="FM_ReturnType">[int32]</p>
  <p class="CellFunction">(mgn2ndx)</p>
</td>
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">gr_id</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface identifier </p>
</td>
</tr>
  <tr style=" height : 17.00pt;">
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">name</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">char *</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">character *(*)</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Name of the raster image</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="4" style="width : 64.471pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetcompinfo</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mggcompress)</p>
</td>
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_type</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_coder_t</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Type of compression</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">c_info</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_info</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Pointer to compression information structure</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_prm(1)</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Compression parameter in array format</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="3" style="width : 64.471pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GR2bmapped</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(unavailable)</p>
</td>
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">tobe_mapped</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">intn *</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">TRUE if the image should be mapped</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 58.320pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">name_generated</p>
</td>
  <td style="width : 54.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">intn *</p>
</td>
  <td style="width : 57.600pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 149.371pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">TRUE if the image's name was generated by the GR API, i.e., not given by applications</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Figure"><span class="StepNumber">EXAMPLE 4.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Obtaining File and Image Information.</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo/mgfinfo</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetiminfo/mggiinf</span>&#160;to obtain information such as the number of images and attributes in an HDF file and the characteris&#173;tics of a raster image in the file.</p>
 <p class="Body">In this example, the program gets the number of images in the file using the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfileinfo/mgfinfo</span>. For each image, the program then obtains and displays its name, number of components, data type, interlace mode, dimension sizes, and number of attributes using the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetim&#173;info/mggiinf</span>.</p>
 <p class="FM_CodeCTitle">C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&quot;General_RImages.hdf&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 file_id, gr_id, ri_id,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_rimages, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* number of raster images in the file */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_file_attrs, &#160;&#160;&#160;&#160;&#160;/* number of file attributes */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_index, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* index of a image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes[2], &#160;&#160;&#160;&#160;&#160;/* dimensions of an image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_comps, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* number of components an image contains */</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, &#160;&#160;&#160;/* interlace mode of an image */ </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_type, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* number type of an image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_attrs; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* number of attributes belong to an image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;char &#160;name[MAX_GR_NAME], /* name of an image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;*type_string, &#160;&#160;&#160;&#160;&#160;&#160;/* mapped text of a number type */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;*interlace_string; &#160;/* mapped text of an interlace mode */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the file for reading.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_READ, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Determine the contents of the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRfileinfo (gr_id, &amp;n_rimages, &amp;n_file_attrs);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* For each image in the file, get and display the image information.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">   printf (&quot;RI#    Name       Components  Type         Interlace     \</p>
 <p class="FM_ExampleCode">   Dimensions   Attributes\n\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (ri_index = 0; ri_index &lt; n_rimages; ri_index++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_id = GRselect (gr_id, ri_index);</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = GRgetiminfo (ri_id, name, &amp;n_comps, &amp;data_type, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;interlace_mode, dim_sizes, &amp;n_attrs);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;* Map the number type and interlace mode into text strings for output </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;* readability. &#160;Note that, in this example, only two possible types </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;* are considered because of the simplicity of the example. &#160;For real </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;* problems, all possible types should be checked and, if reading the</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;* data is desired, the size of the type must be determined based on the</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;* machine where the program resides.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if (data_type == DFNT_CHAR8)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type_string = &quot;Char8&quot;;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;else if (data_type == DFNT_INT16)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type_string = &quot;Int16&quot;;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;else</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type_string = &quot;Unknown&quot;;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;switch (interlace_mode)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case MFGR_INTERLACE_PIXEL:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = &quot;MFGR_INTERLACE_PIXEL&quot;;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case MFGR_INTERLACE_LINE:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = &quot;MFGR_INTERLACE_LINE&quot;;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case MFGR_INTERLACE_COMPONENT:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = &quot;MFGR_INTERLACE_COMPONENT&quot;;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;default:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = &quot;Unknown&quot;;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;} /* switch */</p>
 <p class="FM_ExampleCode">&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;* Display the image information for the current raster image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">          printf (&quot;%d  %s       %d      %s   %s     %2d,%2d         %d\n&quot;, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_index, name, n_comps, type_string, interlace_string,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes[0], dim_sizes[1], n_attrs);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;* Terminate access to the current raster image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the GR interface and close the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program image_info</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*19 FILE_NAME</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME = ’General_RImages.hdf’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_READ</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_READ = 1)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer mgstart, mgselct, mgfinfo, mggiinf, mgendac, mgend </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer file_id, gr_id, ri_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer n_rimages, n_file_attrs, ri_index</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer n_comps, interlace_mode, n_attrs, data_type</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer dim_sizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*10 type_string</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*24 interlace_string</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*64 name</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the HDF file for reading.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_READ, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Determine the contents of the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgfinfo(gr_id, n_rimages, n_file_attrs)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;For each image in the file, get and display image information.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 100 ri_index = 0, n_rimages-1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_id = mgselct(gr_id, ri_index)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = mggiinf(ri_id, name, n_comps, data_type,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, dim_sizes, n_attrs)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Map the number type and interlace mode into text strings for</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;output readability.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if(data_type .eq. 4) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type_string = ’DFNT_CHAR8’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;else if(data_type .eq. 22) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type_string = ’DFNT_INT16’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;else</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type_string = ’Unknown’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if (interlace_mode .eq. 0) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = ’MFGR_INTERLACE_PIXEL’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;else if(interlace_mode .eq. 1) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = ’MFGR_INTERLACE_LINE’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;else if(interlace_mode .eq. 2) then</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = ’MFGR_INTERLACE_COMPONENT’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;else</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_string = ’Unknown’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Display the image information for the current image.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Image index: ’, ri_index</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) ’Image name: ’, name </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Number of components: ’, n_comps</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) ’Number type: ’, type_string </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Interlace mode: ’, interlace_string</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Dimnesions: ’, dim_sizes(1), dim_sizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Number of image attributes: ’, n_attrs</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the current raster image.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode">100 &#160;&#160;continue</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the GR interface and close the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="Heading2"><a name="IX_General_raster_image_4"></a>8.10<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_26405_3_9_User_defined"></a>GR Data Set Attributes</p>
 <p class="Body">The GR interface provides tools that attach attributes to particular images. This capability is simi&#173;lar to, though more limited than, attribute function capabilities of the SD interface. The concepts of user-defined and predefined attributes are explained in <a href="../UG_SD/UG_SD.htm#XREF_13938_Scientific_Data">Chapter 3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;Scientific Data Sets (SD API)&quot;</a>. The GR implementation of attributes is similar to the SD implementation. Attributes are not written out to a file until access to the object the attribute is attached to is terminated.</p>
 <p class="Heading3"><a name="IX_predefined"></a>8.10.1<a name="XREF_55039_8_10_1_Predefined"></a>Predefined GR Attributes</p>
 <p class="Body"><a name="IX_description_270"></a><a name="IX_description_269"></a>The GR API library has only one predefined attribute: <span class="DefName">FILL_ATTR</span>. This attribute defines a fill pixel, which is analogous to a fill value in the SD interface. It represents the default value that is written to each element of an image array not explicitly written to by the calling program, i.e., when only a portion of the entire image array is filled with data. This value must of the same data type as the rest of the initialized image data. The routine used to set the fill value, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span>, is explained in the next section.</p>
 <p class="Heading3"><a name="IX_setting_user_defined"></a>8.10.2<a name="XREF_33193_GRsetattr"></a>Setting User-defined Attributes: GRsetattr</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span>&#160;creates or modifies an attribute for either a file or a raster image. If the attribute with the specified name does not exist, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span>&#160;creates a new one. If the named attribute already exists, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span>&#160;resets all the values that are different from those provided in its argument list. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRsetattr(obj_id, attr_name, data_type, n_values, attr_value);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgsnatt(obj_id, attr_name, data_type, n_values, attr_value)</p>
 <p class="FM_syntaxorbot"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgscatt(obj_id, attr_name, data_type, n_values, attr_value)</p>
 <p class="Body">The first argument, <span class="VarName">obj_id</span>, can either be the GR interface identifier or raster image identifier. The argument <span class="VarName">attr_name</span>&#160;contains the name of the attribute and can be no more than <span class="DefName">H4_MAX_GR_NAME</span>&#160;(or<span class="DefName"> 256</span>) characters in length. Passing the name of an existing attribute will overwrite the value portion of that attribute. </p>
 <p class="Body">The arguments <span class="VarName">data_type</span>, <span class="VarName">n_values</span>, and <span class="VarName">attr_value</span>&#160;describe the right side of the <span class="VarName">label=value</span>&#160;equation. The <span class="VarName">attr_value</span>&#160;argument contains one or more values of the same data type. The <span class="VarName">data_type</span>&#160;argument describes the data type for all values in the attribute and <span class="VarName">n_values</span>&#160;contains the total number of values in the attribute. </p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgsnatt</span>&#160;writes numeric attribute data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgscatt</span> writes character attribute data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr</span>&#160;are further described in <a href="#XREF_15192_TABLE_4C_The">(See Table&nbsp;8I on page&nbsp;334)</a>.</p>
 <p class="Figure"><span class="StepNumber">EXAMPLE 5.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Operations on File and Raster Image Attributes.</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetattr/mgsnatt/mgscatt</span>&#160;to assign attributes to an HDF file and to an image.</p>
 <p class="Body">In this example, the program sets two attributes to the existing file &quot;General_RImages.hdf&quot; and two attributes to the image named &quot;Image Array 2&quot;. The file is created by the program in Example 1 and the image is created by the program in Example 2. &#160;The values of the second attribute of the image are of type <span class="VarName">int16</span>&#160;and the values of the other three attributes are of type <span class="VarName">char8</span>.</p>
 <p class="FM_CodeCTitle">C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;General_RImages.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;IMAGE_NAME &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Image Array 2&quot;</p>
 <p class="FM_ExampleCode">#define &#160;F_ATT1_NAME &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;File Attribute 1&quot;</p>
 <p class="FM_ExampleCode">#define &#160;F_ATT2_NAME &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;File Attribute 2&quot;</p>
 <p class="FM_ExampleCode">#define &#160;RI_ATT1_NAME &#160;&#160;&#160;&#160;&#160;&#160;&quot;Image Attribute 1&quot;</p>
 <p class="FM_ExampleCode">#define &#160;RI_ATT2_NAME &#160;&#160;&#160;&#160;&#160;&#160;&quot;Image Attribute 2&quot;</p>
 <p class="FM_ExampleCode">#define &#160;F_ATT1_VAL &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Contents of First FILE Attribute&quot;</p>
 <p class="FM_ExampleCode">#define &#160;F_ATT2_VAL &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Contents of Second FILE Attribute&quot;</p>
 <p class="FM_ExampleCode">#define &#160;F_ATT1_N_VALUES &#160;&#160;&#160;32</p>
 <p class="FM_ExampleCode">#define &#160;F_ATT2_N_VALUES &#160;&#160;&#160;33</p>
 <p class="FM_ExampleCode">#define &#160;RI_ATT1_VAL &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Contents of IMAGE’s First Attribute&quot;</p>
 <p class="FM_ExampleCode">#define &#160;RI_ATT1_N_VALUES &#160;&#160;35</p>
 <p class="FM_ExampleCode">#define &#160;RI_ATT2_N_VALUES &#160;&#160;6</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 gr_id, ri_id, file_id,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_index;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 ri_attr_2[RI_ATT2_N_VALUES] = {1, 2, 3, 4, 5, 6};</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_WRITE, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Set two file attributes to the file with names, data types, numbers of </p>
 <p class="FM_ExampleCode"> &#160;&#160;* values, and values of the attributes specified.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = GRsetattr (gr_id, F_ATT1_NAME, DFNT_CHAR8, F_ATT1_N_VALUES, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)F_ATT1_VAL); </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = GRsetattr (gr_id, F_ATT2_NAME, DFNT_CHAR8, F_ATT2_N_VALUES, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)F_ATT2_VAL);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Obtain the index of the image named IMAGE_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_index = GRnametoindex (gr_id, IMAGE_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Obtain the identifier of this image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_id = GRselect (gr_id, ri_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Set two attributes to the image with names, data types, numbers of </p>
 <p class="FM_ExampleCode"> &#160;&#160;* values, and values of the attributes specified.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = GRsetattr (ri_id, RI_ATT1_NAME, DFNT_CHAR8, RI_ATT1_N_VALUES, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)RI_ATT1_VAL);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = GRsetattr (ri_id, RI_ATT2_NAME, DFNT_INT16, RI_ATT2_N_VALUES, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(VOIDP)ri_attr_2);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the image and to the GR interface, and close the</p>
 <p class="FM_ExampleCode"> &#160;&#160;* HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;set_attribute</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*19 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*13 IMAGE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*16 F_ATT1_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*16 F_ATT2_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*17 RI_ATT1_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*17 RI_ATT2_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*32 F_ATT1_VAL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*33 F_ATT2_VAL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;F_ATT1_N_VALUES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;F_ATT2_N_VALUES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*35 RI_ATT1_VAL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;RI_ATT1_N_VALUES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;RI_ATT2_N_VALUES</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME &#160;&#160;&#160;= ’General_RImages.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGE_NAME &#160;&#160;= ’Image Array 2’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT1_NAME &#160;= ’File Attribute 1’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT2_NAME &#160;= ’File Attribute 2’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATT1_NAME = ’Image Attribute 1’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATT2_NAME = ’Image Attribute 2’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT1_VAL &#160;&#160;= ’Contents of First FILE Attribute’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT2_VAL &#160;&#160;= ’Contents of Second FILE Attribute’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT1_N_VALUES = 32,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT2_N_VALUES = 33,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATT1_VAL = ’Contents of IMAGE’’s First Attribute’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATT1_N_VALUES = 35,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATT2_N_VALUES = 6)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_WRITE, DFNT_INT16, DFNT_CHAR8</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_WRITE &#160;= 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_CHAR8 &#160;&#160;= 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT16 &#160;&#160;= 22)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer mgstart, mgscatt, mgsnatt , mgn2ndx,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;mgselct, mgendac, mgend </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;file_id, gr_id, ri_id, ri_index</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 ri_attr_2(RI_ATT2_N_VALUES)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;i</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 10 i = 1, RI_ATT2_N_VALUES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_attr_2(i) = i</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;continue </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_WRITE, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set two file attributes to the file with names, data type, numbers of</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;values, and values of attributes specified.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = mgscatt(gr_id, F_ATT1_NAME, DFNT_CHAR8, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT1_N_VALUES, F_ATT1_VAL)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = mgscatt(gr_id, F_ATT2_NAME, DFNT_CHAR8, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;F_ATT2_N_VALUES, F_ATT2_VAL)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Obtain the index of the image named IMAGE_NAMR.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_index = mgn2ndx(gr_id, IMAGE_NAME)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Obtain the identifier of this image. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_id = mgselct(gr_id, ri_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set two attributes of the image with names, data types, number of</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;values, and values of the attributes specified. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = mgscatt(ri_id, RI_ATT1_NAME, DFNT_CHAR8, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATT1_N_VALUES, RI_ATT1_VAL) </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;status = mgsnatt(ri_id, RI_ATT2_NAME, DFNT_INT16, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATT2_N_VALUES, ri_attr_2)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the image and to the GR interface,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and close the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="Heading3"><a name="IX_querying_user_defined"></a>8.10.3<a name="XREF_11523_GRfindattr_and"></a>Querying User-Defined Attributes: GRfindattr and GRattrinfo</p>
 <p class="Body"><a name="IX_description_273"></a><a name="IX_description_272"></a><a name="IX_description_271"></a>Each attribute associated with an object has a unique <span class="Definition">attribute index</span>, a value ranging from 0 to the total number of attributes attached to the object - 1. Given a GR interface or raster image identifier and an attribute name, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfindattr</span>&#160;will return a valid attribute index of the file or raster image attribute if the attribute exists. The attribute index can then be used to retrieve information about the attribute or its values. Given a GR interface or raster image identifier and a valid attribute index, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRattrinfo </span>returns the name, data type, and number of values for the file or raster image attribute if the attribute exists.</p>
 <p class="Body">The syntax for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfindattr</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRattrinfo</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>attr_index = GRfindattr(obj_id, attr_name);</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRattrinfo(obj_id, attr_index, attr_name, &amp;data_type, &amp;n_values);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>attr_index = mgfndat(obj_id, attr_name)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgatinf(obj_id, attr_index, attr_name, data_type, n_values)</p>
 <p class="Body">The parameter <span class="VarName">obj_id</span>&#160;is either a GR interface identifier or a raster image identifier. The parameter <span class="VarName">attr_name</span>&#160;specifies the name of the attribute. The parameter <span class="VarName">attr_index</span>&#160;specifies the index of the attribute to be read. The attribute index is a zero-based integer and must be less than the total num&#173;ber of attributes assigned to the specified object. The parameter <span class="VarName">data_type</span>&#160;specifies the data type of the attribute. And the parameter <span class="VarName">n_values</span> specifies the number of attribute values.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfindattr</span>&#160;returns the attribute index if successful and <span class="VarName">FAIL</span>&#160;(or <span class="VarName">-1</span>) otherwise. &#160;<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRattrinfo</span>&#160;returns <span class="VarName">SUCCEED</span>&#160;(or <span class="VarName">0</span>) if successful and <span class="VarName">FAIL</span>&#160;(or <span class="VarName">-1</span>) otherwise. &#160;The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfind&#173;attr</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRattrinfo</span>&#160;are further described in <a href="#XREF_15192_TABLE_4C_The">Table 8I</a>.</p>
 <p class="Heading3"><a name="IX_reading_user_defined"></a>8.10.4<a name="XREF_17499_GRgetattr"></a>Reading User-defined Attributes: GRgetattr</p>
 <p class="Body"><a name="IX_description_274"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetattr</span>&#160;reads the values of an attribute assigned to the object identified by the parameter <span class="VarName">obj_id</span>. The syntax for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetattr</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRgetattr(obj_id, attr_index, values);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mggnatt(obj_id, attr_index, values)</p>
 <p class="FM_syntaxortop"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mggcatt(obj_id, attr_index, values)</p>
 <p class="Body">The parameter <span class="VarName">obj_id</span>&#160;is either a GR interface identifier or a raster image identifier. The parameter <span class="VarName">attr_index</span>&#160;specifies the index of the attribute to be read. The attribute index is a zero-based integer and must be less than the total number of attributes assigned to the specified object.</p>
 <p class="Body">It is assumed that the buffer <span class="VarName">values</span>, allocated to hold the attribute values, is large enough to hold the data; if not, the data read will be truncated to the size of the buffer. The size of the buffer should be at least <span class="VarName">n_values*sizeof(data_type)</span>&#160;bytes long. If an attribute contains multiple values, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetattr</span>&#160;will return all of them. It is not possible to read a subset of values. </p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetattr</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mggnatt</span>&#160;reads numeric attribute data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mggcatt</span> reads character attribute data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetattr</span>&#160;returns <span class="VarName">SUCCEED</span>&#160;(or <span class="VarName">0</span>) if successful and <span class="VarName">FAIL</span>&#160;(or <span class="VarName">-1</span>) otherwise. &#160;The parameters for <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetattr </span>are further described in <a href="#XREF_15192_TABLE_4C_The">Table 8I</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_160"></a><a name="IX_parameter_list_159"></a><a name="IX_parameter_list_158"></a><a name="IX_parameter_list_157"></a><span class="StepNumber">TABLE 8I<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_15192_TABLE_4C_The"></a>GRsetattr, GRfindattr, GRattrinfo, and GRgetattr Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.67pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 50.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 137.300pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 136.300pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="5" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetattr</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgsnatt/mgscatt)</p>
</td>
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">obj_id</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface or raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">attr_name</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">char *</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">character*(*)</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Name assigned to the attribute</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data_type</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Data type of the attribute</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_values</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of values in the attribute</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">values</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">VOIDP</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid numeric data type&gt;(*)/character*(*)</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer with the attribute values</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRfindattr</p>
  <p class="FM_ReturnType">[int32]</p>
  <p class="CellFunction">(mgfndat)</p>
</td>
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">obj_id</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface or raster image identifier</p>
</td>
</tr>
  <tr style=" height : 17.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">attr_name</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">char *</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">character*(*)</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Name of the attribute</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="5" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRattrinfo</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgatinf)</p>
</td>
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">obj_id</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface or raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">attr_index</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Index for the attribute to be read</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">attr_name</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">char *</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">character*(*)</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Name of the attribute</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data_type</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Data type of the attribute values</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_values</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32 *</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription"> Total number of values in the attribute</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="3" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetattr</p>
  <p class="CellFunction">[intn]</p>
  <p class="CellFunction">(mggnatt/</p>
  <p class="CellFunction">mggcatt)</p>
</td>
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">obj_id</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">GR interface or raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">attr_index</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Index for the attribute to be read</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 50.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">values</p>
</td>
  <td style="width : 47.272pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">VOIDP</p>
</td>
  <td style="width : 90.029pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid numeric data type&gt;(*)/character*(*)</p>
</td>
  <td style="width : 136.300pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer for the attribute values</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Figure"><span class="StepNumber">EXAMPLE 6.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Obtaining File and Image Attributes.</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRattrinfo/mgatinf</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRfindattr/mgfndat</span>, and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetattr/mggnatt/mggcatt</span>&#160;to extract information and values of file and image attributes that were set by the program in Example 5.</p>
 <p class="Body">In this example, the program gets the information about each file attribute, then extracts its values. &#160;The program then selects the second image in the file, finds the attribute named &quot;Image Attribute 2&quot;, obtains the data type and the number of values in the attribute, and extracts its stored values.</p>
 <p class="FM_CodeCTitle">C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&#160;&#160;&#160;&quot;General_RImages.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;RI_ATTR_NAME &#160;&#160;&#160;&quot;Image Attribute 2&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( ) </p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;&#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 &#160;gr_id, ri_id, file_id,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f_att_index, &#160;&#160;&#160;&#160;/* index of file attributes */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_att_index, &#160;&#160;&#160;/* index of raster image attributes */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_type, &#160;&#160;&#160;&#160;&#160;&#160;/* image data type */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_values, &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* number of values in an attribute */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value_index, &#160;&#160;&#160;&#160;/* index of values in an attribute */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_rimages, &#160;&#160;&#160;&#160;&#160;&#160;/* number of raster images in the file */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_file_attrs; &#160;&#160;&#160;/* number of file attributes */</p>
 <p class="FM_ExampleCode"> &#160;&#160;char &#160;&#160;attr_name[MAX_GR_NAME]; &#160;/* buffer to hold the attribute name &#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;VOIDP &#160;data_buf; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* buffer to hold the attribute values &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;int16 *int_ptr; &#160;&#160;&#160;&#160;&#160;/* int16 pointer to point to a void data buffer &#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;char8 *char_ptr; &#160;&#160;&#160;&#160;/* char8 pointer to point to a void data buffer &#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_READ, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Determine the number of attributes in the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRfileinfo (gr_id, &amp;n_rimages, &amp;n_file_attrs);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;if (status != FAIL &amp;&amp; n_file_attrs &gt; 0)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (f_att_index = 0; f_att_index &lt; n_file_attrs; f_att_index++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Get information about the current file attribute.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = GRattrinfo (gr_id, f_att_index, attr_name, &amp;data_type, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;n_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Allocate a buffer to hold the file attribute data. &#160;In this example,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* knowledge about the data type is assumed to be available from </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* the previous example for simplicity. &#160;In reality, the size</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* of the type must be determined based on the machine where the </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* program resides.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (data_type == DFNT_CHAR8)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data_buf = malloc (n_values * sizeof (char8));</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (data_buf == NULL)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode">               printf (&quot;Unable to allocate space for attribute data.\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit (1);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode">            printf (&quot;Unable to determine data type to allocate data buffer.\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit (1);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Read and display the attribute values.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = GRgetattr (gr_id, f_att_index, (VOIDP)data_buf);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char_ptr = (char8 *) data_buf;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf (&quot;Attribute %s: &quot;, attr_name);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (value_index = 0; value_index &lt; n_values; value_index++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf (&quot;%c&quot;, char_ptr[value_index]);</p>
 <p class="FM_ExampleCode">         printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Free the space allocated for the data buffer.</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;free (data_buf);</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;} /* for */</p>
 <p class="FM_ExampleCode"> &#160;&#160;} /* if */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Select the second image in the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_id = GRselect (gr_id, 1);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Find the image attribute named RI_ATTR_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_att_index = GRfindattr (ri_id, RI_ATTR_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get information about the attribute.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRattrinfo (ri_id, ri_att_index, attr_name, &amp;data_type, &amp;n_values);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Allocate a buffer to hold the file attribute data. &#160;As mentioned above,</p>
 <p class="FM_ExampleCode"> &#160;&#160;* knowledge about the data type is assumed to be available from</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* the previous example for simplicity. &#160;In reality, the size of the </p>
 <p class="FM_ExampleCode"> &#160;&#160;* type must be determined based on the machine where the program resides.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;if (data_type == DFNT_INT16)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data_buf = malloc (n_values * sizeof (int16));</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Read and display the attribute values.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRgetattr (ri_id, ri_att_index, (VOIDP)data_buf);</p>
 <p class="FM_ExampleCode">   printf (&quot;\nAttribute %s: &quot;, RI_ATTR_NAME);</p>
 <p class="FM_ExampleCode"> &#160;&#160;int_ptr = (int16 *)data_buf;</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (value_index = 0; value_index &lt; n_values; value_index++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;printf (&quot;%d &quot;, int_ptr[value_index]);</p>
 <p class="FM_ExampleCode">   printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Free the space allocated for the data buffer.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;free (data_buf);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the raster image and to the GR interface, and</p>
 <p class="FM_ExampleCode"> &#160;&#160;* close the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN: <span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;get_attribute</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*19 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*17 RI_ATTR_NAME</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME &#160;&#160;&#160;= ’General_RImages.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RI_ATTR_NAME &#160;= ’Image Attribute 2’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_READ, DFNT_INT16, DFNT_CHAR8</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_READ &#160;&#160;= 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_CHAR8 &#160;&#160;= 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_INT16 &#160;&#160;= 22)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer mgstart, mgfinfo, mgatinf, mggcatt, mggnatt , mgfndat,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;mgselct, mgendac, mgend </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;file_id, gr_id, ri_id</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;f_att_index, ri_att_index, data_type, n_values </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;n_rimages, n_file_attrs </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*2 &#160;&#160;&#160;int_buf(10)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*17 attr_name</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*80 char_buf</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;i</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_READ, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Determine the number of attributes in the file. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgfinfo(gr_id, n_rimages, n_file_attrs)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;if ((status .NE. -1) .AND. (n_file_attrs .GT. 0)) then</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 f_att_index = 0, n_file_attrs-1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;Get information about the current file attribute.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = mgatinf(gr_id, f_att_index, attr_name, data_type,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;Check whether data type is DFNT_CHAR8 in order to use allocated buffer.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(data_type .NE. DFNT_CHAR8) then</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;’Unable to determine data type to use allocated buffer’</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Read and display the attribute values.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;status = mggcatt(gr_id, f_att_index, char_buf)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) ’Attribute ’, attr_name, ’ : ’, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char_buf(1:n_values)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;endif</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Select the second image in the file.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;ri_id = mgselct(gr_id, 1) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Find the image attribute named RI_ATTR_NAME. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_att_index = mgfndat(ri_id, RI_ATTR_NAME)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get information about the attribute.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgatinf(ri_id, ri_att_index, attr_name, data_type,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_values)</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read and display attribute values.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mggnatt(ri_id, ri_att_index, int_buf)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) ’Attributes :’, (int_buf(i), i = 1, n_values)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the image and to the GR interface,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and close the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode"><a name="IX_General_raster_image_5"></a>&nbsp;</p>
 <p class="Heading2"><a name="IX_reading_and_writing"></a>8.11<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span><a name="XREF_31041_9_10_Reading_and"></a>Reading and Writing Palette Data Using the GR Interface</p>
 <p class="Body">The GR API library includes routines that read, write, and access information about palette data attached to GR images. Although this functionality is also provided by the HDF Palette API library, it is not a recommended practice to use the Palette API to access and manipulate palette objects created by GR interface routines.</p>
 <p class="Body"><a name="IX_description_275"></a><a name="IX_LUT_See_Color_lookup"></a>The routines are named <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRluttoref</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritelut</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqlutil</span>, and<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">&#160;GRreadlut</span>. Note that the routine names use the term <span class="Definition">LUT</span>&#160;to refer to palettes; LUT stands for color <span class="Definition">lookup tables</span>. </p>
 <p class="Heading3"><a name="IX_obtaining_a_palette"></a>8.11.1<a name="XREF_13955_GRgetlutid"></a>Obtaining a Palette Identifier: GRgetlutid</p>
 <p class="Body">Given a palette index, the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid</span>&#160;is used to get the palette identifier for the specified palette.</p>
 <p class="Body"><a name="IX_description_276"></a>The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid</span>&#160;function takes two arguments, <span class="VarName">ri_id</span>, the raster image identifier of the image that has the palette attached to it, and <span class="VarName">lut_index</span>, the index of the palette, and returns the value of the palette identifier corresponding to the specified image. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pal_id = GRgetlutid(ri_id, lut_index);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pal_id = mggltid(ri_id, lut_index)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid</span>&#160;returns the value of the palette identifier if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid</span>&#160;parameters are further discussed in <a href="#XREF_14769_TABLE_8K">Table 8J</a>.</p>
 <p class="Heading3">8.11.2Obtaining the Number of Palettes Associated with an Image: GRgetnluts</p>
 <p class="Body">Given an image identifier, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetnluts</span> is used to determne the number of palettes currently asso&#173;ciated with an image.</p>
 <p class="Body">The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetnluts</span>&#160;function takes one argument, <span class="VarName">ri_id</span>, a raster image identifier, and returns the number of palettes associated with that imare. &#160;The syntax of GRgetnluts is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>n_luts = GRgetnluts(ri_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>n_luts = mggnluts(ri_id)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetnluts</span>&#160;returns the number of palettes associated with the identified image if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetnluts</span>&#160;parameters are further discussed in <a href="#XREF_14769_TABLE_8K">Table 8J</a>.</p>
 <p class="Heading3">8.11.3<a name="XREF_22530_GRluttoref"></a>Obtaining the Reference Number of a Specified Palette: GRluttoref</p>
 <p class="Body">Given a palette identifier, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRluttoref</span>&#160;can be used to obtain the reference number of the specified palette.</p>
 <p class="Body"><a name="IX_description_277"></a><a name="IX_retrieving_the_reference_1"></a>The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRluttoref</span>&#160;routine takes one argument, <span class="VarName">pal_id</span>, a palette identifier, and returns the reference number of the palette. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRluttoref</span><span style="letter-spacing : -0.03em; ">&#160;is commonly used to annotate the palette or to include the palette within a vgroup. </span>The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pal_ref = GRluttoref(pal_id);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pal_ref = mglt2rf(pal_id)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRluttoref</span>&#160;returns the reference number of the palette if successful and <span class="DefName">0</span>&#160;otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRlut&#173;toref</span>&#160;parameters are further discussed in <a href="#XREF_14769_TABLE_8K">Table 8J</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_161"></a><span class="StepNumber">TABLE 8J<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_14769_TABLE_8K"></a>GRgetlutid, GRgetlutinfo, and GRluttoref Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.67pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name</p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 48.400pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 119.316pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 156.284pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 66.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetlutid</p>
  <p class="FM_ReturnType">[int32]</p>
  <p class="CellFunction">(mggltid)</p>
</td>
  <td style="width : 48.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 66.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 156.284pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 17.00pt;">
  <td style="width : 48.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">lut_index</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 66.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 156.284pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Palette index</p>
</td>
</tr>
  <tr style=" height : 30.00pt;">
  <td style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRluttoref</p>
  <p class="FM_ReturnType">[uint16]</p>
  <p class="CellFunction">(mglt2rf)</p>
</td>
  <td style="width : 48.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">pal_id</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 66.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 156.284pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Palette identifier</p>
</td>
</tr>
  <tr style=" height : 30.00pt;">
  <td style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetnluts</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mggnluts)</p>
</td>
  <td style="width : 48.400pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 66.801pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 156.284pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Heading3"><a name="IX_obtaining_palette"></a>8.11.4<a name="XREF_15860_GRgetlutinfo"></a>Obtaining Palette Information: GRgetlutinfo</p>
 <p class="Body"><a name="IX_description_278"></a>Given a palette identifier, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo</span> retrieves information about the palette and its compo&#173;nents.</p>
 <p class="Body"><a name="IX_description_279"></a>The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo</span>&#160;function takes one input argument, <span class="VarName">pal_id</span>, the identifier of the palette, and sev&#173;eral return parameters. &#160;The return parameters are <span class="VarName">n_comps</span>, the number of components of the pal&#173;ette; <span class="VarName">data_type</span>, the data type of the palette data; <span class="VarName">interlace_mode</span>, the interlace mode of the stored palette data; and <span class="VarName">num_entries</span>, the number of entries in the palette. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo</span>&#160;is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRgetlutinfo(pal_id, &amp;n_comps, &amp;data_type, &amp;interlace_mode, &amp;num_entries);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgglinf(pal_id, n_comps, data_type, interlace_mode, num_entries)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo</span>&#160;returns <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo</span>&#160;parameters are further discussed in <a href="#XREF_14769_TABLE_8K">Table 8J</a>.</p>
 <p class="Heading3"><a name="IX_writing_palette_data"></a>8.11.5<a name="XREF_37998_GRwritelut"></a>Writing Palette Data: GRwritelut</p>
 <p class="Body"><a name="IX_description_280"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritelut</span>&#160;writes palette data into the palette identified by the parameter <span class="VarName">pal_id</span>. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritelut</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRwritelut(pal_id, n_comps, data_type, interlace_mode, num_entries, pal_data);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgwrlut(pal_id, n_comps, data_type, interlace_mode, num_entries, pal_data)</p>
 <p class="FM_syntaxortop"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; "><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgwclut(pal_id, n_comps, data_type, interlace_mode, num_entries, pal_data)</p>
 <p class="Body">The parameter <span class="VarName">n_comps</span>&#160;specifies the number of pixel components in the palette; it must have a value of at least 1. The parameter <span class="VarName">data_type</span>&#160;specifies the data type of the palette data. Refer to <a href="../UG_Fundmtls/UG_Fundmtls.htm#XREF_13047_TABLE_2E_Standard">(See Table&nbsp;2F on page&nbsp;14)</a> for all data types supported by HDF.</p>
 <p class="Body">The parameter <span class="VarName">interlace_mode</span>&#160;specifies the interlacing in which the palette is to be written. The valid values of <span class="VarName">interlace_mode</span>&#160;are: <span class="DefName">MFGR_INTERLACE_PIXEL</span>&#160;(or <span class="DefName">0</span>), <span class="DefName">MFGR_INTERLACE_LINE</span>&#160;(or <span class="DefName">1</span>) and <span class="DefName">MFGR_INTERLACE_COMPONENT</span>&#160;(or <span class="DefName">2</span>). Refer to <a href="#XREF_19873_SDstart_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a> for further informa&#173;tion.</p>
 <p class="Body">The parameter <span class="VarName">num_entries</span>&#160;specifies the number of entries in the palette. The buffer <span class="VarName">pal_data</span>&#160;contains the palette data.</p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritelut</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwrlut</span>&#160;writes buffered numeric palette data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwclut</span> writes buffered character palette data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritelut</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters of this routine are fur&#173;ther defined in <a href="#XREF_16361_TABLE_8K">(See Table&nbsp;8K on page&nbsp;342)</a>.</p>
 <p class="Heading3">8.11.6Setting the Interlace Mode for a Palette: GRreqlutil </p>
 <p class="Body"><a name="IX_description_281"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqlutil</span>&#160;sets the interlace mode for the next palette to be read. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqlutil</span>&#160;is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRreqlutil(pal_id, interlace_mode);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrltil(pal_id, interlace_mode)</p>
 <p class="Body">The parameter <span class="VarName">interlace_mode</span>&#160;specifies the interlacing that will be in effect for the next palette read operation. The valid values of <span class="VarName">interlace_mode</span>&#160;are: <span class="DefName">MFGR_INTERLACE_PIXEL</span>&#160;(or <span class="DefName">0</span>), <span class="DefName">MFGR_INTERLACE_LINE</span>&#160;(or <span class="DefName">1</span>) and <span class="DefName">MFGR_INTERLACE_COMPONENT</span>&#160;(or <span class="DefName">2</span>). Refer to <a href="#XREF_19873_SDstart_and">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.5.1<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a> for further information.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqlutil</span> may be called at anytime before the read operation of the specified palette. In addi&#173;tion, it may be called more than once; the interlace mode setting specified by the last call to the routine will be used for the next read operation.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqlutil</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters of this routine are fur&#173;ther defined in <a href="#XREF_16361_TABLE_8K">(See Table&nbsp;8K on page&nbsp;342)</a>.</p>
 <p class="Heading3"><a name="IX_reading_palette_data"></a>8.11.7<a name="XREF_24546_GRreadlut"></a>Reading Palette Data: GRreadlut</p>
 <p class="Body"><a name="IX_description_282"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadlut</span>&#160;reads data from the palette identified by the parameter <span class="VarName">pal_id</span>. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRread&#173;lut</span> is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRreadlut(pal_id, pal_data);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrdlut(pal_id, pal_data)</p>
 <p class="FM_syntaxortop"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; "><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>OR</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrclut(pal_id, pal_data)</p>
 <p class="Body">The read data will be stored in the buffer <span class="VarName">pal_data</span>, which is assumed to be sufficient to store the read palette data. The sufficient amount of space needed can be determined using the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo</span>. The palette data is read according to the interlacing mode set by the last call to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreqlutil</span>.</p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadlut</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgrdlut</span> reads numeric pal&#173;ette data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgrclut</span> reads character palette data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadlut</span>&#160;returns either <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) or <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>). The parameters of this routine are further defined in <a href="#XREF_16361_TABLE_8K">Table 8K</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_164"></a><a name="IX_parameter_list_163"></a><a name="IX_parameter_list_162"></a><span class="StepNumber">TABLE 8K<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_16361_TABLE_8K"></a>GRgetlutid, GRwritelut, GRreqlutil, and GRreadlut Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:390.67pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name </p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 63.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 147.801pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 113.199pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="5" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetlutinfo</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgglinf)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">pal_id</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Palette identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_comps</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32*</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer </p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of components in each pal&#173;ette element</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data_type</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32*</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer </p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Data type of the palette data</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">interlace_mode</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32*</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer </p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Interlace mode of the palette data</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">num_entries</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32*</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer </p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer for the size of the palette</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="6" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRwritelut</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgwrlut/</p>
  <p class="CellFunction">mgwclut)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">pal_id</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Palette identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">n_comps</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of components in each pal&#173;ette element</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">data_type</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Type of the palette data</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">interlace_mode</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Interlace mode of the palette data</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">num_entries</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Number of entries in the palette</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">pal_data</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">VOIDP</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid numeric data type&gt;(*)/character*(*)</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer for the palette data to be written</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreqlutil</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgrltil)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">pal_id</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Palette identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">interlace_mode</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">intn</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Interlace mode for the next palette read operation</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreadlut</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgrdlut/</p>
  <p class="CellFunction">mgrclut)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">pal_id</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Palette identifier</p>
</td>
</tr>
  <tr style=" height : 26.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">pal_data</p>
</td>
  <td style="width : 52.515pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">VOIDP</p>
</td>
  <td style="width : 95.286pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid numeric data type&gt;(*)/character*(*)</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer for the palette data to be read</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Figure"><span class="StepNumber">EXAMPLE 7.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Writing a Palette.</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutid/mggltid</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritelut/mgwclut</span>&#160;to attach a palette to a raster image and write data to it.</p>
 <p class="Body">In this example, the program creates an image named &quot;Image with Palette&quot; in the file &quot;Image_with_Palette.hdf&quot;. A palette is then attached to the image and data is written to it.</p>
 <p class="FM_CodeCTitle">C:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Image_with_Palette.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;NEW_IMAGE_NAME &#160;&#160;&#160;&quot;Image with Palette&quot;</p>
 <p class="FM_ExampleCode">#define &#160;N_COMPS_IMG &#160;&#160;&#160;&#160;&#160;&#160;2 &#160;&#160;&#160;&#160;&#160;&#160;/* number of image components */</p>
 <p class="FM_ExampleCode">#define &#160;X_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define &#160;Y_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5</p>
 <p class="FM_ExampleCode">#define &#160;N_ENTRIES &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;256 &#160;&#160;&#160;&#160;/* number of entries in the palette */</p>
 <p class="FM_ExampleCode">#define &#160;N_COMPS_PAL &#160;&#160;&#160;&#160;&#160;&#160;3 &#160;&#160;&#160;&#160;&#160;&#160;/* number of palette’s components */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( )</p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i, j;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;int32 file_id, gr_id, ri_id, pal_id, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;start[2], &#160;&#160;&#160;&#160;/* holds where to start to write for each dimension &#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;edges[2], &#160;&#160;&#160;&#160;/* holds how long to write for each dimension */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dim_sizes[2]; &#160;/* sizes of the two dimensions of the image array &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;uint8 image_buf[Y_LENGTH][X_LENGTH][N_COMPS_IMG]; /* data of first image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;uint8 palette_buf[N_ENTRIES][N_COMPS_PAL];</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Open the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Define the dimensions and interlace mode of the image. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[0] = X_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dim_sizes[1] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the image named NEW_IMAGE_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;ri_id = GRcreate (gr_id, NEW_IMAGE_NAME, N_COMPS_IMG, DFNT_UINT8, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, dim_sizes);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Fill the image data buffer with values.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; Y_LENGTH; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; X_LENGTH; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image_buf[i][j][0] = (i + j) + 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image_buf[i][j][1] = (i + j) + 2;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define the size of the data to be written, i.e., start from the origin</p>
 <p class="FM_ExampleCode"> &#160;&#160;* and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = X_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = Y_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write the data in the buffer into the image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwriteimage (ri_id, start, NULL, edges, (VOIDP)image_buf);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Initialize the palette to grayscale. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i = 0; i &lt; N_ENTRIES; i++) {</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;palette_buf[i][0] = i;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;palette_buf[i][1] = i;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;palette_buf[i][2] = i;</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define palette interlace mode.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get the identifier of the palette attached to the image NEW_IMAGE_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;pal_id = GRgetlutid (ri_id, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write data to the palette.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwritelut (pal_id, N_COMPS_PAL, DFNT_UINT8, interlace_mode,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_ENTRIES, (VOIDP)palette_buf);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Terminate access to the image and to the GR interface, and </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* close the HDF file. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;write_palette</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*22 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*18 NEW_IMAGE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N_ENTRIES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N_COMPS_IMG</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N_COMPS_PAL</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME &#160;&#160;&#160;&#160;&#160;&#160;= ’Image_with_Palette.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NEW_IMAGE_NAME &#160;= ’Image with Palette’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;&#160;= 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH &#160;&#160;&#160;&#160;&#160;&#160;&#160;= 5,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_ENTRIES &#160;&#160;&#160;&#160;&#160;&#160;= 256,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_COMPS_IMG &#160;&#160;&#160;&#160;= 2,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_COMPS_PAL &#160;&#160;&#160;&#160;= 3)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_CREATE, DFNT_CHAR8, DFNT_UINT8, MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_CHAR8 &#160;&#160;= 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_UINT8 &#160;&#160;= 21,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MFGR_INTERLACE_PIXEL = 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer mgstart, mgcreat, mgwcimg, mggltid, mgwclut, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;mgendac, mgend </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;file_id, gr_id, ri_id, pal_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;interlace_mode</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;start(2), stride(2), edges(2), dim_sizes(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;i, j</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;character &#160;image_buf(N_COMPS_IMG, X_LENGTH, Y_LENGTH) </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character &#160;palette_buf(N_COMPS_PAL, N_ENTRIES)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create and open the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define interlace mode and dimensions of the image. &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dim_sizes(2) = Y_lENGTH</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create the raster image array. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_id = mgcreat(gr_id, NEW_IMAGE_NAME, N_COMPS_IMG, DFNT_CHAR8,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode, dim_sizes)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Fill the image data buffer with values. </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 20 i = 1, Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 10 j = 1, X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image_buf(1,j,i) = char(i + j - 1 )</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;image_buf(2,j,i) = char(i + j) </p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">20 &#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the size of the data to be written, i.e., start from the origin</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and go as long as the length of each dimension.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(1) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;start(2) = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;edges(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(1) = 1</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;stride(2) = 1</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write the data in the buffer into the image array.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwcimg(ri_id, start, stride, edges, image_buf)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initilaize the palette buffer to grayscale.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 40 i = 1, N_ENTRIES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do 30 j = 1, N_COMPS_PAL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;palette_buf(j,i) = char(i)</p>
 <p class="FM_ExampleCode">30 &#160;&#160;&#160;&#160;&#160;&#160;&#160;continue</p>
 <p class="FM_ExampleCode">40 &#160;&#160;&#160;continue </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get the identifier of the palette attached to the image NEW_IMAGE_NAME.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;pal_id = mggltid(ri_id, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Set palette interlace mode.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;interlace_mode = MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Write data to the palette.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwclut(pal_id, N_COMPS_PAL, DFNT_UINT8, interlace_mode,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_ENTRIES, palette_buf)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the raster image and to the GR interface,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and close the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode"><a name="IX_reading_and_writing_1"></a>&nbsp;</p>
 <p class="Figure"><span class="StepNumber">EXAMPLE 8.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Reading a Palette.</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetlutinfo/mgglinf</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadlut/mgrclut</span>&#160;to obtain information about a palette and to read palette data.</p>
 <p class="Body">In this example, the program finds and selects the image named &quot;Image with Palette&quot; in the file &quot;Image_with_Palette.hdf&quot;. Then the program obtains information about the palette and reads the palette data.</p>
 <p class="FM_CodeCTitle">C:</p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&#160;&#160;&quot;Image_with_Palette.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;IMAGE_NAME &#160;&#160;&#160;&#160;&quot;Image with Palette&quot;</p>
 <p class="FM_ExampleCode">#define &#160;N_ENTRIES &#160;&#160;&#160;&#160;&#160;256 &#160;&#160;&#160;&#160;/* number of elements of each color */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">main( )</p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i, j;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 file_id, gr_id, ri_id, pal_id, ri_index;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;int32 data_type, n_comps, n_entries, interlace_mode; </p>
 <p class="FM_ExampleCode"> &#160;&#160;uint8 palette_data[N_ENTRIES][3]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* static because of fixed size */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Open the file. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_READ, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Initiate the GR interface. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get the index of the image IMAGR_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_index = GRnametoindex (gr_id, IMAGE_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get image identifier.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_id = GRselect (gr_id, ri_index);</p>
 <p class="FM_ExampleCode">&#160;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Get the identifier of the palette attached to the image. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;pal_id = GRgetlutid (ri_id, ri_index);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Obtain and display information about the palette.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;status = GRgetlutinfo (pal_id, &amp;n_comps, &amp;data_type, &amp;interlace_mode, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;n_entries);</p>
 <p class="FM_ExampleCode">   printf (&quot;Palette: %d components; %d entries\n&quot;, n_comps, n_entries); </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Read the palette data. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRreadlut (pal_id, (VOIDP)palette_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Display the palette data. &#160;Recall that HDF supports only 256 colors.</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Each color is defined by its 3 components. Therefore, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* verifying the value of n_entries and n_comps is not necessary and </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* the buffer to hold the palette data can be static. &#160;However, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* if more values or colors are added to the model, these parameters </p>
 <p class="FM_ExampleCode"> &#160;&#160;* must be checked to allocate sufficient space when reading a palette.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode">   printf (&quot;  Palette Data: \n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;for (i=0; i&lt; n_entries; i++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;{</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;for (j = 0; j &lt; n_comps; j++)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf (&quot;%i &quot;, palette_data[i][j]);</p>
 <p class="FM_ExampleCode">      printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode"> &#160;&#160;}</p>
 <p class="FM_ExampleCode">   printf (&quot;\n&quot;);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Terminate access to the image and to the GR interface, and </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* close the HDF file. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program &#160;read_palette</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*22 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*18 IMAGE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N_ENTRIES</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;&#160;&#160;N_COMPS_PAL</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME &#160;&#160;= ’Image_with_Palette.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGE_NAME &#160;= ’Image with Palette’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_COMPS_PAL = 3,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;N_ENTRIES &#160;&#160;= 256)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_READ, DFNT_CHAR8, DFNT_UINT8, MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_READ &#160;= 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_CHAR8 &#160;= 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFNT_UINT8 &#160;= 21,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MFGR_INTERLACE_PIXEL = 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;integer mgstart, mgn2ndx, mgselct, mggltid, mgglinf, </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;mgrclut, mgendac, mgend </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;file_id, gr_id, ri_id, ri_index, pal_id, pal_index</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;interlace_mode</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;data_type, n_comps, n_entries_out</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;status</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;&#160;i, j</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character &#160;palette_data(N_COMPS_PAL, N_ENTRIES)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Open the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_READ, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Initialize the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id = mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get the index of the image IMAGE_NAME.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_index = mgn2ndx(gr_id, IMAGE_NAME)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get the image identifier.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_id = mgselct(gr_id, 0)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Get the identifier of the palette attached to the image.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;pal_index = 0</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;pal_id = mggltid(ri_id, pal_index)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Obtain information about the palette.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgglinf(pal_id, n_comps, data_type, interlace_mode,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_entries_out)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) ’ Palette: ’, n_comps, ’ components; &#160;’, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;+ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;n_entries_out, ’ entries’</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Read the palette.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgrclut(pal_id, palette_data)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Display the palette data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;write(*,*) &quot;Palette data&quot;</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;do 10 i = 1, n_entries_out</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write(*,*) (ichar(palette_data(j,i)), j = 1, n_comps)</p>
 <p class="FM_ExampleCode">10 &#160;&#160;&#160;continue &#160;</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the raster image and to the GR interface,</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;and close the HDF file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;end</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="Heading2"><a name="IX_chunking"></a>8.12<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;</span>Chunked Raster Images</p>
 <p class="Body"><a name="IX_description_283"></a>The GR interface also supports chunking in a manner similar to that of the SD interface. There is one restriction on a raster image: it must be created with <span style="font-size  : 8.0pt; ">MFGR_INTERLACE_PIXEL </span>(or <span class="DefName">0</span>) in the call to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>. We refer the reader to Section 3.11 of <a href="../UG_SD/UG_SD.htm#XREF_13938_Scientific_Data">Chapter 3<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;Scientific Data Sets (SD API)&quot;</a>, and to <a href="../UG_Perform/UG_Perform.htm#XREF_34005_HDF_Performance">Chapter 14<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>, &quot;HDF Performance Issues&quot;</a>, for discussions of chunking concepts and performance related topics. The GR interface provides three routines, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunk</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span>, and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>, to create and maintain chunked raster images. The generic functions for read&#173;ing and writing GR images, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>, will write and read chunked ras&#173;ter images as well. However, the GR interface provides special write and read routines, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritechunk</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk,</span>&#160;which are similar to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDwritechunk</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDreadchunk</span>. Compared to<span style="font-weight : bold; ">&#160;</span><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritechunk</span>&#160;and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span> are low-overhead but are only sutable for writing or reading complete chunks.</p>
 <p class="Heading3">8.12.1Difference between a Chunked Raster Image and a Chunked SDS</p>
 <p class="Body">Chunks of scientific datasets (SDSs) have the same dimensionality as the SDS itself and the chunks can divide the SDS along any dimension. &#160;While raster images under the GR interface are actually 3-dimensional arrays, 2 dimensions define the image while the third dimension (the stack of 2-dimensional image planes) provides the composite definition of the color at each pixel of the 2-dimensional image. Chunking can be applied only across the 2-dimensions of the image; chunk&#173;ing cannot divide the array across the third dimension. &#160;In other words, all of the elements of the raster image that define a single pixel must remain together in the same chunk. </p>
 <p class="Figure"><span class="StepNumber">FIGURE 8b<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p>
 <div align="center"><img alt="UG_GR00002.png" style=" width:100%; margin-left:30pt; max-width:486.000pt;" id="image1" src="UG_GR00002.png" />
 </div>
 <p class="Figure">Chunks in a GR raster image dataset</p>
 <p class="Heading3">8.12.2<a name="XREF_24765_GRsetchunk"></a>Making a Raster Image a Chunked Raster Image: GRsetchunk</p>
 <p class="Body"><a name="IX_description_284"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunk</span>&#160;makes the raster image, identified by the parameter <span class="VarName">ri_id</span>, a chunked raster image according to the provided chunking and compression information. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunk</span>&#160;is as follows:</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRsetchunk(ri_id, c_def, flags);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgschnk(ri_id, dim_length, comp_type, comp_prm)</p>
 <p class="Body">The parameters <span class="VarName">c_def</span>&#160;and <span class="VarName">flags</span>&#160;in C or the parameters <span class="VarName">comp_type</span>&#160;and <span class="VarName">comp_prm</span> in FORTRAN-77 provide the chunking and compression information and are discussed below.</p>
 <p class="Body" style="font-style : italic; font-weight : bold;"><span class="Definition">In C:</span></p>
 <p class="Body">The parameter <span class="VarName">c_def</span>&#160;is a union of type <span class="DefName">HDF_CHUNK_DEF</span>, which is defined as follows:</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>typedef union hdf_chunk_def_u</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;{</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;int32 chunk_lengths[2]; &#160;/* chunk lengths along each dim */</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&#160;&#160;&#160;&#160;&#160;</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;struct</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int32 chunk_lengths[2];</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int32 comp_type; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* compression type */</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;struct comp_info cinfo;</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} comp;</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&#160;&#160;&#160;&#160;&#160;struct </p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* is not used in GR interface */</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} nbit;</p>
 <p class="codebody"><span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span> &#160;&#160;&#160;&#160;} HDF_CHUNK_DEF</p>
 <p class="Body">Valid values of the parameter <span class="VarName">flags</span>&#160;are <span class="DefName">HDF_CHUNK</span>&#160;for chunked and uncompressed data and (<span class="DefName">HDF_CHUNK | HDF_COMP</span>) for chunked and compressed data. Data can be compressed using run-length encoding (RLE), Skipping Huffman, GZIP, or Szip compression algorithms.</p>
 <p class="Body">If the parameter <span class="VarName">flags</span>&#160;has a value of <span class="DefName">HDF_CHUNK</span>, the chunk dimensions must be specified in the field <span class="Subscript">c_def.chunk_lengths[]</span>. If the parameter <span class="VarName">flags</span> has a value of (<span class="DefName">HDF_CHUNK | HDF_COMP</span>), the chunk dimensions must be specified in the field <span class="Subscript">c_def.comp.chunk_lengths[]</span> and the compres&#173;sion type in the field <span class="Subscript">c_def.comp.comp_type</span><span class="DefName">. </span>Valid values of compression type values are:</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_NONE</span>&#160;(or <span class="DefName">0</span>) for uncompressed data</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_RLE</span>&#160;(or <span class="DefName">1</span>) for RLE compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_SKPHUFF</span>&#160;(or <span class="DefName">3</span>) for Skipping Huffman compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_DEFLATE</span>&#160;(or <span class="DefName">4</span>) for GZIP compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_SZIP</span>&#160;(or <span class="DefName">5</span>) for Szip compression</p>
 <p class="Body">For Skipping Huffman, GZIP, and Szip compression methods, parameters are passed in corre&#173;sponding fields of the structure <span class="VarName">cinfo</span>. Specify skipping size for Skipping Huffman compression in the field <span class="Subscript">c_def.comp.cinfo.skphuff.skp_size</span>; this value cannot be less than 1. Specify deflate level for GZIP compression in the field <span class="Subscript">c_def.comp.cinfo.deflate_level</span>. Valid values of deflate levels are integers from 0 to 9 inclusive. &#160;Specify the Szip options mask and the number of pixels per block in a chunked and Szip-compressed dataset in the fields <span class="Subscript">c_info.szip.options_mask</span>&#160;and <span class="Subscript">c_info.szip.pixels_per_block</span>, respectively<span class="Subscript">.</span></p>
 <p class="Body">Refer to the discussion of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDsetcompress </span>routine in <a href="../UG_SD/UG_SD.htm#XREF_22986_SDsetcompress">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>3.5.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a><span style="font-weight : bold; ">&#160;</span>for the definition of the structure <span class="VarName">comp_info</span>.</p>
 <p class="Body">&nbsp;</p>
 <p class="Body" style="font-style : italic; font-weight : bold;"><span class="Definition">In FORTRAN-77:</span></p>
 <p class="Body">Chunk dimensions are specified in the array <span class="VarName">dim_length</span> and the compression type in the parame&#173;ter <span class="VarName">comp_type</span>. Valid compression types and their values are defined in the <span class="Subscript">hdf.inc</span>&#160;file and are listed below:</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_NONE</span>&#160;(or <span class="DefName">0</span>) for uncompressed data</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_RLE</span>&#160;(or <span class="DefName">1</span>) for RLE compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_SKPHUFF</span>&#160;(or <span class="DefName">3</span>) for Skipping Huffman compression</p>
 <p class="FM_List10pt"><span class="DefName">COMP_CODE_DEFLATE</span>&#160;(or <span class="DefName">4</span>) for GZIP compression</p>
 <p class="Body">The parameter <span class="VarName">comp_prm</span>&#160;specifies the compression parameters for the Skipping Huffman and GZIP compression methods. It contains only one element which is set to the skipping size for Skipping Huffman compression or the deflate level for GZIP compression. &#160;Currently, Szip com&#173;pression is not yet supported by Fortran GR interface.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunk</span>&#160;returns <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunk</span>&#160;parameters are discussed further in <a href="#XREF_37735_TABLE_8M">(See Table&nbsp;8L on page&nbsp;361)</a></p>
 <p class="Heading3">8.12.3<a name="XREF_68057_GRwritechunk"></a>Writing a Chunked Raster Image: GRwritechunk</p>
 <p class="Body"><a name="IX_description_285"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritechunk</span>&#160;is used to write a chunk of a chunked raster image. The syntax of the <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwrite&#173;chunk</span>&#160;routine is as follows: </p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRwritechunk(ri_id, &amp;origin, &amp;datap);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgwchnk(ri_id, origin, datap)</p>
 <p class="FM_syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgwcchnk(ri_id, origin, datap)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritechunk</span>&#160;writes the entire chunk of data stored in the buffer <span class="VarName">datap</span>&#160;to the chunked raster image identified by the parameter <span class="VarName">ri_id</span>. Writing starts at the location specified by the parameter <span class="VarName">origin</span>. This function has less overhead than <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwriteimage</span>&#160;and should be used whenever an entire chunk of data is to be written.</p>
 <p class="Body">The raster image must be stored in pixel-interlace mode.</p>
 <p class="Body">The parameter <span class="VarName">origin</span>&#160;is a two-dimensional array which specifies the coordinates of the chunk according to the chunk position in the overall chunk array. </p>
 <p class="Body">The <span class="VarName">datap </span>buffer contains the chunk data. &#160;The data must be organized in pixel-interlace mode.</p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritechunk</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwchnk</span> writes buff&#173;ered numeric data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwcchnk</span> writes buffered character data.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritechunk</span>&#160;returns <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwrite&#173;chunk</span>&#160;parameters are discussed further in <a href="#XREF_37735_TABLE_8M">Table 8L</a>.</p>
 <p class="Figure"><a name="IX_General_raster_image_6"></a><span class="StepNumber">EXAMPLE 9.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Creating and Writing a Chunked Raster Image</p>
 <p class="Body">This example illustrates the use of the routines <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hopen</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">hopen</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRstart</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgstart</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRcreate</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgcreat</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRwritechunk</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgwchnk</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRendaccess</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgendac</span>, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRend</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgend</span>, and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">Hclose</span>/<span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">hclose</span> to create an HDF file and store a raster image in it.</p>
 <p class="Body">In this example, the program creates an image of 6 rows by 10 columns in C and 10 rows by 6 col&#173;umns in FORTRAN. The image is set up to be chunked with a chunk size of 3x2 in C and 2x3 in FORTRAN and compressed with the GZIP method. Three chunks are then written to the image. See <a href="#XREF_72890_FIGURE_8c">Figure&nbsp;8c</a>&#160;through <a href="#XREF_33065_FIGURE_8d">Figure&nbsp;8d</a> for illustrations.</p>
 <p class="Figure"><span class="StepNumber">FIGURE 8c<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_72890_FIGURE_8c"></a>Chunked GR image as written</p>
 <div align="center"><img alt="UG_GR00003.png" style=" width:100%; margin-left:30pt; max-width:501.289pt;" id="image2" src="UG_GR00003.png" />
 </div>
 <p class="Figure">&#160;by C example </p>
 <p class="Figure"><span class="StepNumber">FIGURE 8d<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_33065_FIGURE_8d"></a>Chunked GR image as written</p>
 <div align="center"><img alt="UG_GR00004.png" style=" width:100%; margin-left:30pt; max-width:486.000pt;" id="image3" src="UG_GR00004.png" />
 </div>
 <p class="Figure"> by FORTRAN example</p>
 <p class="FM_CodeCTitle">C:</p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define FILE_NAME &#160;&#160;&#160;&#160;“Image_Chunked.hdf”</p>
 <p class="FM_ExampleCode">#define IMAGE_NAME &#160;&#160;&#160;“Image with Chunks”</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;10 &#160;&#160;&#160;/* number of rows in the image */</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;6 &#160;&#160;&#160;&#160;/* number of columns in the image */</p>
 <p class="FM_ExampleCode">#define NCOMPS &#160;&#160;&#160;&#160;&#160;&#160;&#160;3 &#160;&#160;&#160;&#160;/* number of components in the image */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">int main()</p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 file_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* HDF file identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gr_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* GR interface identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* raster image identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dims[2], &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* dimension sizes of the image array */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;origin[2], &#160;&#160;&#160;&#160;&#160;/* origin position to write each chunk */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode; /* interlace mode of the image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;HDF_CHUNK_DEF chunk_def; &#160;&#160;&#160;&#160;/* Chunk defintion set */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 chunk00[] = {1, 2, 3, 4, 5, 6,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7, 8, 9, 10, 11, 12,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;13, 14, 15, 16, 17, 18 };</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 chunk01[] = {210, 211, 212, 220, 221, 222,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;230, 231, 232, 240, 241, 242,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;250, 251, 252, 260, 261, 262};</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 chunk14[] = {1010, 1011, 1012, 1020, 1021, 1022,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1030, 1031, 1032, 1040, 1041, 1042,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1050, 1051, 1052, 1060, 1061, 1062};</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/********************** End of variable declaration **********************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create and open the file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_CREATE, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Initialize the GR interface.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set dimensions of the image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dims[0] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dims[1] = X_LENGTH;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Create the raster image array.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_id = GRcreate (gr_id, IMAGE_NAME, NCOMPS, DFNT_INT32,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MFGR_INTERLACE_PIXEL, dims);</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Define chunked image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;chunk_def.comp.comp_type = COMP_CODE_DEFLATE;</p>
 <p class="FM_ExampleCode"> &#160;&#160;chunk_def.comp.cinfo.deflate.level = 6;</p>
 <p class="FM_ExampleCode"> &#160;&#160;chunk_def.comp.chunk_lengths[0] = 3;</p>
 <p class="FM_ExampleCode"> &#160;&#160;chunk_def.comp.chunk_lengths[1] = 2;</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRsetchunk (ri_id, chunk_def, HDF_CHUNK | HDF_COMP);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write first chunk(0,0).</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;origin[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;origin[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwritechunk (ri_id, origin, (VOIDP)chunk00);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write second chunk(0,1).</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;origin[0] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;origin[1] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwritechunk (ri_id, origin, (VOIDP)chunk01);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Write third chunk(1,4).</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;origin[0] = 1;</p>
 <p class="FM_ExampleCode"> &#160;&#160;origin[1] = 4;</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRwritechunk (ri_id, origin, (VOIDP)chunk14);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Terminate access to the raster image and to the GR interface and,</p>
 <p class="FM_ExampleCode"> &#160;&#160;* close the HDF file.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;return 0;</p>
 <p class="FM_ExampleCode">}</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_CodeFTitle">FORTRAN:</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;program gr_chunking_example</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;implicit none</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Parameter declaraction</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*14 FILE_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;character*14 DATASET_NAME</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (FILE_NAME = ’gr_chunked.hdf’,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DATASET_NAME = ’gzip_comp_data’)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;&#160;NCOMP, MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter(NCOMP = 3, MFGR_INTERLACE_PIXEL = 0)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFACC_CREATE, DFACC_READ, DFACC_WRITE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFACC_CREATE = 4,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFACC_READ &#160;&#160;= 1,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DFACC_WRITE &#160;= 2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer DFNT_INT32</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (DFNT_INT32 &#160;&#160;= 24)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer X_LENGTH, Y_LENGTH, X_CH_LENGTH, Y_CH_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter (X_LENGTH &#160;&#160;&#160;&#160;= 6,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_LENGTH &#160;&#160;&#160;&#160;= 10,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X_CH_LENGTH &#160;= 3,</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y_CH_LENGTH &#160;= 2) </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Compression parameters.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer &#160;COMP_CODE_DEFLATE, DEFLATE_LEVEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;parameter( COMP_CODE_DEFLATE = 4, DEFLATE_LEVEL = 6)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Function declaration.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer mgstart, mgcreat, mgendac, mgend</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer mgwchnk, mgschnk</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer hopen, hclose</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** Variable declaration *************************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer ri_id, gr_id, file_id</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer dims(2), start(2)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer status, il</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer comp_prm(1), comp_type</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Data buffers.</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*4 chunk11(NCOMP* X_CH_LENGTH*Y_CH_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*4 chunk21(NCOMP* X_CH_LENGTH*Y_CH_LENGTH)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer*4 chunk52(NCOMP* X_CH_LENGTH*Y_CH_LENGTH)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Chunking dimension arrays</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;integer ch_dims(2)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C**** End of variable declaration ******************************************</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Data initialization</p>
 <p class="FM_ExampleCode">C </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;data &#160;chunk11 / 110, 111, 112, 120, 121, 122,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;130, 131, 132, 140, 141, 142,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;150, 151, 152, 160, 161, 162</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/, </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;chunk21 /</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;210, 211, 212, 220, 221, 222,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;230, 231, 232, 240, 241, 242,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;250, 251, 252, 260, 261, 262</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;chunk52 /</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1010, 1011, 1012, 1020, 1021, 1022,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1030, 1031, 1032, 1040, 1041, 1042,</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1050, 1051, 1052, 1060, 1061, 1062</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define chunk dimensions.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;ch_dims(1) = Y_CH_LENGTH </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;ch_dims(2) = X_CH_LENGTH </p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create and open the file and initiate GR interface..</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;file_id = hopen(FILE_NAME, DFACC_CREATE, 0)</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;gr_id &#160;&#160;= mgstart(file_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the number of components and dimensions of the image.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;il &#160;&#160;&#160;&#160;&#160;= MFGR_INTERLACE_PIXEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dims(1) = X_LENGTH</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;dims(2) = Y_LENGTH</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Create GR dataset.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;ri_id = mgcreat(gr_id, DATASET_NAME, NCOMP, DFNT_INT32, il, dims)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define chunked GR dataset using GZIP compression.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;comp_prm(1) = &#160;DEFLATE_LEVEL</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;comp_type = COMP_CODE_DEFLATE</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgschnk (ri_id, ch_dims, comp_type, comp_prm)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the location of the first chunk and write the data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 1 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 1 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwchnk(ri_id, start, chunk11)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the location of the second chunk and write the data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 2 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 1 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwchnk(ri_id, start, chunk21)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Define the location of the third and write the data.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(1) = 5 </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;start(2) = 2 </p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgwchnk(ri_id, start, chunk52)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the array.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgendac(ri_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Terminate access to the GR interface.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = mgend(gr_id)</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode">C &#160;&#160;&#160;&#160;Close the file.</p>
 <p class="FM_ExampleCode">C</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;status = hclose(file_id)</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;&#160;&#160;&#160;end </p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="Heading3">8.12.4<a name="XREF_48842_GRreadchunk"></a>Reading a Chunked Raster Image: GRreadchunk</p>
 <p class="Body"><a name="IX_description_286"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span>&#160;is used to read an entire chunk of data from a chunked raster image. The syntax of the <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span>&#160;routine is as follows: </p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRreadchunk(ri_id, &amp;origin, datap);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrchnk(ri_id, origin, datap)</p>
 <p class="FM_1syntax"><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgrcchnk(ri_id, origin, datap)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span>&#160;reads the entire chunk of data stored from the chunked raster image identified by the parameter <span class="VarName">ri_id </span>and stores it in the buffer <span class="VarName">datap</span>. The chunk to be read is specified by the parameter <span class="VarName">origin</span>. This function has less overhead than <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadimage</span> and should be used when&#173;ever an entire chunk of data is to be read.</p>
 <p class="Body">The raster image must be stored in pixel-interlace mode.</p>
 <p class="Body">The parameter <span class="VarName">origin</span>&#160;is a two-dimensional array which specifies the coordinates of the chunk according to the chunk position in the overall chunk array. </p>
 <p class="Body">The <span class="VarName">datap </span>buffer contains the chunk data. &#160;The data is organized in pixel-interlace mode.</p>
 <p class="Body">Note that the FORTRAN-77 version of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span>&#160;has two routines; <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgrchnk</span>&#160;reads numeric data and <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">mgrcchnk</span> reads character data to the buffer.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span>&#160;returns <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span>&#160;will return <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) when an attempt is made to read from a non-chunked image. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRreadchunk</span>&#160;parameters are discussed further in <a href="#XREF_37735_TABLE_8M">Table 8L</a>.</p>
 <p class="Figure"><span class="StepNumber">EXAMPLE 10.<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Reading a Chunked Raster Image.</p>
 <p class="Body">This example illustrates the use of the routines <span style="font-weight : bold; ">GRreadchunk/mgrchnk</span>&#160;to read the raster image’s chunked data.</p>
 <p class="Body">In this example, the program finds and selects the image named &quot;Image with Chunks&quot; in the file &quot;Image_Chunked.hdf&quot;. Then the program obtains information about the image and reads the image data. &#160;Only C example is available at this time.</p>
 <p class="FM_CodeCTitle">C:</p>
 <p class="FM_ExampleCode">#include &quot;hdf.h&quot;</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">#define &#160;FILE_NAME &#160;&#160;&#160;&#160;&#160;&quot;Image_Chunked.hdf&quot;</p>
 <p class="FM_ExampleCode">#define &#160;IMAGE_NAME &#160;&#160;&#160;&#160;&quot;Image with Chunks&quot;</p>
 <p class="FM_ExampleCode">#define X_LENGTH &#160;&#160;&#160;&#160;&#160;10 &#160;&#160;&#160;/* number of rows in the image */</p>
 <p class="FM_ExampleCode">#define Y_LENGTH &#160;&#160;&#160;&#160;&#160;6 &#160;&#160;&#160;&#160;/* number of columns in the image */</p>
 <p class="FM_ExampleCode">#define NCOMPS &#160;&#160;&#160;&#160;&#160;&#160;&#160;3 &#160;&#160;&#160;&#160;/* number of components in the image */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">int main()</p>
 <p class="FM_ExampleCode">{</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;intn &#160;status; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* status for functions returning an intn */</p>
 <p class="FM_ExampleCode"> &#160;&#160;int32 file_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* HDF file identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gr_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* GR interface identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ri_id, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* raster image identifier */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dims[2], &#160;&#160;&#160;&#160;&#160;&#160;&#160;/* dimension sizes of the image array */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;origin[2], &#160;&#160;&#160;&#160;&#160;/* origin position to write each chunk */</p>
 <p class="FM_ExampleCode"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;interlace_mode; /* interlace mode of the image */</p>
 <p class="FM_ExampleCode"> &#160;&#160;HDF_CHUNK_DEF chunk_def; &#160;&#160;&#160;&#160;/* Chunk defintion set */</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/************************* Variable declaration **************************/</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Open the file. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;file_id = Hopen (FILE_NAME, DFACC_READ, 0);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Initiate the GR interface. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;gr_id = GRstart (file_id);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get the index of the image IMAGR_NAME.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_index = GRnametoindex (gr_id, IMAGE_NAME);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Get image identifier.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;ri_id = GRselect (gr_id, ri_index);</p>
 <p class="FM_ExampleCode">&#160;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/*</p>
 <p class="FM_ExampleCode"> &#160;&#160;* Set dimensions of the image.</p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;dims[0] = X_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;dims[1] = Y_LENGTH;</p>
 <p class="FM_ExampleCode"> &#160;&#160;start[0] = start[1] = 0;</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[0] = dims[0];</p>
 <p class="FM_ExampleCode"> &#160;&#160;edges[1] = dims[1];</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode"> &#160;&#160;/* Read the data in the image array. */</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRreadimage (ri_id, start, NULL, edges, (VOIDP)image_data);</p>
 <p class="FM_ExampleCode">&nbsp;</p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;/* </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* Terminate access to the image and to the GR interface, and </p>
 <p class="FM_ExampleCode">&#160;&#160;&#160;* close the HDF file. </p>
 <p class="FM_ExampleCode"> &#160;&#160;*/</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRendaccess (ri_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = GRend (gr_id);</p>
 <p class="FM_ExampleCode"> &#160;&#160;status = Hclose (file_id);</p>
 <p class="FM_ExampleCode">}</p>
 <p class="Heading3">8.12.5<a name="XREF_33313_8_11_2_Obtaining"></a>Obtaining Information about a Chunked Raster Image: GRgetchunkinfo</p>
 <p class="Body"><a name="IX_description_287"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>&#160;is used to determine whether a raster image is chunked and how chunking is defined. The syntax of the <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>&#160;routine is as follows: </p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRgetchunkinfo(ri_id, &amp;c_def, &amp;flag);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mggichnk(ri_id, dim_length, flag)</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>&#160;retrieves chunking information about the raster image into the parameters <span class="VarName">c_def</span>&#160;and <span class="VarName">flag</span>&#160;in C and into &#160;the parameters <span class="VarName">dim_length</span>&#160;and <span class="VarName">flag</span>&#160;in FORTRAN-77. &#160;Note that only chunk dimensions are retrieved; compression information is not available.</p>
 <p class="Body">The value returned in the parameter <span class="VarName">flag</span>&#160;indicates whether the raster image is not chunked, chunked, or chunked and compressed. <span class="DefName">HDF_NONE</span>&#160;(or <span class="DefName">-1</span>) indicates that the raster image is not chunked. <span class="DefName">HDF_CHUNK</span>&#160;(or <span class="DefName">0</span>) indicates that the raster image is chunked and not compressed. (<span class="DefName">HDF_CHUNK | HDF_COMP</span>) (or <span class="DefName">1</span>) indicates that raster image is chunked and compressed with one of the allowed compression methods: RLE, Skipping Huffman, or GZIP.</p>
 <p class="Body">In C, if the raster image is chunked and not compressed, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>&#160;fills the array <span class="VarName">chunk_lengths</span>&#160;in the union <span class="VarName">c_def</span>&#160;with the values of the corresponding chunk dimensions. If the raster image is chunked and compressed, <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>&#160;fills the array <span class="VarName">chunk_lengths</span>&#160;in the structure <span class="VarName">comp</span>&#160;of the union <span class="VarName">c_def</span>&#160;with the values of the corresponding chunk dimensions. Refer to <a href="#XREF_24765_GRsetchunk">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>8.12.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>&#160;on <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunk</span>&#160;for specific information on the union <span class="DefName">HDF_CHUNK_DEF</span>. In C, if the chunk length for each dimension is not needed, <span class="DefName">NULL</span>&#160;can be passed in as the value of the parameter <span class="VarName">c_def</span>.</p>
 <p class="Body">In FORTRAN-77, chunk dimensions are retrieved into the array <span class="VarName">dim_length</span>.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>&#160;returns <span class="DefName">SUCCEED</span>&#160;(or <span class="DefName">0</span>) if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRgetchunkinfo</span>&#160;parameters are discussed further in <a href="#XREF_37735_TABLE_8M">Table 8L</a>.</p>
 <p class="Heading3">8.12.6<a name="XREF_36329_8_11_3_Setting_the"></a>Setting the Maximum Number of Chunks in the Cache: GRsetchunkcache</p>
 <p class="Body"><a name="IX_description_288"></a><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span>&#160;sets the maximum number of chunks to be cached for chunked raster image. <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span>&#160;has similar behavior to <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDsetchunkcache</span>. Refer to <a href="../UG_SD/UG_SD.htm#XREF_30563_3_11_2_Setting_the">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>3.12.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a>&#160;for specific information. The syntax of <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span>&#160;is as follows: </p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">C:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = GRsetchunkcache(ri_id, maxcache, flags);</p>
 <p class="FM_1syntax"><span class="FM_syntaxLang" style="font-family : Courier New; font-style : normal; font-weight : bold; font-size  : 9.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">FORTRAN:</span><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>status = mgscchnk(ri_id, maxcache, flags)</p>
 <p class="Body">The maximum number of chunks is specified by the parameter <span class="VarName">maxcache</span>. Currently, the only valid value of the parameter <span class="VarName">flags</span>&#160;is <span class="DefName">0</span>.</p>
 <p class="Body">If <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span> is not called, the maximum number of chunks in the cache is set to the num&#173;ber of chunks along the fastest-changing dimension. Since <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span>&#160;is similar to the routine <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">SDsetchunkcache</span>, refer to <a href="../UG_SD/UG_SD.htm#XREF_30563_3_11_2_Setting_the">Section<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>3.12.2<span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></a><span style="font-weight : bold; ">&#160;</span>for more detailed discussion of the routine’s behavior.</p>
 <p class="Body"><span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span>&#160;returns the value of the parameter <span class="VarName">maxcache</span>&#160;if successful and <span class="DefName">FAIL</span>&#160;(or <span class="DefName">-1</span>) otherwise. The <span class="FM_FunctionName" style="font-family : Times New Roman; font-style : normal; font-weight : bold; font-size  : 10.0pt; color   : #000000; text-decoration  : none  ;
		letter-spacing : 0.00em; ">GRsetchunkcache</span>&#160;parameters are discussed further in <a href="#XREF_37735_TABLE_8M">Table 8L</a>.</p>
 <p class="Figure"><a name="IX_parameter_list_167"></a><a name="IX_parameter_list_166"></a><a name="IX_parameter_list_165"></a><span class="StepNumber">TABLE 8L<span style='word-spacing:normal; font:6.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><a name="XREF_37735_TABLE_8M"></a>GRsetchunk, GRgetchunkinfo,&#160;GRsetchunkcache, GRwritechunk, and <br /><span style="font-family:Times New Roman; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>GRreadchunk Parameter Lists</p>
 <table width="100%">
  <tr>
  <td>
 <table style=" border-spacing:0; padding-left:6.00pt; padding-top:4.00pt; padding-right:6.00pt; padding-bottom:2.00pt; float:alignleft; margin-left:95.33pt; width:100%; max-width:386.87pt;" cellspacing="0" align="left">
  <tr style=" height : 13.00pt;">
  <td rowspan="2" style="width : 66.672pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Routine Name </p>
  <p class="FM_ReturnType">[Return Type]</p>
  <p class="FM_TableHead">(FORTRAN-77)</p>
</td>
  <td rowspan="2" style="width : 63.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter</p>
</td>
  <td colspan="2" style="width : 144.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Parameter Type</p>
</td>
  <td rowspan="2" style="width : 113.199pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">Description</p>
</td>
</tr>
  <tr style=" height : 16.00pt;">
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">C</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="FM_TableHead">FORTRAN-77</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="6" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetchunk</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgschnk)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">c_def</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">HDF_CHUNK_DEF</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Chunk definition</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">flags</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32*</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A </p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Compression flags</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">dim_length</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Chunk dimensions array</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_type</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer </p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Type of compression</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">comp_prm</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Compression parameters array</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="4" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRgetchunkinfo</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mggichnk)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">c_def</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">HDF_CHUNK_DEF</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A </p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Chunk definition</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">dim_length</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">N/A </p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Chunk dimensions array</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">flag</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Compression flag</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="3" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRsetchunkcache</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgscchnk)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">maxcache</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Maximum number of chunks to cache</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">flags</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Flags determining routine behavior</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="3" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRreadchunk</p>
  <p class="FM_ReturnType">&nbsp;</p>
  <p class="CellFunction">(mgrchnk/</p>
  <p class="CellFunction">mgrcchnk)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">origin</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array specifying the coordinates of the chunk</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">datap</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">VOIDP</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid_numeric_or_</p>
  <p class="CellParameter">char_data_type&gt;</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer with chunk data in pixel interlace mode</p>
</td>
</tr>
  <tr style=" height : 13.00pt;">
  <td rowspan="3" style="width : 66.672pt; border-left-style: solid; border-left-width: 1px; border-left-color: #000000; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellFunction">GRwritechunk</p>
  <p class="FM_ReturnType">[intn]</p>
  <p class="CellFunction">(mgwchnk/</p>
  <p class="CellFunction">mgwcchnk)</p>
</td>
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">ri_id</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Raster image identifier</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">origin</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">int32</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">integer</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Array specifying the coordinates of the chunk</p>
</td>
</tr>
  <tr style=" height : 22.00pt;">
  <td style="width : 63.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">datap</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">const VOIDP</p>
</td>
  <td style="width : 72.000pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellParameter">&lt;valid_numeric_or_</p>
  <p class="CellParameter">char_data_type&gt;</p>
</td>
  <td style="width : 113.199pt; border-right-style: solid; border-right-width: 1px; border-right-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
  <p class="CellDescription">Buffer with chunk data in pixel interlace mode</p>
</td>
</tr>
 </table>
</td></tr>
 </table>
 <p class="Body">&nbsp;</p>
</div>
				
				<div class="content_top_link">
					<a>&#160;</a> 
				</div>
				<div class="mobile_browseholder">
					<div class="brsBack">
						<a id="browseSeqBack1" class="wBSBackButton" href="../UG_RIS24s/UG_RIS24s.htm"><img alt="" src="../../template/Theme1_Standard/BSBack.png" class="wBSBackButton normal" id="xmlEditorBSBackButtonMobile" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSBack_hover.png" class="wBSBackButton hover" id="xmlEditorBSBackButtonMobileHover" border="0" style="width:100%; max-width:56px" /></a> 
						 
					</div>
					<div class="brsNext">
						<a id="browseSeqNext1" class="wBSNextButton" href="../UG_Palettes/UG_Palettes.htm"><img alt="" src="../../template/Theme1_Standard/BSNext.png" class="wBSNextButton normal" id="xmlEditorBSNextButtonMobile" border="0" style="width:100%; max-width:48px" /><img alt="" src="../../template/Theme1_Standard/BSNext_hover.png" class="wBSNextButton hover" id="xmlEditorBSNextButtonMobileHover" border="0" style="width:100%; max-width:48px" /></a> 
						 
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="buttonbar">
		<div class="buttonbarholder topic_page_holder">
			<div class="bar_toc topic_page" id="xmlEditorButtonBarTOC" 
				 title="Table of Contents">
				<a href="../../table_of_contents.htm">&#160;</a> 
			</div>
			<div class="bar_index topic_page" id="xmlEditorButtonBarIDX" 
				 title="Index">
				<a href="../../index1.htm">&#160;</a> 
			</div>
			<div class="bar_glossary topic_page" id="xmlEditorButtonBarGLO" 
				 title="Glossary">
				<a href="../../glossary.htm">&#160;</a> 
			</div>
			<div class="bar_search topic_page">
				<a href="../../searchresults.htm" title="Search">&#160;</a> 
			</div>
		</div>
	</div>
</div>
<div id="localisation">
	<p id="localisation_toc"><span>Table of Contents</span></p>
	<p id="localisation_idx"><span>Index</span></p>
	<p id="localisation_glo"><span>Glossary</span></p>
	<p id="localisation_fts"><span>-Search-</span></p>
	<p id="localisation_back"><span>Back</span></p>
</div>
<script type="text/javascript" src="../../template/Theme1_Standard/jquery.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/jqueryui-custom.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/overthrow.sidescroller.min.js"></script>
<script type="text/javascript" src="../../template/Theme1_Standard/layout.js"></script>
<script type="text/javascript">//<![CDATA[
$(function(){
	addRhLoadCompleteEvent(setTopic);
});
//]]></script>
</body>
</html>
