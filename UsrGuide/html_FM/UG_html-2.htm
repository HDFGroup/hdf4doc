<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 11.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="UG_html.css" CHARSET="UTF-8" TYPE="text/css">
<table id="Topofpage" border="0" width="850" cellspacing="0" cellpadding="0"><tr><td align="left"><a href="http://www.hdfgroup.org"><img id="THG_logo" border="0" src="images/hdf_logo.jpg" width="90" height="70" alt="The HDF Group" valign="top" /></a></td><td valign="middle" align="center"><H1>HDF Userâ€™s Guide</H1><span style="font-size: 14px; font-weight: bold"><b>4.2.12</b></td><td valign="middle" align="center"><a HREF=UG_html.htm> [Top]</a> <a HREF=UG_html-1.htm> [Prev]</a><a HREF=UG_html-3.htm> [Next]</a></td></tr></table><HR></HEAD>
<BODY>
<DIV>
<span style="font-size: 14px; font-weight: bold"><a href="UG_html-17.htm">Index</a>] [<a href="UG_html-20.htm">List of Examples</a>] [<a href="UG_html-19.htm">List of Tables</a>] [<a href="UG_html-18.htm">List of Figures</a>]</DIV>
<H1 CLASS="ChapterTitle">
<A NAME="50593872_pgfId-92358"></A>Chapter 2 --	<A NAME="50593872_17496"></A><A NAME="50593872_13138"></A>HDF Fundamentals</H1>
<DIV>
<H4 CLASS="Heading1">
<A NAME="50593872_pgfId-46831"></A>	2.1	Chapter Overview<DIV>
<IMG SRC="UG_html-5.gif" ALT="">
</DIV>
</H4>
<P CLASS="Body">
<A NAME="50593872_pgfId-25174"></A>This chapter provides necessary information for the creation and manipulation of HDF files. It includes an overview of the HDF file format, basic operations on HDF files, and programming language issues pertaining to the use of Fortran and ANSI C in HDF programming.</P>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593872_pgfId-25176"></A>	2.2	<A NAME="50593872_17986"></A>HDF File Format<DIV>
<IMG SRC="UG_html-5.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593872_pgfId-25179"></A>An HDF file contains a <EM CLASS="Definition">
file header</EM>
, at least one <EM CLASS="Definition">
data descriptor block</EM>
, and zero or more <EM CLASS="Definition">
data elements</EM>
 as depicted in <A HREF="UG_html-2.htm#50593872_37743" CLASS="XRef">Figure 2a</A>.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593872_pgfId-24015"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
FIGURE 2a	<A NAME="50593872_37743"></A>The Physical Layout of an HDF File Containing One Data Object</H6>
<DIV>
<MAP NAME="UG_html-7">
</MAP>
<IMG SRC="UG_html-7.gif" USEMAP="#UG_html-7" ALT="">
</DIV>
<P CLASS="Body">
<A NAME="50593872_pgfId-23886"></A>The <EM CLASS="Definition">
file header</EM>
 identifies the file as an HDF file. A <EM CLASS="Definition">
data descriptor block</EM>
 contains a number of <EM CLASS="Definition">
data descriptors</EM>
. A data descriptor and a <EM CLASS="Definition">
data element</EM>
 together form a <EM CLASS="Definition">
data object</EM>
, which is the basic conglomerate structure for encapsulating data in the HDF file. Each of these terms is described in the following sections.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-18601"></A>	2.2.1	File Header</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-24024"></A>The first component of an HDF file is the file header, which takes up the first four bytes of the HDF file. Specifically, it consists of four one-byte values that are ASCII representations of control characters: the first is a control-N, the second is a control-C , the third is a control-S and the fourth is a control-A (^N^C^S^A).</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-24052"></A>Note that, on some machines, the order of bytes in the file header might be swapped when the header is written to an HDF file, causing these characters to be written in little-endian order. To maintain the portability of HDF file header data when developing software for such machines, this byte swapping must be counteracted by ensuring the characters are read and written in the desired order.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-23949"></A>	2.2.2	Data Object</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-25201"></A>A data object is comprised of a data descriptor and a data element. The data descriptor consists of information about the type, location, and size of the data element. The data element contains the actual data. This organization of HDF data makes HDF files <EM CLASS="Definition">
self-describing</EM>
. <A HREF="UG_html-2.htm#50593872_30251" CLASS="XRef">Figure 2b</A> shows two examples of data objects.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593872_pgfId-18890"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
FIGURE 2b	<A NAME="50593872_30251"></A>Two Data Objects</H6>
<DIV>
<IMG SRC="UG_html-8.gif" ALT="">
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593872_pgfId-18605"></A>	2.2.2.1	<A NAME="50593872_30011"></A>Data Descriptor</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-18609"></A>All data descriptors are twelve bytes long and contain four fields, as depicted in <A HREF="UG_html-2.htm#50593872_40246" CLASS="XRef">Figure 2c</A>. These fields are: a 16-bit <EM CLASS="Definition">
tag</EM>
, a 16-bit <EM CLASS="Definition">
reference number</EM>
, a 32-bit <EM CLASS="Definition">
data offset</EM>
 and a 32-bit <EM CLASS="Definition">
data length</EM>
.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593872_pgfId-18638"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
FIGURE 2c	T<A NAME="50593872_40246"></A>he Contents of a Data Descriptor</H6>
<DIV>
<IMG SRC="UG_html-9.gif" ALT="">
</DIV>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-25053"></A>Tag</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-34448"></A>A <EM CLASS="Definition">
tag</EM>
 is the data descriptor field that identifies the type of data stored in the corresponding data element. A tag is a 16-bit unsigned integer between 1 and 65,535, and is associated with a mnemonic name to promote ease to use and the readability of user programs. </P>
<P CLASS="Body">
<A NAME="50593872_pgfId-34449"></A>If a data descriptor has no corresponding data element, the value of its tag is <EM CLASS="DefName">
DFTAG_NULL</EM>
 (or <EM CLASS="DefName">
0</EM>
).</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-18999"></A>Tags are assigned by The HDF Group as part of the HDF specification. The following are the ranges of tag values and their descriptions:</P>
<P CLASS="CBullet">
<A NAME="50593872_pgfId-19002"></A>1 to 32,767 - Tags reserved for HDF Group use</P>
<P CLASS="CBullet">
<A NAME="50593872_pgfId-19010"></A>32,768 to 64,999 - User-definable tags</P>
<P CLASS="CBullet">
<A NAME="50593872_pgfId-19011"></A>65,000 to 65,535 - Tags reserved for expansion of the HDF specification</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-19003"></A>A list of commonly-used tags and their descriptions is included in <A HREF="UG_html-20.htm#50593898_20074" CLASS="XRef">Reserved HDF Tags</A> of this document.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-18642"></A>Reference Number</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-18643"></A>For each occurrence of a tag in an HDF file, a unique reference number is assigned by the library with the tag in the data descriptor. A <EM CLASS="Definition">
reference number</EM>
 is a 16-bit unsigned integer and can not be changed during the life of the data object that the reference number specifies.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-29363"></A>The combination of a tag and a reference number uniquely identifies the corresponding data object in the file. </P>
<P CLASS="Body">
<A NAME="50593872_pgfId-19022"></A>Reference numbers are not necessarily assigned consecutively, so it cannot be assumed that the value of a reference number has any meaning beyond providing a way of distinguishing among objects with the same tag. While application programmers may find it convenient to impart some additional meaning to reference numbers in their code, it is emphasized that the HDF library will not internally recognize any such meaning.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-34414"></A>Data Offset and Length</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-34415"></A>The data offset field points to the location of the data element in the file by storing the number of bytes from the beginning of the file to the beginning of the data element. The length field contains the size of the data element in bytes. The data offset and the length are both 32-bit signed integers.  This results in a file-size limit of 2 gigabytes.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593872_pgfId-34416"></A>	2.2.2.2	Data Elements</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-18649"></A>The data element is the raw data portion of a data object.</P>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-18455"></A>	2.2.3	Data Descriptor Block</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-19035"></A>Data descriptors are physically stored in a linked list of blocks called data descriptor blocks. The relationship between the data descriptor block to the other components of an HDF file is illustrated in <A HREF="UG_html-2.htm#50593872_37743" CLASS="XRef">The Physical Layout of an HDF File Containing One Data Object</A>. The individual components of a data descriptor block are depicted in <A HREF="UG_html-2.htm#50593872_34850" CLASS="XRef">Data Descriptor Block</A>. Each data descriptor in a data descriptor block is assumed to be associated with a data element unless it contains the tag <EM CLASS="DefName">
DFTAG_NULL</EM>
 (or <EM CLASS="DefName">
0</EM>
),which indicates that there is no associated data element. By default, a data descriptor block contains <EM CLASS="DefName">
16</EM>
 (defined as <EM CLASS="DefName">
DEF_NDDS</EM>
) data descriptors. The user may reset this limit when creating the HDF file. Refer to <A HREF="UG_html-2.htm#50593872_34810" CLASS="XRef">Opening HDF Files: Hopen</A> for more details.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-19037"></A>In addition to data descriptors, each data descriptor block contains a <EM CLASS="Definition">
data descriptor header</EM>
. The data descriptor header contains two fields: <EM CLASS="Definition">
block size</EM>
 and <EM CLASS="Definition">
next block</EM>
. The block size field is a 16-bit unsigned integer indicating the number of data descriptors in the data descriptor block. The next block field is a 32-bit unsigned integer indicating the offset of the next data descriptor block, if one exists. The last data descriptor header in the list contains a value of <EM CLASS="DefName">
0</EM>
 in its next block field.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-19240"></A><A HREF="UG_html-2.htm#50593872_34850" CLASS="XRef">Figure 2d</A> illustrates the layout of a data descriptor block.</P>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593872_pgfId-19091"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
FIGURE 2d	<A NAME="50593872_34850"></A>Data Descriptor Block</H6>
<DIV>
<MAP NAME="UG_html-10">
</MAP>
<IMG SRC="UG_html-10.gif" USEMAP="#UG_html-10" ALT="">
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-19036"></A>	2.2.4	Grouping Data Objects in an HDF File</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-18456"></A>Data objects containing related data in HDF files are usually grouped together by the library. These groups of data objects are called data sets. The HDF user uses the application interface to manipulate data sets in a file. As an example, an 8-bit raster image data set requires three objects: a group object identifying the members of the set, an image object containing the image data, and a dimension object indicating the size of the image. </P>
<P CLASS="Body">
<A NAME="50593872_pgfId-18458"></A>Data objects are individually accessible even if they are included in a set, therefore data objects can belong to more than one set and sets can be included in larger groups. For example, a palette object included in one raster image set may also be a part of another raster image set if its tag and reference number are included in a data descriptor within that second set.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-47252"></A>Additional information about data objects, including the options available for storing them, can be found in the <EM CLASS="TextItalic">
HDF Specifications and Developerâ€™s Guide</EM>
 from the HDF web site at <EM CLASS="URL">
http://www.hdfgroup.org/doc.html</EM>
.</P>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593872_pgfId-47253"></A>	2.3	Basic Operations on HDF Files Using the Multifile Interfaces<DIV>
<IMG SRC="UG_html-5.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593872_pgfId-23845"></A>This section describes the basic file operations, some of which are required in working with HDF files using the multifile interfaces. Except for the SD interface, all applications using other multifile interfaces must explicitly use the routines <EM CLASS="FunctionName">
Hopen</EM>
 and <EM CLASS="FunctionName">
Hclose</EM>
 to control accesses to the HDF files. In an application using the HDF file format, the file is accessed via its identifier, referred to as <EM CLASS="Definition">
file identifier</EM>
. The following subsections describe the file identifier and the basic file operations common to most multifile interfaces.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-25763"></A>	2.3.1	File Identifiers</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-19268"></A>The HDF programming model specifies that a data file is first explicitly created or opened by an application, manipulated, then explicitly closed by the application. A file identifier is a unique number that the HDF library assigns to an HDF file when creating or opening the file. The HDF library creates the file identifier for an HDF file when given its file name, as represented in the native file system. Interface routines use only the file identifier to access and manipulate the file. When all operations on the file are complete, the file identifier must be discarded by explicitly closing the file before terminating the application.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-19269"></A>As every file is assigned its own identifier, the order in which files are accessed is very flexible. For example, it is valid to open a file and obtain an identifier for it, then open a second file without closing the first file or disposing of the first file identifier. The only requirement made by HDF is that all file identifiers be individually discarded before the termination of the calling program.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-19270"></A>File identifiers created by the routine of one HDF interface can be used by the routines of any other interfaces, except SDâ€™s.</P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-19271"></A>	2.3.2	<A NAME="50593872_34810"></A>Opening HDF Files: Hopen</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-32248"></A>The routine <EM CLASS="FunctionName">
Hopen</EM>
 creates or opens an HDF data file, depending on the access mode specified, and returns the file identifier that the HDF library has assigned to the file. The <EM CLASS="FunctionName">
Hopen</EM>
 syntax is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-32249"></A><EM CLASS="syntaxLang">
C:</EM>
		file_id = Hopen(filename, access_mode, num_dds_block);</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-32250"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	file_id = hopen(filename, access_mode, num_dds_block)</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-31631"></A>The <EM CLASS="FunctionName">
Hopen</EM>
 parameters are defined in <A HREF="UG_html-2.htm#50593872_25929" CLASS="XRef">Table 2A</A> and the following discussion. </P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-26158"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_25929"></A>Hopen Parameter List</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-26105"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-26106"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593872_pgfId-26107"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-26109"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-26111"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-26115"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-26121"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-26123"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="3" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-26127"></A>Hopen</H6>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-26128"></A>[int32]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-26129"></A>(hopen)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26131"></A>filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26133"></A>char *</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26135"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-26137"></A>File name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26141"></A>access_mode</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26143"></A>intn</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26145"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-26147"></A>File access mode</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26151"></A>num_dds_block</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26153"></A>int16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-26155"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-26157"></A>Number of data descriptors in a data descriptor block</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593872_pgfId-29314"></A>The parameter <EM CLASS="VarName">
filename</EM>
 is a character string representing the name of the HDF file to be accessed. </P>
<P CLASS="Body">
<A NAME="50593872_pgfId-29315"></A>The parameter <EM CLASS="VarName">
access_mode</EM>
 specifies how the file should be accessed. All the access modes are listed in <A HREF="UG_html-2.htm#50593872_22157" CLASS="XRef">Table 2B</A>. If the access mode is <EM CLASS="DefName">
DFACC_CREATE</EM>
 and the file already exists, the file will be replaced by the new one. If the access mode is <EM CLASS="DefName">
DFACC_READ</EM>
 and the file does not exist, <EM CLASS="FunctionName">
Hopen</EM>
 will return <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
). If the access mode is <EM CLASS="DefName">
DFACC_WRITE</EM>
 and the file does not exist, a new file will be created.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-26179"></A>The parameter <EM CLASS="VarName">
num_dds_block</EM>
 specifies the number of data descriptors in a block when the access mode specified is create. If the access mode is not create, the value of <EM CLASS="VarName">
num_dds_block</EM>
 is ignored. The default number of data descriptors in a block is 16 (defined as <EM CLASS="DefName">
DEF_NDDS</EM>
) data descriptors. The user may specify <EM CLASS="DefName">
0</EM>
 to keep the default or any non-negative integer to reset this limit when creating the HDF file.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-34430"></A>Prior to HDF 4.2r2, the maximum number of open files was limited to 32, but it now can be up to what the system allowed, minus a few for stdout, etc.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-34437"></A>It has been reported that opening/closing file in loops is very slow; thus, it is not recommended to perform such operations too many times, particularly, when data is being added to the file between opening/closing.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-47294"></A>Note that, in the SD interface, <EM CLASS="FunctionName">
SDstart</EM>
 is used to open files instead of <EM CLASS="FunctionName">
Hopen</EM>
.  To access a file that contains both SD API objects and non-SD API objects, the application must call <EM CLASS="FunctionName">
SDstart</EM>
/<EM CLASS="FunctionName">
SDend</EM>
 and <EM CLASS="FunctionName">
Hopen</EM>
/<EM CLASS="FunctionName">
Hclose</EM>
 on the file.  The non-SD API functions access the file via the identifier returned by <EM CLASS="FunctionName">
Hopen</EM>
 and the SD API functions use the identifier returned by <EM CLASS="FunctionName">
SDstart</EM>
.  These identifiers must be released by <EM CLASS="FunctionName">
Hclose</EM>
 and <EM CLASS="FunctionName">
SDend</EM>
, respectively.  Refer to <A HREF="UG_html-3.htm#50593873_13938" CLASS="XRef">Scientific Data Sets (SD API)</A>, of this document for more information on <EM CLASS="FunctionName">
SDstart</EM>
/<EM CLASS="FunctionName">
SDend</EM>
.</P>
</DIV>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-29514"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_22157"></A>File Access Code Flags</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-29485"></A>File Access Flag</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-29487"></A>Flag Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-29489"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-29497"></A>DFACC_READ</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-29499"></A>1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-29501"></A>Read access</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-29503"></A>DFACC_WRITE</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-29505"></A>2</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-29507"></A>Read and write access</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-29509"></A>DFACC_CREATE</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-29511"></A>4</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-29513"></A>Create with read and write access</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-25811"></A>	2.3.3	Closing HDF Files: Hclose</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-31688"></A>The <EM CLASS="FunctionName">
Hclose</EM>
 routine closes the file designated by the file identifier specified by the parameter <EM CLASS="VarName">
file_id</EM>
. The <EM CLASS="FunctionName">
Hclose</EM>
 syntax is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-31689"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Hclose(file_id);</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-31690"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = hclose(file_id)</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-31684"></A><EM CLASS="FunctionName">
Hclose </EM>
returns a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if successful or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise. The parameter name and type are listed in <A HREF="UG_html-2.htm#50593872_28724" CLASS="XRef">Table 2C</A>. Refer also to the <EM CLASS="TextItalic">
HDF Reference Manual</EM>
 for additional information regarding <EM CLASS="FunctionName">
Hclose</EM>
.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-23763"></A>Note that <EM CLASS="FunctionName">
Hclose</EM>
 is not used to close files in the SD interface. <EM CLASS="FunctionName">
SDend</EM>
 is used for this purpose. (Refer to <A HREF="UG_html-3.htm#50593873_13938" CLASS="XRef">Scientific Data Sets (SD API)</A> of this document for more information on <EM CLASS="FunctionName">
SDend</EM>
.)</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-19373"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_28724"></A>Hclose Parameter List</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32842"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-32843"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32844"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32846"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32848"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32852"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32858"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32860"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-32864"></A>Hclose</H6>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-32865"></A>[intn]</H6>
<H6 CLASS="Table-Function">
<A NAME="50593872_pgfId-32866"></A>(hclose)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32868"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32870"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32872"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32874"></A>File identifier</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-19374"></A>	2.3.4	Getting the HDF Library and File Versions: Hgetlibversion and Hgetfileversion</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-19375"></A><EM CLASS="FunctionName">
Hgetlibversion</EM>
 returns the version of the HDF library currently being used, as well as additional textual information regarding the library. The parameter names and data types are listed in <A HREF="UG_html-2.htm#50593872_34769" CLASS="XRef">Table 2D</A>. Refer also to the <EM CLASS="TextItalic">
HDF Reference Manual</EM>
 for additional information regarding <EM CLASS="FunctionName">
Hgetlibversion</EM>
.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-31725"></A>Hgetfileversion returns the version information of the HDF file specified by the parameter <EM CLASS="VarName">
file_id</EM>
, as well as additional textual information regarding the nature of the file. The parameter names and data types are listed in <A HREF="UG_html-2.htm#50593872_34769" CLASS="XRef">Table 2D</A>. Refer also to the <EM CLASS="TextItalic">
HDF Reference Manual</EM>
 for additional information regarding Hgetfileversion.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-31852"></A>The syntax of these routines is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-31853"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Hgetlibversion(&amp;major_v, &amp;minor_v, &amp;release, string);</P>
<P CLASS="syntax">
<A NAME="50593872_pgfId-31872"></A>		status = Hgetfileversion(file_id, &amp;major_v, &amp;minor_v, &amp;release, string);</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-31854"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = hglibver(major_v, minor_v, release, string)</P>
<P CLASS="syntax">
<A NAME="50593872_pgfId-31879"></A>		status = hgfilver(file_id, major_v, minor_v, release, string)</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-31895"></A>Both routines return a value of <EM CLASS="DefName">
SUCCEED</EM>
 (or <EM CLASS="DefName">
0</EM>
) if successful or <EM CLASS="DefName">
FAIL</EM>
 (or <EM CLASS="DefName">
-1</EM>
) otherwise.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-31848"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_34769"></A>Hgetlibversion and Hgetfileversion Parameter Lists</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32406"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-32407"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32408"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32410"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32412"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32416"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32422"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32424"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="4" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-32428"></A>Hgetlibversion</H6>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-32429"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-32430"></A>(hglibver)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32432"></A>major_v</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32434"></A>uint32*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32436"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32438"></A>Major version number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32442"></A>minor_v</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32444"></A>uint32*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32446"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32448"></A>Minor version number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32452"></A>release</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32454"></A>uint32*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32456"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32458"></A>Complete library version number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32462"></A>string</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32464"></A>char*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32466"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32468"></A>Additional information about the library version</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="5" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-32470"></A>Hgetfileversion</H6>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-32471"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-32472"></A>(hgfilver)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32474"></A>file_id</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32476"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32478"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32480"></A>File identifier</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32484"></A>major_v</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32486"></A>uint32*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32488"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32490"></A>Major version number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32494"></A>minor_v</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32496"></A>uint32*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32498"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32500"></A>Minor version number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32504"></A>release</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32506"></A>uint32*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32508"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32510"></A>Complete library version number</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32514"></A>string</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32516"></A>char*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-32518"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32520"></A>Additional information about the library version</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593872_pgfId-34128"></A>	2.4	Determining whether a File Is an HDF File: <A NAME="50593872_marker-34338"></A>Hishdf/hishdff<DIV>
<IMG SRC="UG_html-5.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593872_pgfId-34129"></A>The <EM CLASS="FunctionName">
Hishdf</EM>
 routine is used to determine whether the file <EM CLASS="DefName">
filename</EM>
 is an HDF file. The <EM CLASS="FunctionName">
Hishdf </EM>
syntax is as follows:</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-34280"></A><EM CLASS="syntaxLang">
C:</EM>
		status = Hishdf(filename)</P>
<P CLASS="FM1-syntax">
<A NAME="50593872_pgfId-34282"></A><EM CLASS="syntaxLang">
FORTRAN:</EM>
	status = hishdff(filename)</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-34284"></A>This routine returns a value of <EM CLASS="DefName">
TRUE</EM>
 (or <EM CLASS="DefName">
1</EM>
) if if the file is an HDF file or <EM CLASS="DefName">
FALSE</EM>
 (or <EM CLASS="DefName">
0</EM>
) otherwise.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-34136"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
Hishdf/hishdff Parameter List</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-34140"></A>Routine Name</P>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-34141"></A>[Return Type]</H6>
<P CLASS="TableHead">
<A NAME="50593872_pgfId-34142"></A>(FORTRAN-77)</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-34144"></A>Parameter</P>
</TD>
<TD ROWSPAN="1" COLSPAN="2">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-34146"></A>Parameter Type</P>
</TD>
<TD ROWSPAN="2" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-34150"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-34156"></A>C</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-34158"></A>FORTRAN-77</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-34162"></A>Hishdf</H6>
<H6 CLASS="ReturnType">
<A NAME="50593872_pgfId-34163"></A>[intn]</H6>
<H6 CLASS="CellFunctionBold">
<A NAME="50593872_pgfId-34164"></A>(hishdff)</H6>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-34166"></A>filename</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-34168"></A>char*</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-34170"></A>character*(*)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-34172"></A>Filename</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H5 CLASS="Heading2">
<A NAME="50593872_pgfId-27533"></A>	2.5	Programming Issues<DIV>
<IMG SRC="UG_html-5.gif" ALT="">
</DIV>
</H5>
<P CLASS="Body">
<A NAME="50593872_pgfId-23864"></A>This section introduces information relevant to the process of developing programs that use the HDF library, such as the names of necessary header files, lists of common definitions and issues concerning FORTRAN-77 and C programming.</P>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-19504"></A>	2.5.1	<A NAME="50593872_14251"></A>Header File Information</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-19505"></A>The header file <EM CLASS="DefName">
hdf.h</EM>
 must be included in every HDF application program written in C, except for programs that call routines in the SD interface. The header file <EM CLASS="DefName">
mfhdf.h</EM>
 must be included in all programs that call SD interface routines.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-22784"></A>Fortran programmers who use compilers that allow file inclusion can include the files <EM CLASS="DefName">
hdf.inc</EM>
 and <EM CLASS="DefName">
dffunc.inc</EM>
. If a Fortran compiler that does not support file inclusion is used, HDF library definitions must be explicitly defined in the Fortran program as they are included in the header files of the HDF library. </P>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-19255"></A>	2.5.2	<A NAME="50593872_95358"></A>HDF Definitions</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-29124"></A>The HDF library provides several sets of definitions which can be used easily in the user applications. These sets include the definitions of the data types, the data type flags, and the limits that set various maximum values. The definitions of the data types supported by HDF are located in the <EM CLASS="DefName">
hdf.h</EM>
 header file, and the data type flags are located in the <EM CLASS="DefName">
hntdefs.h</EM>
 header file. Both are also included in <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Standard HDF Data Types and Flags</A>, <A HREF="UG_html-2.htm#50593872_28972" CLASS="XRef">Native Format Data Type Definitions</A>, and <A HREF="UG_html-2.htm#50593872_10609" CLASS="XRef">Little-Endian Format Data Type Definitions</A>. HDF data types are used for portability in the declaration of variables, and data type flags are used as parameters in various HDF interface routines.</P>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593872_pgfId-24309"></A>	2.5.2.1	Standard HDF Data Types</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-29159"></A>The definitions of the fundamental data types are in <A HREF="UG_html-2.htm#50593872_13047" CLASS="XRef">Table 2F</A>. Although <EM CLASS="DefName">
DFNT_FLOAT</EM>
 (or <EM CLASS="DefName">
5</EM>
), <EM CLASS="DefName">
DFNT_UCHAR</EM>
 (or <EM CLASS="DefName">
3</EM>
), and <EM CLASS="DefName">
DFNT_CHAR</EM>
 (or <EM CLASS="DefName">
4</EM>
) have not been added to this table, they are also supported by the HDF library for backward compatibility. </P>
<P CLASS="Body">
<A NAME="50593872_pgfId-24318"></A>If the machine used is big-endian, using these data types will result in no byte-order conversion being performed. If the machine used is little-endian, the library will convert the byte-order of the variables to big-endian.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-3081"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_13047"></A>Standard HDF Data Types and Flags</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-24357"></A>HDF Data Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-24359"></A>Data Type Flag and Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-24361"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24369"></A>char8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24371"></A>DFNT_CHAR8 (4)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24373"></A>8-bit character type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24381"></A>uchar8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24383"></A>DFNT_UCHAR8 (3)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24385"></A>8-bit unsigned character type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24393"></A>int8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24395"></A>DFNT_INT8 (20)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24397"></A>8-bit integer type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24399"></A>uint8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24401"></A>DFNT_UINT8 (21)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24403"></A>8-bit unsigned integer type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24405"></A>int16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24407"></A>DFNT_INT16 (22)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24409"></A>16-bit integer type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24411"></A>uint16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24413"></A>DFNT_UINT16 (23)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24415"></A>16-bit unsigned integer type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24417"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24419"></A>DFNT_INT32 (24)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24421"></A>32-bit integer type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24423"></A>uint32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24425"></A>DFNT_UINT32 (25)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24427"></A>32-bit unsigned integer type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24429"></A>float32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24431"></A>DFNT_FLOAT32 (5)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24433"></A>32-bit floating-point type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24435"></A>float64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24437"></A>DFNT_FLOAT64 (6)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24439"></A>64-bit floating-point type</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593872_pgfId-23562"></A>Fortran programmers should refer to <A HREF="UG_html-2.htm#50593872_70184" CLASS="XRef">FORTRAN-77 and C Language Issues</A> for a discussion of the Fortran data types.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593872_pgfId-24458"></A>	2.5.2.2	Native Format Data Types</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-24575"></A><A NAME="50593872_marker-24573"></A>When a <A NAME="50593872_marker-24574"></A>native format data type is specified, the corresponding numbers are stored in the HDF file exactly as they appear in memory, without conversion. For example, on a Cray Y-MP, 8 bytes of memory, or one Cray word, is used to store most integers. Therefore, an 8-bit signed integer, represented by the <EM CLASS="DefName">
DFNT_INT32</EM>
 flag, on a Cray Y-MP uses 8 bytes of memory. Consequently, when the data type <EM CLASS="DefName">
DFNT_NATIVE | DFNT_INT32 </EM>
(<EM CLASS="DefName">
DFNT_NATIVE</EM>
 bytewise-ORed with <EM CLASS="DefName">
DFNT_INT32</EM>
) is used on a Cray Y-MP to specify the data type of an HDF SDS or vdata, each integer stored in the HDF file is 8 bytes. </P>
<P CLASS="Body">
<A NAME="50593872_pgfId-24576"></A>The method for constructing the data type flag for each native data type described in the previous paragraph is used for any of the native data types: the <EM CLASS="DefName">
DFNT_NATIVE</EM>
 flag is bitwise-ORed with the flag of the corresponding standard data type.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-24579"></A>The definitions of the native format data types and the corresponding data type flags appear in <A HREF="UG_html-2.htm#50593872_28972" CLASS="XRef">Table 2G</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-23560"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_28972"></A>Native Format Data Type Definitions</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32877"></A>HDF Data Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32879"></A>HDF Data Type Flag and Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32881"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32889"></A>int8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32891"></A>DFNT_NINT8 (4116)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32893"></A>8-bit native integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32895"></A>uint8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32897"></A>DFNT_NUINT8 (4117)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32899"></A>8-bit native unsigned integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32901"></A>int16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32903"></A>DFNT_NINT16 (4118)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32905"></A>16-bit native integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32907"></A>uint16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32909"></A>DFNT_NUINT16 (4119)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32911"></A>16-bit native unsigned integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32913"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32915"></A>DFNT_NINT32 (4120)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32917"></A>32-bit native integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32919"></A>uint32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32921"></A>DFNT_NUINT32 (4121)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32923"></A>32-bit native unsigned integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32925"></A>float32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32927"></A>DFNT_NFLOAT32 (4101)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32929"></A>32-bit native floating-point type</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32931"></A>float64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32933"></A>DFNT_NFLOAT64 (4102)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-32935"></A>64-bit native floating-point type</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593872_pgfId-5954"></A>	2.5.2.3	Little-Endian Data Types</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-23574"></A>HDF normally writes data in big-endian format, but provides a little-endian option forcing all data written to disk to be written in little-endian format. This is primarily for users of Intel-based machines who do not want to incur the cost of reordering data when writing to an HDF file. Note that direct conversions are supported between little-endian and all other byte-order formats supported by HDF.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-24570"></A>The method for constructing the data type flag for each little-endian data type is similar to the method for constructing native format data type flags: the <EM CLASS="DefName">
DFNT_LITEND</EM>
 flag is bitwise-ORed with the flag of the corresponding standard data type.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-24603"></A>If the user is on a little-endian machine, using these data types will result in no conversion. If the user is on a big-endian machine, the HDF library will perform big-to-little-endian conversion.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-23655"></A>The definitions of the little-endian data types and the corresponding data type flags appear in <A HREF="UG_html-2.htm#50593872_10609" CLASS="XRef">Table 2H</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-23237"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_10609"></A>Little-Endian Format Data Type Definitions</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-24674"></A>HDF Data Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-24676"></A>HDF Data Type Flag and Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-24678"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25107"></A>int8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24622"></A>DFNT_LINT8 (16404)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24624"></A>8-bit little-endian integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25109"></A>uint8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24626"></A>DFNT_LUINT8 (16405)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24628"></A>8-bit little-endian unsigned integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25111"></A>int16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24630"></A>DFNT_LINT16 (16406)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24632"></A>16-bit little-endian integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25113"></A>uint16</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24634"></A>DFNT_LUINT16 (16407)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24636"></A>16-bit little-endian unsigned integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25115"></A>int32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24638"></A>DFNT_LINT32 (16408)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24640"></A>32-bit little-endian integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25117"></A>uint32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24642"></A>DFNT_LUINT32 (16409)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24644"></A>32-bit little-endian unsigned integer type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25119"></A>float32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24646"></A>DFNT_LFLOAT32 (16389)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24648"></A>32-bit little-endian floating-point type </P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-25121"></A>float64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-24650"></A>DFNT_LFLOAT64 (16390)</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-24652"></A>64-bit little-endian floating-point type </P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593872_pgfId-22837"></A>	2.5.2.4	Tag Definitions</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-19524"></A>These definitions identify the object tags defined and used by the HDF interface library. The concept of object tags is introduced in <A HREF="UG_html-2.htm#50593872_30011" CLASS="XRef">Data Descriptor</A>, and a list of tags can be found in Appendix A of this manual. Note that tags can also identify properties of data objects.</P>
</DIV>
<DIV>
<H6 CLASS="Heading4">
<A NAME="50593872_pgfId-19759"></A>	2.5.2.5	Limit Definitions</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-19760"></A>These definitions declare the maximum size of specific data object parameters, such as the maximum length of a vdata field or the maximum number of objects in a vgroup. They are located in the header file <EM CLASS="DefName">
hlimits.h</EM>
. A selection of the most-commonly-used limit definitions appears in <A HREF="UG_html-2.htm#50593872_18330" CLASS="XRef">Table 2I</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-2412"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_18330"></A>Limit Definitions</H6>
<TABLE BORDER="1">
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-46080"></A>Definition Name</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-46082"></A>Definition Value</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-46084"></A>Description</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46086"></A>FIELDNAMELENMAX</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46088"></A>128</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46090"></A>Maximum length of a vdata field in bytes - 128 characters</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46308"></A>H4_MAX_NC_ATTRS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46310"></A>3000</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46312"></A>Maximum number of file or variable attributes</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46236"></A>H4_MAX_NC_DIMS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46238"></A>5000</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46240"></A>Maximum number of dimensions per file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46314"></A>H4_MAX_NC_NAME</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46316"></A>256</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46318"></A>Maximum length of a name - NC interface</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46320"></A>H4_MAX_NC_OPEN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46322"></A>MAX_FILE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46324"></A>Maximum number of files can be open at the same time</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46248"></A>H4_MAX_NC_VARS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46250"></A>5000</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46252"></A>Maximum number of variables per file</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46272"></A>H4_MAX_VAR_DIMS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46274"></A>32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46276"></A>Maximum number of dimensions per variable</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46122"></A>MAXNVELT</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46124"></A>64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46126"></A>Maximum number of objects in a vgroup</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46128"></A>MAX_FIELD_SIZE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46130"></A>65535</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46132"></A>Maximum length of a field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46134"></A>MAX_FILE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46136"></A>32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46138"></A>Maximum number of open files</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46212"></A>MAX_ORDER</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46214"></A>65535</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46216"></A>Maximum order of a vdata field</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46218"></A>MAX_PATH_LEN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46220"></A>1024</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46222"></A>Maximum length of an external file name</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46224"></A>MAX_GROUPS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46226"></A>8</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46228"></A>Maximum number of groups</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46230"></A>MAX_GR_NAME</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46232"></A>256</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46234"></A>Maximum length of a name - GR interface</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46200"></A>MAX_REF</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46202"></A>65535</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46204"></A>The largest number that will fit into a 16-bit word reference variable</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46206"></A>MAX_BLOCK_SIZE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46208"></A>65536</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46210"></A>Maximum size of blocks in linked blocks</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46302"></A>VSNAMELENMAX</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46304"></A>64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46306"></A>Maximum length of a vdata name in bytes - 64 characters</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46296"></A>VGNAMELENMAX</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46298"></A>64</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46300"></A>Maximum length of a vgroup name in bytes - 64 characters</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46290"></A>VSFIELDMAX</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46292"></A>256</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46294"></A>Maximum number of fields per vdata (64 for Macintosh)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46284"></A>VDEFAULTBLKSIZE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46286"></A>4096</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46288"></A>Default block size in a vdata</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-46278"></A>VDEFAULTNBLKS</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellParameter">
<A NAME="50593872_pgfId-46280"></A>32</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellDescription">
<A NAME="50593872_pgfId-46282"></A>Default number of blocks in a vdata</P>
</TD>
</TR>
</TABLE>
</DIV>
</DIV>
</DIV>
<DIV>
<H6 CLASS="Heading3">
<A NAME="50593872_pgfId-19770"></A>	2.5.3	<A NAME="50593872_70184"></A>FORTRAN-77 and C Language Issues</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-19774"></A>HDF provides both FORTRAN-77 and C versions of most of its interface routines. In order to make the FORTRAN-77 and C versions of each routine as similar as possible, some compromises have been made in the process of simplifying the interface for both programming languages.</P>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-2791"></A>FORTRAN-77-to-C Translation</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-29795"></A>Nearly all of the HDF library code is written in C. A FORTRAN-77 HDF interface routine translates all parameter data types to C data types, then calls the C routine that performs the functionality of the interface routine. For example, <EM CLASS="FunctionName">
d8aimg</EM>
 is the FORTRAN-77 equivalent for <EM CLASS="FunctionName">
DFR8addimage</EM>
. Calls to either routine execute the same C code that adds an 8-bit raster image to an HDF file. See <A HREF="UG_html-2.htm#50593872_41641" CLASS="XRef">Figure 2e</A>.</P>
</DIV>
<DIV>
<H6 CLASS="Figure">
<A NAME="50593872_pgfId-3603"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
FIGURE 2e	<A NAME="50593872_41641"></A>Use of a Function Call Converter to Route FORTRAN-77 HDF Calls to the C Library</H6>
<DIV>
<IMG SRC="UG_html-11.gif" ALT="">
</DIV>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-3604"></A>Case Sensitivity</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-2797"></A>FORTRAN-77 identifiers generally are not case sensitive, whereas C identifiers are. Although all of the FORTRAN-77 routines shown in this manual are written in lower case, FORTRAN-77 programs can generally call them using either upper- or lower-case letters without loss of meaning.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-2799"></A>Name Length</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-2801"></A>Because some FORTRAN-77 compilers only interpret identifier names with seven or fewer characters, the first seven characters of the FORTRAN-77 HDF routine names are unique.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-1426"></A>Header Files</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-1432"></A>The inclusion of header files is not generally permitted by FORTRAN-77 compilers. However, it is sometimes available as an option. On UNIX systems, for example, the macro processors <EM CLASS="DefName">
m4</EM>
 and <EM CLASS="DefName">
cpp</EM>
 let the compiler include and preprocess header files. If this capability is not available, the user may have to copy the declarations, definitions, or values needed from the files <EM CLASS="DefName">
dffunc.inc</EM>
 and <EM CLASS="DefName">
hdf.inc</EM>
 into the user application. If the capability is available, the files can be included in the Fortran code. These two files reside in the include directory after the library is installed on the userâ€™s system.</P>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-2809"></A>Data Type Specifications</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-24717"></A>When mixing machines, compilers, and languages, it is difficult to maintain consistent data type definitions. For instance, on some machines an integer is a 32-bit quantity and on others, a 16-bit quantity. In addition, the differences between FORTRAN-77 and C lead to difficulties in describing the data types found in the argument lists of HDF routines. To maintain portability, the HDF library expects assigned names for all data types used in HDF routines. See <A HREF="UG_html-2.htm#50593872_73294" CLASS="XRef">Table 2J</A>.</P>
<DIV>
<H6 CLASS="Table">
<A NAME="50593872_pgfId-24789"></A><DIV>
<IMG SRC="UG_html-6.gif" ALT="">
</DIV>
<A NAME="50593872_73294"></A>Correspondence Between Fortran and HDF C Data Types</H6>
<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32626"></A>Data Type</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32628"></A>FORTRAN</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="TableHead">
<A NAME="50593872_pgfId-32630"></A>C</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32632"></A>8-bit signed integer </P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32634"></A>character*1 **</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32636"></A>int8</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32638"></A>8-bit unsigned integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32640"></A>character*1</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32642"></A>uint8</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32644"></A>16-bit signed integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32646"></A>integer*2</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32648"></A>int16</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32650"></A>16-bit unsigned integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32652"></A>Not supported</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32654"></A>uint16</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32656"></A>32-bit signed integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32658"></A>integer*4 **</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32660"></A>int32</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32662"></A>32-bit unsigned integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32664"></A>Not supported</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32666"></A>uint32</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32668"></A>32-bit floating point number</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32670"></A>real*4 **</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32672"></A>float32</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32674"></A>64-bit floating point number</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32676"></A>real*8 **</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32678"></A>float64</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32680"></A>Native signed integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32682"></A>integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32684"></A>intn	</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32686"></A>Native unsigned integer</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32688"></A>Not supported</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32690"></A>uintn</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="3">
<P CLASS="CellBody">
<A NAME="50593872_pgfId-32692"></A>**if the compiler supports this data type</P>
</TD>
</TR>
</TABLE>
<P CLASS="Body">
<A NAME="50593872_pgfId-25006"></A>When using a FORTRAN-77 data type that is not supported, the general practice is to use another data type of the same size. For example, an 8-bit signed integer can be used to store an 8-bit unsigned integer variable.</P>
</DIV>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-2822"></A>String and Array Specifications</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-2826"></A>The following conventions are followed in the specification of arrays in this manual:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="50593872_pgfId-2828"></A><EM CLASS="VarName">
character*(*)</EM>
 defines a string of an indefinite number of characters. It is the responsibility of the calling program to allocate enough space to hold the data to be stored in the string.</LI>
<LI CLASS="Bullet">
<A NAME="50593872_pgfId-31996"></A><EM CLASS="VarName">
real x(*)</EM>
 means that <EM CLASS="VarName">
x</EM>
 refers to an array of reals of indefinite size and of indefinite rank. It is the responsibility of the calling program to allocate an actual array with the correct number of dimensions and dimension sizes.</LI>
<LI CLASS="Bullet">
<A NAME="50593872_pgfId-31997"></A><EM CLASS="VarName">
&lt;valid numeric data type&gt; x</EM>
 means that <EM CLASS="VarName">
x</EM>
 may have one of the numeric data types listed in the Description column of <A HREF="UG_html-2.htm#50593872_73294" CLASS="XRef">Table 2J</A> above.</LI>
<LI CLASS="Bullet">
<A NAME="50593872_pgfId-29288"></A><EM CLASS="VarName">
&lt;valid data type&gt; x</EM>
 means that <EM CLASS="VarName">
x</EM>
 may have any of the data types listed in the Description column of <A HREF="UG_html-2.htm#50593872_73294" CLASS="XRef">Table 2J</A> above.</LI>
</UL>
</DIV>
<DIV>
<H6 CLASS="BodyBold">
<A NAME="50593872_pgfId-29289"></A>FORTRAN-77 and ANSI C</H6>
<P CLASS="Body">
<A NAME="50593872_pgfId-2834"></A>As much as possible, we have ensured that the HDF interface routines conform to the implementations of Fortran and C that are in most common use today, namely FORTRAN-77 and ANSI C.</P>
<P CLASS="Body">
<A NAME="50593872_pgfId-4302"></A>As Fortran-90 is a superset of FORTRAN-77, HDF programs should compile and run correctly when using a Fortran-90 compiler. However, an HDF library interface that makes full use of Fortran-90 enhancements is being considered. </P>
<P CLASS="Body">
<A NAME="50593873_pgfId-29379"></A>&nbsp;</P>
</DIV>
</DIV>
</DIV>
</DIV>
<HR><P><table id="Botofpage" border="0" width="850" cellspacing="0" cellpadding="0">      <tr>        <td align="left">        HDF 4.2.12 - June 2016<br/>        <a href="THG_Copyright.html">Copyright</a>        <td align="right">          <span style="font-size: 12px; font-weight: bold">            The HDF Group<br />          </span>          <span style="font-size: 12px">            <a href="http://www.hdfgroup.org">www.hdfgroup.org</a><br />            <img valign="bottom" border="0" src="images/help.jpg" height="12" alt="The HDF Group" valign="top" />          </span>        </td>      </tr>    </table></BODY>
</HTML>
